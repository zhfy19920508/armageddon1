package com.zhfy.game.model.content.conversion;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.IntArray;
import com.badlogic.gdx.utils.IntIntMap;
import com.badlogic.gdx.utils.IntMap;
import com.badlogic.gdx.utils.StringBuilder;
import com.badlogic.gdx.utils.XmlReader;
import com.zhfy.game.MainGame;
import com.zhfy.game.framework.GameMap;
import com.zhfy.game.config.ResDefaultConfig;
import com.zhfy.game.framework.ComUtil;
import com.zhfy.game.framework.GameMethod;
import com.zhfy.game.framework.GameUtil;
import com.zhfy.game.framework.tool.FileByte;
import com.zhfy.game.framework.tool.LogTime;
import com.zhfy.game.model.content.DefDAO;
import com.zhfy.game.model.content.XmlIntDAO;
import com.zhfy.game.model.content.ZHIntMap;
import com.zhfy.game.model.content.btl.BtlModule;
import com.zhfy.game.model.framework.TextureRegionDAO;
import com.zhfy.game.screen.actor.framework.ArmyActor;
import com.zhfy.game.screen.actor.framework.BuildActor;
import com.zhfy.game.screen.actor.framework.FacilityActor;
import com.zhfy.game.screen.actor.framework.FortActor;
import com.zhfy.game.screen.actor.framework.WindowGroup;
import com.zhfy.game.screen.stage.SMapEffectStage;
import com.zhfy.game.screen.stage.SMapGameStage;

import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;


public class Fb2Smap {
    public MasterData masterData;
    public WorldData worldData;
    public Array<LegionData> legionDatas;
    public Array<StrategicData> strategicDatas;
    public IntMap<GeneralData> generalIDatas;//index
    public ZHIntMap<BuildData> buildRDatas;//region
    public IntMap<FacilityData> facilityHDatas;//hexagon
    public IntMap<NulcleData> nulcleIDatas;//index
    public IntMap<AirData> airIDatas;//index
    public IntMap<ArmyData> armyHDatas;//hexagon
    public IntMap<FortData> fortHDatas;//hexagon
    public Array<ForeignData> foreignDatas;
    public IntMap<InternData> internIDatas;//index
    public Array<TradeData> tradeDatas;
    public Array<TaskData> taskDatas;
    public Array<RoundData> roundDatas;
    public Array<Fb2Map.MapHexagon> hexagonDatas;
    public IntArray scriptIDatas;//脚本事件id合集
    public IntArray hEventIDatas;//历史事件id合集
    public IntArray wonderIDatas;

    public IntArray policyIDatas;
    public IntMap<ConnectData> connectDatas;
    public ChiefData chiefData;
    public IntIntMap spiritMap;//存储功能:数值  1ResDefaultConfig.StringName.markFalse00+v 为技能
    public IntArray recruitSkills;
    public IntArray dialogueGenerals;
  /*  private Array<AuxiliaryArmyMerge> auxiliaryArmyMergeArrays;
    private Array<AuxiliaryArmyMerge> auxiliaryArmyMergeArrays2;//辅助计算类
    private boolean auxiliaryArmyMergeRs;//计算是否可以合并*/
    //public  ObjectMap<Integer, IntArray> connectDatas;//
    //   public  IntMap<int[]> connectDatas;
    public Array<PromptData> promptDatas;
    public PlayerInfo playerInfo;
    public LogTime logTime;
    private MainGame game;
    public Fb2Map mapbin;
    private int[] gameModeSort;

    //-------------------------------自定义新增变量-----------------------------------
    public int stageId;
    public Array<Color> legionColors;
    public Array<Color> legionFogColors;
    //public Array<Color> legionInverseColors; //反色不需要
    public IntMap<LegionData> capitalLegionsMap;
    public final Array<XmlReader.Element> tempCardArray = new Array<>();//工具用结果集
    public IntMap<IntArray> regionHexagonMap;
    public IntMap<IntArray> srRegionMap;
    public final Array<XmlReader.Element> publicLegionCardEs = new Array<>();//根据时代判断可以建造的卡牌   检测时代是否变更,然后生成或用原来的
    public final IntArray publicLegionCanUpdTechId = new IntArray();
    public boolean ifLoop;
    public boolean ifBanAiCheat;
    //  public final Array<XmlReader.Element> hBuffEs = new Array<>();
    public final Array<XmlReader.Element> hEventEs = new Array<>();
    public final Array<XmlReader.Element> generalEs = new Array<>();
    public ArmyData tempArmyData;
    public Array<ArmyData> tempArmyDataArray;
    //用来判断重复上将等问题
    public IntArray generalIds= new IntArray();
    private int allRegionCount;//不计算中立
    public Array<DialogueData> dialogueDatas;
    public SMapEffectStage effectStage;
    public SMapGameStage gameStage;
    public  int roundState;//-1等待恢复 0玩家回合 1初始回合 2非初始ai的回合 3ai代玩家指挥  4玩家回合但未完全结束(非玩家相邻势力的ai回合,但玩家可操作)
    public int roundLegionIndex;//哪个军团的回合
    public int roundCountryIndex; //-2部队,-3空军,-4核弹,-5即将结束 -6军团
    public IntIntMap buildNameMap;

    private Fb2History historyData;
    private LegionData playerLegionData;
    //是否需要重绘小地图
    private  boolean ifNeedDrawViewMap;
    private int lastUnitHexagon;
    public int controlMode;//0普通 1玩家无敌 2编辑器模式

   /* public int getRoundCountry(){
        LegionData l=getLegionDataByLi(roundState);
        if(l!=null){
            return l.getCountryId();
        }
        return -1;
    }*/


    //private Array tempArray;


    public void initFb2Smap() {
        masterData = new MasterData();
        worldData = new WorldData();
        legionDatas = new Array<LegionData>();
        strategicDatas = new Array<StrategicData>();
        generalIDatas = new IntMap<GeneralData>();
        buildRDatas = new ZHIntMap<BuildData>();
        facilityHDatas = new IntMap<FacilityData>();
        nulcleIDatas = new IntMap<NulcleData>();
        airIDatas = new IntMap<AirData>();
        armyHDatas = new IntMap<>();
        fortHDatas = new IntMap<FortData>();
        foreignDatas = new Array<ForeignData>();
        internIDatas = new IntMap<InternData>();
        tradeDatas = new Array<TradeData>();
        taskDatas = new Array<TaskData>();
        roundDatas = new Array<RoundData>();
        hexagonDatas = new Array<>();
        scriptIDatas = new IntArray();
        hEventIDatas=new IntArray();
        connectDatas = new IntMap<ConnectData>();
    }


   /* public Fb2Smap(MainGame game, BTLDAO btl, int stageId) {
        this.game = game;
        setMasterData(btl.getBm0());
        setWorldData(btl.getBm1());
        setLegionData(btl.getBm2());
        setStrategicData(btl.getBm3());
        setGeneralData(btl.getBm4());
        setBuildData(btl.getBm5());
        setFacilityData(btl.getBm6());
        setNulcleData(btl.getBm7());
        setAirData(btl.getBm8());
        setArmyData(btl.getBm9());
        setTrapData(btl.getBm10());
        setForeignData(btl.getBm11());
        setInternData(btl.getBm12());
        setTradeData(btl.getBm13());
        setTreatyData(btl.getBm14());
        setRoundData(btl.getBm15());
        setHexagonData(btl.getBm16());
        setEventData(btl.getBm17());
        //setConnectData(btl.getBm18());
        this.stageId = stageId;
        initBtl();
    }*/

    public Color getColorByPlayerIntern(int li) {
        int interType = getInternType(li);
        switch (interType) {
            case 0:
                return Color.GRAY;
            case 1:
                return Color.GREEN;
            case 2:
                return Color.BLUE;
            case 3:
                return Color.RED;
        }
        return Color.GRAY;
    }

    //interType 0中立国 1玩家自身 2玩家盟友 3玩家敌对国
    public int getInternType(int li) {
        if (legionDatas.get(li).getInternIndex() == 0) {
            return 0;
        } else if (li == masterData.playerLegionIndex) {
            return 1;
        } else if (ifAllyByLi(li, masterData.playerLegionIndex)) {
            return 2;
        } else {
            return 3;
        }
    }

    public IntIntMap getHexagonToBuild(int region,int cardType,int cardId,  IntIntMap rs) {
        rs.clear();
        IntArray hexagonArray = regionHexagonMap.get(region);
        BuildData b=getBuildDataByRegion(region);
        boolean ifPass;
        for (int i = 0; i < hexagonArray.size; i++) {
            int id = hexagonArray.get(i);
            ifPass = false;

            Fb2Map.MapHexagon hexagon=hexagonDatas.get(id);

            if (cardType == 6) {//要塞
                // Gdx.app.log("getHexagonToBuild",(getLegionIndexByHexagon(i)==li)+":"+(i!=political)+":"+!ifHArmyDatasContainsKey(i));
                if (hexagon.getBlockType() != 1 && id != region  ) {
                    ArmyData a=getArmyDataByHexagon(id);
                    if(getBuildDataByRegion(id)!=null||hexagon.getOtherTile()==1||(b!=null&&!b.isPlayer()&&hexagon.getPresetRailway()==1)){
                        ifPass = false;
                    }else if(a==null||a.getArmyHpNow()<=0){
                        ifPass = true;
                    }else if(a.canMerge(cardType,cardId)){//可以升级
                        ifPass = true;
                    }else{
                        ifPass = false;
                    }
                }
            } else if (cardType == 15) {//设施
                if (cardId==6001&&hexagon.getBlockType() == 1 && getArmyDataByHexagon(id)==null&&getBuildDataByRegion(id)==null&&getAroundGridCountIA1(hexagon.getHexagonIndex(),5)>0) {
                    if(checkCanBuildPort(id)){
                        ifPass = true;
                    }
                }
            } else if (cardType == 14) {//防御设施
                if (!ifSea(id) && getBuildDataByRegion(id)==null&&getFacilityDataByHexagon(id)==null) {
                    ifPass = true;
                }
            } else if(cardId==2015){//铁路
                if (!ifSea(id) && mapbin.ifBorderRailway(id)&&b!=null&&hexagon.canBuildRailway(b.getTransportLvNow())) {
                    ifPass = true;
                }
            } else {
                ifPass = true;
                // Gdx.app.error("getHexagonsToSelected", " error cardType");
            }
            if (ifPass) {//如果成功
                rs.put(id, 0);
            }
        }
        return rs;
    }
    //检测位置能否建造港口
    private boolean checkCanBuildPort(int id) {
        Fb2Map.MapHexagon m=getHexagonData(id);
        if(m==null||!m.isSea()||masterData.portLimitBorderSea==-1){
            return false;
        }else if(masterData.portLimitBorderSea >0){
            int borderSeaCount=0;
           for(int i=1;i<=6;i++){
               int borderId=getBorderIdByDirect(id,i);
               if(ifGridIsPass(borderId)&&ifSea(borderId)){
                   borderSeaCount++;
               }
           }
           if(borderSeaCount<masterData.portLimitBorderSea){
               return false;
           }
        }
        return true;
    }


    public IntArray getHexagonToBuild(int region,int cardType,int cardId,  IntArray rs) {
        rs.clear();
        IntArray hexagonArray = regionHexagonMap.get(region);
        boolean ifPass;
        for (int i = 0; i <  hexagonArray.size; i++) {
            int id = hexagonArray.get(i);
            ifPass = false;
            Fb2Map.MapHexagon h=hexagonDatas.get(id);
            if (cardType == 6) {
                // Gdx.app.log("getHexagonToBuild",(getLegionIndexByHexagon(i)==li)+":"+(i!=political)+":"+!ifHArmyDatasContainsKey(i));
                if (h.getBlockType() != 1 && id != region  ) {
                    ArmyData a=getArmyDataByHexagon(id);
                    if(a==null||a.getArmyHpNow()<=0){
                        ifPass = true;
                    }else if(a.canMerge(cardType,cardId)){//可以升级
                        ifPass = true;
                    }else{
                        ifPass = false;
                    }
                }
            } else if ((cardType == 15)) {
                if (cardId==6001&&h.getBlockType() == 1 && getArmyDataByHexagon(id)==null) {
                    ifPass = true;
                }
            } else {
                ifPass = true;
                // Gdx.app.error("getHexagonsToSelected", " error cardType");
            }
            if (ifPass) {//如果成功
                rs.add(id);
            }
        }
        return rs;
    }

    public IntIntMap getPotion_CanAttackHexagons( ArmyData army,  IntIntMap rs) {
        //rs.clear();
        IntArray hexagonArray = getCanAtkPotionTIA1(army,  army.getMinRange(), army.getMaxRange(),  game.tempUtil.getTempIntArray());
        int h;
        for(int i=0;i<hexagonArray.size;i++){
            h=hexagonArray.get(i);
            ArmyData armyData=getArmyDataByHexagon(h);
            BuildData buildData=getBuildDataByRegion(h);
            if(buildData!=null){
                rs.put(h,25);
            }else if(army.playerCanCommand()){
                if(armyData!=null&&armyData.armyActor!=null&&armyData.getArmyHpNow()>0){
                    rs.put(h,25);
                }
            }else {
                rs.put(h,25);
            }
        }
        game.tempUtil.disposeTempIntArray(hexagonArray);
        return rs;
    }

    public boolean ifHaveCanActPotion(ArmyData army,boolean ifMerge) {

        if (army == null) {
            return false;
        }
        //rs.clear();
        boolean ifSea = false;boolean limitSea=true;
        if (army.getArmyType() == 4 || army.getArmyType() == 8) {
            ifSea = true;
        }
        int minRange = army.getMinRange();
        int maxRange = army.getMaxRange();
        if (army != null) {
            boolean ifPlayer=army.playerCanCommand();
            IntArray hexagonArray = getArmyMovablePostionTIIM1(army.getHexagonIndex(), army.getLegionIndex(), army.getMovement(), 0, game.tempUtil.getTempIntArray(), ifSea,limitSea,ifPlayer);
            for (int i = 0; i < hexagonArray.size; i++) {
                int hexagon= hexagonArray.get(i);
                if (ifMovePass(army, hexagon)) {
                    ForeignData f=getForeignData(army.getLegionIndex(),getLegionIndexByHexagon(hexagon));
                    if(f!=null&&f.getForeignType()>0 ){
                        if(army.isPlayer()&&(roundState==0||roundState==4)){
                            if(ifSystemEffective(6)){//玩家是否可以占领非敌对建筑
                                return true;
                            }else{
                                continue;
                            }
                        }else{
                            continue;
                        }
                    }

                    //如果射程有目标 黄色
                    if (ifHaveEnemyInRangeTIA1(hexagon, army.getLegionIndex(), minRange, maxRange, army.getIfOnlySeaForTarget(),ifPlayer)) {
                        game.tempUtil.disposeTempIntArray(hexagonArray);
                        return true;
                    } else if (canRegionOccupation(hexagon, army.getLegionIndex())) {//有可占领建筑 绿色
                        game.tempUtil.disposeTempIntArray(hexagonArray);
                        return true;
                    } else {//没目标 蓝色
                        game.tempUtil.disposeTempIntArray(hexagonArray);
                        return true;
                    }
                }
                if (ifMerge&&ifCanMerge(hexagon, army)) {//有可合并兵种 浅绿色
                    game.tempUtil.disposeTempIntArray(hexagonArray);
                    return true;
                }
            }
            game.tempUtil.disposeTempIntArray(hexagonArray);
            hexagonArray = getRangePostion(army.getHexagonIndex(), minRange, maxRange, army.getIfOnlySeaForTarget(),game.tempUtil.getTempIntArray());
            int h;
            for (int i = 0; i <  hexagonArray.size; i++) {
                h=hexagonArray.get(i);
                if (ifHaveCanAtkEnemy(army,h ,ifPlayer)) {//红色
                    ArmyData armyData=getArmyDataByHexagon(h);
                    BuildData buildData=getBuildDataByRegion(h);
                    if(buildData!=null){
                        game.tempUtil.disposeTempIntArray(hexagonArray);
                        return true;
                    }else if(ifAllyPlayerByLi(army.getLegionIndex())){
                        if(armyData!=null&&armyData.getArmyHpNow()>0&&armyData.armyActor!=null){
                            game.tempUtil.disposeTempIntArray(hexagonArray);
                            return true;
                        }
                    }else {
                        game.tempUtil.disposeTempIntArray(hexagonArray);
                        return true;
                    }
                }
            }
            game.tempUtil.disposeTempIntArray(hexagonArray);
        }
        return false;
    }

    //获得位置 对于区域中可以选择的单位
    //armyType 0全部 1可行动非建筑类我方单位() 2不可行动非建筑类我方单位() 3非建筑类非满血 我方,友方单位
    public IntIntMap getPotionForCanSelectedArmyTIIM1( int region,int armyType, IntIntMap rs) {
        rs.clear();
        IntArray h=regionHexagonMap.get(region);
        int li=getLegionIndexByRegion(region);
        for(int i=0;i<h.size;i++){
            int hexagon=h.get(i);
            ArmyData a=getArmyDataByHexagon(hexagon);
            if(a!=null&&a.getArmyHpNow()>0){
                switch (armyType){
                    case 0:
                        if(li==a.getLegionIndex()){
                            rs.put(a.getHexagonIndex(),13);
                        }else if(ifAllyByLi(li,a.getLegionIndex())){
                            rs.put(hexagon,6);
                        }else{
                            rs.put(hexagon,25);
                        }
                        break;
                    case 1:
                        if(a.getArmyRound()==0&&li==a.getLegionIndex()&&a.getArmyType()!=6){
                            rs.put(hexagon,6);
                        }
                        break;
                    case 2:
                        if(a.getArmyRound()==1&&li==a.getLegionIndex()&&a.getArmyType()!=6){
                            rs.put(hexagon,6);
                        }
                        break;
                    case 3:
                        if(ifAllyByLi(li,a.getLegionIndex())&&a.getArmyType()!=6&&a.getArmyHpNow()!=a.getArmyHpMax()){
                            rs.put(hexagon,6);
                        }
                        break;



                }
            }
        }
        return rs;
    }


    //获得位置 对于可以行动的方位同时给予颜色
    //ifPlayer 如果是玩家指挥,会判断 能否占领友军建筑,能否攻击友军
    public IntIntMap getPotionForArmyCanActTIIM1(ArmyData army,int targetHexagon,int extraMovment, boolean ifMerge,boolean ifPlayer, IntIntMap rs,boolean ifCanRush) {
        rs.clear();
        if (army == null) {
            return rs;
        }
        if(!army.ifHaveFeature(15)&&!army.ifHaveFeature(14)&&army.getIfAttack()==1){
            return rs;
        }


        //boolean ifPlayer=army.playerCanCommand();
        boolean ifSea = false;boolean limitSea=true;
        if (army.getArmyType() == 4 || army.getArmyType() == 8) {
            ifSea = true;
        }
        /*if(hexagonDatas.get(hexagon).getTerrainType()==1){
            limitSea=true;
        }*/
        int minRange = army.getMinRange();
        int maxRange = army.getMaxRange();

        IntArray hexagonArray = getArmyMovablePostionTIIM1(targetHexagon, army.getLegionIndex(), army.getMovement()+extraMovment, 0,game.tempUtil.getTempIntArray(), ifSea,limitSea,ifPlayer);
       /* if (ifHaveEnemyInRangeTIA1(hexagon, army.getLegionIndex(), minRange, maxRange, army.getIfOnlySeaForTarget())) {
            rs.put(hexagon, 25);
        }*/


        //IntArray hexagonArray =testRangeMethod(hexagon,army.getMovement(), game.tempIds);
        if(army.getArmyType()!=6&&army.getIfMove()==0){
            for (int i = 0; i < hexagonArray.size; i++) {
                //玩家单位无法再无石油的情况下移动
                if(ifSystemEffective(2)&&ifPlayer&&getAge()>0&&getPlayerLegionData().getOil()<=0&&army.getArmyType()!=1){
                    break;
                }
                int h= hexagonArray.get(i);
                if (ifMovePass(army, h)) {
                    ForeignData f=getForeignData(army.getLegionIndex(),getLegionIndexByHexagon(h));
                    if(f!=null&&f.getForeignType()>0 ){
                        if(army.isPlayer()&&(roundState==0||roundState==4)){
                            if(ifSystemEffective(6)){//玩家是否可以占领非敌对建筑

                            }else{
                                continue;
                            }
                        }else{
                            continue;
                        }
                    }
                    if(getArmyDataByHexagon(h)!=null){//伪装目标
                        if(h>=0&&h<hexagonDatas.size){rs.put(h, 8);}
                    }else   //如果射程有目标 黄色
                        if (ifHaveEnemyInRangeTIA1(h, army.getLegionIndex(), minRange, maxRange, army.getIfOnlySeaForTarget(),ifPlayer)) {
                            if(h>=0&&h<hexagonDatas.size){ rs.put(h, 18);}
                        }   else if (canRegionOccupation(h, army.getLegionIndex())) {//有可占领建筑 绿色
                            if(h>=0&&h<hexagonDatas.size){rs.put(h, 13);}
                        }else{//没目标 蓝色
                            if(h>=0&&h<hexagonDatas.size){rs.put(h, 6);}
                        }
                }
                if (ifMerge&&ifCanMerge(h, army)) {//有可合并兵种 浅绿色
                    if(h>=0&&h<hexagonDatas.size){rs.put(h, 7);}
                }
            }
            if(army.getArmyType()!=4&&army.getArmyType()!=8&&army.getArmyType()!=6&&ifCanRush){
                //铁路通行 给予颜色10 快速通行
                BuildData b=army.getBuildDataInRange(1,1);
                if(b!=null&&b.getLegionIndex()==army.getLegionIndex()&&b.getBuildStatus()==0&&!b.ifSea()&&b.getTransportLvNow()>0){
                    IntArray tempIAs1=    game.tempUtil.getTempIntArray();
                    tempIAs1=  getIdsInRange(b.getRegionId(),b.getLegionIndex(),0,b.getTransportLvNow(),true,2, false,2,false,false,false,false,tempIAs1);
                    for(int i=0;i<tempIAs1.size;i++){
                        int region=tempIAs1.get(i);
                        BuildData tb=getBuildDataByRegion(region);
                        if(tb!=null&&ifAllyByLi(tb.getLegionIndex(),b.getLegionIndex())&&tb.getBuildStatus()==0&&tb.getRegionId()!=army.getHexagonIndex()&&!rs.containsKey(tb.getRegionId())
                                &&tb.haveFreeTranspotion(b.getLegionIndex())) {
                            rs.put(tb.getRegionId(), 10);
                        }
                    }
                    game.tempUtil.disposeTempIntArray(tempIAs1);
                }
            }

        }
        /*  BuildData cb=getBuildDataByRegion(   c.getConnectValue(i+1,4));
         */
        if(army.getIfAttack()==0){
            game.tempUtil.disposeTempIntArray(hexagonArray);
            hexagonArray = getRangePostion(targetHexagon, minRange, maxRange, army.getIfOnlySeaForTarget(), game.tempUtil.getTempIntArray());

            int h;
            for (int i = 0; i <  hexagonArray.size; i++) {
                h=hexagonArray.get(i);
            /*if(h==15842){
                int s=0;
            }*/
                if (ifHaveCanAtkEnemy(army,h,ifPlayer)) {//红色
                    //玩家单位无法再无工业的情况下攻击
                    if(ifSystemEffective(3)&&ifPlayer&&getPlayerLegionData().getIndustry()<=0){
                        break;
                    }
                    ArmyData armyData=getArmyDataByHexagon(h);
                    BuildData buildData=getBuildDataByRegion(h);
                    if(buildData!=null){
                        rs.put(h,25);
                    }else if(ifAllyPlayerByLi(army.getLegionIndex())){
                        if(armyData!=null&&army.getArmyHpNow()>0&&armyData.armyActor!=null){
                            rs.put(h,25);
                        }
                    }else {
                        rs.put(h,25);
                    }
                }
            }
            game.tempUtil.disposeTempIntArray(hexagonArray);
        }

        // Gdx.app.log("getPotionForArmyCanActTIIM1",hexagonArray.size+":"+rs.size);
        return rs;
    }




    //获得位置 对于可以行动的方位同时给予颜色
    //返回有无可进攻位置
    public boolean getPotionForAiArmyCanActTIIM1(ArmyData army,int targetHexagon,int extraMovment, boolean ifMerge,boolean ifPlayer, IntIntMap rs) {
        rs.clear();
        if (army == null) {
            return false;
        }
        boolean ifHaveTarget=false;
        boolean ifSea = false;boolean limitSea=true;
        if (army.getArmyType() == 4 || army.getArmyType() == 8) {
            ifSea = true;
        }
        /*if(hexagonDatas.get(hexagon).getTerrainType()==1){
            limitSea=true;
        }*/
        int minRange = army.getMinRange();
        int maxRange = army.getMaxRange();
        // boolean ifPlayer=army.playerCanCommand();
        if(!army.isPlayer()){
            army.resetCoreArmyIdForHighestMove();
        }
        IntArray hexagonArray = getArmyMovablePostionTIIM1(targetHexagon, army.getLegionIndex(), army.getMovement()+extraMovment, 0,game.tempUtil.getTempIntArray(), ifSea,limitSea,ifPlayer);
       /* if (ifHaveEnemyInRangeTIA1(hexagon, army.getLegionIndex(), minRange, maxRange, army.getIfOnlySeaForTarget())) {
            rs.put(hexagon, 25);
        }*/


        //IntArray hexagonArray =testRangeMethod(hexagon,army.getMovement(), game.tempIds);
        for (int i = 0; i <  hexagonArray.size; i++) {
            int hexagon= hexagonArray.get(i);
            if (ifMovePass(army, hexagon)) {
                ForeignData f=getForeignData(army.getLegionIndex(),getLegionIndexByHexagon(hexagon));
                if(f!=null&&f.getForeignType()>0){
                    if(army.isPlayer()&&(roundState==0||roundState==4)){
                        if(ifSystemEffective(6)){//玩家是否可以占领非敌对建筑

                        }else{
                            continue;
                        }
                    }else{
                        continue;
                    }
                }
                if(getArmyDataByHexagon(hexagon)!=null){//伪装目标
                    if(army.getIfMove()==0&&hexagon>=0&&hexagon<hexagonDatas.size){rs.put(hexagon, 8);}
                    //如果射程有目标 黄色
                }else if (ifHaveEnemyInRangeTIA1(hexagon, army.getLegionIndex(), minRange, maxRange, army.getIfOnlySeaForTarget(),ifPlayer)) {
                    if(army.getIfAttack()==0&&hexagon>=0&&hexagon<hexagonDatas.size){
                        rs.put(hexagon, 18);ifHaveTarget=true;
                    }
                } else if (canRegionOccupation(hexagon, army.getLegionIndex())) {//有可占领建筑 绿色
                    if(army.getIfMove()==0&&hexagon>=0&&hexagon<hexagonDatas.size){
                        rs.put(hexagon, 13);ifHaveTarget=true;
                    }
                } else {//没目标 蓝色
                    if(army.getIfMove()==0&&hexagon>=0&&hexagon<hexagonDatas.size){
                        rs.put(hexagon, 6);
                    }
                }
            }
            if (ifMerge&&ifCanMerge(hexagon, army)) {//有可合并兵种 浅绿色
                ArmyData ta=getArmyDataByHexagon(hexagon);
                if(army.getIfMove()==0&&hexagon>=0&&hexagon<hexagonDatas.size){
                    rs.put(hexagon, 7);
                    if((army.getHpRate()<50||ta.getHpRate()<50)||(army.isUnitGroup()&&(army.getUnitGroup()+ta.getUnitGroup()<7))){
                        ifHaveTarget=true;}
                }
            }
        }

        if(army.getIfAttack()==0){
            game.tempUtil.disposeTempIntArray(hexagonArray);
            hexagonArray = getRangePostion(targetHexagon, minRange, maxRange, army.getIfOnlySeaForTarget(), game.tempUtil.getTempIntArray());

            int h;
            for (int i = 0; i <  hexagonArray.size; i++) {
                h=hexagonArray.get(i);
                if(ifAllyByHexagon(army.getHexagonIndex(),h)){
                    continue;
                }
                ForeignData f=getForeignData(army.getLegionIndex(),getLegionIndexByHexagon(h));
                if(f!=null&&!army.isPlayer()&&f.getForeignType()>0){
                    continue;
                }
                if (ifHaveCanAtkTarget(army,h)) {//红色
                    ArmyData tArmyData=getArmyDataByHexagon(h);
                    BuildData buildData=getBuildDataByRegion(h);
                    //ForeignData f1=getForeignData(army.getLegionIndex(),getLegionIndexByHexagon(targetHexagon));
                   /* if(f.getForeignType()!=-1&&(army.isPlayer()||(tArmyData!=null&&tArmyData.isPlayer()))){
                        int s=0;
                    }*/
                    if(buildData!=null){
                        if(ifCanAtk(army.getLegionIndex(),buildData.getLegionIndex())){
                            rs.put(h,25);ifHaveTarget=true;
                        }
                    }else if(tArmyData!=null){
                        if(ifCanAtk(army.getLegionIndex(),tArmyData.getLegionIndex())){
                            rs.put(h,25);ifHaveTarget=true;
                        }
                    }
                }
            }
            game.tempUtil.disposeTempIntArray(hexagonArray);
        }

        // Gdx.app.log("getPotionForArmyCanActTIIM1",hexagonArray.size+":"+rs.size);
        return ifHaveTarget;
    }



    private IntArray testRangeMethod(int hexagon, int rangeCount, IntArray tempIds) {
        tempIds.clear();
        int[] srd = ResDefaultConfig.Map.GRID_RANGE_SORT_ARRAY;
        int range, grid;
        int minRange=0;
        for (int j = 1, jMax = rangeCount; j <= jMax; j++) {
            range = minRange + j;
            grid = getIdForDirectRange(hexagon, 1, range);
            for (int i = 0; i <  srd.length; i++) {
                for (int k = 0, kMax = range; k < kMax; k++) {
                    grid = getIdForDirectRange(grid, srd[i], 1);
                    tempIds.add(grid);
                }
            }
        }
        return tempIds;
    }

    //actType 获得超武可部署位置 :7,可部署单位 13,可移动位置 25 可进攻位置
    public IntIntMap getNulCanActPotionAndSetColorTIIM1(NulcleData nul,  IntIntMap rs) {
        if(nul.ifPlayer()&&getPlayerLegionData().getOil()<=0){
            return rs;
        }
        //可部署单位,颜色7  根据自身移动力判断
        //颜色13  可移动位置(region),颜色25  可进攻位置
        int legionIndex=getLegionIndexByRegion(nul.getRegionId());
        //boolean ifDraw=buildPolicy==masterData.getPlayerLegionIndex() ;
        BuildData build=nul.getBuildData();
        //AirData airData=build.getReadyAir(-1,nul.getRegionId());
        boolean ifPlayer=nul.playerCanCommand();
        int actRange=nul.getActRange();
        /*int actRange = build.getAirLvNow();
        if(airData!=null){
            actRange=airData.getMaxRange();
            if(actRange<build.getAirLvNow()){
                actRange=build.getAirLvNow();
            }
        }*/
        IntArray hexagonArray =getIdsInRange(nul.getRegionId(),legionIndex,0,actRange,false,2, true,0,true,false,true,false,game.tempUtil.getTempIntArray()) ;

        ConnectData c=getConnectData(build.getRegionId());
        for(int i=1;i<=c.getRegionConnectCount();i++){
            int j=c.getConnectValue(i,0);
            if(!hexagonArray.contains(j)){
                hexagonArray.add(j);
            }
        }


        int h; ArmyData a;BuildData obuild;
        for (int i = 0; i <  hexagonArray.size; i++) {
            h=hexagonArray.get(i);
            a=getArmyDataByHexagon(h);
            if(ifHaveCanAtkEnemy(legionIndex,h,ifPlayer)){//可进攻位置(hexagon),颜色25
                rs.put(h,25);
            }else if(a!=null&&a.getArmyHpNow()>0&&a.getLegionIndex()==legionIndex&&a.ifCanLoadNul(nul.getNuclearId())){//可部署单位,颜色7
                rs.put(h,7);
            }else if(nul.getRegionId()!=h){//可移动位置(region),颜色13
                obuild =getBuildDataByRegion(h);
                if(obuild!=null&&obuild.getLegionIndex()== legionIndex&&obuild.getNuclearCount()<4){
                    rs.put(h,13);
                }
            }
        }
        game.tempUtil.disposeTempIntArray(hexagonArray);
        return rs;
    }



    public int getForeignType(LegionData legionDataA, LegionData legionDataB, int favor) {
        if (legionDataA.getInternIndex() == 0 || legionDataB.getInternIndex() == 0) {
            return 0;
        } else if (legionDataA.getInternIndex() == legionDataB.getInternIndex()) {
            return 2;
        } else if (ComUtil.ifValueBetween(favor, 30, 70, true)) {
            return 0;
        } else {
            return 1;
        }


    }

    public int legionExchangeTechTIA1(LegionData playerLegion, LegionData allyLegionData) {
        IntArray rs=game.tempUtil.getTempIntArray();
        if(allyLegionData.getCityLvMax()>playerLegion.getCityLvMax()){rs.add(3001);}
        if(allyLegionData.getIndustLvMax()>playerLegion.getIndustLvMax()){rs.add(3002);}
        if(allyLegionData.getTechLvMax()>playerLegion.getTechLvMax()){rs.add(3003);}
        if(allyLegionData.getEnergyLvMax()>playerLegion.getEnergyLvMax()){rs.add(3004);}
        if(allyLegionData.getTransportLvMax()>playerLegion.getTransportLvMax()){rs.add(3005);}
        if(allyLegionData.getInfantryLvMax()>playerLegion.getInfantryLvMax()){rs.add(3006);}
        if(allyLegionData.getCannonLvMax()>playerLegion.getCannonLvMax()){rs.add(3007);}
        if(allyLegionData.getTankLvMax()>playerLegion.getTankLvMax()){rs.add(3008);}
        if(allyLegionData.getFortLvMax()>playerLegion.getFortLvMax()){rs.add(3009);}
        if(allyLegionData.getNavyLvMax()>playerLegion.getNavyLvMax()){rs.add(3010);}
        if(allyLegionData.getAirLvMax()>playerLegion.getAirLvMax()){rs.add(3011);}
        if(allyLegionData.getSupplyLvMax()>playerLegion.getSupplyLvMax()){rs.add(3012);}
        if(allyLegionData.getDefenceLvMax()>playerLegion.getDefenceLvMax()){rs.add(3013);}
        if(allyLegionData.getMissileLvMax()>playerLegion.getMissileLvMax()){rs.add(3014);}
        if(allyLegionData.getNuclearLvMax()>playerLegion.getNuclearLvMax()){rs.add(3015);}
        if(allyLegionData.getFinancialLvMax()>playerLegion.getFinancialLvMax()){rs.add(3016);}
        if(allyLegionData.getTradeLvMax()>playerLegion.getTradeLvMax()){rs.add(3017);}
        if(allyLegionData.getCultureLvMax()>playerLegion.getCultureLvMax()){rs.add(3018);}
        if(allyLegionData.getMiracleNow()>playerLegion.getMiracleNow()){rs.add(3019);}
        if(allyLegionData.getInfantryCardMax()>playerLegion.getInfantryCardMax()){rs.add(3020);}
        if(allyLegionData.getArmorCardMax()>playerLegion.getArmorCardMax()){rs.add(3021);}
        if(allyLegionData.getArtilleryCardMax()>playerLegion.getArtilleryCardMax()){rs.add(3022);}
        if(allyLegionData.getNavyCardMax()>playerLegion.getNavyCardMax()){rs.add(3023);}
        if(allyLegionData.getAirCardMax()>playerLegion.getAirCardMax()){rs.add(3024);}
        if(allyLegionData.getNuclearCardMax()>playerLegion.getNuclearCardMax()){rs.add(3025);}
        if(allyLegionData.getMissileCardMax()>playerLegion.getMissileCardMax()){rs.add(3026);}
        if(allyLegionData.getSubmarineCardMax()>playerLegion.getSubmarineCardMax()){rs.add(3027);}
        if(allyLegionData.getDefenceCardMax()>playerLegion.getDefenceCardMax()){rs.add(3028);}
        if(allyLegionData.getGeneralCardMax()>playerLegion.getGeneralCardMax()){rs.add(3029);}
        if(allyLegionData.getMilitaryAcademyLv()>playerLegion.getMilitaryAcademyLv()){rs.add(3030);}

        if(rs.size==0){
            game.tempUtil.disposeTempIntArray(rs);
            return 0;
        }else {
            int cardId=rs.random();
            game.tempUtil.disposeTempIntArray(rs);
            legion_UpdTech(playerLegion,null,cardId);
            return cardId;
        }
    }

    //a加钱,b减钱 f favor
    public void legion_Support(LegionData legionA, LegionData legionB, int favor) {
        int money=0,industry=0,tech=0,food=0;
        if(legionB.getMoney()>legionA.getMoney()){
            money= (int) ((legionB.getMoney()-legionA.getMoney())* game.resGameConfig.legionHelpRate);
            if(money==0){money=ComUtil.max(legionB.getMoney()/10,1);}
            legionB.costMoney(money);legionA.addMoney(money);}
        if(legionB.getIndustry()>legionA.getIndustry()){
            industry= (int) ((legionB.getIndustry()-legionA.getIndustry())* game.resGameConfig.legionHelpRate);
            if(industry==0){industry=ComUtil.max(legionB.getIndustry()/10,1);}
            legionB.costIndustry(industry);legionA.addIndustry(industry);}
        if(legionB.getTech()>legionA.getTech()){
            tech= (int) ((legionB.getTech()-legionA.getTech())* game.resGameConfig.legionHelpRate);
            if(tech==0){tech=ComUtil.max(legionB.getTech()/10,1);}
            legionB.costTech(tech);legionA.addTech(tech);}
        if(legionB.getFood()>legionA.getFood()){
            food= (int) ((legionB.getFood()-legionA.getFood())* game.resGameConfig.legionHelpRate);
            if(food==0){food=ComUtil.max(legionB.getFood()/10,1);}
            legionB.costFood(food);legionA.addFood(food);}
        ForeignData f=getForeignData(legionA.getLegionIndex(),legionB.getLegionIndex());
        f.addFavor(favor);

        if(f.isPlayer()&&!f.isSelf()){
            if(legionA.isPlayer()){//玩家获得支援
                addPromptData(game.gameMethod.getPromptStrT(9,0),
                        game.gameMethod.getPromptStrT(9,1,legionB.legionName,favor,f.getFavorValue()),
                        game.gameMethod.getPromptStrT(9,2,money,industry,tech,food),legionA.getLegionIndex(),legionB.getLegionIndex(),false);
            }else{//玩家支援别人
                addPromptData(game.gameMethod.getPromptStrT(8,0),
                        game.gameMethod.getPromptStrT(8,1,legionA.legionName,favor,f.getFavorValue()),
                        game.gameMethod.getPromptStrT(8,2,money,industry,tech,food),legionA.getLegionIndex(),legionB.getLegionIndex(),false);
            }
        }


        /*if(v==null){
            return null;
        }else {
            return game.gameMethod.getStrValueT(v,money,industry,tech,food);
        }*/
    }



    public int getAge() {
        return worldData.getWorldAge();
    }

    public int getRemainRound() {//获得剩余回合
        return masterData.roundMax-masterData.roundNow;
    }




    /*//根据外交来获取颜色
    public Color getColorByCamp(int region){
        if(isPlayerRegion(region)){
            return Color.GREEN;
        }else if(ifAllyPlayerByRegion(region)){
            return Color.BLUE;
        }else if(ifNeutralCampByRegion(region)){
            return Color.LIGHT_GRAY;
        }else {
            return Color.RED;
        }
    }*/

    //region是否是中立阵营  true 中立阵营  false 非中立阵营
    public boolean ifNeutralCampByRegion(int region) {
        LegionData l= getLegionDataByHexagon(region);
        if(l!=null&&l.getInternIndex()!=0){
            return false;
        }
        return true;
    }

    public boolean ifNeutralCampByRegion(LegionData l) {
        if(l!=null&&l.getInternIndex()!=0){
            return false;
        }
        return true;
    }

    //需要判断是不是本国
    //获得两国关系 0相对中立 1友好 -1敌对    (征服模式绝对中立国算在敌对中,帝国模式 li非0的中立国才算中立)

    public int getForeignDegree(int liA,int liB){
        if(liA < 0 || liB < 0||liA>=legionDatas.size||liB>=legionDatas.size){
            return 0;
        }
        if(liA==liB){
            return 1;
        }
        LegionData lA=legionDatas.get(liA);
        LegionData lB=legionDatas.get(liB);
        ForeignData f=getForeignData(liA,liB);
        if(masterData.getPlayerMode()==0){
            if(f.getForeignType()==0){
                if(lA.getInternIndex()==0||lB.getInternIndex()==0){
                    return -1;
                }else if ( lA.getInternIndex() == lB.getInternIndex()||f.getRealFavor()>70) {
                    return 1;
                }else if((f.getRealFavor()<=70&&f.getRealFavor()>30)){
                    return 0;
                }else {
                    return -1;
                }
            }else{
                if(f.getForeignType()==2){//0无 1互不侵犯 2同盟   -1敌对
                    return 1;
                }else if(f.getForeignType()==1){
                    return 0;
                }else if(f.getForeignType()==-1){
                    return -1;
                }else{
                    return -1;
                }
            }
        }else if(masterData.getPlayerMode()==1) {//如果非征服模式下,只有阵营不同,和绝对中立的 为可进攻目标,普通中立不可为目标
            if(f!=null&&f.getForeignType()==-1){
                return -1;
            }else   if ( (lA.getInternIndex() == lB.getInternIndex())||(f!=null&&f.getDiplomaticRecognition()==1)) {
                return 1;
            }else if(lA.getInternIndex()==0||lB.getInternIndex()==0){
                return 0;
            }else {
                return -1;
            }
        }else{
            if ( (lA.getInternIndex() == lB.getInternIndex())) {
                return 1;
            }else if(lA.getLegionIndex()==0||lB.getLegionIndex()==0){
                return 0;
            }else {
                return -1;
            }
        }

    }


    //根据region来获得颜色
    public Color getColorForRegion(int hexagon,Boolean ifHaveSea,Boolean ifFog,boolean ifSetSeaDefaultColor) {
        /*if(hexagon==16584){
            int s=0;
        }*/
        hexagon=getRegionId(hexagon);
        if(masterData.ifColor==1){
            int li=getLegionIndexByRegion(hexagon);
            LegionData l=getLegionDataByLi(li);
            Fb2Map.MapHexagon mapHexagon=hexagonDatas.get(hexagon);
            if(!ifHaveSea&&mapHexagon.getBlockType()==1){
                return  Color.CLEAR;
            }else if(li==-1||l.getInternIndex()==0){
                if(ifSetSeaDefaultColor&&mapHexagon.getBlockType()==1){
                    return  Color.SKY;
                }else{
                    return  Color.CLEAR;
                }
            }else if(ifAllyPlayerByRegion(hexagon)){
                return  l.getColor();
            }else {
                if(ifFog){
                    return l.getFogColor();
                }else{
                    return  l.getColor();
                }
            }
        }else {
            return  Color.CLEAR;
        }
    }



    public Color getBorderColorForRegion(int hexagon,Color defaultColor) {
        hexagon=getRegionId(hexagon);
        if(masterData.ifColor==1){
            int li=getLegionIndexByRegion(hexagon);
            if(li==-1||legionDatas.get(li).getLegionIndex()==0||hexagonDatas.get(hexagon).getBlockType()==1){
                return  defaultColor;
            } else{
                if(legionColors==null){
                    initLegionColor();
                }
                return  legionColors.get(li);
            }
        }else {
            return  defaultColor;
        }
    }


    public Color getColorForRegion(int hexagon) {
        return  getColorForRegion(hexagon,false,true,false);
    }
    public DialogueData getDialogue() {
        return new DialogueData();
    }

    public boolean isPlayerRegion(int targetRegion) {
        if(getLegionIndexByRegion(targetRegion)==masterData.playerLegionIndex){
            return true;
        }
        return false;
    }

    public boolean nul_Move(NulcleData nul, int targetHexagon) {
        if(nul.ifPlayer()){
            nul.getLegionData().addOil(-5);
            if(game.sMapScreen!=null){
                game.sMapScreen.updResourceForPlayer();
            }
        }
        BuildData ob=nul.getBuildData();
        BuildData b=getBuildDataByRegion(targetHexagon);
        if(ob!=null&&b!=null&&b.getNuclearCount()<4) {
            if (b.setNulIndex(nul.getNucleIndex())) {
                getBuildDataByRegion(nul.getRegionId()).removeNulIndex(nul.nucleIndex);
                nul.setRegionId(targetHexagon);
                if(  ob.buildActor!=null&&(roundState==0||roundState==4)&&(ob.isPlayer()||nul.ifPlayer())){
                    ob.buildActor.update();
                }
                if(  b.buildActor!=null&&(roundState==0||roundState==4)&&(ob.isPlayer()||nul.ifPlayer())){
                    b.buildActor.update();
                }

                if (ifAllyPlayerByLi(b.getLegionIndex())) {
                    effectStage.drawEffect(1501, ob.getRegionId(), targetHexagon,1f);
                }
                nul.resetBuildData();
                // nul.addNucleRound(1);
                return true;
            }
        }
        return false;
    }

    public boolean nul_Attack(NulcleData nul, int targetHexagon) {
        BuildData b=getBuildDataByRegion(targetHexagon);
        ArmyData a=getArmyDataByHexagon(targetHexagon);
        if(nul.ifPlayer()){
            nul.getLegionData().addOil(-5);
            if(game.sMapScreen!=null){
                game.sMapScreen.updResourceForPlayer();
            }
        }


        //目标点存在目标,则继续
        if((a!=null&&a.getArmyHpNow()>0)  ||b!=null){
            //计算超武爆炸范围
            // int maxRange=game.gameConfig.getDEF_ARMY().getElementById(nul.getNuclearId()).getInt("maxAtkrange",3);
            boolean ifDraw=false;

            if(nul.getLegionIndex()==masterData.playerLegionIndex&&(roundState==0||roundState==4)){
                ifDraw=true;
            }
            nul_Bomber(nul,targetHexagon,ifDraw);
            nul_Death(nul.getNucleIndex());
            return true;
        }

        return false;
    }
    //是否绘制梯形
    //direct 1左上 3右上  4左下 6右下
    public boolean ifDrawTrapezoidForDirect(int id, int directType) {
        //如果x方向是海,并且x方也是coast 则为true
        int bId,cId;
        switch (directType){
            case 1:bId=getBorderIdByDirect(id,1);
                cId=getBorderIdByDirect(id,2);
                if(ifSea(bId)&&getCoast(cId)>0){
                    return true;
                }else {
                    return false;
                }
            case 3:bId=getBorderIdByDirect(id,3);
                cId=getBorderIdByDirect(id,2);
                if(ifSea(bId)&&getCoast(cId)>0){
                    return true;
                }else {
                    return false;
                }
            case 4:bId=getBorderIdByDirect(id,4);
                cId=getBorderIdByDirect(id,5);
                if(ifSea(bId)&&getCoast(cId)>0){
                    return true;
                }else {
                    return false;
                }
            case 6:bId=getBorderIdByDirect(id,6);
                cId=getBorderIdByDirect(id,5);
                if(ifSea(bId)&&getCoast(cId)>0){
                    return true;
                }else {
                    return false;
                }
        }


        return false;
    }

    public boolean ifCountryBorder(int id) {
        for(int i=1;i<=6;i++){
            if(ifCountryBorder(id,i,true)){
                return true;
            }
        }
        return  false;
    }
    //获得纵六边形国界的类型
    //direct 1↗ 2→ 3↘ 4↙ 5← 6↖
    public boolean ifCountryBorderX(int id,int direct){
        switch (direct){
            case 1:
                if(ifCountryBorder(id,2,true)&& ifCountryBorder(id,3,true)){
                    return true;
                }else if(ifCoastBorder(id,2)&& ifCoastBorder(id,3)){
                    return true;
                }else if(ifSeaBorder(id,2)&& ifSeaBorder(id,3)){
                    return true;
                }
                break;
            case 2:
                if(ifCountryBorder(id,3,true)&& ifCountryBorder(id,6,true)){
                    return true;
                }else  if(ifCoastBorder(id,3)&& ifCoastBorder(id,6)){
                    return true;
                }else if(ifSeaBorder(id,3)&& ifSeaBorder(id,6)){
                    return true;
                }
                break;
            case 3:
                if(ifCountryBorder(id,5,true)&& ifCountryBorder(id,6,true)){
                    return true;
                }else if(ifCoastBorder(id,5)&& ifCoastBorder(id,6)){
                    return true;
                }else if(ifSeaBorder(id,5)&& ifSeaBorder(id,6)){
                    return true;
                }
                break;
            case 4:
                if(ifCountryBorder(id,4,true)&& ifCountryBorder(id,5,true)){
                    return true;
                }else  if(ifCoastBorder(id,4)&& ifCoastBorder(id,5)){
                    return true;
                }else if(ifSeaBorder(id,4)&& ifSeaBorder(id,5)){
                    return true;
                }
                break;
            case 5:
                if(ifCountryBorder(id,1,true)&& ifCountryBorder(id,4,true)){
                    return true;
                }else if(ifCoastBorder(id,1)&& ifCoastBorder(id,4)){
                    return true;
                }else if(ifSeaBorder(id,1)&& ifSeaBorder(id,4)){
                    return true;
                }
                break;
            case 6:
                if(ifCountryBorder(id,1,true)&& ifCountryBorder(id,2,true)){
                    return true;
                }else  if(ifCoastBorder(id,1)&& ifCoastBorder(id,2)){
                    return true;
                }else if(ifSeaBorder(id,1)&& ifSeaBorder(id,2)){
                    return true;
                }
                break;
        }
        return false;
    }

    private boolean ifCoastBorder(int id, int direct) {

        int bId=getBorderIdByDirect(id,direct);
        /*if(id==8132&&(direct==5||direct==6)){
            int s=0;
        }*/
       /*if(ifSea(id)&&!ifSea(bId)){
            return true;
        }*/

        if(!ifSea(id)&&ifSea(bId)&&ifSeaLand(id)){
            return true;
        }
        /*if(bId==-1||(getRegionId(bId)!=id&&!ifSea(id)&&ifSea(bId))){
            return false;
        }
        if(!ifSea(id)&&ifSea(bId)){
            return true;
        }*/

        return  false;
    }

    private boolean ifSeaBorder(int id, int direct) {
        int bId=getBorderIdByDirect(id,direct);
        /*if(id==8132&&(direct==5||direct==6)){
            int s=0;
        }*/
       /*if(ifSea(id)&&!ifSea(bId)){
            return true;
        }*/
        int rId=getRegionId(id);
        int rDId=getRegionId(bId);
        if(ifSea(id)&&!ifSea(bId)&&ifSea(rId)&&!ifSea(rDId)){
            return true;
        }
        /*if(bId==-1||(getRegionId(bId)!=id&&!ifSea(id)&&ifSea(bId))){
            return false;
        }
        if(!ifSea(id)&&ifSea(bId)){
            return true;
        }*/

        return  false;
    }
    //direct :1↖ 2↑ 3↗ 4↙ 5↓ 6↘
    public boolean ifCountryBorder(int id, int direct,boolean ifHaveCoast) {
        int bId=getBorderIdByDirect(id,direct);
        if(bId==-1){
            return false;
        }
        int ri=getRegionId(bId);
        int ri2=getRegionId(id);
        int  c2=getCountryByRegion(ri2);
        int  c1=getCountryByRegion(ri);
        boolean ifSeaLand0=ifSeaLand(id);
        boolean ifSeaLand1=ifSeaLand(ri);
        boolean ifSeaLand2=ifSeaLand(ri2);

        LegionData l=getLegionDataByRegion(ri);
        LegionData l2=getLegionDataByRegion(ri2);
        if(l==null||l2==null){
            return false;
        }
        if(l.getLegionIndex()==0&&l2.getLegionIndex()==0&&l.getLegionIndex()==l2.getLegionIndex()){
            return false;
        }
        //   if(bId!=-1&&bId!=id&&c1!=c2&&c1!=-1&&c2!=-1&&!ifSea(bId) ){
        if(ifHaveCoast){
            if(ifSea(ri)){
                c1=0;
            }
            if(ifSea(ri2)){
                c2=0;
            }
            /*if(ifSeaLand0&&ifSea(id)){
                return false;
            }*/
            if(( c1!=c2&& (ifSeaLand1&&!ifSeaLand2 )|| (!ifSeaLand1&&ifSeaLand2 )) &&l.getLegionIndex()!=0&&l2.getLegionIndex()!=0){
                return true;
            }
            //这个可以让海陆显示  if(ifSea(getRegionId(bId))&&ifSea(getRegionId(id))){
            if(ifSea(ri)&&ifSea(ri2)){
                return false;
            }
            if ((c1!=c2)&& (ifSeaLand1||ifSeaLand2)){
                return false;
            }
            if(bId!=-1&&bId!=id&&c1!=c2&&c1!=-1&&c2!=-1 ){
                return true;
            }
            if(bId!=-1&&bId!=id&&(  (ifSeaLand1&&!ifSeaLand2 )|| (!ifSeaLand1&&ifSeaLand2 ))&&c1!=-1&&c2!=-1 ){
                return true;
            }
        }else{
            if(bId!=-1&&bId!=id&&c1!=c2&&c1!=-1&&c2!=-1&&!ifSea(bId) &&!ifSea(id) ){
                return true;
            }
        }

        return  false;
    }

    public boolean ifSeaLand(int regionId) {
        regionId=getRegionId(regionId);
        if(ifGridIsPass(regionId)&&!ifSea(regionId)&& hexagonDatas.get(regionId).ifCoast==63){
            return true;
        }
        return false;
    }
    public boolean ifCost(int id) {
        Fb2Map.MapHexagon h=getHexagonData(id);
        if(h!=null&&h.isSea()&&h.getBackTile()==2){
            return true;
        }
        return false;
    }
    //ifHaveCoast
    public boolean ifRegionBorder(int id, int direct,boolean ifHaveCoast) {
        int bId=getBorderIdByDirect(id,direct);
        if(bId==-1){
            return false;
        }
        int c1=getRegionId(bId);
        int c2=getRegionId(id);
        if(ifHaveCoast){
            if(bId!=-1&&bId!=id&&c1!=c2&&c1!=-1&&c2!=-1 ){
                return true;
            }
        }else {
            if(bId!=-1&&bId!=id&&c1!=c2&&c1!=-1&&c2!=-1&&ifSameLandOrSea(id,bId)){
                return true;
            }
        }



        return  false;
    }

    public int getBuildPolicyByHexagon(int id) {
        BuildData b=getBuildDataByRegion(id);
        if(b==null){
            return 0;
        }
        return b.getBuildPolicy();
    }

   /* public void armyActorToDrawFort(int hexagonIndex,int fortId) {
        ArmyData a=getArmyDataByHexagon(hexagonIndex);
        if(a==null||a.armyActor==null||a.getArmyHpNow()<=0){
            return;
        }
        if(fortId==5001||fortId==5005){
            a.armyActor.setIfDrawFort(false);
            return;
        }
        a.armyActor.updateDrawFort(a.hexagonIndex);
        return ;
    }*/

    public FortData getFortDataByHexagon(int hexagon) {
        return fortHDatas.get(hexagon);
    }

    //a对b造成伤害 1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇
    public boolean ifFortReduceDamage(int armyType,int armyId,String armyFeature,int armyTransport,int sHexagon,int tHexagon) {
        FortData f=getFortDataByHexagon(tHexagon);
        if(f==null){
            return false;
        }
        //铁丝网,哨塔减免步兵伤害
        if((f.getFortId()==5001||f.getFortId()==5003)&&armyType==1){
            return true;
        }
        //掩体 减免火炮,坦克,要塞伤害
        if((f.getFortId()==5002&&(armyType==2||armyType==3||armyType==6))){
            return true;
        }
        //海岸炮 减免船,潜艇,单位运输船形态伤害
        if((f.getFortId()==5004&&(armyType==4||armyType==8||ifSea(sHexagon)))){
            return true;
        }
        //防空炮,雷达 减免空军伤害
        if(f.getFortId()==5006&&armyType==5){
            return true;
        }
        //雷达 减少空军,飞弹和拥有战略射程单位造成的伤害,
        if(f.getFortId()==5007&&(armyType==5||armyId==1606||ComUtil.ifHaveValueInStr(armyFeature,1))){
            return true;
        }
        return false;
    }

    //初始化设置  TODO
    public void btlInitForConquest() {
        XmlReader.Element defStage=game.gameConfig.getDEF_STAGE().getElementById(game.getStageId());
        int age=getAge();
        //  initBuildType();

        if(generalIDatas.size==0){
            int generalIndex=0;
            GeneralData g=new GeneralData();
            //设置情报官
            g.setGeneralId(0);g.setState(0);
            generalIDatas.put(g.getGeneralIndex(),g);
        }
        if(ifSystemEffective(17)){
            initTradeDatas();
        }

        /*if(defStage.getBoolean("ifAutoTech",false)){
            initAllBuildData(age);
            setAutoTech();
        }*/

        initBtl();

        checkCapital();
        checkResrource();
        initCardNumAndCost();
        //初始化兵种设置

        //执行三回合 ifInitRound
        updAllRTask();


        //resetZone();
    }

    public Color getColorByAlly(int hexagon, int targetRegion) {
        if(hexagon==targetRegion){
            return Color.GREEN;
        }else if(ifAllyByHexagon(hexagon,targetRegion)){
            return Color.BLUE;
        }else{
            return Color.RED;
        }
    }

    public void addPromptDialogue(String dialogueContent,boolean ifBounced) {
        GeneralData g=generalIDatas.get(0);
        DialogueData d=new DialogueData();
        d.setCountryId(getPlayerLegionData().getCountryId());
        d.setGeneralId(g.getGeneralId());
        d.setGeneralImageName(g.getGeneralImageName());
        d.setDialogueContent(dialogueContent);
        d.setGeneralState(g.getState());
        dialogueDatas.add(d);
        if( ((roundState==0)||(ifBounced&&roundState==4))&&game.sMapScreen!=null){
            game.sMapScreen.showGeneralDialogueGroupAndPromptGroup();
        }
    }


    public void settleLegionPolicy(int potion){
        TaskData t=taskDatas.get(potion);
        if(t.getTaskType()!=2){
            return;
        }
        XmlReader.Element lp=game.gameConfig.getDEF_LEGIONPOLICY().getElementById(t.getTaskIndex());
        if(lp!=null&&executeLegionPolicy(t,lp)){
            if(lp.getBoolean("ifRepeat",false)){
                policyIDatas.add(t.getTaskIndex());
            }
            if(ifTriggerSpirit(33)){
                getPlayerLegionData().addMiracle(- ComUtil.max(t.getTaskLv()/2,1));
                getPlayerLegionData().addLegionRound(ComUtil.max(lp.getInt("round",1)/2,1));
            }else{
                getPlayerLegionData().addMiracle(- ComUtil.max(t.getTaskLv(),1));
                getPlayerLegionData().addLegionRound(lp.getInt("round",1));
            }
            getPlayerLegionData().addMiracle(-t.getTaskLv());
            getPlayerLegionData().addLegionRound(lp.getInt("round",1));
            addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_38",t.taskNameStr),true);
        }else{
            addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_39",t.taskNameStr),true);
        }
        initLegionPolicy();
    }

    //结算任务  返回的是文字拼接的奖励.
    public String submitTask(int potion) {
        TaskData t=taskDatas.get(potion);


        LegionData l=getPlayerLegionData();
        int bontyValue=DefDAO.getBontyByDifficut(t.bontyValue,masterData.getGameDifficulty());
        switch (t.getBontyType()){
            case 0:l.addMoney(bontyValue); break;
            case 1:l.addIndustry(bontyValue);break;
            case 2:l.addTech(bontyValue);break;
            case 3:l.addFood(bontyValue);break;
        }
        if(t.getTaskType()==2){//如果是提交的国策
            settleLegionPolicy(potion);
            return null;
        }
        if(masterData.getPlayerMode()==0&&(roundState==0||roundState==4)){
            if(masterData.ifChief==1&&chiefData!=null){
                addHarmor(ComUtil.limitValue(t.taskLv,1,t.getStar()));
            }
        }

        int oldAmbition=getPlayerAmbition();
        //
        if(ifSystemEffective(16)){
            //随着游戏回合解锁野心度
            if((ResDefaultConfig.ifDebug)||Math.abs(getPlayerAmbition()-100)<= getRoundProgress()+20){
                if(getPlayerAmbition()==100){
                    if(game.gameConfig.getDEF_RTASK().getElementById(t.getTaskIndex()).getInt("type")==1){//王
                        addPlayerAmbition(-ComUtil.limitValue(t.taskLv,1,t.getStar()));
                    }else if(game.gameConfig.getDEF_RTASK().getElementById(t.getTaskIndex()).getInt("type")==2){//霸
                        addPlayerAmbition(ComUtil.limitValue(t.taskLv,1,t.getStar()));
                    }
                }  else{
                    if(getPlayerAmbition()<100){
                        addPlayerAmbition(-ComUtil.limitValue(t.taskLv,1,t.getStar()));
                        /*if((oldAmbition/10!=getPlayerAmbition()/10||(oldAmbition!=0&&getPlayerAmbition()==0))&& initTasksForLegionPolicy()){
                            addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_37"));
                            return null;
                        }*/
                    }else if(getPlayerAmbition()>100){
                        addPlayerAmbition(ComUtil.limitValue(t.taskLv,1,t.getStar()));
                        /*if((oldAmbition/10!=getPlayerAmbition()/10||(oldAmbition!=100&&getPlayerAmbition()==100))&& initTasksForLegionPolicy()){
                            addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_37"));
                            return null;
                        }*/
                    }
                }
                if(oldAmbition==100&&getPlayerAmbition()!=100){
                    updAllRTask();
                    initLegionPolicy();
                    if(getPlayerAmbition()<100){
                        addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_32"),true);
                    }else{
                        addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_33"),true);
                    }
                    if(game.sMapScreen!=null){
                        game.sMapScreen.setPromptText(9);
                    }
                }
            }
        }
        String rs=new StringBuilder(game.gameMethod.getStrValueForResource(t.getBontyType(),bontyValue)).toString() ;
        updRTask(t);
        return rs;
    }
    //更新所有的任务为国策
    private boolean initLegionPolicy() {
        if(masterData.getPlayerLegionIndex()==0){
            return false;
        }
        // taskDatas.clear();
        Array<XmlReader.Element> rs=getPlayerLegionPolicy(game.tempUtil.getTempArray());
        if(rs.size==0){
            return false;
        }
        for(int i=0;i<5;i++){
            TaskData taskData=taskDatas.get(i+5);
            if(taskData==null){
                taskData=new TaskData();
                taskDatas.add(taskData);
            }
            XmlReader.Element lpXmlE=rs.get(i);
            taskData.resetTaskDataByPolicy(lpXmlE);
            taskData.initVirAttribute();
        }
        game.tempUtil.disposeTempArray(rs);
        return true;
    }




    private String getLegionNameStrByCountry(String countrysStr,boolean ifHavePlayer) {
        StringBuilder sb=new StringBuilder();
        String[] strs = countrysStr.split(",");
        for(int i=0;i<strs.length;i++){
            if(!ComUtil.isNumeric(strs[i])){
                continue;
            }
            int country=Integer.parseInt(strs[i]);
            LegionData l=getLegionByCountry(country,false);
            if(l==null||(!ifHavePlayer&&l.isPlayer())){
                continue;
            }
            if(l.varRegionCount>0){
                if(sb.length>0){sb.append(",");}
                sb.append(l.legionName);
            }
        }
        return sb.toString();
    }

    private String getLegionNameStrByLisStr(String legionIndexStr,boolean ifHavePlayer) {
        StringBuilder sb=new StringBuilder();
        String[] strs = legionIndexStr.split(",");
        for(int i=0;i<strs.length;i++){
            if(!ComUtil.isNumeric(strs[i])){
                continue;
            }
            int li=Integer.parseInt(strs[i]);
            LegionData l=getLegionDataByLi(li);
            if(l==null||(!ifHavePlayer&&l.isPlayer())){
                continue;
            }
            if(l.varRegionCount>0){
                if(sb.length>0){sb.append(",");}
                sb.append(l.legionName);
            }
        }
        return sb.toString();
    }

    public void parseCommand(String text) {
        String[] rs=text.split(" ");
        String type=rs[0];
        switch (rs.length){
            case 1://一个间隔的命令
                switch (text){

                    case "resetCountryColor":
                        resetCountryColor();
                        game.sMapScreen.commandStr=text+" updOk";
                        return;
                    case "checkArmyData":
                        checkArmyData();
                        game.sMapScreen.commandStr=text+" updOk";
                        return;
                    case "testTempMethod":
                        tempMethod();
                        game.sMapScreen.commandStr=text+" updOk";
                        return;

                    case "saveStagePrivew":
                        game.getGameFramework().saveStagePreview();
                        game.sMapScreen.commandStr=text+" updOk";
                        return;
                    case "resetBuildZoneByMapBin":
                        resetBuildZoneByMapBin();
                        game.sMapScreen.commandStr=text+" updOk";
                        return;

                    case "initForBlankConquest":
                        btlInitForBlankConquest();break;
                    case "buildAllRailwayByPreset":buildAllRailwayByPreset();game.sMapScreen.commandStr=text+" updOk"; return;
                    case "resetWeather":resetWeather();;game.sMapScreen.commandStr=text+" updOk"; return;
                    case "resetAllBuildType":resetAllBuildType();game.sMapScreen.commandStr=text+" updOk"; return;
                    case "iRWinner": gameIRWinner();game.sMapScreen.commandStr=text+" updOk"; return;
                    case "worldWarForPlayer":legion_worldWarForPlayer();game.sMapScreen.commandStr=text+" updOk"; return;
                    case "resetZone": resetZone();game.sMapScreen.commandStr=text+" updOk"; return;
                    case "refreshTrade":refreshTrade();game.sMapScreen.commandStr=text+" updOk"; return;
                    //case "testArmyUnitCombat": testArmyUnitCombat();game.sMapScreen.commandStr=text+" updOk"; return;
                    case "addAllSpirit":  addAllSpirit();game.sMapScreen.commandStr=text+" updOk"; return;
                    case "resetAllLegionPower": resetAllLegionPower();game.sMapScreen.commandStr=text+" updOk"; return;
                    case "endAllTask": endAllTask();game.sMapScreen.commandStr=text+" updOk"; return;
                    case "synchronouByHistory": synchronouByHistory();game.sMapScreen.commandStr=text+" updOk"; return;
                    case "initTradeDatas": initTradeDatas();game.sMapScreen.commandStr=text+" updOk"; return;
                    case "initDiplomaticAttitude": initDiplomaticAttitude();game.sMapScreen.commandStr=text+" updOk"; return;
                    case "initCapital": initCapital();game.sMapScreen.commandStr=text+" updOk"; return;
                    case "resetLegionTargetAreaZone": resetLegionTargetAreaZone();game.sMapScreen.commandStr=text+" updOk"; return;
                    case "seeAll": seeAll(); game.sMapScreen.commandStr=text+" updOk"; return;
                    case "invincible": controlMode=1; game.sMapScreen.commandStr=text+" updOk"; return;
                    case "resetState": controlMode=0; game.sMapScreen.commandStr=text+" updOk"; return;
                    case "editAll": controlMode=2; game.sMapScreen.commandStr=text+" updOk"; return;
                    case "initSRRegionMap": initSRRegionMapTIA1(); game.sMapScreen.commandStr=text+" updOk"; return;
                    case "logAllBuildInfo":logAllBuildInfo(); game.sMapScreen.commandStr=text+" updOk"; return;
                    case "setAllBuildEnergyAfford": setAllBuildEnergyAfford(); game.sMapScreen.commandStr=text+" updOk"; return;
                    case "saveMapForPng":game.saveMapForPng(); game.sMapScreen.commandStr=text+" updOk"; return;
                    case "saveSeaMapForPng": game.saveSeaMapForPng(); game.sMapScreen.commandStr=text+" updOk"; return;
                    case "saveCompleteBtl":
                        String stageName = game.gameConfig.getDEF_STAGE().getElementById(stageId).get("name");
                        if (!ComUtil.isEmpty(stageName)) {
                            FileHandle f=     save(ResDefaultConfig.Path.SaveFolderPath + stageName + "_cmd.btl",false);
                            game.sMapScreen.commandStr=text+" updOk";
                        }else{
                            game.sMapScreen.commandStr=text+" is fail";
                        }
                        return;
                    case "saveMapBin":
                        stageName = game.gameConfig.getDEF_STAGE().getElementById(stageId).get("name");
                        if (!ComUtil.isEmpty(stageName)) {
                            mapbin.saveMapBin(ResDefaultConfig.Path.SaveFolderPath + stageName + "_cmd.bin");
                            game.sMapScreen.commandStr=text+" updOk";
                        }else{
                            game.sMapScreen.commandStr=text+" is fail";
                        }
                        return;
                }


                break;
            case 2://两个间隔的命令
                if(ComUtil.isNumeric(rs[1])){
                    int value=Integer.parseInt(rs[1]);
                    switch (type){
                        case "setRoundState":
                            roundState=value;
                            game.sMapScreen.commandStr=text+" updOk";
                            return;
                        case "setPortBuildLimit":
                            masterData.portLimitBorderSea=value;
                            game.sMapScreen.commandStr=text+" updOk";
                            return;
                        case "logAllActorForStageCoord":
                            WindowGroup w=game.sMapScreen.getWindowGroups().get(Integer.parseInt(rs[1]));
                            if(w!=null){
                                w.logAllActorForStageCoord();
                            }
                            game.sMapScreen.commandStr=text+" updOk";
                            return;
                        case "setGameStatu":
                            masterData.setGameStatu(value);
                            game.sMapScreen.commandStr=text+" updOk";
                            return;
                        case "backupSav": game.backupSav(rs[1]);game.sMapScreen.commandStr=text+" updOk"; return;
                        case "useBackUpSav": game.useBackupSav(rs[1]);game.sMapScreen.commandStr=text+" updOk"; return;
                        case "resetMapData":resetMapData(rs[1].equals("0"));game.sMapScreen.commandStr=text+" updOk ; updValue 0 name 1 region"; return;  //0 根据name来同步  1 根据region来同步
                        case "roundNow":
                            masterData.setRoundNow(value);game.sMapScreen.commandStr=text+" updOk"; return;
                        case "addSpirit":
                            if(ResDefaultConfig.ifDebug){
                                addSpiritId(value,false);
                                game.sMapScreen.commandStr=text+" updOk";
                            } return;
                        case "setPlayerLegionIndex":
                            masterData.setPlayerLegionIndex(value);
                            if(generalIDatas.size>0){
                                generalIDatas.get(0).setLegionIndex(value);
                            }
                            game.sMapScreen.commandStr=text+" updOk"; return;
                        case "incomeRate":masterData.setIncomeRate(value);game.sMapScreen.commandStr=text+" updOk"; return;
                        case "airAddRange":masterData.setAirAddRange(value);game.sMapScreen.commandStr=text+" updOk"; return;
                        case "unitAddMove":masterData.setUnitAddMove(value);game.sMapScreen.commandStr=text+" updOk"; return;
                        case "resetForeignDatas": resetForeignDatas(value==1);game.sMapScreen.commandStr=text+" updOk ifSaveOld 0 false 1 true"; return;
                        case "setPlayerAmbition": setPlayerAmbition(value);game.sMapScreen.commandStr=text+" setPlayerAmbition "+value; return;
                        case "setCM": controlMode=value; game.sMapScreen.commandStr=text+" updOk"; return;
                        case "setLegionPolicyToTest": setLegionPolicyToTest(value);game.sMapScreen.commandStr=text+" updOk"; return;
                        case "setBuildLvMax":setBuildLvMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                        case "setDiffculty": masterData.setGameDifficulty(value); game.sMapScreen.commandStr=text+" updOk"; return;
                        case "setLegionTechMax":setLegionTechMax(value); game.sMapScreen.commandStr=text+" updOk"; return;
                        case "allArmyDataResetUnitGroup":allArmyDataResetUnitGroup(true,value); game.sMapScreen.commandStr=text+" updOk"; return;
                    }
                    break;
                }else{//value 是str




                }


            case 3://三个间隔的命令
                switch (type){



                }


                break;
            case 4://四个间隔的命令
                if(!ComUtil.isNumeric(rs[3])){
                    game.sMapScreen.commandStr="error command :"+rs[3]+" should is number ";
                    return;
                }
                int value=Integer.parseInt(rs[3]);
                switch (type){
                    case "color"://color li r/g/b/a value

                    break;
                    case "test":// test windowId b/i/l actorId
                        WindowGroup w=game.sMapScreen.getWindowGroups().get(Integer.parseInt(rs[1]));

                        switch(rs[2]){
                            case "b"://button
                                game.sMapScreen.setDebugActor(text,w.getButton(value));
                                break;
                            case "i"://image
                                game.sMapScreen.setDebugActor(text,w.getImage(value));
                                break;
                            case "l"://label
                                game.sMapScreen.setDebugActor(text,w.getLabel(value));
                                break;
                            case "t"://label
                                game.sMapScreen.setDebugActor(text,w.getTButton(value));
                                break;
                            default:
                                game.sMapScreen.closeDebug();
                                break;
                        }
                        break;

                    case "legionData":
                        LegionData l= getLegionDataByLi(Integer.parseInt(rs[1]));
                        if(l==null){
                            game.sMapScreen.commandStr="error command :potion is invalid "+rs[1];
                            return;
                        }


                        switch (rs[2]){
                            case "updUnitLv":
                                updUnitLv(l.getLegionIndex(),value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "updAirLv":
                                updAirLv(l.getLegionIndex(),value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "updBuildLv":
                                updBuildLv(l.getLegionIndex(),value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "updLegionLv":
                                updLegionLv(l,value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "whosYourDaddy":whosYourDaddy(l,value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "resetAllState":
                                resetAllState(l);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "superFirendly":setSuperFirendly(l.getLegionIndex(),value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "greedIsGood": l.addMoney(value);l.addIndustry(value);l.addFood(value);l.addTech(value);game.sMapScreen.commandStr=text+" updOk"; return;

                            case "internIndex":l.setInternIndex(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "suzerainLi":l.setSuzerainLi(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "countryId":l.setCountryId(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "money":l.addMoney(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "industry":l.addIndustry(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "food":l.addFood(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "tradeCount":l.setTradeCount(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "tech":l.addTech(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "level":l.setLevel(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "medal":l.setMedal(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "lifeBonus":l.setLifeBonus(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "taxBonus":l.setTaxBonus(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "capitalId":l.setCapitalId(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "cityLvMax":l.setCityLvMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "industLvMax":l.setIndustLvMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "techLvMax":l.setTechLvMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "energyLvMax":l.setEnergyLvMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "transportLvMax":l.setTransportLvMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "infantryLvMax":l.setInfantryLvMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "cannonLvMax":l.setCannonLvMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "tankLvMax":l.setTankLvMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "fortLvMax":l.setFortLvMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "navyLvMax":l.setNavyLvMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "airLvMax":l.setAirLvMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "supplyLvMax":l.setSupplyLvMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "defenceLvMax":l.setDefenceLvMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "missileLvMax":l.setMissileLvMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "nuclearLvMax":l.setNuclearLvMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "financialLvMax":l.setFinancialLvMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "tradeLvMax":l.setTradeLvMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "cultureLvMax":l.setCultureLvMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "miracleNow":l.setMiracleNow(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "militaryAcademyLv":l.setMilitaryAcademyLv(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "infantryCardMax":l.setInfantryCardMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "armorCardMax":l.setArmorCardMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "artilleryCardMax":l.setArtilleryCardMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "navyCardMax":l.setNavyCardMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "airCardMax":l.setAirCardMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "nuclearCardMax":l.setNuclearCardMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "missileCardMax":l.setMissileCardMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "submarineCardMax":l.setSubmarineCardMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "defenceCardMax":l.setDefenceCardMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "generalCardMax":l.setGeneralCardMax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "legionRound":l.setLegionRound(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "civilSpec":l.setCivilSpec(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "color":l.setColorByCommand(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "legionFeature1":l.setLegionFeature1(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "legionFeatureLv1":l.setLegionFeatureLv1(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "legionFeature2":l.setLegionFeature2(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "legionFeatureLv2":l.setLegionFeatureLv2(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "legionFeature3":l.setLegionFeature3(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "legionFeatureLv3":l.setLegionFeatureLv3(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "legionFeature4":l.setLegionFeature4(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "legionFeatureLv4":l.setLegionFeatureLv4(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "legionFeature5":l.setLegionFeature5(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "legionFeatureLv5":l.setLegionFeatureLv5(value);game.sMapScreen.commandStr=text+" updOk"; return;

                            default:  game.sMapScreen.commandStr="error command :function is invalid "+rs[2]; break;
                        }
                        return;
                    case "buildData":
                        BuildData b= getBuildDataByRegion(getRegionId(Integer.parseInt(rs[1])));
                        if(b==null){
                            game.sMapScreen.commandStr="error command :potion is invalid "+rs[1];
                            return;
                        }

                        switch (rs[2]){
                            case "buildType":b.setBuildType(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "buildName":b.setBuildName(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "buildWonder":b.setBuildWonder(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "cityStability":b.setCityStability(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "developLv":b.setDevelopLv(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "cityTax":b.setCityTax(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "cityLvNow":b.setCityLvNow(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "industryLvNow":b.setIndustryLvNow(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "foodLvNow":b.setFoodLvNow(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "techLvNow":b.setTechLvNow(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "energyLvNow":b.setEnergyLvNow(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "transportLvNow":b.setTransportLvNow(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "armyLvNow":b.setArmyLvNow(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "airLvNow":b.setAirLvNow(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "supplyLvNow":b.setSupplyLvNow(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "defenceLvNow":b.setDefenceLvNow(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "missileLvNow":b.setMissileLvNow(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "nuclearLvNow":b.setNuclearLvNow(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "cultureLvNow":b.setCultureLvNow(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "tradeLvNow":b.setTradeLvNow(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "buildRound":b.setBuildRound(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "setRegionAllLegionIndex": setRegionAllLegionIndex(b.getRegionId(),value,true);game.sMapScreen.commandStr=text+" updOk"; return;
                            default:  game.sMapScreen.commandStr="error command :function is invalid "+rs[2]; break;
                        }
                        return;
                    case "airData":
                        AirData air= getAirData(Integer.parseInt(rs[1]));
                        if(air==null){
                            game.sMapScreen.commandStr="error command :potion is invalid "+rs[1];
                            return;
                        }
                        switch (rs[2]){
                            case "airKills":air.setAirKills(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "ackLv":air.setAckLv(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "defLv":air.setDefLv(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "spyLv":air.setSpyLv(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "supLv":air.setSupLv(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "actLv":air.setActLv(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "weaLv":air.setWeaLv(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "airRank":air.setAirRank(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "airMorale":air.setAirMorale(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "airRound":air.setAirRound(value);game.sMapScreen.commandStr=text+" updOk"; return;

                            default:  game.sMapScreen.commandStr="error command :function is invalid "+rs[2]; break;
                        }
                        return;
                    case "armyData":
                        ArmyData army= getArmyDataByHexagon(Integer.parseInt(rs[1]));
                        if(army==null||army.getArmyHpNow()<=0){
                            game.sMapScreen.commandStr="error command :potion is invalid "+rs[1];
                            return;
                        }
                        switch (rs[2]){
                            case "updRankForLv":army.updRankForValue(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "armyKills":army.setArmyKills(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "unitGroup1Lv":army.setUnitGroup1Lv(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "unitGroup2Lv":army.setUnitGroup2Lv(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "unitGroup3Lv":army.setUnitGroup3Lv(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "unitGroup4Lv":army.setUnitGroup4Lv(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "unitGroup5Lv":army.setUnitGroup5Lv(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "unitGroup6Lv":army.setUnitGroup6Lv(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "armyRank":army.setArmyRank(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "armyRound":army.setArmyRound(value);game.sMapScreen.commandStr=text+" updOk"; return;

                            default:  game.sMapScreen.commandStr="error command :function is invalid "+rs[2]; break;
                        }
                        return;
                    case "foreignData":
                        ForeignData f= getForeignData(Integer.parseInt(rs[1]));
                        if(f==null){
                            game.sMapScreen.commandStr="error command :potion is invalid "+rs[1];
                            return;
                        }
                        switch (rs[2]){

                            case "favor":f.setFavorValue(value);game.sMapScreen.commandStr=text+" updOk"; return;

                            default:  game.sMapScreen.commandStr="error command :function is invalid "+rs[2]; break;
                        }
                        return;
                    case "hexagonData":
                        Fb2Map.MapHexagon h= getHexagonData(Integer.parseInt(rs[1]));
                        if(h==null){
                            game.sMapScreen.commandStr="error command :potion is invalid "+rs[1];
                            return;
                        }
                        switch (rs[2]){
                            case "regionId":h.setRegionId(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            //case "ifCoast":h.setIfCoast(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            case "ifFog":h.setIfFog(value);game.sMapScreen.commandStr=text+" updOk"; return;
                            //case "terrainType":h.setTerrainType(value);game.sMapScreen.commandStr=text+" updOk"; return;


                            default:  game.sMapScreen.commandStr="error command :function is invalid "+rs[2]; break;
                        }
                        return;
                }
            default:  game.sMapScreen.commandStr="error command :type is invalid "+rs[0];
                return;
        }
    }

    //设定所有铁路通过预设
    private void buildAllRailwayByPreset() {
        for(int i=0;i<hexagonDatas.size;i++){
            Fb2Map.MapHexagon mapHexagon=hexagonDatas.get(i);
            if(mapHexagon.getOtherTile()==0&&mapHexagon.getPresetRailway()==1){
                buildRailway(mapHexagon.getHexagonIndex());
            }
        }
    }

    //设置城市能源
    private void setAllBuildEnergyAfford() {
        for(int bi=0;bi<buildRDatas.size();bi++){
            BuildData b=buildRDatas.getByIndex(bi);
            if(b!=null&&b.ifEnergyOverload()/*Fb2Smap.this.ifEffective(7)&&b.varEnergyCost >b.getBuildEnergyAfford()*/){
                b.setEnergyLvToAfford();
            }
        }
    }

    private void setLegionTechMax(int value) {
        LegionData legionData=getLegionDataByLi(value);
        if(legionData!=null){

            legionData.setMoney(9999);
            legionData.setIndustry(9999);
            legionData.setFood(9999);
            legionData.setMineral(9999);
            legionData.setOil(9999);
            //     Gdx.app.log("legionres",legionData.getLegionIndex()+":"+legionData.getOil());
            legionData.setTradeCount(9999);
            legionData.setTech(9999);
            legionData.setLevel(5);
            // legionData.setLifeBonus();
            legionData.setTaxBonus(300);
            legionData.setCityLvMax(game.resGameConfig.cardUpdMax_cityLv);
            legionData.setIndustLvMax(game.resGameConfig.cardUpdMax_industryLv);
            legionData.setTechLvMax(game.resGameConfig.cardUpdMax_techLv);
            legionData.setEnergyLvMax(game.resGameConfig.cardUpdMax_eneryLv);
            legionData.setTransportLvMax(game.resGameConfig.cardUpdMax_transportLv);
            legionData.setInfantryLvMax(game.resGameConfig.cardUpdMax_unitLv);
            legionData.setCannonLvMax(game.resGameConfig.cardUpdMax_unitLv);
            legionData.setTankLvMax(game.resGameConfig.cardUpdMax_unitLv);
            legionData.setFortLvMax(game.resGameConfig.cardUpdMax_unitLv);
            legionData.setNavyLvMax(game.resGameConfig.cardUpdMax_unitLv);
            legionData.setAirLvMax(game.resGameConfig.cardUpdMax_airportLv);
            legionData.setSupplyLvMax(game.resGameConfig.cardUpdMax_supplyLv);
            legionData.setDefenceLvMax(game.resGameConfig.cardUpdMax_defenceLv);
            legionData.setMissileLvMax(game.resGameConfig.cardUpdMax_missileLv);
            legionData.setNuclearLvMax(game.resGameConfig.cardUpdMax_nuclearLv);
            legionData.setFinancialLvMax(game.resGameConfig.cardUpdMax_financialLv);
            legionData.setTradeLvMax(game.resGameConfig.cardUpdMax_tradeLv);
            legionData.setCultureLvMax(game.resGameConfig.cardUpdMax_cultureLv);
            legionData.setMiracleNow(game.resGameConfig.cardUpdMax_miracle);
            legionData.setMilitaryAcademyLv(game.resGameConfig.cardUpdMax_militaryAcademyLv);
            legionData.setInfantryCardMax( game.resGameConfig.cardUpdMax_infantryCardLv);
            legionData.setArmorCardMax(game.resGameConfig.cardUpdMax_armorCardLv);
            legionData.setArtilleryCardMax( game.resGameConfig.cardUpdMax_artilleryCardLv);
            legionData.setNavyCardMax(game.resGameConfig.cardUpdMax_navyCardLv);
            legionData.setAirCardMax(game.resGameConfig.cardUpdMax_airCardLv);
            legionData.setNuclearCardMax( game.resGameConfig.cardUpdMax_nuclearCardLv);
            legionData.setMissileCardMax( game.resGameConfig.cardUpdMax_missileCardLv);
            legionData.setSubmarineCardMax(game.resGameConfig.cardUpdMax_submarineCardLv);
            legionData.setDefenceCardMax( game.resGameConfig.cardUpdMax_defenceCardLv);
            legionData.setGeneralCardMax(game.resGameConfig.cardUpdMax_generalCardLv);
            legionData.setLegionRound(0);
        }
    }

    private void setBuildLvMax(int region) {
        BuildData b=getBuildDataByRegion(getRegionId(region));
        if(b!=null){
            b.setCityLvNow(10);
            b.setIndustryLvNow(10);
            b.setFoodLvNow(10);
            b.setTechLvNow(10);
            b.setEnergyLvNow(15);
            b.setTransportLvNow(10);
            b.setArmyLvNow(10);
            b.setAirLvNow(10);
            b.setSupplyLvNow(10);
            b.setDefenceLvNow(10);
            b.setMissileLvNow(10);
            b.setNuclearLvNow(10);
            b.setCultureLvNow(10);
            b.setTradeLvNow(10);
            b.updActor();
        }
    }


    private void seeAll() {
        for(int i=0;i<hexagonDatas.size;i++){
            Fb2Map.MapHexagon h=getHexagonData(i);
            h.setIfFog(1);
        }
        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
        while (itB4.hasNext()) {
            ArmyData a = itB4.next().value;
            if(a!=null&&a.armyActor==null){
                a.createActor();
            }
        }
    }

    private void gameIRWinner() {
        //Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
        //true 征服型  false 据点型
        LegionData l;
        int victoryType=masterData.getVictoryType();
        //正常任务判断
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if(b==null){
                continue;
            }
            int fd=getForeignDegree(masterData.getPlayerLegionIndex(),b.getLegionIndex());
            //0征服胜利 1夺取据点胜利  2占领目标洲际 3消灭目标国家 4占领战略区域 5守护据点胜利
            switch (victoryType){
                case 0:
                    if(!b.ifSea()&&fd!=1){
                        setRegionAllLegionIndex(b.getRegionId(),masterData.playerLegionIndex,true);
                    }
                    break;
                case 1:
                    if(fd!=1&&b.getHinge()!=0){
                        setRegionAllLegionIndex(b.getRegionId(),masterData.playerLegionIndex,true);
                    }
                    break;
                case 2:
                    if(!b.ifSea()&&fd!=1&&b.getLegionData().getInternIndex()!=0&&b.isTargetAreaZone(masterData.getVictoryTarget())){
                        setRegionAllLegionIndex(b.getRegionId(),masterData.playerLegionIndex,true);
                    }
                    break;
                case 3:
                    if(!b.ifSea()&&b.getLegionData().getCountryId()==masterData.getVictoryTarget()){
                        setRegionAllLegionIndex(b.getRegionId(),masterData.playerLegionIndex,true);
                    }
                    break;
                case 4:
                    if(fd!=1&&b.getStrategicRegion()==masterData.getVictoryTarget()){
                        setRegionAllLegionIndex(b.getRegionId(),masterData.playerLegionIndex,true);
                    }
                    break;
                case 5:
                    if(fd!=1&&b.getHinge()!=0){
                        setRegionAllLegionIndex(b.getRegionId(),masterData.playerLegionIndex,true);
                    }
                    break;
            }

        }

        if(victoryType==5){
            masterData.setRoundNow(masterData.getRoundMax()-1);
        }

    }



    public Fb2Map.MapHexagon getHexagonData(int hexagon) {
        if(hexagon>=0&&hexagon<hexagonDatas.size){
            return hexagonDatas.get(hexagon);
        }
        return null;
    }



    public GeneralData getGeneralDataByUnitHexagon(int hexagon) {
        ArmyData a=getArmyDataByHexagon(hexagon);
        if(a==null||a.getArmyHpNow()<=0){
            return null;
        }else {
            return a.getGeneralData();
        }
    }

    public String getStageName() {
     /*   if(masterData.getBtlType()==1){
            return game.gameMethod.getStrValueT(new StringBuilder("stage_name_").append(stageId).append(ComUtil.formmatNumber(masterData.getGameEpisode(),2,true,"0").toString());
        }else{

        }*/
        return game.gameMethod.getStrValueT("stage_name_"+stageId);
    }

    public boolean nextStageForEmpire() {
        roundState=1;
        masterData.setGameEpisode(masterData.getGameEpisode()+1);
        return  btlInitForEmpire(null);
    }

    public int getPlayerLastGeneral() {
        Iterator<IntMap.Entry<GeneralData>> itG = generalIDatas.iterator();
        if(masterData.playerLegionIndex==0){
            return -1;
        }

        while (itG.hasNext()) {
            GeneralData c = itG.next().value;
            if(c.getGeneralIndex()!=0&&c.getLegionIndex()==masterData.playerLegionIndex&&c.getState()==0&&((c.gE!=null&&c.gE.getInt("recruitType",0)!=1))){
                return c.getGeneralId();
            }
        }
        return -1;
    }

    public int getPlayerCountryLv() {
        LegionData l=getPlayerLegionData();
        BuildData c=l.getCapital();
        if(c!=null&&c.getIntercontinentalZone()!=0&&masterData.getPlayerMode()==0){

            int asiaACount=0;
            int asiaPCount=0;
            int europeACount=0;
            int europePCount=0;
            int northAmericaACount=0;
            int northAmericaPCount=0;
            int southAmericaACount=0;
            int southAmericaPCount=0;
            int africaACount=0;
            int africaPCount=0;
            int oceaniaACount=0;
            int oceaniaPCount=0;


            //    Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
            //  while (it.hasNext()) {
            //    IntMap.Entry<BuildData> cb = it.next();
            //  BuildData b=cb.value;
            for(int bi=0;bi<buildRDatas.size();bi++) {
                BuildData b=buildRDatas.getByIndex(bi);
                if(b.ifSea()){
                    continue;
                }
                if(b.getIntercontinentalZone()!=0){
                    switch (b.getIntercontinentalZone()){
                        case 1:
                            asiaACount++;
                            if(b.isPlayerAlly()){asiaPCount++;}
                            break;
                        case 2:
                            europeACount++;
                            if(b.isPlayerAlly()){europePCount++;}
                            break;
                        case 3:
                            northAmericaACount++;
                            if(b.isPlayerAlly()){northAmericaPCount++;}
                            break;
                        case 4:
                            southAmericaACount++;
                            if(b.isPlayerAlly()){southAmericaPCount++;}
                            break;
                        case 5:
                            africaACount++;
                            if(b.isPlayerAlly()){africaPCount++;}
                            break;
                        case 6:
                            oceaniaACount++;
                            if(b.isPlayerAlly()){oceaniaPCount++;}
                            break;
                    }
                }
            }

            int asiaR=asiaACount==0?0:asiaPCount*100/asiaACount;
            int europeR=europeACount==0?0:europePCount*100/europeACount;
            int northAmericaR=northAmericaACount==0?0:northAmericaPCount*100/northAmericaACount;
            int southAmericaR=southAmericaACount==0?0:southAmericaPCount*100/southAmericaACount;
            int africaR=africaACount==0?0:africaPCount*100/africaACount;
            int oceaniaR=oceaniaACount==0?0:oceaniaPCount*100/oceaniaACount;
            int r=0;


            switch (c.getIntercontinentalZone()){//1亚2欧3北美4南美5非6大洋洲
                case 1:
                    r= asiaR;
                case 2:
                    r= europeR;
                case 3:
                    r= northAmericaR;
                case 4:
                    r= southAmericaR;
                case 5:
                    r= africaR;
                case 6:
                    r= oceaniaR;
            }
            if(r>90){
                return 3;
            }else if(r>70){
                return 2;
            }else if(r>50){
                return 1;
            }else{
                return 0;
            }
        }
        return 0;
    }

    public String getPlayerAchievementImg(int countryLv) {
        LegionData l=getPlayerLegionData();
        BuildData c=l.getCapital();
        if(c!=null&&c.getIntercontinentalZone()!=0&&masterData.getPlayerMode()==0&&countryLv!=0){
            //1亚2欧3北美4南美5非6大洋洲
            switch (c.getIntercontinentalZone()){
                case 1:
                    return "medal_Asia_"+countryLv;
                case 2:
                    return "medal_Europe_"+countryLv;
                case 3:
                    return "medal_NorthAmerica_"+countryLv;
                case 4:
                    return "medal_SouthAmerica_"+countryLv;
                case 5:
                    return "medal_Africa_"+countryLv;
                case 6:
                    return "medal_Oceania_"+countryLv;
            }
        }
        return "medal_Africa_0";
    }

    public LegionData getLegionDataByLi(int li) {
        if(li>=0&&li<legionDatas.size){
            return legionDatas.get(li);
        }
        return null;
    }

    /*public void setHexagonDataIfDrawIsFalse() {
        for(int i=0,iMax=hexagonDatas.size;i<iMax;i++){
            hexagonDatas.get(i).ifDraw=false;
        }
    }*/


    //region 是否位于边缘  state: 0全部判断  1左边缘  2右边缘
    public boolean ifRegionInBorder(int region, int state) {
        IntArray rs=  regionHexagonMap.get(region);
        if(rs==null){
            return false;
        }
        int id,x;
        for(int i=0;i<rs.size;i++){
            id=rs.get(i);
            x=GameMap.getHX(id,masterData.getWidth());

            switch (state){
                case 0:if(x==0||x==masterData.getWidth()-1){
                    return true;
                }break;
                case 1:if(x==0){
                    return true;
                }break;
                case 2:if(x==masterData.getWidth()-1){
                    return true;
                }break;
            }
        }
        return false;
    }

    public LegionData getLegionDataByRegion(int region) {
        return getLegionDataByHexagon(getRegionId(region));
    }

    public void nextGameDifficulty() {
        masterData.gameDifficulty++;
        if(masterData.gameDifficulty>3){
            masterData.gameDifficulty=1;
        }
    }
    public void nextPlayerMode() {
        /*masterData.playerMode++;
        if(masterData.playerMode>2){
            masterData.playerMode=0;
        }*/
        int index=-1;
        for(int i = 0; i<gameModeSort.length; i++){
            if(masterData.playerMode==gameModeSort[i]){
                index=i;
                break;
            }
        }
        if(index==-1){
            masterData.setPlayerMode(1);
        }else if(index==gameModeSort.length-1){
            masterData.setPlayerMode(gameModeSort[0]);
        }else  {
            masterData.setPlayerMode(gameModeSort[index+1]);
        }
    }
    public int getCampByHexagon(int id) {
        if(id<0||id>=hexagonDatas.size){
            return -1;
        }
        return hexagonDatas.get(id).getCamp();
    }

    //0未知 1亚2欧3北美4南美5非6大洋洲
    public int getPlayerIntercontinentalZone() {
        if(masterData.getBtlType()!=0||masterData.getPlayerLegionIndex()==0){
            return 0;
        }
        BuildData b=getPlayerLegionData().getCapital();
        if(b!=null){
            return b.getIntercontinentalZone();
        }
        return 0;
    }

    public void setIfNeedDrawViewMap(boolean v) {
        ifNeedDrawViewMap=v;
    }

    public void resetLastUnitHexagon() {
        lastUnitHexagon=-1;
    }

    public boolean ifPlayerHaveCanCommandUnit() {
        Iterator<IntMap.Entry<ArmyData>> it = armyHDatas.iterator();
        while (it.hasNext()) {
            IntMap.Entry<ArmyData> c = it.next();
            ArmyData a=c.value;
            if(a!=null&&a.armyActor!=null&&a.isPlayer()&&a.getArmyRound()==0&&a.getTargetRegion()==-1&&a.armyActor.getIfFlash()){
                return true;
            }
        }
        return false;
    }

    public boolean ifPlayerHaveCanCommandBuild() {
        //     Iterator<IntMap.Entry<BuildData>> itB = buildRDatas.iterator();
        //   while (itB.hasNext()) {
        //     BuildData b=itB.next().value;
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if(b.isPlayer()&&b.getBuildRound()==0&&b.getBuildPolicy()==0){
                return true;
            }
        }
        return false;
    }

    public boolean ifPlayerHaveCanSubmitTask() {
        if(taskDatas!=null){
            for(int i=0;i<taskDatas.size;i++){
                TaskData t=taskDatas.get(i);
                if(t!=null&&t.getTaskType()!=2&&t.getCountMax()==t.getCountNow()&&t.getTaskRound()>0&&t.getCountNow()!=0){
                    return true;
                }
            }
        }
        return false;
    }
    //国策
    public boolean ifPlayerHaveCanSubmitResolution() {
        if(taskDatas!=null){
            int miracle=getPlayerLegionData().getMiracleNow();
            int round=getPlayerLegionData().getLegionRound();
            for(int i=0;i<taskDatas.size;i++){
                TaskData t=taskDatas.get(i);
                if(t!=null&&t.getTaskType()==2&&miracle>=t.getTaskLv()&&round==0){
                    return true;
                }
            }
        }
        return false;
    }
    public void buildFacility(int hexagon, int facilityId) {
        FacilityData f=new FacilityData();
        f.initFacilityData();
        f.setFacilityIndex(facilityHDatas.size);
        f.setFacilityId(facilityId);
        f.setHexagonIndex(hexagon);
        facilityHDatas.put(hexagon,f);
        f.initVirAttribute();
        f.createActor();
    }

    public void endAllTask() {
        for(int i=0;i<taskDatas.size;i++){
            TaskData t=taskDatas.get(i);
            if(t.getTaskType()!=2){
                t.setCountNow(t.getCountMax());
                if(t.getTaskRound()==0){
                    t.setTaskRound(1);
                }
            }
        }
    }


    //更新海浪数据
    private void updSeaDecorate() {
        for(int i=0;i<hexagonDatas.size;i++){
            Fb2Map.MapHexagon h=hexagonDatas.get(i);
            if(h.getBlockType()==1&&h.getBackTile()==1&&!h.ifAroundGridIsCoastSea()){
                if(ComUtil.ifGet(20)){
                    h.setForeTile(9);
                    h.setForeIdx(ComUtil.getRandom(1,8));
                    h.setOtherTile(90+h.getForeIdx());
                    h.setTile2(game.getImgLists().getTextureByName(h.getForeTile()+"_"+h.getForeIdx()));
                }else{
                    h.setOtherTile(0);
                    h.setForeTile(0);
                    h.setForeIdx(0);
                    h.setTile2(null);
                }
            }
        }
    }

    //priTriggerType 0全部满足 1只满足一条即可
    public boolean ifTriggerAllPrePolicy(String preEvent,int preTriggerType) {
        if(preEvent.equals("-1")){
            return true;
        }
        if(preTriggerType==0){//需要全部满足
            String[] strs = preEvent.split(",");
            for (int i = 0; i < strs.length; i++) {
                if (ComUtil.isNumeric(strs[i])) {
                    int e=Integer.parseInt(strs[i]);
                    if(!policyIDatas.contains(e)){
                        return false;
                    }
                }
            }
            return true;
        }else{
            String[] strs = preEvent.split(",");
            for (int i = 0; i < strs.length; i++) {
                if (ComUtil.isNumeric(strs[i])) {
                    int e=Integer.parseInt(strs[i]);
                    if(policyIDatas.contains(e)){
                        return true;
                    }
                }
            }
            return false;
        }

    }

    //是否满足所有的前置事件触发要求
    public boolean ifTriggerAllPreEvent(String preEvent,int preTriggerType) {
        if(preEvent.equals("-1")){
            return true;
        }
        if(preTriggerType==0){//需要全部满足
            String[] strs = preEvent.split(",");
            for (int i = 0; i < strs.length; i++) {
                if (ComUtil.isNumeric(strs[i])) {
                    int e=Integer.parseInt(strs[i]);
                    if(!scriptIDatas.contains(e)){
                        return false;
                    }
                }
            }
            return true;
        }else{
            String[] strs = preEvent.split(",");
            for (int i = 0; i < strs.length; i++) {
                if (ComUtil.isNumeric(strs[i])) {
                    int e=Integer.parseInt(strs[i]);
                    if(scriptIDatas.contains(e)){
                        return true;
                    }
                }
            }
            return false;
        }
    }

    //是否触发过任意一次互斥事件
    public boolean ifTriggerOneMutualEvent(String mutualEvent) {
        if(mutualEvent.equals("-1")){
            return false;
        }
        String[] strs = mutualEvent.split(",");
        for (int i = 0; i < strs.length; i++) {
            if (ComUtil.isNumeric(strs[i])) {
                int e=Integer.parseInt(strs[i]);
                if(scriptIDatas.contains(e)){
                    return true;
                }
            }
        }
        return false;
    }



    public boolean ifTriggerOneMutualPolicy(String mutualEvent) {
        if(mutualEvent.equals("-1")){
            return false;
        }
        String[] strs = mutualEvent.split(",");
        for (int i = 0; i < strs.length; i++) {
            if (ComUtil.isNumeric(strs[i])) {
                int e=Integer.parseInt(strs[i]);
                if(policyIDatas.contains(e)){
                    return true;
                }
            }
        }
        return false;
    }


    //通过history来同步信息
    public void synchronouByHistory() {
        if( historyData==null){
            // XmlReader.Element defHistory =game.gameConfig.getDEF_HISTORY().getElementById(masterData.getHistoryId());
            historyData = game.getGameFramework().getHistory(masterData.getHistoryId(),getNowYear());
        }
        IntIntMap clMap=new IntIntMap(); //country:li
        for(LegionData l:legionDatas){
            clMap.put(l.getCountryId(),l.getLegionIndex());
        }
        for(Fb2History.HistoryData h:historyData.historyDatas){
            if(h.getYear()==getNowYear()){
                if(!clMap.containsKey(h.getNowCountryIndex())){
                    int li=   createCountry(h.getNowCountryIndex(),0,0,0,100,500,3,0,0,"",true);
                    clMap.put(h.getNowCountryIndex(),li);
                }
            }
        }
        //  Iterator<IntMap.Entry<BuildData>> itB = buildRDatas.iterator();
        // while (itB.hasNext()) {
        //    BuildData b = itB.next().value;
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            Fb2History.HistoryData h=historyData.getHistoryData(masterData.getBeginYear(),b.getRegionId());
            if(h!=null){
                setRegionAllLegionIndex(b.getRegionId(),clMap.get(   h.getNowCountryIndex(),0),true);
            }
        }
    }

    public boolean air_airborne(ArmyData army, AirData air, int targetHexagon) {
        boolean rs=false;
        if(air!=null&&army!=null&&army.ifCanTransport()&&army.canMove(targetHexagon)){

            if(targetHexagon!=-1){ effectStage.drawEffect(air.getAirId(),air.getRegionId(),targetHexagon,1f);}
            int targetRegion=getRegionId(targetHexagon);
            BuildData   targetBuild=getBuildDataByRegion(targetRegion);
            if(army.armyActor==null){
                if(ifAllyPlayerByRegion(targetRegion)){
                    if(army.armyActor==null){
                        army.createActor();
                    }
                    if(army.armyActor!=null){
                        army.armyActor.moveHexagon(targetHexagon);
                    }
                }else {
                    army_Move(army,targetHexagon);
                }
                rs=true;
            }else {
                army.armyActor.moveHexagon(targetHexagon);
            }

            air.setAirGoodsNow(air.getAirGoodsNow()-1);
            rs=true;
            AirData defendAir=null,escortAir=null;
            if(targetBuild!=null&&!ifAllyByLi(targetBuild.getLegionIndex(),army.getLegionIndex())){
                if(air.triggerSkill(107)){
                    air.drawSkill(107);
                }else {
                    defendAir=targetBuild.getInterceptorAir();
                    escortAir=air.getEscortAir(targetHexagon);

                    if(defendAir!=null){//如果有截击机
                        defendAir.setAirGoodsNow(defendAir.getAirGoodsNow()-1);
                        if(escortAir!=null){//如果有护航机,则对来袭飞机的护航机进行进攻
                            airToAirCombat(defendAir,escortAir,targetHexagon,false,false);
                            escortAir.setAirGoodsNow(escortAir.getAirGoodsNow()-1);
                        }else{//否则对来袭的飞机进行交战
                            airToAirCombat(defendAir,air,targetHexagon,false,false);
                        }
                    }
                }
            }
        }
        return rs;


    }

    public void setLegionTargetAreaByCountrys(String countryId, int targetArea) {
        for(int i=0;i<legionDatas.size;i++){
            LegionData l=getLegionDataByLi(i);
            if(ComUtil.ifHaveValueInStr(countryId,l.getCountryId())){
                l.setTargetAreaZone(targetArea);
            }
        }
    }

    public void setAllLegionNeutral() {
        for(int i=0;i<legionDatas.size;i++){
            LegionData l=getLegionDataByLi(i);
            l.setInternIndex(0);
        }
    }


    //countryId是-1则全部, internCountry是0则设置阵营为自己
    public void setActLegion(String countryId, int internCountry) {
        LegionData iL=getLegionByCountry(internCountry,false);
        int intern=0;
        if(iL!=null){
            if(iL.getInternIndex()==0){
                iL.setInternIndex(iL.getLegionIndex());
            }
            intern=iL.getInternIndex();
        }
        if(countryId.equals("-1")){
            for(int i=0;i<legionDatas.size;i++){
                LegionData l=getLegionDataByLi(i);
                if(internCountry==0){
                    l.setInternIndex(l.getLegionIndex());
                }else{
                    l.setInternIndex(intern);
                }
            }
        }else{
            for(int i=0;i<legionDatas.size;i++){
                LegionData l=getLegionDataByLi(i);
                if(ComUtil.ifHaveValueInStr(countryId,l.getCountryId())){
                    if(internCountry==0){
                        l.setInternIndex(l.getLegionIndex());
                    }else{
                        l.setInternIndex(intern);
                    }
                }
            }
        }




    }





    //添加参战的延迟数据
    public void addRoundDataForJoinBattle(int sourceCountry, int internCountry, int triggerYear) {
        int round=getTriggerRound(triggerYear);
        LegionData sl=getLegionByCountry(sourceCountry,true);
        LegionData il=getLegionByCountry(internCountry,true);
        if(sl!=null&&il!=null&&round>=0&&il.getInternIndex()!=sl.getInternIndex()){
            RoundData r=new RoundData(0,2,sl.getLegionIndex(),il.getLegionIndex(),-1,-1,round,1,-1,-1);
            roundDatas.add(r);
        }
    }

    private int getTriggerRound(int triggerYear) {
        if(masterData.getRoundForYear()==0||triggerYear<masterData.beginYear){
            return 0;
        }
        return (triggerYear-masterData.beginYear) * masterData.roundForYear;

    }

    public void setPlayerVictory(int victory, int target) {
        masterData.setVictoryTarget(target);
        masterData.setVictoryType(victory);
    }

    public String getTargetStr() {

        switch (masterData.getVictoryType()){//0征服胜利 1 任务时间内占领据点胜利  2占领目标洲际 3消灭目标国家 4占领战略区域 5任务时间内防守据点胜利
            case 0:
                return game.gameMethod.getStrValue("victory_0");
            case 1:
                return game.gameMethod.getStrValue("victory_1");
            case 2:
                return game.gameMethod.getStrValueT("victory_2","zoneName_"+masterData.getVictoryTarget());
            case 3:
                return game.gameMethod.getStrValueT("victory_3","country_name_"+masterData.getVictoryTarget());
            case 4:
                return game.gameMethod.getStrValueT("victory_4","strategicRegion_"+masterData.getVictoryTarget());
            case 5:
                return game.gameMethod.getStrValue("victory_5");
        }
        return game.gameMethod.getStrValue("victory_0");
    }

    public boolean srRegionIfHaveLi(int srRegion,int li) {
        if(srRegion==-1){
            return false;
        }
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if(b!=null&&b.strategicRegion==srRegion&&b.getLegionIndex()==li){
                return true;
            }
        }
        return false;
    }
    public boolean srRegionIfAIControl(int srRegion) {
        if(srRegion==-1){
            return true;
        }
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if(b!=null&&b.strategicRegion==srRegion&&b.getLegionIndex()==masterData.getPlayerLegionIndex()){
                return false;
            }
        }
        return true;
    }

    public boolean countrysIsAi(String triggerCountry) {
        if(!triggerCountry.equals("-1")){
            for(int i=0;i<legionDatas.size;i++){
                LegionData l=legionDatas.get(i);
                if(l.isPlayer()&&ComUtil.ifHaveValueInStr(triggerCountry,l.getCountryId())){
                    return false;
                }
            }
        }
        return true;
    }
    public boolean legionsIsAi(String liStrs) {
        String[] lis=liStrs.split(",");
        if(lis.length>0){
            for(int i=0;i<legionDatas.size;i++){
                LegionData l=legionDatas.get(i);
                if(l!=null&&l.isPlayer()){
                    return false;
                }
            }
        }
        return true;
    }

    public void legion_Surrender(String sourceLis, int targetLi,boolean resetPlayer) {
        if(sourceLis.equals("-1")||targetLi==-1){
            return;
        }
        String[] str=sourceLis.split(",");
        for(int bi=0;bi<buildRDatas.size();bi++){
            BuildData b=buildRDatas.getByIndex(bi);
            if(b!=null&&ComUtil.ifHaveValueInStrArrays(str,b.getLegionIndex())){
                setRegionAllLegionIndex(b.getRegionId(),targetLi,false);
            }
        }

        for(int i=0;i<str.length;i++){
            if(ComUtil.isNumeric(str[i])){
                LegionData l=getLegionDataByLi(Integer.parseInt(str[i]));
                if(l!=null){
                    l.setInternIndex(0);
                    l.setSuzerainLi(0);
                    l.varRegionCount=0;
                }
            }
        }

        if(resetPlayer&&ComUtil.ifHaveValueInStrArrays(str,getPlayerLegionData().getLegionIndex())){
            setPlayerLegionIndex(targetLi);
        }
    }


    public void legion_CountrySurrender(String sourceCountrys, int targetCountry,boolean resetPlayer) {
        if(sourceCountrys.equals("-1")||targetCountry==-1){
            return;
        }
        LegionData tl=getLegionByCountry(targetCountry,false);
        if(tl==null){
            return;
        }
        String[] str=sourceCountrys.split(",");
        for(int bi=0;bi<buildRDatas.size();bi++){
            BuildData b=buildRDatas.getByIndex(bi);
            if(b!=null&&ComUtil.ifHaveValueInStrArrays(str,b.getCountryId())){
                setRegionAllLegionIndex(b.getRegionId(),tl.getLegionIndex(),false);
            }
        }

        for(int i=0;i<str.length;i++){
            if(ComUtil.isNumeric(str[i])){
                LegionData l=getLegionByCountry(Integer.parseInt(str[i]),true);
                if(l!=null){
                    l.setInternIndex(0);
                    l.setSuzerainLi(0);
                    l.varRegionCount=0;
                }
            }
        }
        if(resetPlayer&&ComUtil.ifHaveValueInStrArrays(str,getPlayerLegionData().getCountryId())){
            setPlayerLegionIndex(tl.getLegionIndex());
        }
    }

    public void legion_GetSRRegion(int legionIndex, boolean ifCoreSRRegion, boolean ifMajorSRRegion,boolean ifChangeAll) {
        LegionData l=getLegionDataByLi(legionIndex);
        if(l==null){
            return;
        }
        if(ifCoreSRRegion&&l.coreAreaRegions!=null){
         //   String[] regions =l.coreAreaRegions.split(",");
            int cr;
            for (int i = 0; i < l.coreAreaRegions.size; i++) {
                cr = l.coreAreaRegions.get(i);
                BuildData b=getBuildDataByRegion(cr);
                if(b!=null&&b.getLegionIndex()!=legionIndex){
                    setRegionAllLegionIndex(b.getRegionId(),legionIndex,ifChangeAll);
                }
            }
        }
        if(ifMajorSRRegion&&l.majorAreaRegions!=null){
           // String[] regions =l.majorAreaRegions.split(",");
            int cr;
            for (int i = 0; i < l.majorAreaRegions.size; i++) {
                cr = l.majorAreaRegions.get(i);
                BuildData b=getBuildDataByRegion(cr);
                if(b!=null&&b.getLegionIndex()!=legionIndex){
                    setRegionAllLegionIndex(b.getRegionId(),legionIndex,ifChangeAll);
                }
            }
        }
    }
    //邀请进攻
    public void legion_inviteAttack(LegionData legion, LegionData targetLegion) {
        for(int i=0;i<legionDatas.size;i++){
            LegionData allyL=getLegionDataByLi(i);
            ForeignData f=  getForeignData(targetLegion.getLegionIndex(),allyL.getLegionIndex());
            if(f!=null&&getForeignDegree(allyL.getLegionIndex(),legion.getLegionIndex())==1&&getForeignDegree(allyL.getLegionIndex(),targetLegion.getLegionIndex())==0&&ComUtil.ifGet(100-f.getRealFavor())){//敌人
                legion_DeclareWar(allyL,targetLegion,true);
            }
        }
    }

    //是否执行
    public int getChiefHarmony() {
        if(masterData.ifChief==1&&chiefData!=null){
            return chiefData.getPlayerHarmony();
        }
        return 0;
    }
    public int getChiefWarSupport(){//默认是50
        if(masterData.ifChief==1&&chiefData!=null){
            return chiefData.getWarSupport();
        }
        return 50;
    }
    public int getChiefLiteracy(){//默认是100
        if(masterData.ifChief==1&&chiefData!=null){
            return chiefData.getLiteracy();
        }
        return 100;
    }

    public int getChiefReputation() {
        if(masterData.ifChief==1&&chiefData!=null){
            return chiefData.getReputation();
        }
        return 50;
    }
    public int getChangeHarmony(BtlModule bm){
        if(masterData.ifChief==0||chiefData==null){
            return 0;
        }
        int harmony=0;
        for(int i=0;i<20;i++){
            int oCS=chiefData.getChiefValue(i+1);
            int nCS=bm.getBMValue(i+3);
            if(oCS!=nCS){
                XmlReader.Element oXmlE=game.gameConfig.getChiefBuffXmlE(i+1,oCS);
                XmlReader.Element nXmlE=game.gameConfig.getChiefBuffXmlE(i+1,nCS);
                if(oXmlE!=null&&nXmlE!=null){
                    harmony+=oXmlE.getInt("harmonyLoss",0)+nXmlE.getInt("harmonyCost",0);
                }
            }
        }
        return harmony;
    }

    //提交议案
    public boolean submitPolityBill(BtlModule bm) {
        if(masterData.ifChief==0||chiefData==null){
            return false;
        }
        int changeH=getChangeHarmony(bm);
        int rs;
        if(changeH==0){
            rs=100;
        }else{
            rs=chiefData.getPlayerHarmony()+changeH;
        }
        if(getPlayerLegionData().tradeCount>0){
            getPlayerLegionData().tradeCount--;
        }
        if(ComUtil.ifGet(rs)){
            transChiefDataByBtlModule(bm,chiefData);
            chiefData.setPlayerHarmony(rs);
            return true;
        }
        return false;
    }

    //设定势力圈成功率
    public int getSetInfluenceChance(BuildData build, int li) {
        int chance=0;
        LegionData nl=getLegionDataByLi(li);
        LegionData bl=build.getInfluenceLegionData();
        if(nl!=bl&&nl.getLegionIndex()!=bl.getLegionIndex()){
            chance=ComUtil.max((nl.varRegionCount+1)*100/ (nl.varRegionCount+bl.varRegionCount+1), (nl.incomeMoney+1)*100/(nl.incomeMoney+bl.incomeMoney+1));
        }
        return chance;
    }

    public int getIndependentChance(LegionData legion) {
        if(legion==null||legion.getSuzerainLi()==0){
            return 0;
        }
        LegionData sl=legion.getSuzerainLegionData();
        if(sl!=legion&&sl.getLegionIndex()!=legion.getLegionIndex()){
            return ComUtil.max((legion.getAllArmySumNum()+1)*100/ (sl.getAllArmySumNum()+legion.getAllArmySumNum()+1), (legion.incomeMoney+1)*100/(legion.incomeMoney+sl.incomeMoney+1));
        }
        return 0;
    }
    //修建铁路
    public void buildRailway(int hexagon) {
        Fb2Map.MapHexagon mapHexagon=getHexagonData(hexagon);
        if(mapHexagon!=null){
            mapHexagon.setOtherTile(1);
            mapHexagon.updHexagonBorderAttribute();
            FortData f=getFortDataByHexagon(hexagon);
            if(f!=null){
                f.death();
            }
            for(int d=1;d<=6;d++){
                int id=getBorderIdByDirect(hexagon,d);
                if(ifGridIsPass(id)){
                    mapHexagon=getHexagonData(id);
                    if(mapHexagon!=null){
                        if(mapHexagon.getOtherTile()==1){
                            mapHexagon.updHexagonBorderAttribute();
                        }
                    }
                }
            }
        }
    }

    public int getBuildRailWayRound(BuildData build, int hexagon) {
        if(isEditMode(true)){
            return 0;
        }
        Fb2Map.MapHexagon mapHexagon=getHexagonData(hexagon);
        if(mapHexagon!=null&&build!=null){
            int cost=getMoveCost(hexagon);
            return ComUtil.limitValue(cost-build.getTransportLvNow()/2,1,build.getTransportLvNow());
        }
        return 1;
    }

    public void updRailwayRailwayId(int hexagon, int type) {
        Fb2Map.MapHexagon mapHexagon=getHexagonData(hexagon);
        if(mapHexagon!=null){
            mapHexagon.updHexagonBorderAttribute();
            if(mapHexagon.getOtherTile()==1&&type==0){
                FortData f=getFortDataByHexagon(hexagon);
                if(f!=null){
                    f.death();
                }
            }
            for(int d=1;d<=6;d++){
                int id=getBorderIdByDirect(hexagon,d);
                if(ifGridIsPass(id)){
                    mapHexagon=getHexagonData(id);
                    if(mapHexagon.getOtherTile()==1){
                        mapHexagon.updHexagonBorderAttribute();
                    }
                }
            }
        }

    }

    public int getPlayerCanMoveHexagon(ArmyData armyData, int targetHexagon) {
        if(armyData.getMovement()==0){
            return targetHexagon;
        }
        int hexagon=targetHexagon;

        IntArray rs=game.tempUtil.getTempIntArray();
        mapbin.getMoveGrid(armyData.getHexagonIndex(),targetHexagon,armyData.getIfSeaForMove()?11:0 ,rs);
        if(rs.size>0){
            if(rs.contains(targetHexagon)){//如果可以移动到位置,对路径上的点进行判断
                for(int i=0;i<rs.size;i++){
                    int id=rs.get(i);
                    if(ifBorderHaveHiddenEnemy(id,armyData.getLegionIndex())){
                        hexagon=id;
                        break;
                    }
                }
            }else{//如果不可以移动到位置,则获取最后的点
                for(int i=0;i<rs.size;i++){
                    int id=rs.get(i);
                    hexagon=id;
                    if(ifBorderHaveHiddenEnemy(id,armyData.getLegionIndex())){
                        break;
                    }
                }
            }
        }
        game.tempUtil.disposeTempIntArray(rs);
        return hexagon;
    }

    public boolean ifBorderHaveHiddenEnemy(int hexagon,int li) {
        for(int i=0;i<=6;i++){
            ArmyData a=getArmyDataByHexagon(getBorderIdByDirect(hexagon,i));
            if(a!=null&&a.armyActor==null&&getForeignDegree(a.getLegionIndex(),li)!=1){
                return true;
            }
        }
        return false;
    }

    public boolean isSuzLegion(int li1, int li2) {
        LegionData l1=getLegionDataByLi(li1);
        LegionData l2=getLegionDataByLi(li2);
        if(l1!=null&&l2!=null){
            if((l1.getSuzerainLi()==li2)||(l2.getSuzerainLi()==li1)){
                return true;
            }
        }
        return false;
    }

    public boolean canGetSpirit(int li) {
        LegionData l=getLegionDataByLi(li);
        if(l!=null&& ifSystemEffective(16)){
            int spiritId=game.gameConfig.getDEF_COUNTRY().getElementById(l.getCountryId()).getInt("spiritId",-1);
            if(spiritId!=-1){
                if(spiritMap!=null&&spiritMap.containsKey(spiritId)){
                    return false;
                }
                XmlReader.Element xmlE=game.gameConfig.getDEF_SPIRIT().getElementById(spiritId);
                if(xmlE!=null){
                    int type=xmlE.getInt("type",-1);
                    if(type==-1|| (getPlayerAmbition()>100&&type==1)||  (getPlayerAmbition()<100&&type==2) ){
                        return false;
                    }
                    return true;
                }
            }
        }
        return false;
    }

    public int getSpiritEffect(int spiritId) {
        if(spiritMap==null){
            return 0;
        }
        return   spiritMap.get(spiritId,0);
    }

    //判断两个国家是否是友好国家
    public boolean ifFriendlyCountry(String countrys, int countryId) {
        if(ComUtil.isEmpty(countrys)){
            return false;
        }
        if(ComUtil.isNumeric(countrys)&&Integer.parseInt(countrys)==countryId){
            return true;
        }
        LegionData sl=getLegionByCountry(countryId,true);
        if(sl!=null){
            String[] strs = countrys.split(",");
            for (int i = 0; i < strs.length; i++) {
                if (ComUtil.isNumeric(strs[i]) ) {
                    int cId=Integer.parseInt(strs[i]);
                    if( cId == countryId){
                        return true;
                    }
                    LegionData tl=getLegionByCountry(cId,true);
                    if(tl!=null&&tl.getInternIndex()>0&&tl.varRegionCount>0){
                        ForeignData f=getForeignData(sl.getLegionIndex(),tl.getLegionIndex());
                        int fd=getForeignDegree(sl.getLegionIndex(),tl.getLegionIndex());
                        if(f!=null){
                            if(fd!=-1&&(f.getRealFavor()>70)){
                                return true;
                            }
                        }else if(fd==1){
                                return true;
                        }
                    }else{//判断历史国家关系
                        Array<XmlReader.Element> daEs=game.gameConfig.getDEF_DIPLOMATICATTITUDE().e.getChildrenByName("diplomaticAttitude");
                        for(XmlReader.Element daE:daEs){
                            int c1=daE.getInt("sourceCountry",0);
                            int c2=daE.getInt("targetCountry",0);
                            if((cId==c1&&countryId==c2)||(cId==c2&&countryId==c1)){
                               int diplomaticAttitude=(daE.getInt("attitude",0));
                                if(diplomaticAttitude==2){
                                    return true;
                                }else if(diplomaticAttitude==3){
                                    return false;
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    public Array<Fb2Map.MapHexagon> getLandMapHexagons(Array<Fb2Map.MapHexagon> rs) {
        if(rs==null){
            rs=new Array<>();
        }else{
            rs.clear();
        }
        for(int i=0;i<hexagonDatas.size;i++){
            Fb2Map.MapHexagon hexagon=hexagonDatas.get(i);
            if(!hexagon.isSea()){
                rs.add(hexagon);
            }
        }
        return rs;
    }

    public Array<Fb2Map.MapHexagon> getSeaMapHexagons(Array<Fb2Map.MapHexagon> rs) {
        if(rs==null){
            rs=new Array<>();
        }else{
            rs.clear();
        }
        for(int i=0;i<hexagonDatas.size;i++){
            Fb2Map.MapHexagon hexagon=hexagonDatas.get(i);
            if(hexagon.isSea()){
                rs.add(hexagon);
            }
        }
        return rs;
    }

    public void addThankRDialogue(int tLi) {
        LegionData l=getLegionDataByLi(tLi);
        if(l!=null&&!l.isPlayer()){//int countryId,GeneralData g,int dialogueIdType,String value
            GeneralData g=getMaxRankGeneralData(tLi,true);
            if(g!=null){
                addDialogueData(l.getCountryId(),g,21,"",true);
            }
        }
    }

    public void addWarnRDialogue(int tLi) {
        LegionData l=getLegionDataByLi(tLi);
        if(l!=null&&!l.isPlayer()){//int countryId,GeneralData g,int dialogueIdType,String value
            GeneralData g=getMaxRankGeneralData(tLi,true);
            if(g!=null){
                addDialogueData(l.getCountryId(),g,20,"",true);
            }
        }
    }
    //index 1~5
    public boolean checkConquestTask(int index) {
        if(masterData.getBtlType()!=0){
            return false;
        }
        LegionData pl=getPlayerLegionData();
        switch (index){
            case 1:
                if(pl.ifHaveAllTerritory()&&pl.varRegionCount>15){//全部领土掌握且控制不少于15快区域
                    return true;
                }
                break;
            case 2:
                if(pl.ifControlIntercontinent()){//控制洲域
                    return true;
                }
                break;
            case 3:
                if(pl.getSuzerainLi()==0&&pl.notHostilityLegion()){//独立且无敌对国或世仇存活
                    return true;
                }
                break;
            case 4:
                if(pl.ifFirstMilitary()||pl.ifFirstRegion()||pl.ifFirstTech()){//自己拥有最强军力/领土/科技
                    return true;
                }
                break;
            case 5:
                int round= (int) (masterData.getRoundMax()* DefDAO.getRoundRate(masterData.getGameDifficulty()));
                if(masterData.getRoundNow()<round){
                    return true;
                }
                break;
        }
        return false;
    }

    public String getCheckConquestStr(int index) {
        LegionData pl=getPlayerLegionData();
        switch (index){
            case 1:
            {
                boolean ifHaveAllTerritory=pl.ifHaveAllTerritory();
                boolean if15Region=pl.varRegionCount>15;
                if(ifHaveAllTerritory){
                    return game.gameMethod.getStrValue("conquestTaskInfo_1",ifHaveAllTerritory?ResDefaultConfig.StringName.markTrue:ResDefaultConfig.StringName.markFalse,if15Region?ResDefaultConfig.StringName.markTrue:ResDefaultConfig.StringName.markFalse);
                }else {
                    return game.gameMethod.getStrValue("conquestTaskInfo_1",ifHaveAllTerritory?ResDefaultConfig.StringName.markTrue:ResDefaultConfig.StringName.markFalse,if15Region?ResDefaultConfig.StringName.markTrue:ResDefaultConfig.StringName.markFalse)+
                            "\n"+game.gameMethod.getStrValue("conquestTaskInfo_1_i",pl.getNotContralTerritoryStrs(10));
                }
            }
            case 2:
            {
                if(checkConquestTask(2)){
                    return game.gameMethod.getStrValueT("conquestTaskInfo_2","zoneName_"+pl.getCapital().getIntercontinentalZone()*10,ResDefaultConfig.StringName.markTrue);
                }else{
                    return game.gameMethod.getStrValueT("conquestTaskInfo_2","zoneName_"+pl.getCapital().getIntercontinentalZone()*10,ResDefaultConfig.StringName.markFalse)+
                            "\n"+game.gameMethod.getStrValue("conquestTaskInfo_2_i",pl.getNotContralIntercontinentalZoneStrs(9));
                }
            }
            case 3:
            {
                if(pl.notHostilityLegion()){
                    return game.gameMethod.getStrValue("conquestTaskInfo_3",pl.getSuzerainLi()==0?ResDefaultConfig.StringName.markTrue:ResDefaultConfig.StringName.markFalse,ResDefaultConfig.StringName.markTrue);
                }else{
                    return game.gameMethod.getStrValue("conquestTaskInfo_3",pl.getSuzerainLi()==0?ResDefaultConfig.StringName.markTrue:ResDefaultConfig.StringName.markFalse,ResDefaultConfig.StringName.markFalse)+
                            "\n"+game.gameMethod.getStrValue("conquestTaskInfo_3_i",pl.getHostilityLegionStrs(10));
                }
            }
            case 4:{
                return game.gameMethod.getStrValue("conquestTaskInfo_4",pl.ifFirstMilitary()?ResDefaultConfig.StringName.markTrue:ResDefaultConfig.StringName.markFalse,pl.ifFirstRegion()?ResDefaultConfig.StringName.markTrue:ResDefaultConfig.StringName.markFalse,pl.ifFirstTech()?ResDefaultConfig.StringName.markTrue:ResDefaultConfig.StringName.markFalse);
            }
            case 5:{
                int round= (int) (masterData.getRoundMax()* DefDAO.getRoundRate(masterData.getGameDifficulty()));
                return game.gameMethod.getStrValue("conquestTaskInfo_5",round,masterData.getRoundNow()<round?ResDefaultConfig.StringName.markTrue:ResDefaultConfig.StringName.markFalse);
            }
        }

        return "";
    }

    public boolean ifHaveImageBg() {
        if(mapbin!=null&&mapbin.mapImage!=null){
            return true;
        }
        return false;
    }

    public void checkMassesDemand() {
        //检测之前的改革是否成功,不成功发生暴动
        if(chiefData!=null&&chiefData.massesDemandType >0){
            if(checkReform()){//检测改革,成功则
                chiefData.massesDemandType =-1;
            }
        }
    }
    //国家之间和平
    public boolean countrysPeace(String countrys,int masterCountry,int enemyCountry, int round, boolean ifChangeArea) {
        IntArray rs=game.tempUtil.getTempIntArray();
        String[] strs = countrys.split(",");
        int masterLi=-1;
        int masterNum=0;
        boolean flag=false;
        LegionData ml=null;
        boolean ifSelectMaster=true;//自动选择实力最高的国家当领导
        if(masterCountry>0){
            ml=getLegionByCountry(masterCountry,true);
            if(ml!=null){
                masterLi=ml.getLegionIndex();
                masterNum=ml.getAllArmySumNum();
                ifSelectMaster=false;
            }
        }
        for (int i = 0; i < strs.length; i++) {
            if (ComUtil.isNumeric(strs[i]) ) {
                LegionData l=getLegionByCountry(i,true);
                if(l!=null&&!rs.contains(l.getLegionIndex())){
                    rs.add(l.getLegionIndex());
                    if(ifSelectMaster){//自动选择实力最高的国家当领导
                        if(l.getAllArmySumNum()>masterNum){
                            masterNum=l.getAllArmySumNum();
                            masterLi=l.getLegionIndex();
                            ml=l;
                        }
                    }
                }
            }
        }
        int enemyLi=-1;
        LegionData el=getLegionByCountry(enemyCountry,true);
        if(el!=null){
            enemyLi=el.getLegionIndex();
        }
        if(rs.size>0&&ml!=null){
            flag=   legion_setLegionsAlly(masterLi,enemyLi,round,ifChangeArea,rs);
        }
        game.tempUtil.disposeTempIntArray(rs);
        return flag;
    }

    public void setCountrySuzerain(String checkCountrys,int country, int suzerainCountry) {
        LegionData l1=getLegionByCountry(country,true);
        LegionData l2=getLegionByCountry(suzerainCountry,true);
        if(l1!=null&&l2!=null&&(checkCountrys.equals("-1")||(ComUtil.ifHaveValueInStr(checkCountrys,l1.getSuzerainCountry())))){
            l1.setSuzerainLi(l2.getLegionIndex());
        }
    }

    public void countryDeclareWar(int sourceCountry, int targetCountry,boolean ifRelevancy) {
        LegionData l1=getLegionByCountry(sourceCountry,true);
        LegionData l2=getLegionByCountry(targetCountry,true);
        if(l1!=null&&l2!=null){
           legion_DeclareWar(l1,l2,ifRelevancy);
        }
    }


    //主数据
    public class MasterData {
        private int playerRebirth;//轮回次数

        public int getPlayerRebirth() {
            return playerRebirth;
        }

        public void setPlayerRebirth(int playerRebirth) {
            this.playerRebirth = ComUtil.limitValue(playerRebirth, 0, 65525);
        }

        private int gameStatu;//游戏状态 0 剧本未结束  1剧本结束

        public int getGameStatu() {
            return gameStatu;
        }

        public void setGameStatu(int gameStatu) {
            this.gameStatu = ComUtil.limitValue(gameStatu, 0, 255);
        }

        private int btlType;//btl类型 0征服 1帝国  2历史

        public int getBtlType() {
            return btlType;
        }

        public void setBtlType(int btlType) {
            this.btlType = ComUtil.limitValue(btlType, 0, 255);
        }

        private int mapLandBase;//地图底色

        public int getMapLandBase() {
            return mapLandBase;
        }

        public void setMapLandBase(int mapLandBase) {
            this.mapLandBase = ComUtil.limitValue(mapLandBase, 0, 255);
        }

        private int mapSeaBase;//海洋底色

        public int getMapSeaBase() {
            return mapSeaBase;
        }

        public void setMapSeaBase(int mapSeaBase) {
            this.mapSeaBase = ComUtil.limitValue(mapSeaBase, 0, 255);
        }

        private int ifColor;//是否开启地图色 0关闭1开启

        public int getIfColor() {
            return ifColor;
        }

        public void setIfColor(int ifColor) {
            this.ifColor = ComUtil.limitValue(ifColor, 0, 255);
        }

        private int ifFog;//是否开启迷雾 0关闭1开启

        public int getIfFog() {
            return ifFog;
        }

        public void setIfFog(int ifFog) {
            this.ifFog = ComUtil.limitValue(ifFog, 0, 255);
        }

        private int ifChief;//0关闭1开启

        public int getIfChief() {
            return ifChief;
        }

        public void setIfChief(int ifChief) {
            this.ifChief = ComUtil.limitValue(ifChief, 0, 255);
        }

        private int ifWeather;//是否开启历史buff

        public int getIfWeather() {
            return ifWeather;
        }

        public void setIfWeather(int ifWeather) {
            this.ifWeather = ComUtil.limitValue(ifWeather, 0, 255);
        }

        private int mapId;//地图文件  不为0时则是预加载地图

        public int getMapId() {
            return mapId;
        }

        public void setMapId(int mapId) {
            this.mapId = ComUtil.limitValue(mapId, 0, 65525);
        }

        private int startX;//地图X坐标

        public int getStartX() {
            return startX;
        }

        public void setStartX(int startX) {
            this.startX = ComUtil.limitValue(startX, 0, 65525);
        }

        private int startY;//地图Y坐标

        public int getStartY() {
            return startY;
        }

        public void setStartY(int startY) {
            this.startY = ComUtil.limitValue(startY, 0, 65525);
        }

        private int width;//地图长

        public int getWidth() {
            return width;
        }

        public void setWidth(int width) {
            this.width = ComUtil.limitValue(width, 0, 65525);
        }

        private int height;//地图宽

        public int getHeight() {
            return height;
        }

        public void setHeight(int height) {
            this.height = ComUtil.limitValue(height, 0, 65525);
        }

        private int bf19;//外交方针

        public int getBf19() {
            return bf19;
        }

        public void setBf19(int bf19) {
            this.bf19 = ComUtil.limitValue(bf19, 0, 255);
        }

        private int bf20;//外交预算

        public int getBf20() {
            return bf20;
        }

        public void setBf20(int bf20) {
            this.bf20 = ComUtil.limitValue(bf20, 5, 100);
        }

        private int roundMax;//回合上限

        public int getRoundMax() {
            return roundMax;
        }

        public void setRoundMax(int roundMax) {
            this.roundMax = ComUtil.limitValue(roundMax, 0, 65525);
        }

        private int roundNow;//当前回合

        public int getRoundNow() {
            return roundNow;
        }

        public void setRoundNow(int roundNow) {
            this.roundNow = ComUtil.limitValue(roundNow, 0, 65525);
        }

        private int roundForYear;//1年多少回合

        public int getRoundForYear() {
            return roundForYear;
        }

        public void setRoundForYear(int roundForYear) {
            this.roundForYear = ComUtil.limitValue(roundForYear, 0, 255);
        }

        private int beginYear;//开始年

        public int getBeginYear() {
            return beginYear;
        }

        public void setBeginYear(int beginYear) {
            this.beginYear = ComUtil.limitValue(beginYear, 0, 65525);
        }


        private int victoryType;//0征服胜利 1 占领目标  2占领目标洲际 3消灭目标国家 4占领战略区域 5守护目标


        public int getVictoryType() {
            return victoryType;
        }

        public void setVictoryType(int victoryType) {
            this.victoryType = ComUtil.limitValue(victoryType, 0, 255);
        }

        private int incomeRate;//总收入加成

        public int getIncomeRate() {
            return incomeRate;
        }

        public void setIncomeRate(int incomeRate) {
            this.incomeRate = ComUtil.limitValue(incomeRate, 0, 255);
        }

        private int airAddRange;//飞机范围加成

        public int getAirAddRange() {
            return airAddRange;
        }

        public void setAirAddRange(int airAddRange) {
            this.airAddRange = ComUtil.limitValue(airAddRange, 0, 255);
        }

        private int unitAddMove;//单位是否增加移动力

        public int getUnitAddMove() {
            return unitAddMove;
        }

        public void setUnitAddMove(int unitAddMove) {
            this.unitAddMove = ComUtil.limitValue(unitAddMove, 0, 255);
        }

        private int ifHaveAutoBuild;//是否自动建造过 0否 1是

        public int getIfHaveAutoBuild() {
            return ifHaveAutoBuild;
        }

        public void setIfHaveAutoBuild(int ifHaveAutoBuild) {
            this.ifHaveAutoBuild = ComUtil.limitValue(ifHaveAutoBuild, 0, 255);
        }

        private int historyId;//历史编号

        public int getHistoryId() {
            return historyId;
        }

        public void setHistoryId(int historyId) {
            this.historyId = ComUtil.limitValue(historyId, 0, 65525);
        }

        private int gameEpisode;//游戏进度,帝国模式的stage, 如果是99,则为新世界征服

        public int getGameEpisode() {
            return gameEpisode;
        }

        public void setGameEpisode(int gameEpisode) {
            this.gameEpisode = ComUtil.limitValue(gameEpisode, 0, 255);
        }

        private int bf16;//与政府的

        public int getBf16() {
            return bf16;
        }

        public void setBf16(int bf16) {
            this.bf16 = ComUtil.limitValue(bf16, 0, 255);
        }

        private int bf17;//军事预算 废弃

        public int getBf17() {
            return bf17;
        }

        public void setBf17(int bf17) {
            this.bf17 = ComUtil.limitValue(bf17, 0, 255);
        }

        private int gameDifficulty;//游戏难度
        //征服模式 (1-3,0设定为原税率) 非玩家盟友国税率=Difficulty*原税率
        //帝国模式 (1-5,0设定为50) 给予税率 50* Difficulty

        public int getGameDifficulty() {
            if(game.gameConfig.ifLeisureMode){
                return 1;
            }
            return gameDifficulty;
        }

        public void setGameDifficulty(int gameDifficulty) {
            this.gameDifficulty = ComUtil.limitValue(gameDifficulty, 0, 255);
        }

        private int bf18;//

        public int getBf18() {
            return bf18;
        }

        public void setBf18(int bf18) {
            this.bf18 = ComUtil.limitValue(bf18, 0, 100);
        }



        private int legionsCount;//军团总数

        public int getLegionsCount() {
            return legionsCount;
        }

        public void setLegionsCount(int legionsCount) {
            this.legionsCount = ComUtil.limitValue(legionsCount, 0, 65525);
        }

        private int strategysCount;//战略总数

        public int getStrategysCount() {
            return strategysCount;
        }

        public void setStrategysCount(int strategysCount) {
            this.strategysCount = ComUtil.limitValue(strategysCount, 0, 65525);
        }

        private int generalsCount;//将军总数

        public int getGeneralsCount() {
            return generalsCount;
        }

        public void setGeneralsCount(int generalsCount) {
            this.generalsCount = ComUtil.limitValue(generalsCount, 0, 65525);
        }

        private int buildsCount;//建筑总数

        public int getBuildsCount() {
            return buildsCount;
        }

        public void setBuildsCount(int buildsCount) {
            this.buildsCount = ComUtil.limitValue(buildsCount, 0, 65525);
        }

        private int facilitysCount;//设施总数 废弃

        public int getFacilitysCount() {
            return facilitysCount;
        }

        public void setFacilitysCount(int facilitysCount) {
            this.facilitysCount = ComUtil.limitValue(facilitysCount, 0, 65525);
        }

        private int nuclearsCount;//超武总数

        public int getNuclearsCount() {
            return nuclearsCount;
        }

        public void setNuclearsCount(int nuclearsCount) {
            this.nuclearsCount = ComUtil.limitValue(nuclearsCount, 0, 65525);
        }

        private int airforcesCount;//空军总数

        public int getAirforcesCount() {
            return airforcesCount;
        }

        public void setAirforcesCount(int airforcesCount) {
            this.airforcesCount = ComUtil.limitValue(airforcesCount, 0, 65525);
        }

        private int armysCount;//兵种总数

        public int getArmysCount() {
            return armysCount;
        }

        public void setArmysCount(int armysCount) {
            this.armysCount = ComUtil.limitValue(armysCount, 0, 65525);
        }

        private int trapsCount;//陷阱总数 废弃

        public int getTrapsCount() {
            return trapsCount;
        }

        public void setTrapsCount(int trapsCount) {
            this.trapsCount = trapsCount;
        }

        private int diplomacysCount;//外交总数

        public int getDiplomacysCount() {
            return diplomacysCount;
        }

        public void setDiplomacysCount(int diplomacysCount) {
            this.diplomacysCount = ComUtil.limitValue(diplomacysCount, 0, 65525);
        }

        private int internsCount;//组织总数

        public int getInternsCount() {
            return internsCount;
        }

        public void setInternsCount(int internsCount) {
            this.internsCount = ComUtil.limitValue(internsCount, 0, 65525);
        }

        private int tradesCount;//外贸总数

        public int getTradesCount() {
            return tradesCount;
        }

        public void setTradesCount(int tradesCount) {
            this.tradesCount = ComUtil.limitValue(tradesCount, 0, 65525);
        }

        private int tasksCount;//条约总数

        public int getTasksCount() {
            return tasksCount;
        }

        public void setTasksCount(int tasksCount) {
            this.tasksCount = ComUtil.limitValue(tasksCount, 0, 65525);
        }

        private int delaysCount;//延迟区域总数

        public int getDelaysCount() {
            return delaysCount;
        }

        public void setDelaysCount(int delaysCount) {
            this.delaysCount = ComUtil.limitValue(delaysCount, 0, 65525);
        }

        private int hexagonsCount;//自然总数

        public int getHexagonsCount() {
            return hexagonsCount;
        }

        public void setHexagonsCount(int hexagonsCount) {
            this.hexagonsCount = hexagonsCount;
        }

        private int eventsCount;//事件总数

        public int getEventsCount() {
            return eventsCount;
        }

        public void setEventsCount(int eventsCount) {
            this.eventsCount = ComUtil.limitValue(eventsCount, 0, 65525);
        }

        private int remarkCount2;//地块连接数  废弃

        public int getRemarkCount2() {
            return remarkCount2;
        }

        public void setRemarkCount2(int remarkCount2) {
            this.remarkCount2 = ComUtil.limitValue(remarkCount2, 0, 65525);
        }

        private int remarkCount3;//备用数据源3

        public int getRemarkCount3() {
            return remarkCount3;
        }

        public void setRemarkCount3(int remarkCount3) {
            this.remarkCount3 = ComUtil.limitValue(remarkCount3, 0, 65525);
        }

        private int remarkCount4;//备用数据源4

        public int getRemarkCount4() {
            return remarkCount4;
        }

        public void setRemarkCount4(int remarkCount4) {
            this.remarkCount4 = ComUtil.limitValue(remarkCount4, 0, 65525);
        }

        private int victoryTarget;//胜利目标,配合victoryType使用

        public int getVictoryTargetValue(){
            return victoryTarget;
        }

        public int getVictoryTarget() {
            if(victoryType==2&&victoryTarget==0){
                return getPlayerLegionData().getTargetAreaZone();
            }
            return victoryTarget;
        }

        public void setVictoryTarget(int victoryTarget) {
            this.victoryTarget = ComUtil.limitValue(victoryTarget, 0, 65525);
        }

        private int gameEndYear;//游戏结束年份

        public int getGameEndYear() {
            return gameEndYear;
        }

        public void setGameEndYear(int gameEndYear) {
            this.gameEndYear = ComUtil.limitValue(gameEndYear, 0, 65525);
        }

        private int nextStageId;//下一个stage

        public int getNextStageId() {
            return nextStageId;
        }

        public void setNextStageId(int nextStageId) {
            this.nextStageId = ComUtil.limitValue(nextStageId, 0, 65525);
        }

        private int warId;//备用字段

        public int getWarId() {
            return warId;
        }

        public void setWarId(int warId) {
            this.warId = ComUtil.limitValue(warId, 0, 65525);
        }

        private int playerMode;//0征服 1帝国 2战役

        public int getPlayerMode() {
            if(stageId==0&&playerMode==0){
                playerMode=1;
            }
            return playerMode;
        }

        public void setPlayerMode(int playerMode) {
            this.playerMode = ComUtil.limitValue(playerMode, 0, 255);
        }

        private int playerLegionIndex;//玩家军团序列

        public int getPlayerLegionIndex() {
            return playerLegionIndex;
        }

        public void setPlayerLegionIndex(int playerLegionIndex) {
            this.playerLegionIndex = ComUtil.limitValue(playerLegionIndex, 0, 65525);
            if(legionDatas!=null&&legionDatas.size>playerLegionIndex){
                playerLegionData=legionDatas.get(masterData.playerLegionIndex);
            }
        }
        private int ifCheat;//是否作弊
        //纬度60以上极圈 40-20 温带 20-0 热带
        private int lastReportType;//
        private int lastReportValue;//
        private int gameEliteLv;//
        private int portLimitBorderSea;//
        private int bf6;//
        private int bf7;//
        private int bf8;//
        private int bf9;//
        private int bf10;//
        private int bf11;//
        private int bf12;//
        private int bf13;//
        private int playerResearchingCardId;//




        private int preLoadhexagonsCount;

        public int getIfCheat() {
            return ifCheat;
        }

        public void setIfCheat(int ifCheat) {
            this.ifCheat = ifCheat;
        }

        public int getLastReportType() {
            return lastReportType;
        }

        public void setLastReportType(int lastReportType) {
            this.lastReportType = lastReportType;
        }

        public int getLastReportValue() {
            return lastReportValue;
        }

        public void setLastReportValue(int lastReportValue) {
            this.lastReportValue = lastReportValue;
        }

        public int getGameEliteLv() {
            return gameEliteLv;
        }

        public void setGameEliteLv(int gameEliteLv) {
            this.gameEliteLv = gameEliteLv;
        }

        public int getPortLimitBorderSea() {
            return portLimitBorderSea;
        }

        public void setPortLimitBorderSea(int portLimitBorderSea) {
            this.portLimitBorderSea = portLimitBorderSea;
        }

        public int getBf6() {
            return bf6;
        }

        public void setBf6(int bf6) {
            this.bf6 = bf6;
        }

        public int getBf7() {
            return bf7;
        }

        public void setBf7(int bf7) {
            this.bf7 = bf7;
        }

        public int getBf8() {
            return bf8;
        }

        public void setBf8(int bf8) {
            this.bf8 = bf8;
        }

        public int getPreLoadhexagonsCount() {
            return preLoadhexagonsCount;
        }

        public void setPreLoadhexagonsCount(int preLoadhexagonsCount) {
            this.preLoadhexagonsCount = preLoadhexagonsCount;
        }

        public int getBf9() {
            return bf9;
        }

        public void setBf9(int bf9) {
            this.bf9 = bf9;
        }

        public int getBf10() {
            return bf10;
        }

        public void setBf10(int bf10) {
            this.bf10 = bf10;
        }

        public int getBf11() {
            return bf11;
        }

        public void setBf11(int bf11) {
            this.bf11 = bf11;
        }

        public int getBf12() {
            return bf12;
        }

        public void setBf12(int bf12) {
            this.bf12 = bf12;
        }

        public int getBf13() {
            return bf13;
        }

        public void setBf13(int bf13) {
            this.bf13 = bf13;
        }

        public int getPlayerResearchingCardId() {
            return playerResearchingCardId;
        }

        public void setPlayerResearchingCardId(int playerResearchingCardId) {
            this.playerResearchingCardId = playerResearchingCardId;
        }


        public int varPlayerRegionCount;


        public void initMasterData() {
            this.playerRebirth = 0;
            this.gameStatu = 0;
            this.btlType = 0;
            this.mapLandBase = 1;
            this.mapSeaBase = 0;
            this.ifColor = 0;
            this.ifFog = 0;
            this.ifChief = 0;
            this.ifWeather = 1;
            this.mapId = 1;
            this.startX = 0;
            this.startY = 0;
            this.width = 1;
            this.height = 1;
            this.bf19 = 0;
            this.bf20 = 0;
            this.roundMax = 0;
            this.roundNow = 0;
            this.roundForYear = 0;
            this.beginYear = 0;
            this.victoryType = 0;
            this.incomeRate = 0;
            this.airAddRange = 0;
            this.unitAddMove = 0;
            this.ifHaveAutoBuild = 0;
            this.historyId = 0;
            this.gameEpisode = 0;
            this.bf16 = 0;
            this.bf17 = 0;
            this.gameDifficulty = 0;
            this.bf18 = 0;
            this.legionsCount = 0;
            this.strategysCount = 0;
            this.generalsCount = 0;
            this.buildsCount = 0;
            this.facilitysCount = 0;
            this.nuclearsCount = 0;
            this.airforcesCount = 0;
            this.armysCount = 0;
            this.trapsCount = 0;
            this.diplomacysCount = 0;
            this.internsCount = 0;
            this.tradesCount = 0;
            this.tasksCount = 0;
            this.delaysCount = 0;
            this.hexagonsCount = 0;
            this.eventsCount = 0;
            this.remarkCount2 = 0;
            this.remarkCount3 = 0;
            this.remarkCount4 = 0;
            this.victoryTarget = 0;
            this.gameEndYear = 0;
            this.nextStageId = 0;
            this.warId = 0;
            this.playerMode = 0;
            this.playerLegionIndex = 0;
        }

        //---------------------------------------------
        //ai作弊几率  30的回合因素+30的占据因素+ (战役24,征服23)的难度因素,如果没有作弊,则作弊几率减半
        //level 0~3
        private boolean ifAiCheatChance(int level,int addChance){
            float rs= getRoundProgress()*30/100;//0~33
            rs+=getPlayerLegionData().getWorldPress()*30/100;//10~20
            if(spiritMap!=null&&spiritMap.size>0){
                rs+=masterData.getGameDifficulty()*spiritMap.size;
            }
            if(masterData.getBtlType()==1){//帝国 10~50/5~25
                if(getRoundProgress()<60||masterData.ifCheat==1){
                    rs+=(gameDifficulty*10);
                }else{
                    rs+=(gameDifficulty*5);
                }
            }else{
                if(getRoundProgress()<60||masterData.ifCheat==1){//6~48/3~24
                    rs=(gameDifficulty+level)*6;
                }else{
                    rs+=(gameDifficulty+level)*3;
                }
            }
             rs+=addChance;
            if(masterData.ifCheat==0){
                rs=rs/2;
            }
            // Gdx.app.log("ifAiCheatChance","chance:"+(int)rs);
            return ComUtil.ifGet((int) rs);
        }

    }




    //世界数据
    public class WorldData {
        public WorldData(){
            initWorldData();
        }

        private int worldAge;//世界年代  0近代,2一战,2二战,3冷战,4现代

        public int getWorldAge() {
            return worldAge;
        }


        public void setWorldAge(int age) {
            this.worldAge = ComUtil.limitValue(age, 0, 255);
            GameMethod.initPublicLegionCardE(game,Fb2Smap.this, publicLegionCardEs);
            game.gameMethod.getCanUpdTech(publicLegionCardEs,worldAge, publicLegionCanUpdTechId);
        }

        public void resetAgeTech(){
            GameMethod.initPublicLegionCardE(game,Fb2Smap.this, publicLegionCardEs);
            game.gameMethod.getCanUpdTech(publicLegionCardEs,worldAge, publicLegionCanUpdTechId);
        }

        public void addWorldAge() {
            worldAge += 1;
            GameMethod.initPublicLegionCardE(game,Fb2Smap.this, publicLegionCardEs);
            game.gameMethod.getCanUpdTech(publicLegionCardEs, worldData.worldAge, publicLegionCanUpdTechId);
        }

        private int worldState;//世界状态

        public int getWorldState() {
            return worldState;
        }

        public void setWorldState(int worldState) {
            this.worldState = ComUtil.limitValue(worldState, 0, 255);
        }

        private int worldRound;//状态剩余回合

        public int getWorldRound() {
            return worldRound;
        }

        public void setWorldRound(int worldRound) {
            this.worldRound = ComUtil.limitValue(worldRound, 0, 255);
        }

        private int worldTension;//世界紧张度

        public int getWorldTension() {
            return worldTension;
        }

        public void setWorldTension(int worldTension) {
            this.worldTension = ComUtil.limitValue(worldTension, 0, 255);
        }

        private int worldMoney;//世界金钱数

        public int getWorldMoney() {
            return worldMoney;
        }

        public void setWorldMoney(int worldMoney) {
            this.worldMoney = ComUtil.limitValue(worldMoney, 0, 65525);
        }

        private int worldIndustry;//世界工业数

        public int getWorldIndustry() {
            return worldIndustry;
        }

        public void setWorldIndustry(int worldIndustry) {
            this.worldIndustry = ComUtil.limitValue(worldIndustry, 0, 65525);
        }

        private int worldFood;//世界原料数

        public int getWorldFood() {
            return worldFood;
        }

        public void setWorldFood(int worldFood) {
            this.worldFood = ComUtil.limitValue(worldFood, 0, 65525);
        }

        private int worldMineral;//世界人力数

        public int getWorldMineral() {
            return worldMineral;
        }

        public void setWorldMineral(int worldMineral) {
            this.worldMineral = ComUtil.limitValue(worldMineral, 0, 65525);
        }

        private int worldTech;//世界科技数

        public int getWorldTech() {
            return worldTech;
        }

        public void setWorldTech(int worldTech) {
            this.worldTech = ComUtil.limitValue(worldTech, 0, 65525);
        }

        private int worldOil;//世界石油数

        public int getWorldOil() {
            return worldOil;
        }

        public void setWorldOil(int worldOil) {
            this.worldOil = ComUtil.limitValue(worldOil, 0, 65525);
        }

        public void initWorldData() {
            this.worldAge = 0;
            this.worldState = 0;
            this.worldRound = 0;
            this.worldTension = 0;
            this.worldMoney = 0;
            this.worldIndustry = 0;
            this.worldFood = 0;
            this.worldMineral = 0;
            this.worldTech = 0;
            this.worldOil = 0;
        }

        public int getWorldPrice(int type) {
            switch (type) {
                case 0:
                    return getWorldMoney();
                case 1:
                    return getWorldIndustry();
                case 2:
                    return getWorldTech();
                case 3:
                    return getWorldFood();
                case 4:
                    return getWorldMineral();
                case 5:
                    return getWorldOil();
            }
            return 0;
        }


        public int getPrice(int goodsType, int priceType, int goodsValue, int rate) {
            int goodsV = 1, priceV = 1;
            switch (goodsType) {
                case 0:
                    goodsV = getWorldMoney();
                    break;
                case 1:
                    goodsV = getWorldIndustry();
                    break;
                case 2:
                    goodsV = getWorldTech();
                    break;
                case 3:
                    goodsV = getWorldFood();
                    break;

                case 4:
                    goodsV = getWorldMineral();
                    break;

                case 5:
                    goodsV = getWorldOil();
                    break;
            }
            switch (priceType) {
                case 0:
                    priceV = getWorldMoney();
                    break;
                case 1:
                    priceV = getWorldIndustry();
                    break;
                case 2:
                    priceV = getWorldTech();
                    break;
                case 3:
                    priceV = getWorldFood();
                    break;
                case 4:
                    priceV = getWorldMineral();
                    break;
                case 5:
                    priceV = getWorldOil();
                    break;
            }
            if (rate >= 100) {
                return (int) (goodsValue * priceV / (goodsV + 1));
            } else {
                return (int) (goodsValue * priceV / (goodsV + 1) * (200 - rate) / 100);
            }
        }
    }
    //辅助计算类
    public class AuxiliaryArmyMerge {
        public int armyId;
        public int armyGroupLv;
        public int armyType;
        public int grouLvMax;

        public int getArmyId() {
            return armyId;
        }

        public void setArmyId(int armyId) {
            this.armyId = armyId;
        }

        public int getArmyGroupLv() {
            return armyGroupLv;
        }

        public void setArmyGroupLv(int armyGroupLv) {
            this.armyGroupLv = armyGroupLv;
        }

        public int getArmyType() {
            return armyType;
        }

        public void setArmyType(int armyType) {
            this.armyType = armyType;
        }

        public int getGrouLvMax() {
            return grouLvMax;
        }

        public void setGrouLvMax(int grouLvMax) {
            this.grouLvMax = grouLvMax;
        }
    }


    //军团数据
    public class LegionData implements Comparable {
        public boolean ifRequestHelp;
        //相邻的国家li,不包括海洋
        public IntArray borderLegionIndexs;

        public void updFeatureLv(int i){
            switch (i){
                case 1:if(legionFeatureLv1<5){legionFeatureLv1++;setMiracleNow(miracleNow-legionFeatureLv1); } break;
                case 2:if(legionFeatureLv2<5){legionFeatureLv2++;setMiracleNow(miracleNow-legionFeatureLv2); } break;
                case 3:if(legionFeatureLv3<5){legionFeatureLv3++;setMiracleNow(miracleNow-legionFeatureLv3); } break;
                case 4:if(legionFeatureLv4<5){legionFeatureLv4++;setMiracleNow(miracleNow-legionFeatureLv4); } break;
                case 5:if(legionFeatureLv5<5){legionFeatureLv5++;setMiracleNow(miracleNow-legionFeatureLv5); } break;
            }

        }
        public void refreshFeature(int i){
            switch (i){
                case 1:if(legionFeatureLv1==0){legionFeatureLv1++;}setMiracleNow(miracleNow-legionFeatureLv1);if(legionFeatureLv1>2){legionFeatureLv1=legionFeatureLv1-1;}  legionFeature1= getCanNewLegionFeatureId(); break;
                case 2:if(legionFeatureLv2==0){legionFeatureLv2++;}setMiracleNow(miracleNow-legionFeatureLv2);if(legionFeatureLv2>2){legionFeatureLv2=legionFeatureLv1-1;}   legionFeature2= getCanNewLegionFeatureId(); break;
                case 3:if(legionFeatureLv3==0){legionFeatureLv3++;}setMiracleNow(miracleNow-legionFeatureLv3);if(legionFeatureLv3>2){legionFeatureLv3=legionFeatureLv1-1;}   legionFeature3= getCanNewLegionFeatureId(); break;
                case 4:if(legionFeatureLv4==0){legionFeatureLv4++;}setMiracleNow(miracleNow-legionFeatureLv4);if(legionFeatureLv4>2){legionFeatureLv4=legionFeatureLv1-1;}   legionFeature4= getCanNewLegionFeatureId(); break;
                case 5:if(legionFeatureLv5==0){legionFeatureLv5++;}setMiracleNow(miracleNow-legionFeatureLv5);if(legionFeatureLv5>2){legionFeatureLv5=legionFeatureLv1-1;}   legionFeature5= getCanNewLegionFeatureId(); break;
            }
        }

        public int getCanNewLegionFeatureId(){
            int rs=0;
            IntArray ids=game.tempUtil.getTempIntArray();
            Array<XmlReader.Element> xmlEs=  game.gameConfig.getDEF_LEGIONFEATURE().e.getChildrenByName("legionFeature");
            for(int i=0;i<xmlEs.size;i++){
                XmlReader.Element xml=xmlEs.get(i);
                int id=xml.getInt("id",0);
                if(id!=0&&xml!=null&&!ifLegionFeature(id)&&getAge()>=xml.getInt("age")){
                    ids.add(id);
                }
            }
            if(ids.size>0){
                rs=ids.random();
            }
            game.tempUtil.disposeTempIntArray(ids);
            return rs;
        }



        public int getChiefSpecialEffect(int t){
            return Fb2Smap.this.getChiefSpecialEffect(t);
        }



        public boolean ifLegionFeature(int value){
            if(!ifEffective(10)){
                return false;
            }
            if(value==legionFeature1||value==legionFeature2||value==legionFeature3||value==legionFeature4||value==legionFeature5){
                return true;
            }
            return false;
        }


        public LegionData(){
            initLegionData();
        }

        //获得科技升级最大差值
        //ifLimitByLiteracy 是否启用识字率限制 可以减少回合研究的回合惩罚 lv=识字率/10+1  当研发的科技等级超过识字率等级，则增加额外回合
        public int getUpdTechLegionRound(int techId,boolean ifLimitByLiteracy){
            int lvNow=GameMethod.getCardLv(this,null,techId);
            int lvMin=99,lvNow2;

            for(int i=3001,iMax=3030;i<=iMax;i++){
                XmlReader.Element cE=game.gameConfig.getDEF_CARD().getElementById(i);
                if(cE.getInt("age",0)<= worldData.getWorldAge()&&!GameMethod.cardIfMax(game,this,null,i)){
                    lvNow2=GameMethod.getCardLv(this,null,i);
                    if(lvNow2<lvMin){
                        lvMin=lvNow2;
                    }
                }
            }
            if(ifLimitByLiteracy&&masterData.ifChief==1&&chiefData!=null){
                int lv=getChiefLiteracy()/10+1;
                //研发科技超过识字率等级,则增加研发回合,研发科技小于识字率等级,则减少研发回合
                lvNow+=(lvNow-lv);
                if(lvNow<lvMin){
                    return 0;
                }
            }
            if(lvMin!=99){
                int v= (ComUtil.limitValue(lvNow-lvMin-1,0,10));
                return v*v;
            }
            return 0;
        }

        public int varRegionCount;
        public int varMilitaryValue;
        public int varColonyCount;//附庸数量
        public  int varAllyCount;//同盟数量
        public IntArray coreAreaRegions;//使用","分割
        public IntArray majorAreaRegions;

        public IntArray coreAreaSRs;//使用","分割
        public IntArray majorAreaSRs;

        public Array<BuildData> buildArrays;
        public Array<ArmyData> armyArrays;

        public int varX;
        public int varY;
        public int varW;
        public int varH;
        public float centerPx_x;
        public float centerPx_y;
        public float legionNameScale;
        public String countryNameStr;

        public void addStability(int v){
            if(Fb2Smap.this.ifSystemEffective(0)){
                getForeignData(legionIndex,legionIndex).addFavor(v);
            }
        }
        public void reduceStability(int v){
            if(Fb2Smap.this.ifSystemEffective(0)){
                getForeignData(legionIndex,legionIndex).reduceFavor(v);
            }
        }
        public int getStability(){
            if(ifHaveSpirit(17)){//国家稳定度视为当前拥有的陆军数
                return  ComUtil.limitValue(getUnitArmyNum(),0,100);
            }else if(Fb2Smap.this.ifSystemEffective(0)&&foreignDatas!=null){
                return getForeignData(legionIndex,legionIndex).getFavorValue();
            }else{
                return 100;
            }
        }
        public BuildData getCapital(){
            BuildData b=getBuildDataByRegion(capitalId);
            if(b==null||b.getLegionIndex()!=legionIndex){
                return null;
            }else {
                return b;
            }
        }
        public int getCapitalAreaZone(){
            BuildData b=getCapital();
            if(b==null){
                return 0;
            }else {
                return b.getAreaZone();
            }
        }

        public int getCapitalIntercontinentalZone(){
            BuildData b=getCapital();
            if(b==null){
                return 0;
            }else {
                return b.getIntercontinentalZone();
            }
        }

        private void reduceIncome(int type, int value) {
            switch (type) {
                case 0:
                    setMoney(money - value);
                    break;
                case 1:
                    setIndustry(industry - value);
                    break;
                case 2:
                    setTech(tech - value);
                    break;
                case 3:
                    setFood(food - value);
                    break;
                case 4:
                    setMineral(mineral - value);
                    break;
                case 5:
                    setOil(oil - value);
                    break;
                default:
                    Gdx.app.error("reduceIncome is Error", "bontyType:" + type + " bontyValue:" + value);
            }
        }

        private void addIncome(int type, int value) {
            switch (type) {
                case 0:
                    setMoney(money + value);
                    break;
                case 1:
                    setIndustry(industry + value);
                    break;
                case 2:
                    setTech(tech + value);
                    break;
                case 3:
                    setFood(food + value);
                    break;
                case 4:
                    setMineral(mineral + value);
                    break;
                case 5:
                    setOil(oil + value);
                    break;
                default:
                    Gdx.app.error("reduceIncome is Error", "bontyType:" + type + " bontyValue:" + value);
            }
        }

        //0金钱 1工业 2科技 3食物 4矿物 5石油
        private int getLegionTradeValue(int tradeType) {
            if(internIndex==0){
                switch (tradeType) {
                    case 0:
                        return worldData.getWorldMoney() / (15 - getFinancialLvMax()) + 1;
                    case 1:
                        return worldData.getWorldIndustry() / (15 - getFinancialLvMax()) + 1;
                    case 2:
                        return worldData.getWorldTech() / (15 - getFinancialLvMax()) + 1;
                    case 3:
                        return worldData.getWorldFood() / (15 - getFinancialLvMax()) + 1;
                    case 4:
                        return worldData.getWorldMineral() / (15 - getFinancialLvMax()) + 1;
                    case 5:
                        return worldData.getWorldOil() / (15 - getFinancialLvMax()) + 1;
                }
            }else {
                switch (tradeType) {
                    case 0:
                        return money / (15 - getFinancialLvMax()) + 1;
                    case 1:
                        return industry / (15 - getFinancialLvMax()) + 1;
                    case 2:
                        return tech / (15 - getFinancialLvMax()) + 1;
                    case 3:
                        return food / (15 - getFinancialLvMax()) + 1;
                    case 4:
                        return mineral / (15 - getFinancialLvMax()) + 1;
                    case 5:
                        return oil / (15 - getFinancialLvMax()) + 1;
                }
            }
            Gdx.app.error("getLegionTradeValueError", "tradeType is Error:" + tradeType);
            return -1;
        }


        private int legionIndex;//军团序号

        public int getLegionIndex() {
            return legionIndex;
        }

        public void setLegionIndex(int legionIndex) {
            this.legionIndex = ComUtil.limitValue(legionIndex, 0, 65525);
        }

        private int internIndex;//组织id,默认为军团序号,在无战略的情况下即阵营!

        public int getInternIndex() {
            if(legionIndex==0){
                return 0;
            }
            if(suzerainLi==0||internIndex==0){
                return internIndex;
            }
            if(legionDatas.get(suzerainLi).internIndex==0){
                suzerainLi=0;
                return internIndex;
            }
            return legionDatas.get(suzerainLi).internIndex;
        }

        public void setInternIndex(int internIndex) {

            /*if(roundState!=1&&!ifPlayerAlly()&&internIndex==getPlayerLegionData().internIndex){
                int s=0;
            }*/

            if(roundState==0&&!ifNeedDrawViewMap){
                boolean ifPlayerAlly=ifPlayerAlly();
                this.internIndex = ComUtil.limitValue(internIndex, 0, 65525);
                if(ifPlayerAlly&&!ifPlayerAlly()){
                    ifNeedDrawViewMap=true;
                }
            }else{
                this.internIndex = ComUtil.limitValue(internIndex, 0, 65525);
            }

        }

        private int suzerainLi;//宗主国 0为自由国家

        public int getSuzerainLi() {
            return suzerainLi;
        }

        public LegionData getSuzerainLegionData() {
            if(suzerainLi==0){
                return this;
            }
            return getLegionDataByLi(suzerainLi);
        }

        public int getSuzerainCountry(){
            LegionData l=getSuzerainLegionData();
            if(l!=null){
                return l.getCountryId();
            }
            return this.getCountryId();
        }

        public LegionData getInternLegionData(){
            if(internIndex==legionIndex){
                return this;
            }
            return getLegionDataByLi(internIndex);
        }



        public void setSuzerainLi(int suzerainLi) {
            if((roundState==0)&&!ifNeedDrawViewMap&&(this.suzerainLi==masterData.playerLegionIndex&&suzerainLi!=masterData.playerLegionIndex)||(suzerainLi==masterData.playerLegionIndex&&this.suzerainLi!=masterData.playerLegionIndex)){
                ifNeedDrawViewMap=true;
            }
            this.suzerainLi = ComUtil.limitValue(suzerainLi, 0, 65525);
        }

        private int countryId;//军团国家

        public int getCountryId() {
            return countryId;
        }

        public void setCountryIdValue(int countryId) {
            this.countryId = ComUtil.limitValue(countryId, 0, 65525);
        }

        public void setCountryId(int countryId) {
            this.countryId = ComUtil.limitValue(countryId, 0, 65525);
            initVirAttribute();
        }

        private int targetAreaZone;//目标区域

        public int getTargetAreaZone() {
            return targetAreaZone;
        }

        public void setTargetAreaZone(int targetAreaZone) {
            this.targetAreaZone = ComUtil.limitValue(targetAreaZone, 0, 100);
        }


        private int money;//金钱总数

        public int getMoney() {
            return money;
        }

        public void costMoney(int money) {
            /*if(buildPolicy==masterData.getPlayerLegionIndex()){
                Gdx.app.error("test li costMoney", "1");
            }*/
            this.money = ComUtil.limitValue(this.money - money, 0, 9999);
        }

        public void addMoney(int money) {
            /*if(buildPolicy==masterData.getPlayerLegionIndex()){
                Gdx.app.error("test li costMoney", "2");
            }*/
            this.money = ComUtil.limitValue(this.money + money, 0, 9999);
        }

        public void setMoney(int money) {
            /*if(legionIndex==masterData.playerLegionIndex){
                Gdx.app.log("player money",this.money+"-->"+money);
            }*/
            this.money = ComUtil.limitValue( money, 0, 9999);
        }

        private int industry;//工业总数

        public int getIndustry() {
            return industry;
        }

        public void costIndustry(int industry) {
            this.industry = ComUtil.limitValue(this.industry - industry, 0, 9999);
        }

        public void addIndustry(int industry) {
            this.industry = ComUtil.limitValue(this.industry + industry, 0, 9999);
        }

        public void setIndustry(int industry) {
            this.industry = ComUtil.limitValue(industry, 0, 9999);
        }

        private int food;//原料总数

        public int getFood() {
            return food;
        }

        public void costFood(int food) {
            if(masterData.getPlayerMode()==0&&roundState==2&&isPlayer()){
                if(masterData.ifChief==1&&chiefData!=null){
                    food=food*(100+chiefData.varUnitFoodCoastChange)/100;
                }
            }
            this.food = ComUtil.limitValue(this.food - food, 0, 9999);
        }

        public void addFood(int food) {
            if(food<0&&isPlayer()&&masterData.getPlayerMode()==0&&roundState==2){
                costFood(food);
                return;
            }
            this.food = ComUtil.limitValue(this.food + food, 0, 9999);
        }

        public void setFood(int food) {
            this.food = ComUtil.limitValue(food, 0, 9999);
        }

        private int mineral;//原料总数

        public int getMineral() {
            return mineral;
        }

        public void costMineral(int mineral) {
            this.mineral = ComUtil.limitValue(this.mineral - mineral, 0, 9999);
        }

        public void addMineral(int mineral) {
            this.mineral = ComUtil.limitValue(this.mineral + mineral, 0, 9999);
        }

        public void setMineral(int mineral) {
            this.mineral = ComUtil.limitValue(mineral, 0, 9999);
        }

        private int oil;//原料总数

        public int getOil() {
            return oil;
        }

        public void costOil(int oil) {
            this.oil = ComUtil.limitValue(this.oil - oil, 0, 9999);
        }

        public void addOil(int oil) {
            this.oil = ComUtil.limitValue(this.oil + oil, 0, 9999);
        }

        public void setOil(int oil) {
            this.oil = ComUtil.limitValue(oil, 0, 9999);
        }

        private int tradeCount;//人力总数


        public void setTradeCount(int tradeCount) {
            this.tradeCount = ComUtil.limitValue(tradeCount, 0, 9999);
        }

        private int tech;//科技总数

        private void costTech(int tech) {
            this.tech = ComUtil.limitValue(this.tech - tech, 0, 9999);
        }

        public void addTech(int tech) {
            this.tech = ComUtil.limitValue(this.tech + tech, 0, 9999);
        }

        public int getTech() {
            return tech;
        }

        public void setTech(int tech) {
            this.tech = ComUtil.limitValue(tech, 0, 9999);
        }

        private int level;//军团等级 提供作弊概率与 初始化概率 0~5

        public int getLevel() {
            return level;
        }

        public void setLevel(int level) {
            this.level = ComUtil.limitValue(level,0,10);
        }

        private int medal;//将军显示勋章

        private int power;//行动度 每个国家有 50+ execute/2的行动几率

        private XmlReader.Element countryE;

        private boolean ifEnable;

        public boolean ifAct(){
            if(ifEffective(4)){
                if(ComUtil.ifGet(game.resGameConfig.baseActChance*(getAge()+1)+ power /2)){
                    return true;
                }
                return false;
            }else{
                return true;
            }
        }

        public int getPower() {
            return power;
        }

        public void setPower(int power) {
            this.power = ComUtil.limitValue(power,0,200);
        }

        public int getInternCounctry() {
            if(internIndex==legionIndex||internIndex==0){
                return  getCountryId();
            } if(suzerainLi>0){
                return getSuzerainLegionData().getCountryId();
            }else if(internIndex!=0){
                return legionDatas.get(internIndex).getCountryId();
            }
            return getCountryId();
        }
        public int getMedal() {
            return medal;
        }


        public void setMedal(int medal) {
            this.medal = ComUtil.limitValue(medal, 0, 255);
        }

        private int lifeBonus;//兵种血量加成

        public int getLifeBonus() {
            return lifeBonus;
        }

        public void setLifeBonus(int lifeBonus) {
            this.lifeBonus = ComUtil.limitValue(lifeBonus, 0, 65525);
        }

        private int taxBonus;//军团税率加成

        public int getTaxBonus() {
            return taxBonus;
        }
        public int getLegionTax() {
            int rs= (taxBonus-50) + varColonyCount * game.resGameConfig.addLegionTaxByColonyRate;
            return rs;
        }

        public void setTaxBonus(int taxBonus) {
            this.taxBonus = ComUtil.limitValue(taxBonus, 1, 300);
        }

        public void reduceTaxBonus(int v) {
            setTaxBonus(this.taxBonus-v);
        }
        public void addTaxBonus(int v) {
            setTaxBonus(this.taxBonus+v);
        }
        private int rGeneralId;//随机将军数组id

        public int getRGeneralId() {
            return rGeneralId;
        }

        public void setRGeneralId(int rGeneralId) {
            this.rGeneralId = ComUtil.limitValue(rGeneralId, 0, 255);
        }

        private int capitalId;//首都

        public int getCapitalId() {
            return capitalId;
        }
        public void setCapitalIdValue(int capitalId) {
            this.capitalId = capitalId;
        }
        public void setCapitalId(int capitalId) {
            int oldC=this.capitalId;
            this.capitalId = capitalId;
            BuildData b=getBuildDataByRegion(capitalId);
            if(b!=null&&b.buildActor!=null){
                b.buildActor.updPoint();
            }
            b=getBuildDataByRegion(oldC);
            if(b!=null&&b.buildActor!=null){
                b.buildActor.updPoint();
            }
        }

        private int cityLvMax;//城市等级上限

        public boolean updCityLvMax() {
            if (this.cityLvMax < game.resGameConfig.cardUpdMax_cityLv) {
                this.cityLvMax = this.cityLvMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceCityLvMax() {
            if (this.cityLvMax >0) {
                this.cityLvMax = this.cityLvMax - 1;
                return true;
            } else {
                return false;
            }
        }


        public int getCityLvMax() {
            return cityLvMax;
        }

        public void setCityLvMax(int cityLvMax) {
            this.cityLvMax = ComUtil.limitValue(cityLvMax, 0, game.resGameConfig.cardUpdMax_cityLv);
        }

        private int industLvMax;//工业等级上限

        public boolean updIndustLvMax() {
            if (this.industLvMax < game.resGameConfig.cardUpdMax_industryLv) {
                this.industLvMax = this.industLvMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceIndustLvMax() {
            if (this.industLvMax >0) {
                this.industLvMax = this.industLvMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getIndustLvMax() {
            return industLvMax;
        }

        public void setIndustLvMax(int industLvMax) {
            this.industLvMax = ComUtil.limitValue(industLvMax, 0, game.resGameConfig.cardUpdMax_industryLv);
        }

        private int techLvMax;//研究等级上限

        public boolean updTechLvMax() {
            if (this.techLvMax < game.resGameConfig.cardUpdMax_techLv) {
                this.techLvMax = this.techLvMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceTechLvMax() {
            if (this.techLvMax >0) {
                this.techLvMax = this.techLvMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getTechLvMax() {
            return techLvMax;
        }

        public void setTechLvMax(int techLvMax) {
            this.techLvMax = ComUtil.limitValue(techLvMax, 0, game.resGameConfig.cardUpdMax_techLv);
        }

        private int energyLvMax;//能源等级上限

        public boolean updEnergyLvMax() {
            if (this.energyLvMax < game.resGameConfig.cardUpdMax_eneryLv) {
                this.energyLvMax = this.energyLvMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceEnergyLvMax() {
            if (this.energyLvMax>0) {
                this.energyLvMax = this.energyLvMax + 1;
                return true;
            } else {
                return false;
            }
        }

        public int getEnergyLvMax() {
            return energyLvMax;
        }

        public void setEnergyLvMax(int energyLvMax) {
            this.energyLvMax = ComUtil.limitValue(energyLvMax, 0, game.resGameConfig.cardUpdMax_eneryLv);
        }

        private int transportLvMax;//交通科技上限

        public boolean updTransportLvMax() {
            if (this.transportLvMax < game.resGameConfig.cardUpdMax_transportLv) {
                this.transportLvMax = this.transportLvMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceTransportLvMax() {
            if (this.transportLvMax >0) {
                this.transportLvMax = this.transportLvMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getTransportLvMax() {
            return transportLvMax;
        }

        public void setTransportLvMax(int transportLvMax) {
            this.transportLvMax = ComUtil.limitValue(transportLvMax, 0, game.resGameConfig.cardUpdMax_transportLv);
        }

        private int infantryLvMax;//步兵科技上限

        public boolean updInfantryLvMax() {
            if (this.infantryLvMax < game.resGameConfig.cardUpdMax_unitLv) {
                this.infantryLvMax = this.infantryLvMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceInfantryLvMax() {
            if (this.infantryLvMax>0) {
                this.infantryLvMax = this.infantryLvMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getInfantryLvMax() {
            return infantryLvMax;
        }

        public void setInfantryLvMax(int infantryLvMax) {
            this.infantryLvMax = ComUtil.limitValue(infantryLvMax, 0, game.resGameConfig.cardUpdMax_unitLv);
        }

        private int cannonLvMax;//火炮科技上限

        public boolean updCannonLvMax() {
            if (this.cannonLvMax < game.resGameConfig.cardUpdMax_unitLv) {
                this.cannonLvMax = this.cannonLvMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceCannonLvMax() {
            if (this.cannonLvMax >0) {
                this.cannonLvMax = this.cannonLvMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getCannonLvMax() {
            return cannonLvMax;
        }

        public void setCannonLvMax(int cannonLvMax) {
            this.cannonLvMax = ComUtil.limitValue(cannonLvMax, 0, game.resGameConfig.cardUpdMax_unitLv);
        }

        private int tankLvMax;//坦克科技上限

        public boolean updTankLvMax() {
            if (this.tankLvMax < game.resGameConfig.cardUpdMax_unitLv) {
                this.tankLvMax = this.tankLvMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceTankLvMax() {
            if (this.tankLvMax >0) {
                this.tankLvMax = this.tankLvMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getTankLvMax() {
            return tankLvMax;
        }

        public void setTankLvMax(int tankLvMax) {
            this.tankLvMax = ComUtil.limitValue(tankLvMax, 0, game.resGameConfig.cardUpdMax_unitLv);
        }

        private int fortLvMax;//要塞科技上限

        public boolean updFortLvMax() {
            if (this.fortLvMax < game.resGameConfig.cardUpdMax_unitLv) {
                this.fortLvMax = this.fortLvMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceFortLvMax() {
            if (this.fortLvMax >0) {
                this.fortLvMax = this.fortLvMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getFortLvMax() {
            return fortLvMax;
        }

        public void setFortLvMax(int fortLvMax) {
            this.fortLvMax = ComUtil.limitValue(fortLvMax, 0, game.resGameConfig.cardUpdMax_unitLv);
        }

        private int navyLvMax;//海军科技上限

        public boolean updNavyLvMax() {
            if (this.navyLvMax < game.resGameConfig.cardUpdMax_unitLv) {
                this.navyLvMax = this.navyLvMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceNavyLvMax() {
            if (this.navyLvMax >0) {
                this.navyLvMax = this.navyLvMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getNavyLvMax() {
            return navyLvMax;
        }

        public void setNavyLvMax(int navyLvMax) {
            this.navyLvMax = ComUtil.limitValue(navyLvMax, 0, game.resGameConfig.cardUpdMax_unitLv);
        }

        private int airLvMax;//空军科技上限

        public boolean updAirLvMax() {
            if (this.airLvMax < game.resGameConfig.cardUpdMax_airportLv) {
                this.airLvMax = this.airLvMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceAirLvMax() {
            if (this.airLvMax >0) {
                this.airLvMax = this.airLvMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getAirLvMax() {
            return airLvMax;
        }

        public void setAirLvMax(int airLvMax) {
            this.airLvMax = ComUtil.limitValue(airLvMax, 0, game.resGameConfig.cardUpdMax_airportLv);
        }

        private int supplyLvMax;//补给科技上限

        public boolean updSupplyLvMax() {
            if (this.supplyLvMax < game.resGameConfig.cardUpdMax_supplyLv) {
                this.supplyLvMax = this.supplyLvMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceSupplyLvMax() {
            if (this.supplyLvMax >0) {
                this.supplyLvMax = this.supplyLvMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getSupplyLvMax() {
            return supplyLvMax;
        }

        public void setSupplyLvMax(int supplyLvMax) {
            this.supplyLvMax = ComUtil.limitValue(supplyLvMax, 0, game.resGameConfig.cardUpdMax_supplyLv);
        }

        private int defenceLvMax;//城防科技上限

        public boolean updDefenceLvMax() {
            if (this.defenceLvMax < game.resGameConfig.cardUpdMax_defenceLv) {
                this.defenceLvMax = this.defenceLvMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceDefenceLvMax() {
            if (this.defenceLvMax >0) {
                this.defenceLvMax = this.defenceLvMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getDefenceLvMax() {
            return defenceLvMax;
        }

        public void setDefenceLvMax(int defenceLvMax) {
            this.defenceLvMax = ComUtil.limitValue(defenceLvMax, 0, game.resGameConfig.cardUpdMax_defenceLv);
        }

        private int missileLvMax;//导弹科技上限


        public boolean updMissileLvMax() {
            if (this.missileLvMax < game.resGameConfig.cardUpdMax_missileLv) {
                this.missileLvMax = this.missileLvMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceMissileLvMax() {
            if (this.missileLvMax >0) {
                this.missileLvMax = this.missileLvMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getMissileLvMax() {
            return missileLvMax;
        }

        public void setMissileLvMax(int missileLvMax) {
            this.missileLvMax = ComUtil.limitValue(missileLvMax, 0, game.resGameConfig.cardUpdMax_missileLv);
        }

        private int nuclearLvMax;//核弹科技上限


        public boolean updNuclearLvMax() {
            if (this.nuclearLvMax < game.resGameConfig.cardUpdMax_nuclearLv) {
                this.nuclearLvMax = this.nuclearLvMax + 1;
                return true;
            } else {
                return false;
            }
        }

        public boolean reduceNuclearLvMax() {
            if (this.nuclearLvMax >0) {
                this.nuclearLvMax = this.nuclearLvMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getNuclearLvMax() {
            return nuclearLvMax;
        }

        public void setNuclearLvMax(int nuclearLvMax) {
            this.nuclearLvMax = ComUtil.limitValue(nuclearLvMax, 0, game.resGameConfig.cardUpdMax_nuclearLv);
        }//financial

        private int financialLvMax;//金融科技上限 可以提高总体的税率

        public boolean updFinancialLvMax() {
            if (this.financialLvMax < game.resGameConfig.cardUpdMax_financialLv) {
                this.financialLvMax = this.financialLvMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceFinancialLvMax() {
            if (this.financialLvMax >0) {
                this.financialLvMax = this.financialLvMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getFinancialLvMax() {
            return financialLvMax;
        }

        public void setFinancialLvMax(int financialLvMax) {
            this.financialLvMax = ComUtil.limitValue(financialLvMax, 0, game.resGameConfig.cardUpdMax_financialLv);
        }

        private int tradeLvMax;//贸易规模上限

        public boolean updTradeLvMax() {
            if (this.tradeLvMax < game.resGameConfig.cardUpdMax_tradeLv) {
                this.tradeLvMax = this.tradeLvMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceTradeLvMax() {
            if (this.tradeLvMax >0) {
                this.tradeLvMax = this.tradeLvMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getTradeLvMax() {
            return tradeLvMax;
        }

        public void setTradeLvMax(int tradeLvMax) {
            this.tradeLvMax = ComUtil.limitValue(tradeLvMax, 0, game.resGameConfig.cardUpdMax_tradeLv);
        }

        private int cultureLvMax;//文化科技上限

        public boolean updCultureLvMax() {
            if (this.cultureLvMax < game.resGameConfig.cardUpdMax_cultureLv) {
                this.cultureLvMax = this.cultureLvMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceCultureLvMax() {
            if (this.cultureLvMax>0) {
                this.cultureLvMax = this.cultureLvMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getCultureLvMax() {
            return cultureLvMax;
        }

        public void setCultureLvMax(int cultureLvMax) {
            this.cultureLvMax = ComUtil.limitValue(cultureLvMax, 0, game.resGameConfig.cardUpdMax_cultureLv);
        }

        private int miracleNow;//航天科技

        public void addMiracle(int v){
            setMiracleNow(miracleNow+v);
        }

        public boolean updMiracleLvNow() {
            if(masterData.playerMode==0){
                if (this.miracleNow < game.resGameConfig.cardUpdMax_miracle) {
                    this.miracleNow = this.miracleNow + 1;
                    return true;
                } else {
                    return false;
                }
            }else if(isPlayer()){
                masterData.setRoundMax(masterData.getRoundMax()+ game.resGameConfig.wonderAddGameRound);
                return true;
            }
            return false;
        }
        public boolean reduceMiracleLvNow() {
            if (this.miracleNow >0) {
                this.miracleNow = this.miracleNow - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getMiracleNow() {
            return miracleNow;
        }

        public void setMiracleNow(int miracleNow) {
            this.miracleNow = ComUtil.limitValue(miracleNow, 0, game.resGameConfig.cardUpdMax_miracle);
        }

        private int militaryAcademyLv;//研究级别  将领等级

        public boolean updMilitaryAcademyLv() {
            if (this.militaryAcademyLv < game.resGameConfig.cardUpdMax_militaryAcademyLv) {
                this.militaryAcademyLv = this.militaryAcademyLv + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceMilitaryAcademyLv() {
            if (this.militaryAcademyLv >0) {
                this.militaryAcademyLv = this.militaryAcademyLv - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getMilitaryAcademyLv() {
            return militaryAcademyLv;
        }

        public void setMilitaryAcademyLv(int militaryAcademyLv) {
            this.militaryAcademyLv = ComUtil.limitValue(militaryAcademyLv, 0, game.resGameConfig.cardUpdMax_militaryAcademyLv);
        }

        private int infantryCardMax;//步兵卡库

        public boolean updInfantryCardMax() {
            if (this.infantryCardMax < game.resGameConfig.cardUpdMax_infantryCardLv) {
                this.infantryCardMax = this.infantryCardMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceInfantryCardMax() {
            if (this.infantryCardMax >0) {
                this.infantryCardMax = this.infantryCardMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getInfantryCardMax() {
            return infantryCardMax;
        }

        public void setInfantryCardMax(int infantryCardMax) {
            this.infantryCardMax = ComUtil.limitValue(infantryCardMax, 0,  game.resGameConfig.cardUpdMax_infantryCardLv);
        }

      /*  public int getInfantryCardNum() {
            return getLegionFeatureEffect(22)+(infantryCardMax + 1) * game.resGameConfig.cardUpdNum_infantryCard ;
        }*/

        private int armorCardMax;//装甲卡库

        public boolean updArmorCardMax() {
            if (this.armorCardMax < game.resGameConfig.cardUpdMax_armorCardLv) {
                this.armorCardMax = this.armorCardMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceArmorCardMax() {
            if (this.armorCardMax >0) {
                this.armorCardMax = this.armorCardMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getArmorCardMax() {
            return armorCardMax;
        }

       /* public int getArmorCardNum() {
            return getLegionFeatureEffect(24)+(armorCardMax + 1) * game.resGameConfig.cardUpdNum_armorCard ;
        }*/

        public void setArmorCardMax(int armorCardMax) {
            this.armorCardMax = ComUtil.limitValue(armorCardMax, 0, game.resGameConfig.cardUpdMax_armorCardLv);
        }

        private int artilleryCardMax;//火炮卡库

        public boolean updArtilleryCardMax() {
            if (this.artilleryCardMax < game.resGameConfig.cardUpdMax_artilleryCardLv) {
                this.artilleryCardMax = this.artilleryCardMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceArtilleryCardMax() {
            if (this.artilleryCardMax >0) {
                this.artilleryCardMax = this.artilleryCardMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getArtilleryCardMax() {
            return artilleryCardMax;
        }

       /* public int getArtilleryCardNum() {
            return getLegionFeatureEffect(23)+(artilleryCardMax + 1) * game.resGameConfig.cardUpdNum_artilleryCard ;
        }*/

        public void setArtilleryCardMax(int artilleryCardMax) {
            this.artilleryCardMax = ComUtil.limitValue(artilleryCardMax, 0, game.resGameConfig.cardUpdMax_artilleryCardLv);
        }

        private int navyCardMax;//海军卡库

        public boolean updNavyCardMax() {
            if (this.navyCardMax < game.resGameConfig.cardUpdMax_navyCardLv) {
                this.navyCardMax = this.navyCardMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceNavyCardMax() {
            if (this.navyCardMax >0) {
                this.navyCardMax = this.navyCardMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getNavyCardMax() {
            return navyCardMax;
        }


        /*public int getNavyCardNum() {
            return getLegionFeatureEffect(25)+(navyCardMax + 1) * game.resGameConfig.cardUpdNum_navyCard ;
        }*/

        public void setNavyCardMax(int navyCardMax) {
            this.navyCardMax = ComUtil.limitValue(navyCardMax, 0, game.resGameConfig.cardUpdMax_navyCardLv);
        }

        private int airCardMax;//空军卡库

        public boolean updAirCardMax() {
            if (this.airCardMax < game.resGameConfig.cardUpdMax_airCardLv) {
                this.airCardMax = this.airCardMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceAirCardMax() {
            if (this.airCardMax >0) {
                this.airCardMax = this.airCardMax - 1;
                return true;
            } else {
                return false;
            }
        }

        public int getAirCardMax() {
            return airCardMax;
        }

        public int getAirCardNum() {
            return getLegionFeatureEffect(26)+(airCardMax + 1) * game.resGameConfig.cardUpdNum_airCard ;
        }

        public void setAirCardMax(int airCardMax) {
            this.airCardMax = ComUtil.limitValue(airCardMax, 0, game.resGameConfig.cardUpdMax_airCardLv);
        }

        private int nuclearCardMax;//超武卡库

        public boolean updNuclearCardMax() {
            if (this.nuclearCardMax < game.resGameConfig.cardUpdMax_nuclearCardLv) {
                this.nuclearCardMax = this.nuclearCardMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceNuclearCardMax() {
            if (this.nuclearCardMax >0) {
                this.nuclearCardMax = this.nuclearCardMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getNuclearCardMax() {
            return nuclearCardMax;
        }


        /**/ public int getNuclearCardNum() {
            return getLegionFeatureEffect(29)+(nuclearCardMax + 1) * game.resGameConfig.cardUpdNum_nuclearCard ;
        }

        public void setNuclearCardMax(int nuclearCardMax) {
            this.nuclearCardMax = ComUtil.limitValue(nuclearCardMax, 0, game.resGameConfig.cardUpdMax_nuclearCardLv);
        }

        private int missileCardMax;//导弹卡库

        public boolean updMissileCardMax() {
            if (this.missileCardMax < game.resGameConfig.cardUpdMax_missileCardLv) {
                this.missileCardMax = this.missileCardMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceMissileCardMax() {
            if (this.missileCardMax >0) {
                this.missileCardMax = this.missileCardMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getMissileCardMax() {
            return missileCardMax;
        }

        /**/public int getMissileCardNum() {
            return getLegionFeatureEffect(28)+(missileCardMax + 1) * game.resGameConfig.cardUpdNum_missileCard ;
        }

        public void setMissileCardMax(int missileCardMax) {
            this.missileCardMax = ComUtil.limitValue(missileCardMax, 0, game.resGameConfig.cardUpdMax_missileCardLv);
        }

        private int submarineCardMax;//潜艇卡库

        public boolean updSubmarineCardMax() {
            if (this.submarineCardMax < game.resGameConfig.cardUpdMax_submarineCardLv) {
                this.submarineCardMax = this.submarineCardMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceSubmarineCardMax() {
            if (this.submarineCardMax >0) {
                this.submarineCardMax = this.submarineCardMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getSubmarineCardMax() {
            return submarineCardMax;
        }

        /*public int getSubmarineCardNum() {
            return getLegionFeatureEffect(27)+(submarineCardMax + 1) * game.resGameConfig.cardUpdNum_submarineCard ;
        }*/

        public void setSubmarineCardMax(int submarineCardMax) {
            this.submarineCardMax = ComUtil.limitValue(submarineCardMax, 0, game.resGameConfig.cardUpdMax_submarineCardLv);
        }

        private int defenceCardMax;//战术卡库

        public boolean updDefenceCardMax() {
            if (this.defenceCardMax < game.resGameConfig.cardUpdMax_defenceCardLv) {
                this.defenceCardMax = this.defenceCardMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceDefenceCardMax() {
            if (this.defenceCardMax >0) {
                this.defenceCardMax = this.defenceCardMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getDefenceCardMax() {
            return defenceCardMax;
        }

        /**/ public int getDefenceCardNum() {
            return getLegionFeatureEffect(30)+(defenceCardMax + 1) * game.resGameConfig.cardUpdNum_defenceCard ;
        }

        public void setDefenceCardMax(int defenceCardMax) {
            this.defenceCardMax = ComUtil.limitValue(defenceCardMax, 0,  game.resGameConfig.cardUpdMax_defenceCardLv);
        }

        private int generalCardMax;//将领卡库

        public boolean updGeneralCardMax() {
            if (this.generalCardMax < game.resGameConfig.cardUpdMax_generalCardLv) {
                this.generalCardMax = this.generalCardMax + 1;
                return true;
            } else {
                return false;
            }
        }
        public boolean reduceGeneralCardMax() {
            if (this.generalCardMax >0) {
                this.generalCardMax = this.generalCardMax - 1;
                return true;
            } else {
                return false;
            }
        }
        public int getGeneralCardMax() {
            return generalCardMax;
        }

        public int getGeneralCardNum() {
            if(isPlayer()&&ifHaveSpirit(29)){
                return getLegionFeatureEffect(31)+(generalCardMax + 1) * game.resGameConfig.cardUpdNum_generalCard*2;
            }
            return getLegionFeatureEffect(31)+(generalCardMax + 1) * game.resGameConfig.cardUpdNum_generalCard;
        }

        public void setGeneralCardMax(int generalCardMax) {
            this.generalCardMax = ComUtil.limitValue(generalCardMax, 0, game.resGameConfig.cardUpdMax_generalCardLv);
        }

        private int legionRound;//冷却回合

        public int getLegionRound() {
            return legionRound;
        }

        public void setLegionRound(int legionRound) {
            this.legionRound = ComUtil.limitValue(legionRound, 0, 255);
        }

        public void addLegionRound(int legionRound) {
            if(spiritMap!=null&&ifEffective(16)){
                if(spiritMap.containsKey(41)||(isPlayer()&&spiritMap.containsKey(43))){
                    legionRound=ComUtil.max(legionRound/2,1);
                }
            }
            setLegionRound( this.legionRound + legionRound);
        }
        //政治相性 美国10英国15法国25北欧40德国45意大利35东欧50俄罗斯60土耳其75沙特90伊朗105印度120中国135韩日150东南亚165拉美葡西180
        private int civilSpec;

        public int getCivilSpec() {
            return civilSpec;
        }

        public void setCivilSpec(int civilSpec) {
            this.civilSpec = ComUtil.limitValue(civilSpec, -1, 255);
        }

        private int red;//红色通道

        public int getRed() {
            return red;
        }

        public void setRed(int red) {
            this.red = ComUtil.limitValue(red, 0, 255);
        }

        private int green;//绿色通道

        public int getGreen() {
            return green;
        }

        public void setGreen(int green) {
            this.green = ComUtil.limitValue(green, 0, 255);
        }

        private int blue;//蓝色通道

        public int getBlue() {
            return blue;
        }

        public void setBlue(int blue) {
            this.blue = ComUtil.limitValue(blue, 0, 255);
        }

        private int alpha;//半透明度

        public int getAlpha() {
            return alpha;
        }

        public void setAlpha(int alpha) {
            this.alpha = ComUtil.limitValue(alpha, 0, 255);
        }

        private int legionFeature1;//buff标记1

        public int getLegionFeature1() {
            return legionFeature1;
        }

        public void setLegionFeature1(int legionFeature1) {
            this.legionFeature1 = ComUtil.limitValue(legionFeature1, -1, 65525);
        }

        private int legionFeature2;//buff标记2

        public int getLegionFeature2() {
            return legionFeature2;
        }

        public void setLegionFeature2(int legionFeature2) {
            this.legionFeature2 = ComUtil.limitValue(legionFeature2, -1, 65525);
        }

        private int legionFeature3;//buff标记3

        public int getLegionFeature3() {
            return legionFeature3;
        }

        public void setLegionFeature3(int legionFeature3) {
            this.legionFeature3 = ComUtil.limitValue(legionFeature3, -1, 65525);
        }
        public boolean ifPlayerAlly(){
            return ifAllyByLi(legionIndex,masterData.playerLegionIndex);
        }
        public boolean ifPlayerEnemy(){
            return getForeignDegree(legionIndex,masterData.playerLegionIndex)==-1;
        }
        private int legionFeature4;//buff标记1

        public int getLegionFeature4() {
            return legionFeature4;
        }

        public void setLegionFeature4(int legionFeature4) {
            this.legionFeature4 = ComUtil.limitValue(legionFeature4, -1, 65525);
        }

        private int legionFeature5;//buff标记1

        public int getLegionFeature5() {
            return legionFeature5;
        }

        public void setLegionFeature5(int legionFeature5) {
            this.legionFeature5 = ComUtil.limitValue(legionFeature5, -1, 65525);
        }

        private int legionFeatureLv1;
        private int legionFeatureLv2;
        private int legionFeatureLv3;
        private int legionFeatureLv4;
        private int legionFeatureLv5;


        private int legionBuff1;
        private int legionBuff1Round;
        private int legionBuff2;
        private int legionBuff2Round;
        private int legionBuff3;
        private int legionBuff3Round;


        public int getLegionBuff1() {
            return legionBuff1;
        }

        public void setLegionBuff1(int legionBuff1) {
            this.legionBuff1 = legionBuff1;
        }

        public int getLegionBuff1Round() {
            return legionBuff1Round;
        }

        public void setLegionBuff1Round(int legionBuff1Round) {
            this.legionBuff1Round = legionBuff1Round;
        }

        public int getLegionBuff2() {
            return legionBuff2;
        }

        public void setLegionBuff2(int legionBuff2) {
            this.legionBuff2 = legionBuff2;
        }

        public int getLegionBuff2Round() {
            return legionBuff2Round;
        }

        public void setLegionBuff2Round(int legionBuff2Round) {
            this.legionBuff2Round = legionBuff2Round;
        }

        public int getLegionBuff3() {
            return legionBuff3;
        }

        public void setLegionBuff3(int legionBuff3) {
            this.legionBuff3 = legionBuff3;
        }

        public int getLegionBuff3Round() {
            return legionBuff3Round;
        }

        public void setLegionBuff3Round(int legionBuff3Round) {
            this.legionBuff3Round = legionBuff3Round;
        }

        public int getLegionFeatureLv1() {
            return legionFeatureLv1;
        }

        public void setLegionFeatureLv1(int legionFeatureLv1) {
            this.legionFeatureLv1 = legionFeatureLv1;
        }

        public int getLegionFeatureLv2() {
            return legionFeatureLv2;
        }

        public void setLegionFeatureLv2(int legionFeatureLv2) {
            this.legionFeatureLv2 = legionFeatureLv2;
        }

        public int getLegionFeatureLv3() {
            return legionFeatureLv3;
        }

        public void setLegionFeatureLv3(int legionFeatureLv3) {
            this.legionFeatureLv3 = legionFeatureLv3;
        }
        public int getLegionFeatureLv4() {
            return legionFeatureLv4;
        }

        public void setLegionFeatureLv4(int legionFeatureLv4) {
            this.legionFeatureLv4 = legionFeatureLv4;
        }
        public int getLegionFeatureLv5() {
            return legionFeatureLv5;
        }

        public void setLegionFeatureLv5(int legionFeatureLv5) {
            this.legionFeatureLv5 = legionFeatureLv5;
        }

        private int extraMoney;
        private int extraIndustry;
        private int extraTech;
        private int extraFood;
        private int extraMineral;
        private int extraOil;
        private int extraPopulation;


        public void addExtraRes(int priceType,int value){
            switch (priceType){
                case 1:
                    addExtraMoney(value);
                    break;
                case 2:
                    addExtraIndustry(value);
                    break;
                case 3:
                    addExtraTech(value);
                    break;
                case 4:
                    addExtraFood(value);
                    break;
                case 5:
                    addExtraMineral(value);
                    break;
                case 6:
                    addExtraOil(value);
                    break;
            }
        }

        public void addExtraMoney(int i) {
            extraMoney+=i;
        }
        public void addExtraIndustry(int i) {
            extraIndustry+=i;
        }
        public void addExtraTech(int i) {
            extraTech+=i;
        }
        public void addExtraFood(int i) {
            extraFood+=i;
        }
        public void addExtraMineral(int i) {
            extraMineral+=i;
        }
        public void addExtraOil(int i) {
            extraOil+=i;
        }
        public void addExtraPopulation(int i) {
            extraPopulation+=i;
        }


        public int getExtraMoney() {
            return extraMoney;
        }

        public void setExtraMoney(int extraMoney) {
            this.extraMoney = extraMoney;
        }

        public int getExtraIndustry() {
            return extraIndustry;
        }

        public void setExtraIndustry(int extraIndustry) {
            this.extraIndustry = extraIndustry;
        }

        public int getExtraTech() {
            return extraTech;
        }

        public void setExtraTech(int extraTech) {
            this.extraTech = extraTech;
        }

        public int getExtraFood() {
            return extraFood;
        }

        public void setExtraFood(int extraFood) {
            this.extraFood = extraFood;
        }

        public int getExtraMineral() {
            return extraMineral;
        }

        public void setExtraMineral(int extraMineral) {
            this.extraMineral = extraMineral;
        }

        public int getExtraOil() {
            return extraOil;
        }

        public void setExtraOil(int extraOil) {
            this.extraOil = extraOil;
        }

        public int getExtraPopulation() {
            return extraPopulation;
        }

        public void setExtraPopulation(int extraPopulation) {
            this.extraPopulation = extraPopulation;
        }

        //军团维护费.依次结算,如果有没钱的,则该等级有几率降低
        public void legionCost() {
            //将军

            int downChance = game.resGameConfig.downGradeChance;
            costFood(varGeneralCost);
            boolean ifPlayerAlly=ifPlayerAlly();
            if (ifPlayerAlly&& food == 0 && ComUtil.ifGet(downChance) && generalCardMax > 0) {
                generalCardMax--;
            } else {
                downChance += game.resGameConfig.downGradeChance;
            }

            //步兵
            costFood(varInfantryCost);
            if (ifPlayerAlly&& food == 0 && ComUtil.ifGet(downChance) && infantryLvMax > 0) {
                infantryLvMax--;
            } else {
                downChance += game.resGameConfig.downGradeChance;
            }

            //火炮
            costFood(varArtilleryCost);
            if (ifPlayerAlly&& food == 0 && ComUtil.ifGet(downChance) && cannonLvMax > 0) {
                cannonLvMax--;
            } else {
                downChance += game.resGameConfig.downGradeChance;
            }

            //坦克
            costFood(varArmorCost);
            if (ifPlayerAlly&& food == 0 && ComUtil.ifGet(downChance) && tankLvMax > 0) {
                tankLvMax--;
            } else {
                downChance += game.resGameConfig.downGradeChance;
            }

            //国防
            costFood(varDefenceCost);
            if (ifPlayerAlly&& food == 0 && ComUtil.ifGet(downChance) && defenceLvMax > 0) {
                defenceLvMax--;
            } else {
                downChance += game.resGameConfig.downGradeChance;
            }

            //海军
            costFood(varNavyCost);
            if (ifPlayerAlly&& food == 0 && ComUtil.ifGet(downChance) && navyLvMax > 0) {
                navyLvMax--;
            } else {
                downChance += game.resGameConfig.downGradeChance;
            }
            //潜艇
            costFood(varSubmarineCost);
            if (ifPlayerAlly&& food == 0 && ComUtil.ifGet(downChance) && navyLvMax > 0) {
                navyLvMax--;
            } else {
                downChance += game.resGameConfig.downGradeChance;
            }

            //空军
            costFood(varAirCost);
            if (ifPlayerAlly&& food == 0 && ComUtil.ifGet(downChance) && airLvMax > 0) {
                airLvMax--;
            } else {
                downChance += game.resGameConfig.downGradeChance;
            }
            //核弹
            costFood(nuclearLvMax);
            if (ifPlayerAlly&& food == 0 && ComUtil.ifGet(downChance) && nuclearLvMax > 0) {
                nuclearLvMax--;
            } else {
                downChance += game.resGameConfig.downGradeChance;
            }

            //飞弹
            costFood(varMissileNum * missileLvMax);
            if (ifPlayerAlly&& food == 0 && ComUtil.ifGet(downChance) && missileLvMax > 0) {
                missileLvMax--;
            }
        }


        public int varNeedTech;

        public int varInfantryNum;
        public int varArmorNum;
        public int varArtilleryNum;
        public int varNavyNum;
        public int varAirNum;
        public int varMissileNum;
        public int varSubmarineNum;
        public int varNuclearNum;
        public int varDefenceNum;
        public int varGeneralNum;


        public int varInfantryCost;
        public int varArmorCost;
        public int varArtilleryCost;
        public int varNavyCost;
        public int varAirCost;
        public int varNuclearCost;
        public int varMissileCost;
        public int varSubmarineCost;
        public int varDefenceCost;
        public int varGeneralCost;
        public int incomeMoney;
        public int incomeIndustry;
        public int incomeFood;
        public int incomeTech;
        public int incomeMineral;
        public int incomeOil;
        public int populationMax;


        public String getAllAttributes() {
            return " buildPolicy:" + legionIndex
                    + " internIndex:" + internIndex
                    + " suzerainLi:" + suzerainLi
                    + " countryId:" + countryId
                    + " targetAreaZone:" + targetAreaZone
                    + " money:" + money
                    + " industry:" + industry
                    + " food:" + food
                    + " mineral:" + mineral
                    + " oil:" + oil
                    + " tradeCount:" + tradeCount
                    + " tech:" + tech
                    + " level:" + level
                    + " medal:" + medal
                    + " lifeBonus:" + lifeBonus
                    + " taxBonus:" + taxBonus
                    + " rGeneralId:" + rGeneralId
                    + " capitalId:" + capitalId
                    + " cityLvMax:" + cityLvMax
                    + " industLvMax:" + industLvMax
                    + " techLvMax:" + techLvMax
                    + " energyLvMax:" + energyLvMax
                    + " transportLvMax:" + transportLvMax
                    + " infantryLvMax:" + infantryLvMax
                    + " cannonLvMax:" + cannonLvMax
                    + " tankLvMax:" + tankLvMax
                    + " fortLvMax:" + fortLvMax
                    + " navyLvMax:" + navyLvMax
                    + " airLvMax:" + airLvMax
                    + " supplyLvMax:" + supplyLvMax
                    + " defenceLvMax:" + defenceLvMax
                    + " missileLvMax:" + missileLvMax
                    + " nuclearLvMax:" + nuclearLvMax
                    + " financialLvMax:" + financialLvMax
                    + " tradeLvMax:" + tradeLvMax
                    + " cultureLvMax:" + cultureLvMax
                    + " miracleNow:" + miracleNow
                    + " militaryAcademyLv:" + militaryAcademyLv
                    + " infantryCardMax:" + infantryCardMax
                    + " armorCardMax:" + armorCardMax
                    + " artilleryCardMax:" + artilleryCardMax
                    + " navyCardMax:" + navyCardMax
                    + " airCardMax:" + airCardMax
                    + " nuclearCardMax:" + nuclearCardMax
                    + " missileCardMax:" + missileCardMax
                    + " submarineCardMax:" + submarineCardMax
                    + " defenceCardMax:" + defenceCardMax
                    + " generalCardMax:" + generalCardMax
                    + " legionRound:" + legionRound
                    + " foreignTendency:" + civilSpec
                    + " red:" + red
                    + " green:" + green
                    + " blue:" + blue
                    + " alpha:" + alpha
                    + " legionFeature1:" + legionFeature1
                    + " legionFeature2:" + legionFeature2
                    + " legionFeature3:" + legionFeature3
                    + " varNeedTech:" + varNeedTech
                    + " varInfantryNum:" + varInfantryNum
                    + " varArmorNum:" + varArmorNum
                    + " varArtilleryNum:" + varArtilleryNum
                    + " varNavyNum:" + varNavyNum
                    + " varAirNum:" + varAirNum
                    + " varNuclearNum:" + varNuclearNum
                    + " varMissileNum:" + varMissileNum
                    + " varSubmarineNum:" + varSubmarineNum
                    + " varDefenceNum:" + varDefenceNum
                    + " varGeneralNum:" + varGeneralNum
                    + " varInfantryCost:" + varInfantryCost
                    + " varArmorCost:" + varArmorCost
                    + " varArtilleryCost:" + varArtilleryCost
                    + " varNavyCost:" + varNavyCost
                    + " varAirCost:" + varAirCost
                    + " varNuclearCost:" + varNuclearCost
                    + " varMissileCost:" + varMissileCost
                    + " varSubmarineCost:" + varSubmarineCost
                    + " varDefenceCost:" + varDefenceCost
                    + " varGeneralCost:" + varGeneralCost
                    + " incomeMoney:" + incomeMoney
                    + " incomeIndustry:" + incomeIndustry
                    + " incomeFood:" + incomeFood
                    + " incomeTech:" + incomeTech;
        }

        public Array<XmlReader.Element> varLegionCanBuildCardE;
        public IntArray varBattleRegions;

        @Override
        public int compareTo(Object o) {
            LegionData d = (LegionData) o;
            if (this.legionIndex > d.legionIndex) return 1;
            if (this.legionIndex < d.legionIndex) return -1;
            return 0;
        }

        public void initLegionData() {
            this.legionIndex = 0;
            this.internIndex = 0;
            this.suzerainLi = 0;
            this.countryId = 0;
            this.targetAreaZone = 0;
            this.money = 0;
            this.industry = 0;
            this.food = 0;
            this.mineral = 0;
            this.oil = 0;
            this.tradeCount = 0;
            this.tech = 0;
            this.level = 0;
            this.medal = 1;
            this.lifeBonus = 100;
            this.taxBonus = 100;
            this.rGeneralId = 50;
            this.capitalId = -1;
            this.cityLvMax = 0;
            this.industLvMax = 0;
            this.techLvMax = 0;
            this.energyLvMax = 0;
            this.transportLvMax = 0;
            this.infantryLvMax = 0;
            this.cannonLvMax = 0;
            this.tankLvMax = 0;
            this.fortLvMax = 0;
            this.navyLvMax = 0;
            this.airLvMax = 0;
            this.supplyLvMax = 0;
            this.defenceLvMax = 0;
            this.missileLvMax = 0;
            this.nuclearLvMax = 0;
            this.financialLvMax = 0;
            this.tradeLvMax = 0;
            this.cultureLvMax = 0;
            this.miracleNow = 0;
            this.militaryAcademyLv = 0;
            this.infantryCardMax = 0;
            this.armorCardMax = 0;
            this.artilleryCardMax = 0;
            this.navyCardMax = 0;
            this.airCardMax = 0;
            this.nuclearCardMax = 0;
            this.missileCardMax = 0;
            this.submarineCardMax = 0;
            this.defenceCardMax = 0;
            this.generalCardMax = 0;
            this.legionRound = 0;
            this.civilSpec = 0;
            this.red = 0;
            this.green = 0;
            this.blue = 0;
            this.alpha = 0;
            this.legionFeature1 = 0;
            this.legionFeature2 =0;
            this.legionFeature3 = 0;
            this.legionFeatureLv1 = 0;
            this.legionFeatureLv2 =0;
            this.legionFeatureLv3 = 0;



        }

        public boolean canTrade(int priceType, int priceValue) {
            switch (priceType) {
                case 0:
                    if (getMoney() > priceValue) {
                        return true;
                    } else {
                        return false;
                    }
                case 1:
                    if (industry > priceValue) {
                        return true;
                    } else {
                        return false;
                    }
                case 2:
                    if (tech > priceValue) {
                        return true;
                    } else {
                        return false;
                    }
                case 3:
                    if (food > priceValue) {
                        return true;
                    } else {
                        return false;
                    }

                case 4:
                    if (mineral > priceValue) {
                        return true;
                    } else {
                        return false;
                    }

                case 5:
                    if (oil > priceValue) {
                        return true;
                    } else {
                        return false;
                    }

            }
            return false;
        }

        public int getTradeCount() {
            return tradeCount;
        }

        public void buyCard(int selectCardMoneyPrice, int selectCardIndustryPrice, int selectCardTechPrice, int selectCardFoodPrice) {
            costMoney(selectCardMoneyPrice);
            costIndustry(selectCardIndustryPrice);
            costTech(selectCardTechPrice);
            costFood(selectCardFoodPrice);
        }

        public void reduceTradeCount() {
            setTradeCount(this.tradeCount - 1);
        }



        public void addIncome() {
            //保底矿石收入


            if(isPlayer()){
                addMoney(incomeMoney);
                addFood(incomeFood);
                addTech(incomeTech);
                int ic=incomeIndustry;
                if(Fb2Smap.this.ifSystemEffective(1)){
                    if(incomeIndustry>getMineral()){//开始不够用,获得的工业值为矿石值
                        ic=getMineral();
                        setMineral(0);
                    }else{//开始够用,获得完整的工业值,并且矿石值-转换的工业值
                        addMineral(-incomeIndustry);
                    }
                    addIndustry(ic);
                    addMineral(incomeMineral);
                }else{
                    addIndustry(incomeIndustry);
                    addMineral(incomeMineral);
                }
            }else if(internIndex==0){
                addMoney(Math.max(getPlayerLegionData().incomeMoney,incomeMoney));
                addFood(Math.max(getPlayerLegionData().incomeFood,incomeFood));
                addTech(Math.max(getPlayerLegionData().incomeTech,incomeTech));
                addIndustry(Math.max(getPlayerLegionData().incomeIndustry,incomeIndustry));
                addMineral(Math.max(getPlayerLegionData().incomeMineral,incomeMineral));
            }else{
                addMoney(incomeMoney);
                addFood(incomeFood);
                addTech(incomeTech);
                addMineral(incomeMineral);
                addIndustry(incomeIndustry);
            }
            if(getAge()>0){
                addOil(incomeOil);
            }
        }
        public void addIncome(int count) {
            addMoney(incomeMoney*count);
            addFood(incomeFood*count);
            addTech(incomeTech*count);
            addIndustry(incomeIndustry*count);
            addMineral(incomeMineral*count);
            addOil(incomeOil*count);
        }


        public void updVarRegionCount() {
            varRegionCount+=1;
        }

        public void updVarMilitaryValue(int gameValue) {
            varMilitaryValue+=gameValue;
        }


        public String getSuzerainStr() {
            if(suzerainLi==0){
                return "prompt_none";
            }else {
                return legionDatas.get(suzerainLi).legionName;
            }
        }

        public void setStability(int v) {
            if(isPlayer()){
                int s=0;
            }
            getForeignData(legionIndex,legionIndex).setFavorValue(v);
        }

        public int getSuzerainFaver() {
            if(suzerainLi==0){
                return 0;
            }else {
                return getForeignData(legionIndex,suzerainLi).getFavorValue();
            }
        }


        //设定 可保存的资源量=收入*(10+金融等级)/20,溢出资源部分,减半
        public void setThanIncomeLoss() {
            for(int i=0;i<6;i++){
                int price=getRes(i);
                int income=getIncome(i);
                if(income==0){
                    continue;
                }
                int storageRes=GameMethod.getStorageRes(income,financialLvMax);
                if(storageRes>0&&price>storageRes){
                    setRes(i,(price-storageRes)/2+storageRes);
                }
            }
        }

        //0金钱 1工业 2科技 3食物 4矿物 5石油
        public int getRes(int priceType) {
            switch (priceType){
                case 0:
                    return getMoney();
                case 1:
                    return getIndustry();
                case 2:
                    return getTech();
                case 3:
                    return getFood();
                case 4:
                    return getMineral();
                case 5:
                    return getOil();
            }
            return 0;
        }
        public void setRes(int priceType,int value) {
            switch (priceType){
                case 0:
                     setMoney(value);break;
                case 1:
                     setIndustry(value);break;
                case 2:
                     setTech(value);break;
                case 3:
                     setFood(value);break;
                case 4:
                     setMineral(value);break;
                case 5:
                     setOil(value);break;
            }
        }
        /*private int level;
        //返回等级
        public int getLevel() {
            return level;
        }*/

        public void resetLevel(){
            if(internIndex==0){
                level= 0;
            }else if(incomeMoney< worldData.worldMoney){
                level= 1;
            }else if(incomeMoney/3< worldData.worldMoney){
                level= 2;
            }else {
                level= 3;
            }
        }

        private void initVirAttribute() {
            //resetLevel();
            legionName=game.gameMethod.getStrValueT( "country_name_"+countryId);
            countryE=game.gameConfig.getDEF_COUNTRY().getElementById(countryId);
            medal=game.gameConfig.getDEF_COUNTRY().getElementById(countryId).getInt("medal",0);
            ifEnable = countryE.getBoolean("ifEnabled", true);
            if(ifEnable&&stageId==0&&countryE.getInt("targetArea",0)==0){
                ifEnable=false;
            }
            resetLegionCanBuildCardE();
        }
        public boolean ifEnable(){
            return this.ifEnable;
        }

        public XmlReader.Element getCountryE(){
            if(countryE==null){
                initVirAttribute();
            }
            return countryE;
        }

        public String legionName;

        //是否超过上限
        public boolean ifThanResMax(){
            if(isThanMoneyMax()||isThanIndustryMax()||isThanTechMax()||isThanFoodMax()){
                return true;
            }
            if(ifEffective(1)&&isThanMineralMax()){
                return true;
            }
            if(ifEffective(2)&&isThanOilMax()){
                return true;
            }
            return false;
        }

        public boolean isThanMoneyMax() {
            if(money>GameMethod.getStorageRes(incomeMoney,financialLvMax)){
                return true;
            }
            return false;
        }
        public boolean isThanIndustryMax() {
            if(industry>GameMethod.getStorageRes(incomeIndustry,financialLvMax)){
                return true;
            }
            return false;
        }
        public boolean isThanTechMax() {
            if(tech>GameMethod.getStorageRes(incomeTech,financialLvMax)){
                return true;
            }
            return false;
        }
        public boolean isThanFoodMax() {
            if(food >GameMethod.getStorageRes(incomeFood,financialLvMax)){
                return true;
            }
            return false;
        }

        public boolean isThanMineralMax() {
            if(mineral>GameMethod.getStorageRes(incomeMineral,industLvMax)){
                return true;
            }
            return false;
        }
        public boolean isThanOilMax() {
            if(oil>GameMethod.getStorageRes(incomeOil,techLvMax)){
                return true;
            }
            return false;
        }


        public boolean isPlayerCommand() {
            if(legionIndex==masterData.playerLegionIndex||suzerainLi==masterData.playerLegionIndex){
                return true;
            }
            return false;
        }

        public boolean isPlayer() {
            if(legionIndex==masterData.playerLegionIndex){
                return true;
            }
            return false;
        }


        //value的值:城市,工业,研究,能源,交通,士兵军衔,炮兵军衔,坦克军衔,要塞军衔,海军军衔,空军军衔,升级补给,城防升级,城市导弹升级,城市超武升级,军团金融升级,军团贸易规模,城市文化等级,航天科技,步兵卡库,装甲卡库,火炮卡库,海军卡库,空军卡库,超武卡库,导弹卡库,潜艇卡库,防御卡库,将领卡库,军校等级
        public void setCardLvByBuffValue(String value) {
            String[] ts=value.split(",");
            //城市
            int v=Integer.parseInt(ts[0]);int lv=0;
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getCityLvMax()<lv){ setCityLvMax(lv);}
            }

            //工业
            v=Integer.parseInt(ts[1]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getIndustLvMax()<lv){ setIndustLvMax(lv);}
            }

            //研究
            v=Integer.parseInt(ts[2]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getTechLvMax()<lv){ setTechLvMax(lv);}
            }

            //能源
            v=Integer.parseInt(ts[3]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getEnergyLvMax()<lv){ setEnergyLvMax(lv);}
            }

            //交通
            v=Integer.parseInt(ts[4]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getTransportLvMax()<lv){ setTransportLvMax(lv);}
            }

            //士兵军衔
            v=Integer.parseInt(ts[5]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getInfantryLvMax()<lv){ setInfantryLvMax(lv);}
            }

            //炮兵军衔
            v=Integer.parseInt(ts[6]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getCannonLvMax()<lv){ setCannonLvMax(lv);}
            }

            //坦克军衔
            v=Integer.parseInt(ts[7]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getTankLvMax()<lv){ setTankLvMax(lv);}
            }

            //要塞军衔
            v=Integer.parseInt(ts[8]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getFortLvMax()<lv){ setFortLvMax(lv);}
            }

            //海军军衔
            v=Integer.parseInt(ts[9]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getNavyLvMax()<lv){ setNavyLvMax(lv);}
            }

            //空军军衔
            v=Integer.parseInt(ts[10]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getAirLvMax()<lv){ setAirLvMax(lv);}
            }

            //升级补给
            v=Integer.parseInt(ts[11]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getSupplyLvMax()<lv){ setSupplyLvMax(lv);}
            }

            //城防升级
            v=Integer.parseInt(ts[12]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getDefenceLvMax()<lv){ setDefenceLvMax(lv);}
            }

            //城市导弹升级
            v=Integer.parseInt(ts[13]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getMissileLvMax()<lv){ setMissileLvMax(lv);}
            }

            //城市超武升级
            v=Integer.parseInt(ts[14]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getNuclearLvMax()<lv){ setNuclearLvMax(lv);}
            }

            //军团金融升级
            v=Integer.parseInt(ts[15]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getFinancialLvMax()<lv){ setFinancialLvMax(lv);}
            }

            //军团贸易规模
            v=Integer.parseInt(ts[16]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getTradeLvMax()<lv){ setTradeLvMax(lv);}
            }

            //城市文化等级
            v=Integer.parseInt(ts[17]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getCultureLvMax()<lv){ setCultureLvMax(lv);}
            }

            //航天科技
            v=Integer.parseInt(ts[18]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getMiracleNow()<lv){ setMiracleNow(lv);}
            }

            //步兵卡库
            v=Integer.parseInt(ts[19]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getInfantryCardMax()<lv){ setInfantryCardMax(lv);}
            }

            //装甲卡库
            v=Integer.parseInt(ts[20]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getArmorCardMax()<lv){ setArmorCardMax(lv);}
            }

            //火炮卡库
            v=Integer.parseInt(ts[21]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getArtilleryCardMax()<lv){ setArtilleryCardMax(lv);}
            }

            //海军卡库
            v=Integer.parseInt(ts[22]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getNavyCardMax()<lv){ setNavyCardMax(lv);}
            }

            //空军卡库
            v=Integer.parseInt(ts[23]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getAirCardMax()<lv){ setAirCardMax(lv);}
            }

            //超武卡库
            v=Integer.parseInt(ts[24]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getNuclearCardMax()<lv){ setNuclearCardMax(lv);}
            }

            //导弹卡库
            v=Integer.parseInt(ts[25]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getMissileCardMax()<lv){ setMissileCardMax(lv);}
            }

            //潜艇卡库
            v=Integer.parseInt(ts[26]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getSubmarineCardMax()<lv){ setSubmarineCardMax(lv);}
            }

            //防御卡库
            v=Integer.parseInt(ts[27]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getDefenceCardMax()<lv){ setDefenceCardMax(lv);}
            }

            //将领卡库
            v=Integer.parseInt(ts[28]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getGeneralCardMax()<lv){ setGeneralCardMax(lv);}
            }

            //军校等级
            v=Integer.parseInt(ts[29]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v),v+level);
                if(getMilitaryAcademyLv()<lv){ setMilitaryAcademyLv(lv);}
            }


        }


        public int getLegionFeatureEffect(int featureId) {
            if(!Fb2Smap.this.ifSystemEffective(10)){
                return 0;
            }
            int   index=getLegionFeatureIndex(featureId);
            if(index==0){
                return 0;
            }
            return  getLegionFeatureEffectByIndex(index);
        }

        public int getLegionFeatureEffectByIndex(int index) {
            if(!Fb2Smap.this.ifSystemEffective(10)||index==0){
                return 0;
            }
            switch (index){
                case 1:return game.gameMethod.getLegionFeatureValue(legionFeature1,legionFeatureLv1);
                case 2:return game.gameMethod.getLegionFeatureValue(legionFeature2,legionFeatureLv2);
                case 3:return game.gameMethod.getLegionFeatureValue(legionFeature3,legionFeatureLv3);
                case 4:return game.gameMethod.getLegionFeatureValue(legionFeature4,legionFeatureLv4);
                case 5:return game.gameMethod.getLegionFeatureValue(legionFeature5,legionFeatureLv5);
            }
            return 0;
        }
        public int getLegionFeatureIndex(int v) {
            if(!Fb2Smap.this.ifSystemEffective(10)){
                return 0;
            }
            if(legionFeature1==v){return 1;}
            if(legionFeature2==v){return 2;}
            if(legionFeature3==v){return 3;}
            if(legionFeature4==v){return 4;}
            if(legionFeature5==v){return 5;}
            return 0;
        }
        public int getLegionFeatureByIndex(int index) {
            if(!Fb2Smap.this.ifSystemEffective(10)){
                return 0;
            }
            switch (index){
                case 1:return legionFeature1;
                case 2:return legionFeature2;
                case 3:return legionFeature3;
                case 4:return legionFeature4;
                case 5:return legionFeature5;
            }
            return 0;
        }
        public int getLegionFeatureLvByIndex(int v){
            if(!Fb2Smap.this.ifSystemEffective(10)){
                return 0;
            }
            switch (v){
                case 1:return legionFeatureLv1;
                case 2:return legionFeatureLv2;
                case 3:return legionFeatureLv3;
                case 4:return legionFeatureLv4;
                case 5:return legionFeatureLv5;
            }
            return 0;
        }

        public int getCanBuyLegionFeaturePotion() {
            if(miracleNow==0){
                return 0;
            }
            if(!Fb2Smap.this.ifSystemEffective(10)){
                return 0;
            }
            if(miracleNow>legionFeatureLv5&&legionFeatureLv5< game.resGameConfig.legionFeatureLvMax){
                return 5;
            }
            if(miracleNow>legionFeatureLv4&&legionFeatureLv4< game.resGameConfig.legionFeatureLvMax){
                return 4;
            }
            if(miracleNow>legionFeatureLv3&&legionFeatureLv3< game.resGameConfig.legionFeatureLvMax){
                return 3;
            }
            if(miracleNow>legionFeatureLv2&&legionFeatureLv2< game.resGameConfig.legionFeatureLvMax){
                return 2;
            }
            if(miracleNow>legionFeatureLv1&&legionFeatureLv1< game.resGameConfig.legionFeatureLvMax){
                return 1;
            }
            return 0;
        }

        //
        public void setColorByCommand(int value) {
            Color c=new Color(value);
            setRed((int) (c.r*255));
            setGreen((int) (c.g*255));
            setBlue((int) (c.b*255));
            setAlpha((int) (c.a*255));

            legionColors.set(legionIndex,c);
            GameUtil.changeBright(new Color(c), 0.5f);
            legionFogColors.set(legionIndex,c);
        }

        //粮食是否供应不足
        public boolean ifFoodUnderSupply() {
            if(getFood() < getAllFoodCost()){
                return true;
            }
            return false;
        }

        //是否有部队编制满
        public boolean ifFullArmyNum() {
            if(getPopulationNow()>getPopulationMax()){
                return true;
            }
            return false;
        }

        //所有资源大于这个值
        public boolean ifAllResourceGreaterThanValue(int v) {
            if(money>v&&industry>v&& food >v&&tech>v){
                return true;
            }
            return false;
        }

        public boolean ifAnyResourceGreaterThanValue(int v) {
            if(money>v||industry>v|| food >v||tech>v){
                return true;
            }
            return false;
        }

        public boolean ifAllTechLvThanValue(int v) {
            for(int i=3001;i<=3030;i++){
                if(GameMethod.getCardLv(this,null,i)<=v){
                    return false;
                }
            }
            return true;
        }


        public boolean ifAnyTechLvThanValue(int v) {
            for(int i=3001;i<=3030;i++){
                if(GameMethod.getCardLv(this,null,i)>v){
                    return true;
                }
            }
            return false;
        }

        public int getUnitArmyNum() {
            return varInfantryNum+varArmorNum+varArtilleryNum;
        }
        public int getUnitNavyNum(){
            return varNavyNum+varSubmarineNum;
        }
        public int getAllArmySumNum(){
            return varInfantryNum+varArmorNum+varArtilleryNum+varNavyNum+varAirNum+varNuclearNum+varMissileNum+varSubmarineNum;
        }
        public int getAllFoodCost() {
            return varInfantryCost+varArmorCost+varArtilleryCost+varNavyCost+varAirCost+varNuclearCost+varMissileCost+varSubmarineCost+varDefenceCost+varGeneralCost;
        }
        //获得生产倍数  1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇
        public int getRecruitMultiple(int armyType) {
            switch (armyType){
                case 1:
                case 2:
                case 3:
                    if(getUnitArmyNum()==0){
                        return 1;
                    }
                    return getPlayerLegionData().getUnitArmyNum()/getUnitArmyNum();
                case 4:
                case 8:
                    if(getUnitNavyNum()==0){
                        return 1;
                    }
                    return getPlayerLegionData().getUnitNavyNum()/getUnitNavyNum();
                case 7:
                    if(getAllArmySumNum()==0){
                        return 1;
                    }
                    return getPlayerLegionData().getAllArmySumNum()/getAllArmySumNum();
                case 6:
                    if(varDefenceNum==0){
                        return 1;
                    }
                    return getPlayerLegionData().varDefenceNum/this.varDefenceNum;
            }
            return 1;
        }

        public void setTechByLegionData(LegionData pl,boolean ifRandom,int extraLv) {
            for(int i=3001;i<=3030;i++){
                int lv=0;
                if(ifRandom){
                    lv=ComUtil.getRandom(1,GameMethod.getCardLv(pl,null,i))+extraLv;
                }else{
                    lv=GameMethod.getCardLv(pl,null,i)+extraLv;
                }
                if(lv>GameMethod.getCardLv(this,null,i)){
                    GameMethod.setCardLv(this,null,i,lv);
                }
            }
        }

        public void setAllTechLv(int v) {
            for(int i=3001;i<=3030;i++){
                GameMethod.setCardLv(this,null,i,v);
            }
        }

    /*    public void setRandomTechByLegionData(LegionData pl,int extraLv) {
            for(int i=3001;i<=3030;i++){
                int lv=ComUtil.getRandom(1,GameMethod.getCardLv(pl,null,i))+extraLv;
                if(lv>GameMethod.getCardLv(this,null,i)){
                    GameMethod.setCardLv(this,null,i,lv);
                }
            }
        }*/

        public int getWorldPress() {
            if(allRegionCount==0){
                return 0;
            }
            return varRegionCount*100/allRegionCount;
        }


        public int getSumTechLv() {
            return getCityLvMax()+getIndustLvMax()+getTechLvMax()+ getEnergyLvMax()   +getTransportLvMax()+getInfantryLvMax()+getCannonLvMax()+getTankLvMax()+getFortLvMax()+getNavyLvMax()+getAirLvMax()+getSupplyLvMax()+getDefenceLvMax()
                    +getMissileLvMax()+getNuclearLvMax()+getFinancialLvMax()+getTradeLvMax()+ getMilitaryAcademyLv()+getInfantryCardMax()+getArmorCardMax()+getArtilleryCardMax()+getNavyCardMax()
                    +getAirCardMax()+getNuclearCardMax()+getMissileCardMax()+getSubmarineCardMax()+getDefenceCardMax()+getGeneralCardMax();
        }

        public int getMaxTechLv() {
            int maxlv=0;
            for(int i=3001;i<=3030;i++){
                if(i==3019){
                    continue;
                }
                int lv=GameMethod.getCardLv(this,null,i);
                if(lv>=maxlv){
                    maxlv=lv;
                }
            }
            return maxlv;
        }

        //是否是拥有主权的独立国家
        public boolean isFreeSovereignCountry() {
            if(legionIndex==internIndex&&suzerainLi==0&&internIndex!=0){
                return true;
            }
            return false;
        }

        public boolean isPlayerCamp() {
            if(getPlayerLegionData()!=null&&getInternIndex()==getPlayerLegionData().getInternIndex()){
                return true;
            }
            return false;
        }

        public int getAge() {
            return Fb2Smap.this.getAge();
        }

        public int getDrapRound() {
            int fortRound2=getUnitFeatureLv(10);
            if(fortRound2<5){
                fortRound2=5;
            }
            return fortRound2;
        }

        private int getUnitFeatureLv(int featureId) {
            XmlReader.Element xE = game.gameConfig.getDEF_UNITFEATURE().getElementById(featureId);
            if (xE != null) {
                int cardId = xE.getInt("reqCardId", 0);
                if (cardId != 0) {
                    int reqLv = xE.getInt("reqCardLv", 0);
                    int lv=GameMethod.getCardLv(this,null,cardId);
                    if (lv>=reqLv) {
                        return lv-reqLv+1;
                    }
                }
            }
            return 0;
        }


        //如果有同阵营盟国
        public boolean ifHaveAlliance() {
            for(int i=0;i<legionDatas.size;i++){
                LegionData l=legionDatas.get(i);
                if(l.getInternIndex()==internIndex&&l.getLegionIndex()!=legionIndex){
                    return true;
                }
            }
            return false;
        }
        //如果有附属国
        public boolean haveTributary() {
            for(int i=0;i<legionDatas.size;i++){
                LegionData l=legionDatas.get(i);
                if(l.getLegionIndex()!=legionIndex&&l.getSuzerainLi()==getLegionIndex()){
                    return true;
                }
            }
            return false;
        }

        public boolean haveEnemy() {
            for(int i=0;i<legionDatas.size;i++){
                LegionData l=legionDatas.get(i);
                if(l.getLegionIndex()!=legionIndex&&getRealForgeinType(legionIndex,l.getLegionIndex())==-1){
                    return true;
                }
            }
            return false;
        }

        public int getCardTechLv(int cardId, int type) {
            int rs=getArmyLvByArmyType(cardId,type,legionIndex);
            if(rs==0){
                rs=GameMethod.getCardLv(this,null,cardId);
            }
            return rs;
        }

        public int getPopulationNow() {
            /*Iterator<IntMap.Entry<ArmyData>> it = armyHDatas.iterator();
            while (it.hasNext()) {
                IntMap.Entry<ArmyData> c = it.next();
                ArmyData a=c.value;
                if(a!=null&&a.getArmyHpNow()>0&&a.getLegionIndex()==legionIndex&&a.getArmyType()!=6&&a.getArmyId()!=1606){
                    l+=a.getPopulation();
                }
            }
            Iterator<IntMap.Entry<AirData>> itAir = airIDatas.iterator();
            while (itAir.hasNext()) {
                AirData air= itAir.next().value;
                if(air!=null&&air.getAirHpNow()>0&&air.getLegionIndex()==getLegionIndex()){
                    l+=air.getPopulation();
                }
            }*/
            return varInfantryNum+varArmorNum+varArtilleryNum+varNavyNum+varAirNum+varSubmarineNum;
        }

        public int getPopulationMax(){
            return populationMax;
        }



        public MainGame getGame() {
            return game;
        }
        //0金钱 1工业 2科技 3食物 4矿物 5石油
        public int getIncome(int priceType) {
            switch (priceType){
                case 0:
                    return incomeMoney;
                case 1:
                    return incomeIndustry;
                case 2:
                    return incomeTech;
                case 3:
                    return incomeFood;
                case 4:
                    return incomeMineral;
                case 5:
                    return incomeOil;
            }
            return 0;
        }

        public boolean ifHunger() {
            return  incomeFood>getAllFoodCost();
        }
        //与目标是否处于同一区域
        public boolean sameInAreaZone(int li) {
            //     Iterator<IntMap.Entry<BuildData>> itB = buildRDatas.iterator();
            //   while (itB.hasNext()) {
            //     BuildData b = itB.next().value;
            LegionData l=getLegionDataByLi(li);
            if(l==null){
                return false;
            }
            for(int bi=0;bi<buildRDatas.size();bi++) {
                BuildData b=buildRDatas.getByIndex(bi);
                if(b!=null&&b.getLegionIndex()==getLegionIndex()&&b.isTargetAreaZone(l.getTargetAreaZone())){
                    return true;
                }
            }
            return false;
        }

        public boolean ifControlTargetAreaZone() {
            //   Iterator<IntMap.Entry<BuildData>> itB = buildRDatas.iterator();
            // while (itB.hasNext()) {
            //   BuildData b = itB.next().value;
            int target=targetAreaZone;
            if(isPlayer()){
                target=masterData.getVictoryTarget();
            }
            for(int bi=0;bi<buildRDatas.size();bi++) {
                BuildData b=buildRDatas.getByIndex(bi);
                if(b!=null&&b.isTargetAreaZone(target)&&!b.ifSea()){
                    int tc=b.getCountryId();
                    if(b.getLegionData().getInternIndex()!=0&&getForeignDegree(b.getLegionIndex(),getLegionIndex())!=1&&!game.gameConfig.isShieldCountry(tc)&&!game.gameConfig.isInvincibleCountrys(tc)){
                        return false;
                    }
                }
            }
            return true;
        }

        public boolean ifAiCheatChance() {//征服中如果其回合进度大于世界进度,则停止ai作弊
            if(ifBanAiCheat||ifPlayerAlly()){
                return false;
            }
            return masterData.ifAiCheatChance(level,getMiracleNow()+getFinancialLvMax());
        }

        public boolean isCoreAreaRegion(int value) {
            if(capitalId==value){
                return true;
            }
            if(coreAreaRegions!=null&&coreAreaRegions.contains(value)){
                return true;
            }
            return false;
        }
        public boolean isMajorAreaRegion(int value) {
            if(majorAreaRegions!=null&&majorAreaRegions.contains(value)){
                return true;
            }
            return false;
        }

        public boolean isCoreAreaSR(int value) {
            if(coreAreaSRs!=null&&coreAreaSRs.contains(value)){
                return true;
            }
            return false;
        }
        //是否是领土
        public boolean isTerritoryRegion(int region){
            if(isCoreAreaRegion(region)||isMajorAreaRegion(region)||capitalId==region){
                return true;
            }
            return false;
        }
        public boolean ifHaveAllTerritory() {
            BuildData cb=getBuildDataByRegion(capitalId);
            if(cb==null||cb.getLegionIndex()!=getLegionIndex()){
                return false;
            }
            if(majorAreaRegions!=null){
               // String[] strs = majorAreaRegions.split(",");
                for (int i = 0; i < majorAreaRegions.size; i++) {
                    int region=majorAreaRegions.get(i);
                    cb=getBuildDataByRegion(region);
                    if(cb!=null&&!cb.ifSea()&&getForeignDegree(cb.getLegionIndex(),getLegionIndex())!=1){
                        return false;
                    }
                }
            }
            if(coreAreaRegions!=null){
               // String[] strs = coreAreaRegions.split(",");
                for (int i = 0; i < coreAreaRegions.size; i++) {
                    int region=coreAreaRegions.get(i);
                    cb=getBuildDataByRegion(region);
                    if(cb!=null&&!cb.ifSea()&&getForeignDegree(cb.getLegionIndex(),getLegionIndex())!=1){
                        return false;
                    }
                }
            }
            return true;
        }
        public String getNotContralTerritoryStrs(int count){
            StringBuilder sb=new StringBuilder();
            BuildData cb=getBuildDataByRegion(capitalId);
            IntArray srs=game.tempUtil.getTempIntArray();
            int c=0;
            if(cb==null||cb.getLegionIndex()!=getLegionIndex()){
                if(!ComUtil.isEmpty(cb.srName)){
                    sb.append(cb.srName);
                    srs.add(cb.getStrategicRegion());
                    c++;
                }
            }
            if(majorAreaRegions!=null){
              //  String[] strs = majorAreaRegions.split(",");
                for (int i = 0; i <majorAreaRegions.size; i++) {
                    int region=majorAreaRegions.get(i);
                    cb=getBuildDataByRegion(region);
                    if(cb!=null&&!cb.ifSea()&&getForeignDegree(cb.getLegionIndex(),getLegionIndex())!=1&&!srs.contains(cb.getStrategicRegion())){
                        if(c>count&&count!=-1){
                            sb.append("...");
                            break;
                        }
                        if(sb.length()>0){
                            sb.append(",");
                        }
                        sb.append(cb.srName);
                        srs.add(cb.getStrategicRegion());
                        c++;
                    }
                }
            }
            if(coreAreaRegions!=null){
                //String[] strs = coreAreaRegions.split(",");
                //for (int i = 0; i < strs.length; i++) {

                for (int i = 0; i < coreAreaRegions.size; i++) {
                    {
                        int region=coreAreaRegions.get(i);
                        cb=getBuildDataByRegion(region);
                        if(cb!=null&&getForeignDegree(cb.getLegionIndex(),getLegionIndex())!=1&&!srs.contains(cb.getStrategicRegion())){
                            if(c>count&&count!=-1){
                                sb.append("...");
                                break;
                            }
                            if(sb.length()>0){
                                sb.append(",");
                            }
                            sb.append(cb.srName);
                            srs.add(cb.getStrategicRegion());
                            c++;
                        }
                    }
                }
            }
            game.tempUtil.disposeTempIntArray(srs);
            return sb.toString();
        }

        public boolean isFail() {
            if(varRegionCount==0||getInternIndex()==0){
                return true;
            }
            for(int bi=0;bi<buildRDatas.size();bi++){
                BuildData b=buildRDatas.getByIndex(bi);
                int tc=b.getCountryId();
                if(b!=null&&b.getLegionIndex() ==getLegionIndex() && !b.ifSea()&&!game.gameConfig.isShieldCountry(tc)&&!game.gameConfig.isInvincibleCountrys(tc) ){
                    return false;
                }
            }
            return true;
        }

        public boolean ifEffective(int i) {
            return Fb2Smap.this.ifSystemEffective(i);
        }

        //是否有核心领土被目标国占领
        public boolean haveCoreRegionBeOccup(LegionData legion) {
            if(legion.getLegionIndex()==getLegionIndex()){
                return false;
            }
            if(coreAreaRegions==null){
                return false;
            }
            for (int i = 0; i < coreAreaRegions.size; i++) {
                    int region=coreAreaRegions.get(i);
                    BuildData b=getBuildDataByRegion(region);
                    if(b!=null&&b.getLegionIndex()==legion.getLegionIndex()){
                        return true;
                    }
            }

            return false;
        }

        public int getCM() {
            return controlMode;
        }


        public boolean canPayCard(BuildData build, int cardId) {
            return Fb2Smap.this.canPayCardPrice(this,build,cardId);
        }

        public boolean ifControlCoreRegion() {
            if(coreAreaRegions==null){
                return true;
            }
            for (int i = 0; i < coreAreaRegions.size; i++) {
                    int region=coreAreaRegions.get(i);
                    BuildData b=getBuildDataByRegion(region);
                    if(b!=null&&b.getLegionIndex()!=getLegionIndex()){
                        return false;
                    }
            }
            return true;
        }

        public boolean ifControlMajorRegion() {
            if(majorAreaRegions==null){
                return true;
            } for (int i = 0; i < coreAreaRegions.size; i++) {
                {
                    int region=coreAreaRegions.get(i);
                    BuildData b=getBuildDataByRegion(region);
                    if(b!=null&&!b.isAlly(getLegionIndex())){
                        return false;
                    }
                }
            }
            return true;
        }

        public boolean legionNameIntersect(int x, int y, int w, int h,int loopState) {
            if(w!=0&&h!=0&&varW!=0&&varH!=0){
                if(loopState==0||loopState==1){
                    int x01=x;
                    int x02=x+w;
                    int y01=y;
                    int y02=y+h;
                    int x11=varX;
                    int x12=varX+varW;
                    int y11=varY;
                    int y12=varY+varH;
                    int zx = Math.abs(x01 + x02 -x11 - x12);
                    int cx  = Math.abs(x01 - x02) + Math.abs(x11 - x12);
                    int zy = Math.abs(y01 + y02 - y11 - y12);
                    int cy  = Math.abs(y01 - y02) + Math.abs(y11 - y12);
                    if(zx <= cx && zy <= cy)
                        return true;
                }
                if(loopState==1||loopState==2){
                    int x01=x;
                    int x02=x+w;
                    int y01=y;
                    int y02=y+h;
                    int x11=varX+masterData.getWidth();
                    int x12=varX+varW+masterData.getWidth();
                    int y11=varY;
                    int y12=varY+varH;
                    int zx = Math.abs(x01 + x02 -x11 - x12);
                    int cx  = Math.abs(x01 - x02) + Math.abs(x11 - x12);
                    int zy = Math.abs(y01 + y02 - y11 - y12);
                    int cy  = Math.abs(y01 - y02) + Math.abs(y11 - y12);
                    if(zx <= cx && zy <= cy)
                        return true;
                }
            }
            return false;
        }

        public Color getColor() {
            return legionColors.get(legionIndex);
        }

        public Color getFogColor() {
            if(game.gameConfig.ifColor &&!ifHaveImageBg()){
                return getColor();
            }
            return legionFogColors.get(legionIndex);
        }

        public Color getReallyFogColor() {
            return legionFogColors.get(legionIndex);
        }
        public Color getColorByAlly() {
            if(ifPlayerAlly()){
                return getColor();
            }
            return getFogColor();
        }

        public Color getColorByAlly2() {
            if(ifPlayerAlly()){
                return getFogColor();
            }
            return getColor();
        }

        public int getPlayerAmbition() {
            return Fb2Smap.this.getPlayerAmbition();
        }

        public int getPlayerAmbitionValue() {
            return Fb2Smap.this.getPlayerAmbitionValue();
        }
        //计算交易  tradeType 0金钱 1工业 2科技 3食物 4矿物 5石油
        public int getTradeValue(int tradeType1, int tradeValue1, int tradeType2) {
            //先计算自身收入的比例
            int t1=getIncome(tradeType1);//工业 50 交换 工业 500
            int t2=getIncome(tradeType2);// 金钱 100
            if(t2==0){
                return tradeValue1;
            }
            int rs= (int) (t2*1f/t1*tradeValue1);
            if(rs==0){
                return tradeValue1;
            }
            if(rs>t2/2){
                return t2;
            }
            return rs;
        }

        public int getLegionChance(int cardId) {
            int lv=   GameMethod.getCardLv(this,null,cardId);
            return ComUtil.limitValue(lv*game.resGameConfig.addLegionPolicyChanceEachCardTechLv,0,100);
        }

        public int getPlayerMode() {
            return masterData.getPlayerMode();
        }

        public void resetBattleRegions() {
            if(varBattleRegions==null){
                varBattleRegions=new IntArray();
            }else if(varBattleRegions.size>0){
                for(int i=varBattleRegions.size-1;i>=0;i--){
                    int id=varBattleRegions.get(i);
                    BuildData b=getBuildDataByRegion(id);
                    if(b==null){
                        varBattleRegions.removeIndex(i);
                    }else {
                        if(b.isAlly(legionIndex)&&b.getBuildStatus()==0){
                            varBattleRegions.removeIndex(i);
                        }
                    }
                }
            }
            if(coreAreaRegions!=null){
                for (int i = 0; i < coreAreaRegions.size; i++) {

                        int region=coreAreaRegions.get(i);
                        BuildData b=getBuildDataByRegion(region);
                        if(b==null){ continue;}
                        if(!b.isAlly(legionIndex)||b.getBuildStatus()!=0){
                            if(!varBattleRegions.contains(b.getRegionId())){
                                varBattleRegions.add(b.getRegionId());
                            }
                        }

                }
            }
            if(majorAreaRegions!=null){
                for (int i = 0; i < majorAreaRegions.size; i++) {

                        int cr=majorAreaRegions.get(i);
                        BuildData b=getBuildDataByRegion(cr);
                        if(b==null){ continue;}
                        if(!b.isAlly(legionIndex)||b.getBuildStatus()!=0){
                            if(!varBattleRegions.contains(b.getRegionId())){
                                varBattleRegions.add(b.getRegionId());
                            }
                        }

                }
            }
        }
        //获得丢失的核心领土或主要领土
        public int getLossCoreRegion() {
            IntArray rs=game.tempUtil.getTempIntArray();
            int region=-1;
            if(coreAreaRegions!=null){ for (int i = 0; i < coreAreaRegions.size; i++) {
                {
                    int cr=coreAreaRegions.get(i);
                        BuildData b=getBuildDataByRegion(cr);
                        if(b!=null&&b.getLegionIndex()!=getLegionIndex()){
                            rs.add(b.getRegionId());
                        }
                    }
                }
                if(rs.size>0){
                    region=rs.random();
                    game.tempUtil.disposeTempIntArray(rs);
                    return region;
                }
            }
            if(majorAreaRegions!=null){

                for (int i = 0; i < majorAreaRegions.size; i++) {

                        int cr=majorAreaRegions.get(i);
                        BuildData b=getBuildDataByRegion(cr);
                        if(b!=null&&!b.isAlly(getLegionIndex())){
                            rs.add(b.getRegionId());
                        }

                }
                if(rs.size>0){
                    region=rs.random();
                    game.tempUtil.disposeTempIntArray(rs);
                    return region;
                }
            }
            return region;
        }

        public boolean ifCanRecruitGeneral() {
            if(varGeneralNum<getGeneralCardNum()){
                return true;
            }
            return  false;
        }
        //是否有可以被招募的有名有姓的将领
        //1步兵2炮兵3坦克4海军5空军  0不限制 -1陆军 步炮坦
        public boolean ifHaveCanRecruitGeneral(int armyType,boolean ifFriendly) {
            if (generalEs != null && generalEs.size > 0) {
                for (XmlReader.Element g : generalEs) {
                  //  if((ComUtil.ifHaveValueInStr(g.get("country"),getCountryId())|| (ifFriendly&&ifFriendlyCountry(g.get("country"),getCountryId())))&&compareGameTime(false,g.getInt("service", 0), 0)&&compareGameTime(true,g.getInt("death", 0), 0) &&!generalIds.contains(g.getInt("id",0)) &&DefDAO.ifArmyTypeEqualGeneralType(armyType,g.getInt("type",0))  ){
                        if((ComUtil.ifHaveValueInStr(g.get("country"),countryId)|| (ifFriendly&&ifFriendlyCountry(g.get("country"),countryId)&&g.getInt("ability",0)<getGame().resGameConfig.recruitGeneralFriendlyAbilityLimit))&&compareGameTime(false,g.getInt("service", 0), 0)&&compareGameTime(true,g.getInt("death", 0), 0)&& !generalIds.contains(g.getInt("id",0))&&DefDAO.ifArmyTypeEqualGeneralType(armyType,g.getInt("type",0))     ){
                            return true;
                    }
                }
            }
            return  false;
        }

        //获得所有的含有盟友的潜在战斗力
        public int getAllForce() {
            int rs=0;
            for(int i=0;i<legionDatas.size;i++){
                LegionData l=legionDatas.get(i);
                if(getForeignDegree(l.getLegionIndex(),getLegionIndex())==1){
                    rs+=l.getAllArmySumNum();
                }
            }
            return rs;
        }

        public boolean isEditMode(boolean ifOnlyNeutral) {
            return Fb2Smap.this.isEditMode(ifOnlyNeutral);
        }

        public BuildData getRandomBorderBuildData(int legionIndex) {
            BuildData b=null;
            Array<BuildData> bs=game.tempUtil.getTempArray();
            for(int bi=0;bi<buildRDatas.size();bi++){
                b=buildRDatas.getByIndex(bi);
                if(b!=null&&b.getLegionIndex() ==getLegionIndex() && !b.ifSea()&&b.getInfluenceLi()!=legionIndex&&b.ifBorderLi(legionIndex,false) ){
                    bs.add(b);
                }
            }
            if(bs.size>0){
                b=bs.random();
            }else{
                b=null;
            }
            game.tempUtil.disposeTempArray(bs);
            return b;
        }

        public Array getTasks() {
            return taskDatas;
        }

        public int getWarSupport() {
            if(isPlayer()){
                return getChiefWarSupport();
            }
            return 50;
        }

        public int getPopEfficency() {
            if(getPlayerLegionData().getPopulationNow()<game.resGameConfig.populationLimitTrigger){
                return 100;
            }
            int popmax=getPopulationMax();
            return   ComUtil.limitValue( 100-(( getPlayerLegionData().getPopulationNow()-game.resGameConfig.populationLimitTrigger)*100/ (popmax- game.resGameConfig.populationLimitTrigger)) ,1,100);
        }

        public int getSpiritId() {
            return game.gameConfig.getDEF_COUNTRY().getElementById(countryId).getInt("spiritId",-1);
        }

        public IntIntMap getSpiritMap() {
            return spiritMap;
        }
        //获得某种类型的数量  1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇
        public int getUnitNumByType(int cardType) {
            //+++++++;
            switch (cardType){
                case 1: return varInfantryNum;
                case 2: return varArtilleryNum;
                case 3: return varArmorNum;
                case 4: return varNavyNum;
                case 5: return varAirNum;
                case 6: return varDefenceNum;
                case 7: return varNuclearNum;
                case 8: return varSubmarineNum;
            }
            return 0;
        }

        public int getExtraMoraleByLegionFeature(int armyId, int armyType) {
            if(armyId==1606&&ifLegionFeature(28)){
                return getLegionFeatureEffect(28);
            }
            if(armyType==1&&ifLegionFeature(22)){
                return getLegionFeatureEffect(22);
            }
            if(armyType==2&&ifLegionFeature(23)){
                return getLegionFeatureEffect(23);
            }
            if(armyType==3&&ifLegionFeature(24)){
                return getLegionFeatureEffect(24);
            }
            if(armyType==4&&ifLegionFeature(25)){
                return getLegionFeatureEffect(25);
            }
            if(armyType==5&&ifLegionFeature(26)){
                return getLegionFeatureEffect(26);
            }
            if(armyType==6&&ifLegionFeature(30)){
                return getLegionFeatureEffect(30);
            }
            if(armyType==7&&ifLegionFeature(29)){
                return getLegionFeatureEffect(29);
            }
            if(armyType==8&&ifLegionFeature(27)){
                return getLegionFeatureEffect(27);
            }
            return 0;
        }

        public boolean ifHaveSpirit(int id) {
            return Fb2Smap.this.ifHaveSpirit(id);
        }

        public int getSpiritValue(int i) {
            return Fb2Smap.this.getSpiritValue(i);
        }

        public boolean isUnitGroup(int cardType) {
            return Fb2Smap.this.isUnitGroup(cardType);
        }

        public ArmyData getCapitalArmyData() {
            BuildData b=getCapital();
            if(b!=null){
                return b.getRegionUnit();
            }
            return null;
        }
        //是否控制首都所在洲际
        public boolean ifControlIntercontinent() {
            BuildData cb=getCapital();
            if(cb==null){
                return false;
            }
            // 代表洲际  10亚20欧30北美40南美50非60大洋洲
            int continent=cb.getIntercontinentalZone();
            if(continent==0){
                return false;
            }
            for(int bi=0;bi<buildRDatas.size();bi++) {
                BuildData b=buildRDatas.getByIndex(bi);
                if(b!=null&&!b.ifSea()&&b.getIntercontinentalZone()==continent){
                    if(getForeignDegree(b.getLegionIndex(),getLegionIndex())!=1){
                        return false;
                    }
                }
            }
            return true;
        }
        public String getNotContralIntercontinentalZoneStrs(int count){
            StringBuilder sb=new StringBuilder();
            BuildData cb=getBuildDataByRegion(capitalId);
            int continent=cb.getIntercontinentalZone();
            int c=0;
            IntArray srs=game.tempUtil.getTempIntArray();
            for(int bi=0;bi<buildRDatas.size();bi++) {
                BuildData b=buildRDatas.getByIndex(bi);
                if(b!=null&&!b.ifSea()&&b.getIntercontinentalZone()==continent){
                    if(getForeignDegree(b.getLegionIndex(),getLegionIndex())!=1&&!srs.contains(b.getStrategicRegion())){
                        if(c>count&&count!=-1){
                            sb.append("...");
                            break;
                        }
                        if(sb.length()>0){
                            sb.append(",");
                        }
                        sb.append(b.srName);
                        srs.add(b.getStrategicRegion());
                        c++;
                    }
                }
            }
            game.tempUtil.disposeTempIntArray(srs);
            return sb.toString();
        }

        public boolean notHostilityLegion() {
            for(int i=0;i<legionDatas.size;i++){
                LegionData l=legionDatas.get(i);
                if(l!=null&&l.getInternIndex()!=0&&l.varRegionCount>0&&l.getLegionIndex()!=getLegionIndex()){
                    if(foreignDatas!=null&&ifEffective(4)){
                        ForeignData f=getForeignData(l.getLegionIndex(),getLegionIndex());
                        if(f!=null&&(f.getDiplomaticAttitude()==3||f.getForeignType()==-1 )){
                            return false;
                        }
                    }else{
                        int fd=getForeignDegree(l.getLegionIndex(),getLegionIndex());
                        if(fd==-1){
                            return false;
                        }
                    }
                }
            }
            return true;
        }

        public String getHostilityLegionStrs(int count){
            int c=0;
            IntArray srs=game.tempUtil.getTempIntArray();
            StringBuilder sb=new StringBuilder();
            for(int i=0;i<legionDatas.size;i++){
                LegionData l=legionDatas.get(i);
                if(l!=null&&l.getInternIndex()!=0&&l.varRegionCount>0&&l.getLegionIndex()!=getLegionIndex()&&!srs.contains(l.getLegionIndex())){
                    if(foreignDatas!=null&&ifEffective(4)){
                        ForeignData f=getForeignData(l.getLegionIndex(),getLegionIndex());
                        if(f!=null&&(f.getDiplomaticAttitude()==3||f.getForeignType()==-1 )){
                            if(c>count&&count!=-1){
                                sb.append("...");
                                break;
                            }
                            if(sb.length()>0){ sb.append(",");}
                            sb.append(l.legionName);
                            srs.add(l.getLegionIndex());
                            c++;
                        }
                    }else{
                        int fd=getForeignDegree(l.getLegionIndex(),getLegionIndex());
                        if(fd==-1){
                            if(c>count&&count!=-1){
                                sb.append("...");
                                break;
                            }
                            if(sb.length()>0){ sb.append(",");}
                            sb.append(l.legionName);
                            srs.add(l.getLegionIndex());
                            c++;
                        }
                    }
                }
            }
            game.tempUtil.disposeTempIntArray(srs);
            return sb.toString();
        }

        public boolean ifFirstMilitary() {
            int military=getAllArmySumNum();
            for(int i=0;i<legionDatas.size;i++){
                LegionData l=legionDatas.get(i);
                if(l!=null&&l.getInternIndex()!=0&&l.varRegionCount>0&&l.getLegionIndex()!=getLegionIndex()){
                    if(l.getAllArmySumNum()>military){
                        return false;
                    }
                }
            }
            return true;
        }
        public boolean ifFirstTech() {
            int tech=getSumTechLv();
            for(int i=0;i<legionDatas.size;i++){
                LegionData l=legionDatas.get(i);
                if(l!=null&&l.getInternIndex()!=0&&l.varRegionCount>0&&l.getLegionIndex()!=getLegionIndex()){
                    if(l.getSumTechLv()>tech){
                        return false;
                    }
                }
            }
            return true;
        }
        public boolean ifFirstRegion() {
            for(int i=0;i<legionDatas.size;i++){
                LegionData l=legionDatas.get(i);
                if(l!=null&&l.getInternIndex()!=0&&l.varRegionCount>0&&l.getLegionIndex()!=getLegionIndex()){
                    if(l.varRegionCount>this.varRegionCount){
                        return false;
                    }
                }
            }
            return true;
        }

        public Array<GeneralData> getGeneralDatas(Array rs,int count) {
            if(rs==null){
                rs=new Array();
            }else{
                rs.clear();
            }
            int r=0;
            Iterator<IntMap.Entry<GeneralData>> itG = generalIDatas.iterator();
            while (itG.hasNext()) {
                GeneralData c = itG.next().value;
                if(c!=null&&c.getGeneralIndex()!=0&&c.getLegionIndex()==legionIndex&&c.getState()==0){
                    rs.add(c);
                    r++;
                    if(r>count){
                        break;
                    }
                }
            }
            return rs;
        }
        //邻国好感度危机 :结果为低好感度国家,无则为0
        public int getRandomCrisisFaverBorderLi() {
            int rs=-1;
            if(borderLegionIndexs!=null&&borderLegionIndexs.size>0&&ifSystemEffective(4)){
                IntArray ia=game.tempUtil.getTempIntArray();
                for(int i=0;i<borderLegionIndexs.size;i++){
                    int li=borderLegionIndexs.get(i);
                    LegionData l=getLegionDataByLi(li);
                    if(l!=null&&l.getLegionIndex()>0&&l.getLegionIndex()!=l.getInternIndex()&&l.getLegionIndex()>0&&l.getInternIndex()>0){
                        ForeignData f=getForeignData(getLegionIndex(),l.getLegionIndex());
                        if(f!=null&&!f.isAlly()&&f.getFavorValue()<50&&f.getForeignType()==0){
                            ia.add(l.getLegionIndex());
                        }
                    }
                }
                rs=ia.random();
                game.tempUtil.disposeTempIntArray(ia);
            }
            return rs==0?-1:rs;
        }
        public int getArmyGradeLv(int armyId,int type) {
            if(armyId==1606){//3026
                return this.getMissileCardMax();
            }
            switch (type) {
                case 1://3020
                    return this.getInfantryCardMax();
                case 2://3022
                    return this.getArtilleryCardMax();
                case 3://3021
                    return this.getArmorCardMax();
                case 4://3023
                    return this.getNavyCardMax();
                case 5://3024
                    return this.getAirCardMax();
                case 6://3028
                    return this.getDefenceCardMax();
                case 7://3025
                    return this.getNuclearCardMax();
                case 8://3027
                    return this.getSubmarineCardMax();
            }
            return 0;
        }
        //triggerValue 值为敌对国countryId,用","分割,当都是敌人的时候为true
        public boolean allIsEnemyCountry(String triggerValue) {
            String[] strs = triggerValue.split(",");
            int t=0;
            for (int i = 0; i < strs.length; i++) {
                if (ComUtil.isNumeric(strs[i])) {
                    int c=Integer.parseInt(strs[i]);
                    LegionData tl=getLegionByCountry(c,true);
                    if(tl!=null&&tl.varRegionCount>0){
                            if( getForeignDegree(getLegionIndex(),tl.getLegionIndex())!=-1){
                                return false;
                            }
                        t++;
                    }
                }
            }
            if(t>0){
                return true;
            }
            return false;
        }
        //triggerValue 值为敌对国countryId,用","分割,当都是敌人的时候为true
        public boolean orIsEnemyCountry(String triggerValue) {
            String[] strs = triggerValue.split(",");
            for (int i = 0; i < strs.length; i++) {
                if (ComUtil.isNumeric(strs[i])) {
                    int c=Integer.parseInt(strs[i]);
                    LegionData tl=getLegionByCountry(c,true);
                    if(tl!=null&&getForeignDegree(getLegionIndex(),tl.getLegionIndex())==-1){
                        return true;
                    }
                }
            }
            return false;
        }
        //triggerValue 值为目标国countryId,用","分割, 有一个只要不是敌人的时候就为true
        public boolean orNotIsEnemy(String triggerValue) {
            String[] strs = triggerValue.split(",");
            for (int i = 0; i < strs.length; i++) {
                if (ComUtil.isNumeric(strs[i])) {
                    int c=Integer.parseInt(strs[i]);
                    LegionData tl=getLegionByCountry(c,true);
                    if(tl!=null&&getForeignDegree(getLegionIndex(),tl.getLegionIndex())!=-1){
                        return true;
                    }
                }
            }
            return false;
        }
        //triggerValue 值为目标国countryId,用","分割, 当都不是敌人的时候为true
        public boolean allNotIsEnemy(String triggerValue) {
            int t=0;
            String[] strs = triggerValue.split(",");
            for (int i = 0; i < strs.length; i++) {
                if (ComUtil.isNumeric(strs[i])) {
                    int c=Integer.parseInt(strs[i]);
                    LegionData tl=getLegionByCountry(c,true);
                    if(tl!=null&&tl.varRegionCount>0){
                        if(getForeignDegree(getLegionIndex(),tl.getLegionIndex())==-1){
                            return false;
                        }
                        t++;
                    }
                }
            }
            if(t>0){
                return true;
            }
            return false;
        }
        //triggerValue countryId,areaId 第一个值为countryId,后面的值为地名areaId,需判断countryId是否为敌对国,countryId是否有areaId,都满足时为true
        public boolean isEnemyAndTargetHaveArea(String triggerValue) {
            String[] strs = triggerValue.split(",");
            LegionData tl=null;
            if (ComUtil.isNumeric(strs[0])) {
                int c=Integer.parseInt(strs[0]);
                 tl=getLegionByCountry(c,true);
            }else{
                return false;
            }
            if(tl!=null&&getForeignDegree(getLegionIndex(),tl.getLegionIndex())==-1){
                for (int i = 1; i < strs.length; i++) {
                    if (ComUtil.isNumeric(strs[i])) {
                        int c=Integer.parseInt(strs[i]);
                       if(buildNameMap.containsKey(c)){
                           BuildData tb=getBuildDataByRegion(buildNameMap.get(c,0));
                           if(tb!=null&&tb.getLegionIndex()==tl.getLegionIndex()){
                               return true;
                           }
                       }
                    }
                }
            }
            return false;
        }
        //triggerValue countryId,areaId 第一个值为countryId,后面的值为地名srregion,需判断countryId是否为敌对国,countryId是否有至少一个srregion,都满足时为true
        public boolean isEnemyAndTargetHaveSRRegion(String triggerValue) {
            String[] strs = triggerValue.split(",");
            LegionData tl=null;
            if (ComUtil.isNumeric(strs[0])) {
                int c=Integer.parseInt(strs[0]);
                tl=getLegionByCountry(c,true);
            }else{
                return false;
            }
            if(tl!=null&&getForeignDegree(getLegionIndex(),tl.getLegionIndex())==-1){
                for (int i = 1; i < strs.length; i++) {
                    if (ComUtil.isNumeric(strs[i])) {
                        int srRegion=Integer.parseInt(strs[i]);
                        if( srRegionMap.containsKey(srRegion)){
                            IntArray rs= srRegionMap.get(srRegion);
                            for(int j=0;j<rs.size;j++){
                                BuildData tb=getBuildDataByRegion(rs.get(j));
                                if(tb!=null&&tb.getLegionIndex()==tl.getLegionIndex()){
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
            return false;
        }

        public boolean isRound() {
            if(roundState==0||roundState==4||roundState==3){
                if(isPlayer()){
                    return true;
                }
            }else{
                if(legionIndex==roundLegionIndex){
                    return true;
                }
            }
            return false;
        }

        public int getGameMode() {
            return masterData.playerMode;
        }

        public void resetPopulationMax() {
            int rs=0;
            //  Iterator<IntMap.Entry<BuildData>> itb = buildRDatas.iterator();
            // while (itb.hasNext()) {
            //   BuildData b = itb.next().value;
            for(int bi=0;bi<buildRDatas.size();bi++) {
                BuildData b=buildRDatas.getByIndex(bi);
                if(b!=null&&b.getLegionIndex()==legionIndex&&!b.ifSea()){
                    rs+=game.resGameConfig.cityBasePopulation
                            +b.getCityLvNow()+b.getCultureLvNow();
                }
            }
            int max=masterData.getWidth()*masterData.getHeight()/50;
            if(max>game.resGameConfig.populationLimitMax){
                max=game.resGameConfig.populationLimitMax;
            }else if(max<game.resGameConfig.populationLimitTrigger){
                max=game.resGameConfig.populationLimitTrigger;
            }
            if(max>999){
                max=999;
            }
            if(isPlayer()&&(masterData.ifChief == 1 && chiefData != null)){
                rs=rs*(100+chiefData.varPopulationChange)/100;
            }else if(ifPlayerEnemy()&&getPlayerLegionData().borderLegionIndexs.contains(getLegionIndex())){
                rs*=ComUtil.max(1,getLevel());
            }
            populationMax=   ComUtil.limitValue(rs+extraPopulation,game.resGameConfig.populationLimitMin,max);
        }

        public void resetLegionCanBuildCardE() {
            GameMethod.resetLegionCanBuildCardE(this, publicLegionCardEs);
        }


        //判断两个组合单位是否能够合并
        //只判断组合单位
       /* public boolean unitGroupCanMergeForTechGroup(ArmyData tArmy, ArmyData sArmy) {
            if(tArmy==null||sArmy==null||!tArmy.isUnitGroup()||!sArmy.isUnitGroup()||tArmy.getLegionIndex()!=sArmy.getLegionIndex()){
                return false;
            }
            if(tArmy.getUnitGroup()+sArmy.getUnitGroup()<7){
                return true;
            }
            LegionData l=tArmy.getLegionData();
            if(l==null){
                return false;
            }
            //将单位的信息数列化
            for(int i=0;i<2;i++){
                for(int j=0;j<7;j++){
                    AuxiliaryArmyMerge aam=null;
                    ArmyData a;
                    if(i==0){
                      aam=  auxiliaryArmyMergeArrays.get(j);
                      a=sArmy;
                    }else{
                        aam=  auxiliaryArmyMergeArrays2.get(j);
                        a=tArmy;
                    }
                    int armyId=a.getUnitGroupArmyId(j);
                    if(armyId!=0){
                        int groupLv=a.getUnitGroupGroupLv(j);
                        aam.setArmyId(armyId);
                        aam.setArmyGroupLv(groupLv);
                        aam.setArmyType(a.getUnitGroupArmyType(j));
                        aam.setGrouLvMax(getArmyGradeLv(armyId,aam.getArmyType()));
                    }else{
                        aam.setArmyId(0);
                        aam.setArmyGroupLv(0);
                        aam.setGrouLvMax(0);
                        aam.setArmyType(0);
                    }
                }
            }
            auxiliaryArmyMergeRs=false;
            permAuxiliaryArmyMerge(0);
            return auxiliaryArmyMergeRs;
        }*/
        
        /*public void permAuxiliaryArmyMerge(int index){
            if(auxiliaryArmyMergeRs){
                return;
            }else  if(index==auxiliaryArmyMergeArrays2.size){
                if(ResDefaultConfig.ifDebug){
                    StringBuilder sb=new StringBuilder();
                    for(int i=0;i<auxiliaryArmyMergeArrays2.size;i++){
                        AuxiliaryArmyMerge aam=auxiliaryArmyMergeArrays2.get(i);
                       sb.append(" i:"+i+":"+aam.getArmyId()+"_"+aam.getGrouLvMax());
                    }
                    Gdx.app.log("auxiliaryArmyMergeArrays2",sb.toString());
                }
                auxiliaryArmyMergeRs=auxiliaryArmyArrayCanMerge();
                return;
            }else{//排列结果
                for(int i=index;i<auxiliaryArmyMergeArrays2.size;i++){
                    auxiliaryArmyMergeArrays2.swap(i,index);
                    permAuxiliaryArmyMerge(index+1);
                    auxiliaryArmyMergeArrays2.swap(i,index);
                }
            }
        }
        public boolean auxiliaryArmyArrayCanMerge(){
            if(auxiliaryArmyMergeArrays==null||auxiliaryArmyMergeArrays2==null||auxiliaryArmyMergeArrays.size!=auxiliaryArmyMergeArrays2.size){
                return false;
            }
            for(int i=0;i<auxiliaryArmyMergeArrays.size;i++){
                AuxiliaryArmyMerge aam1=auxiliaryArmyMergeArrays.get(i);
                AuxiliaryArmyMerge aam2=auxiliaryArmyMergeArrays2.get(i);
                if(aam1.getArmyId()!=aam2.getArmyId()|| (aam1.getArmyId()==aam2.getArmyId()&&(aam1.getArmyGroupLv()+aam2.getArmyGroupLv()>aam1.getGrouLvMax() ))){
                    return false;
                }
            }
            return true;
        }*/
       /* //敌人核心领土处于交战状态  返回核心领土region,无则为-1
        public int getRegionWhenEnemyCoreSRRegionIsWar() {
            return -1;
        }
        //敌人主要领土处于交战状态  返回核心领土region,无则为-1
        public int getRegionWhenEnemyMajorSRRegionIsWar() {

            return -1;
        }
        //占有敌人的主要领土且其处于交战状态  返回主要领土region,无则为-1
        public int getRegionWhenHaveEnemyMajorSRRegionAndIsWar() {

            return -1;
        }
        //占有敌人的核心领土且其处于交战状态  返回核心领土region,无则为-1
        public int getRegionWhenHaveEnemyCoreSRRegionAndIsWar() {

            return -1;
        }
        //自己的主要领土被敌军占有  返回主要领土region,无则为-1
        public int getRegionWhenSelfMajorSRRegionIsLoss() {

            return -1;
        }
        //自己的核心领土被敌军占有  返回核心领土region,无则为-1
        public int getRegionWhenSelfCoreSRRegionIsLoss() {

            return -1;
        }
        //敌人的首都处于交战状态  返回首都领土region,无则为-1
        public int getRegionWhenTheyCapitalSRRegionIsWar() {

            return -1;
        }
        //自己的首都处于交战状态  返回首都region,无则为-1
        public int getRegionWhenSelfCapitalSRRegionIsWar() {

            return -1;
        }
        //自己主要领土处于交战状态  返回主要领土region,无则为-1
        public int getRegionWhenSelfMajorSRRegionIsWar() {

            return -1;
        }
        //自己核心领土处于交战状态  返回核心领土region,无则为-1
        public int getRegionWhenSelfCoreSRRegionIsWar() {

            return -1;
        }
        //友军主要领土处于交战状态  返回主要领土region,无则为-1
        public int getRegionWhenAllyMajorSRRegionIsWar() {

            return -1;
        }
        //友军核心领土处于交战状态  返回核心领土region,无则为-1
        public int getRegionWhenAllyCoreSRRegionIsWar() {

            return -1;
        }
        //敌人的将领处于我们的领土  返回领土region,无则为-1
        public int getRegionWhenSelfRegionHaveEnemyGeneral() {

            return -1;
        }*/



    }
    public boolean isUnitGroup(int cardType) {
        if(!game.resGameConfig.ifUnitGroup){
            return false;
        }
        if(ifSystemEffective(23)&&(cardType==1||cardType==2||cardType==3||cardType==6)){
            return true;
        }
        return false;
    }
    //战略数据
    public class StrategicData {
        public StrategicData(){
            initStrategicData();
        }
        private int legionIndex;//军团序号

        public int getLegionIndex() {
            return legionIndex;
        }

        public void setLegionIndex(int legionIndex) {
            this.legionIndex = ComUtil.limitValue(legionIndex, 0, 65525);
        }

        private int nationLv;//国家排名

        public int getNationLv() {
            return nationLv;
        }

        public void setNationLv(int nationLv) {
            this.nationLv = ComUtil.limitValue(nationLv, 0, 65525);
        }

        private int nationState;//国家状态

        public int getNationState() {
            return nationState;
        }

        public void setNationState(int nationState) {
            this.nationState = ComUtil.limitValue(nationState, 0, 255);
        }

        private int leaderId;//领导人

        public int getLeaderId() {
            return leaderId;
        }

        public void setLeaderId(int leaderId) {
            this.leaderId = ComUtil.limitValue(leaderId, 0, 65525);
        }

        private int military;//军令

        public int getMilitary() {
            return military;
        }

        public void setMilitary(int military) {
            this.military = ComUtil.limitValue(military, 0, 65525);
        }

        private int influence;//影响力

        public int getInfluence() {
            return influence;
        }

        public void setInfluence(int influence) {
            this.influence = ComUtil.limitValue(influence, 0, 255);
        }

        private int reputation;//信誉力

        public int getReputation() {
            return reputation;
        }

        public void setReputation(int reputation) {
            this.reputation = reputation;
        }

        private int tension;//紧张度

        public int getTension() {
            return tension;
        }

        public void setTension(int tension) {
            this.tension = tension;
        }

        private int discontent;//矛盾度

        public int getDiscontent() {
            return discontent;
        }

        public void setDiscontent(int discontent) {
            this.discontent = discontent;
        }

        private int loss;//损失国土数

        public int getLoss() {
            return loss;
        }

        public void setLoss(int loss) {
            this.loss = loss;
        }

        private int kia;//阵亡数

        public int getKia() {
            return kia;
        }

        public void setKia(int kia) {
            this.kia = kia;
        }

        private int corruption;//腐败度

        public int getCorruption() {
            return corruption;
        }

        public void setCorruption(int corruption) {
            this.corruption = corruption;
        }

        private int powerful;//富强度

        public int getPowerful() {
            return powerful;
        }

        public void setPowerful(int powerful) {
            this.powerful = powerful;
        }

        private int polariz;//贫富差距度

        public int getPolariz() {
            return polariz;
        }

        public void setPolariz(int polariz) {
            this.polariz = polariz;
        }

        private int democracy;//民主度

        public int getDemocracy() {
            return democracy;
        }

        public void setDemocracy(int democracy) {
            this.democracy = democracy;
        }

        private int perceive;//认知

        public int getPerceive() {
            return perceive;
        }

        public void setPerceive(int perceive) {
            this.perceive = perceive;
        }

        private int currency;//货币价值

        public int getCurrency() {
            return currency;
        }

        public void setCurrency(int currency) {
            this.currency = currency;
        }

        private int trust;//军政资源分配度

        public int getTrust() {
            return trust;
        }

        public void setTrust(int trust) {
            this.trust = trust;
        }

        private int purges;//净化次数

        public int getPurges() {
            return purges;
        }

        public void setPurges(int purges) {
            this.purges = purges;
        }

        private int politSpec;//政治相性

        public int getPolitSpec() {
            return politSpec;
        }

        public void setPolitSpec(int politSpec) {
            this.politSpec = politSpec;
        }

        private int foreignTendency;//外交相性

        public int getForeignTendency() {
            return foreignTendency;
        }

        public void setForeignTendency(int foreignTendency) {
            this.foreignTendency = foreignTendency;
        }

        private int fertilityNp;//生育国策

        public int getFertilityNp() {
            return fertilityNp;
        }

        public void setFertilityNp(int fertilityNp) {
            this.fertilityNp = fertilityNp;
        }

        private int cultureNp;//文化国策

        public int getCultureNp() {
            return cultureNp;
        }

        public void setCultureNp(int cultureNp) {
            this.cultureNp = cultureNp;
        }

        private int developNp;//开发国策

        public int getDevelopNp() {
            return developNp;
        }

        public void setDevelopNp(int developNp) {
            this.developNp = developNp;
        }

        private int warNp;//战争国策

        public int getWarNp() {
            return warNp;
        }

        public void setWarNp(int warNp) {
            this.warNp = warNp;
        }

        private int nationNp;//民族国策

        public int getNationNp() {
            return nationNp;
        }

        public void setNationNp(int nationNp) {
            this.nationNp = nationNp;
        }

        private int organizNp;//组织国策

        public int getOrganizNp() {
            return organizNp;
        }

        public void setOrganizNp(int organizNp) {
            this.organizNp = organizNp;
        }

        private int foreignNp;//对外国策

        public int getForeignNp() {
            return foreignNp;
        }

        public void setForeignNp(int foreignNp) {
            this.foreignNp = foreignNp;
        }

        private int colonialNp;//殖民国策

        public int getColonialNp() {
            return colonialNp;
        }

        public void setColonialNp(int colonialNp) {
            this.colonialNp = colonialNp;
        }

        private int cohesion;//凝聚力

        public int getCohesion() {
            return cohesion;
        }

        public void setCohesion(int cohesion) {
            this.cohesion = cohesion;
        }

        private int party;//执政类型

        public int getParty() {
            return party;
        }

        public void setParty(int party) {
            this.party = party;
        }

        private int landId;//核心国土

        public int getLandId() {
            return landId;
        }

        public void setLandId(int landId) {
            this.landId = landId;
        }

        private int targetRegion1;//目标地区1

        public int getTargetRegion1() {
            return targetRegion1;
        }

        public void setTargetRegion1(int targetRegion1) {
            this.targetRegion1 = targetRegion1;
        }

        private int targetRegion2;//目标地区2

        public int getTargetRegion2() {
            return targetRegion2;
        }

        public void setTargetRegion2(int targetRegion2) {
            this.targetRegion2 = targetRegion2;
        }

        private int targetRegion3;//目标地区3

        public int getTargetRegion3() {
            return targetRegion3;
        }

        public void setTargetRegion3(int targetRegion3) {
            this.targetRegion3 = targetRegion3;
        }

        private int targetRegion4;//目标地区4

        public int getTargetRegion4() {
            return targetRegion4;
        }

        public void setTargetRegion4(int targetRegion4) {
            this.targetRegion4 = targetRegion4;
        }

        private int targetRegion5;//目标地区5

        public int getTargetRegion5() {
            return targetRegion5;
        }

        public void setTargetRegion5(int targetRegion5) {
            this.targetRegion5 = targetRegion5;
        }

        private int targetTrade1;//目标贸易1

        public int getTargetTrade1() {
            return targetTrade1;
        }

        public void setTargetTrade1(int targetTrade1) {
            this.targetTrade1 = targetTrade1;
        }

        private int targetTrade2;//目标贸易2

        public int getTargetTrade2() {
            return targetTrade2;
        }

        public void setTargetTrade2(int targetTrade2) {
            this.targetTrade2 = targetTrade2;
        }

        private int targetTrade3;//目标贸易3

        public int getTargetTrade3() {
            return targetTrade3;
        }

        public void setTargetTrade3(int targetTrade3) {
            this.targetTrade3 = targetTrade3;
        }

        private int targetTrade4;//目标贸易4

        public int getTargetTrade4() {
            return targetTrade4;
        }

        public void setTargetTrade4(int targetTrade4) {
            this.targetTrade4 = targetTrade4;
        }

        private int targetTrade5;//目标贸易5

        public int getTargetTrade5() {
            return targetTrade5;
        }

        public void setTargetTrade5(int targetTrade5) {
            this.targetTrade5 = targetTrade5;
        }

        private int strategyBuff1;//buff标记1

        public int getStrategyBuff1() {
            return strategyBuff1;
        }

        public void setStrategyBuff1(int strategyBuff1) {
            this.strategyBuff1 = strategyBuff1;
        }

        private int strategyBuff2;//buff标记2

        public int getStrategyBuff2() {
            return strategyBuff2;
        }

        public void setStrategyBuff2(int strategyBuff2) {
            this.strategyBuff2 = strategyBuff2;
        }

        private int strategyBuff3;//buff标记3

        public int getStrategyBuff3() {
            return strategyBuff3;
        }

        public void setStrategyBuff3(int strategyBuff3) {
            this.strategyBuff3 = strategyBuff3;
        }

        public void initStrategicData() {
            this.legionIndex = 0;
            this.nationLv = 0;
            this.nationState = 0;
            this.leaderId = 0;
            this.military = 0;
            this.influence = 0;
            this.reputation = 0;
            this.tension = 0;
            this.discontent = 0;
            this.loss = 0;
            this.kia = 0;
            this.corruption = 0;
            this.powerful = 0;
            this.polariz = 0;
            this.democracy = 0;
            this.perceive = 0;
            this.currency = 0;
            this.trust = 0;
            this.purges = 0;
            this.politSpec = 0;
            this.foreignTendency = 0;
            this.fertilityNp = 0;
            this.cultureNp = 0;
            this.developNp = 0;
            this.warNp = 0;
            this.nationNp = 0;
            this.organizNp = 0;
            this.foreignNp = 0;
            this.colonialNp = 0;
            this.cohesion = 0;
            this.party = 0;
            this.landId = 0;
            this.targetRegion1 = -1;
            this.targetRegion2 = -1;
            this.targetRegion3 = -1;
            this.targetRegion4 = -1;
            this.targetRegion5 = -1;
            this.targetTrade1 = -1;
            this.targetTrade2 = -1;
            this.targetTrade3 = -1;
            this.targetTrade4 = -1;
            this.targetTrade5 = -1;
            this.strategyBuff1 = -1;
            this.strategyBuff2 = -1;
            this.strategyBuff3 = -1;
        }
    }


    //将军数据
    public  class GeneralData {
        public GeneralData(){
            initGeneralData();
        }

        private void initGeneralData() {
            this.setGeneralIndex(0);
            this.setPolitical(1);
            this.setGeneralId(0);
            this.setRank(6);
            this.setLegionIndex(0);
            this.setAbility(0);
            this.setType(0);
            this.setState(1);
            this.setRestLife(9999);
        }

        public  GeneralData setGeneralDataIndex(int generalIndex){
            this.setGeneralIndex(generalIndex);
            return  this;
        }

        public  GeneralData initForRecruitGeneral(int li, XmlReader.Element gE,  int year) {

            this.setGeneralIndex(getNewGeneralIndex());
            this.setPolitical(gE.getInt("political",0));
            this.setGeneralId(gE.getInt("id"));
            this.setRank(gE.getInt("rank",6));
            this.setLegionIndex(li);
            this.setAbility(gE.getInt("ability",0));
            this.setType(gE.getInt("type",0));
            this.setState(0);
            int r=Math.abs(gE.getInt("death")-year)*masterData.getRoundForYear();
            r=r==0?ComUtil.getRandom(10,30):r;
            this.setRestLife(r);
            this.initVirAttribute();
            return  this;
        }




        private int generalIndex;//将军序列

        public  GeneralData initForRandomGeneral( LegionData l, int id,int generalType) {

            this.setGeneralIndex(getNewGeneralIndex());
            this.setPolitical(ComUtil.getRandom(0,l.getCultureLvMax()));
            this.setGeneralId(id);
            this.setRank(ComUtil.getRandom(4,4));
            this.setLegionIndex(l.legionIndex);
            this.setAbility(ComUtil.getRandom(0,l.getMilitaryAcademyLv()));
            this.setType(generalType);
            this.setState(1);
            this.setRestLife(9999);
            this.initVirAttribute();
            return  this;
        }


        public int getGeneralIndex() {
            return generalIndex;
        }

        public void setGeneralIndex(int generalIndex) {
            this.generalIndex = generalIndex;
        }

        private String generalImageName;

        private int political;//政治能力

        public int getPolitical() {
            return political;
        }

        public void setPolitical(int political) {
            this.political = ComUtil.limitValue(political,0,5);
        }

        private int generalId;//将军id

        public int getGeneralId() {
            return generalId;
        }

        public void setGeneralId(int generalId) {
            this.generalId = generalId;
        }

        private int rank;//军衔

        public int getRank() {
            return rank;
        }

        public void setRank(int rank) {
            this.rank = ComUtil.limitValue(rank,6,15);
        }

        private int legionIndex;//军团id

        public int getLegionIndex() {
            return legionIndex;
        }

        public void setLegionIndex(int legionIndex) {


            this.legionIndex = legionIndex;
        }

        private int ability;//品质

        public int getAbilityValue() {
            return ability;
        }
        //这个会计算军校加成
        public int getAllAbility() {
            LegionData l=getLegionData();
            if(l!=null){
                return ability+l.getMilitaryAcademyLv();
            }
            return ability;
        }
        public void setAbility(int ability) {
            this.ability = ComUtil.limitValue(ability,-1,5);
        }

        private int type;//将军类型 1步兵2炮兵3坦克4海军5空军

        public int getType() {
            return type;
        }

        public void setType(int type) {
            this.type = type;
        }

        private int state;//状态 0正常将军 1随机将军

        public int getState() {
            return state;
        }

        public void setState(int state) {
            this.state = state;
        }

        private int restLife;//剩余寿命

        public int getRestLife() {
            return restLife;
        }

        public void setRestLife(int restLife) {
            this.restLife  = ComUtil.limitValue(restLife,0,254);
        }

        public String getGeneralImageName() {
            if(generalImageName!=null){
                return generalImageName;
            }else  if(getState()==0){
                generalImageName= game.gameConfig.getDEF_GENERAL().getElementById(getGeneralId()).get("image");
            }else {
                generalImageName= legionDatas.get(getLegionIndex()).getRGeneralId() + "_" + getGeneralId();
            }
            return generalImageName;
        }


        public String getSmallGeneralImageName() {
            if(getGeneralImageName()!=null&&getState()==0&&game.resGameConfig.enableGeneral){
                return  "sg_" + game.gameConfig.getDEF_GENERAL().getElementById(getGeneralId()).get("image");
            }else  {
                return "sg_general";
            }
        }


        private String generalName;

        public String getGeneralName(){
            if(generalName==null){
                initVirAttribute();
            }
            return generalName;
        }

        public XmlReader.Element gE;

        public void initVirAttribute(){
            if(state==0&&game.resGameConfig.enableGeneral){
                generalName= game.gameMethod.getStrValueT("generalName_"+generalId);
            }else {
                generalName= game.gameMethod.getStrValueT("generalName_general");
            }
            gE=game.gameConfig.getDEF_GENERAL().getElementById(generalId);
        }


        /*public String getGeneralName() {
            if(state==0){
                return "generalName_"+generalId;
            }else {
                return "generalName_general";
            }
        }*/

        public LegionData getLegionData() {
            if(legionIndex>=legionDatas.size){
                setLegionIndex(0);
            }
            return legionDatas.get(legionIndex);
        }

        public void resetImageName() {
            if(getState()==0){
                generalImageName= game.gameConfig.getDEF_GENERAL().getElementById(getGeneralId()).get("image");
            }else {
                generalImageName= legionDatas.get(getLegionIndex()).getRGeneralId() + "_" + getGeneralId();
            }
        }

        public boolean isPlayer() {
            if(masterData.getPlayerLegionIndex()==legionIndex){
                return true;
            }
            return false;
        }

        public String getAllAttribute() {
            return "generalIndex:"+generalIndex+
                    "political:"+political+
                    "generalId:"+generalId+
                    "rank:"+rank+
                    "legionIndex:"+legionIndex+
                    "star:"+ ability +
                    "type:"+type+
                    "state:"+state+
                    "restLife:"+restLife;
        }

        //获得阵营 -1无势力 0中立偏敌对 1自己 2盟友  3敌人 4附属国 5宗主国 6中立偏友好
        public int getCamp() {
            /*if(regionId==-1){
                return -1;
            }else if(ifNeutralCampByRegion(regionId)){
                return -1;
            }*/
            LegionData l= getLegionData();
            LegionData pl=getPlayerLegionData();

            if(l.getInternIndex()==0){
                return -1;
            }else if(l.getLegionIndex()==pl.getLegionIndex()){
                return 1;
            }else if(l.getLegionIndex()==pl.getSuzerainLi()){
                return 5;
            }else if(pl.getLegionIndex()==l.getSuzerainLi()){
                return 4;
            } else if(ifAllyByLi(l.getLegionIndex(),masterData.getPlayerLegionIndex())){
                return 2;
            }else {
                if(foreignDatas==null||foreignDatas.size==0){
                    if(pl.getInternIndex()!=l.getInternIndex()&&l.getLegionIndex()!=0 ){
                        return 3;
                    }else{
                        return -1;
                    }
                }else {
                    ForeignData f = getForeignData(l.getLegionIndex());
                    if (f.getFavorValue() > 50) {
                        return 6;
                    } else if (f.getFavorValue() > 30) {
                        return 0;
                    } else {
                        return 3;
                    }
                }
            }
        }
    }


    //建筑数据
    public class BuildData extends UnitData{
        private BuildActor buildActor;
        private boolean ifCanBuildWonder;

        public void setBuildActor(BuildActor buildActor){
            this.buildActor=buildActor;
        }
        public BuildActor getBuildActor(){
            return buildActor;
        }


        public BuildData(){
            initBuildData();
        }

        @Override
        public int getUnitHpNow() {
            return getCityHpNow();
        }

        @Override
        public int getUnitHpMax() {
            return getCityHpMax();
        }

        @Override
        public int getUnitHpRate() {
            return getHpRate();
        }

        @Override
        public float getUnitHpRateF() {
            return getHpRateF();
        }

        @Override
        public int getUnitType() {
            return 6;
        }

        @Override
        public int getUnitArmor(int direct) {
            return (getDefenceLvNow()+getCityLvNow())*game.resGameConfig.addDefEachRank;
        }

        @Override
        public boolean ifUnitHaveFeature(int i) {
            return false;
        }

        @Override
        public boolean ifUnitTriggerFeature(int i) {
            return false;
        }

        @Override
        public boolean ifUnitHaveSkill(int i) {
            return false;
        }

        @Override
        public boolean ifUnitTriggerSkill(int i) {
            return false;
        }

        @Override
        public int getUnitDamage(BuildData  build,int targetHexagon) {
            return ComUtil.getRandom(3,build.getLegionIndex()==getLegionIndex()?build.getMissileLvNow():1)* game.resGameConfig.tactic_Bombardment_damageRate*getCityHpMax()/100;
        }

        @Override
        public boolean ifInUnitRange(int i) {
            return false;
        }

        @Override
        public int getUnitSkillEffect(int i) {
            if(i==16||i==106||i==87){
                return getSkillEffect(i,true);
            }
            return getSkillEffect(i,false);
        }

        @Override
        public int getUnitFeatureEffect(int i) {
            return 0;
        }

        @Override
        public boolean isUnitGroup() {
            return false;
        }

        @Override
        public int getDirect(int i) {
            return 0;
        }

        @Override
        public int getHexagonIndex() {
            return getRegionId();
        }

        @Override
        public boolean potionIsSea() {
            return ifSea();
        }

        @Override
        public int getUnitId(int direct) {
            int lv=cityLvNow+defenceLvNow;
            if(lv>10){
                return 1605;
            }else if(lv>7){
                return 1604;
            }else if(lv>4){
                return 1603;
            }else if(lv>1){
                return 1602;
            }else{
                return 1601;
            }
        }

        private int buildIndex;//建筑序列

        public int getBuildIndex() {
            return buildIndex;
        }

        public void setBuildIndex(int buildIndex) {
            this.buildIndex = buildIndex;
        }

        private int regionId;//区域坐标

        public int getRegionId() {
            return regionId;
        }

        public void setRegionId(int regionId) {
            this.regionId = regionId;
        }

        //返回 region 或者 region_地名
        public String getRegionAreaStr(){
            if(buildName==0||areaName==null){
                return srName+"";
            }else{
                return srName+":"+areaName;
            }
        }

        public boolean isSeaArea(){
            if(buildType==2||buildType==1){
                return true;
            }
            if(hexagonDatas.get(regionId).getBlockType()==1){
                return true;
            }
            return false;
        }
        public int  inlandSeaLi;//内海归属,如果是-1,则是非内海或非被该国家包围

        private int buildType;//建筑类型 0城市 1海港 2海洋 3沿海城市

        public int getBuildType() {
            return buildType;
        }

        public void setBuildType(int buildType) {
            this.buildType = buildType;
        }


        private int mineralLv;//矿产等级

        public int getMineralLv() {
            return mineralLv;
        }

        public void setMineralLv(int mineralLv) {
            this.mineralLv = mineralLv;
        }

        private int oilLv;//石油等级

        public int getOilLv() {
            return oilLv;
        }

        public void setOilLv(int oilLv) {
            this.oilLv = oilLv;
        }


        private int legionIndex;//军团归属

        public int getLegionIndex() {
            return legionIndex;
        }

        @Override
        public BuildData getBuildData() {
            return this;
        }

        @Override
        public int getGeneralIndex() {
            return 0;
        }

        public LegionData getLegionData() {
            if(legionIndex>=legionDatas.size){
               setLegionIndex(0);
            }
            return legionDatas.get(legionIndex);
        }

        public void initLegionIndex(int legionIndex) {
            this.legionIndex = legionIndex;
            if (getAirIndex1()!=-1) {
                if(getAirIndex1()< airIDatas.size){
                    airIDatas.get(getAirIndex1()).resetLegionIndex(legionIndex);
                }else {
                    setAirIndex1(-1);
                }
            }
            if (getAirIndex2()!=-1) {
                if(getAirIndex2()< airIDatas.size){
                    airIDatas.get(getAirIndex2()).resetLegionIndex(legionIndex);
                }else {
                    setAirIndex2(-1);
                } }
            if (getAirIndex3()!=-1) {
                if(getAirIndex3()< airIDatas.size){
                    airIDatas.get(getAirIndex3()).resetLegionIndex(legionIndex);
                }else {
                    setAirIndex3(-1);
                }}
            if (getAirIndex4()!=-1) {
                if(getAirIndex4()< airIDatas.size){
                    airIDatas.get(getAirIndex4()).resetLegionIndex(legionIndex);
                }else {
                    setAirIndex4(-1);
                } }
        }

        public void setBuildLegionIndex(int legionIndex){
            this.legionIndex = legionIndex;
        }

        //也会修改对应的飞机归属
        public void setLegionIndex(int legionIndex) {
            /*if(this.legionIndex==15&&legionIndex==7){
                int s=0;
            }*/


            if(legionIndex<=0&&(roundState==0||roundState==4)&&isPlayer()){
                Gdx.app.error("build legionIndex is error",legionIndex+":"+legionDatas.size);
            }

            if(legionIndex>=legionDatas.size){
                Gdx.app.error(" buildPolicy is error",legionIndex+":"+legionDatas.size);
            }
            int resetCapital=-1;
            if(isCapital()&&this.legionIndex != legionIndex&&legionIndex>0){
                resetCapital=this.legionIndex;
            }
            this.legionIndex = legionIndex;
            hexagonDatas.get(regionId).setLegionIndexValue(legionIndex);
            if (getAirIndex1()!=-1) {
                if(getAirIndex1()< airIDatas.size){
                    airIDatas.get(getAirIndex1()).resetLegionIndex(legionIndex);
                }else {
                    setAirIndex1(-1);
                }
            }
            if (getAirIndex2()!=-1) {
                if(getAirIndex2()< airIDatas.size){
                    airIDatas.get(getAirIndex2()).resetLegionIndex(legionIndex);
                }else {
                    setAirIndex2(-1);
                } }
            if (getAirIndex3()!=-1) {
                if(getAirIndex3()< airIDatas.size){
                    airIDatas.get(getAirIndex3()).resetLegionIndex(legionIndex);
                }else {
                    setAirIndex3(-1);
                }}
            if (getAirIndex4()!=-1) {
                if(getAirIndex4()< airIDatas.size){
                    airIDatas.get(getAirIndex4()).resetLegionIndex(legionIndex);
                }else {
                    setAirIndex4(-1);
                } }
            if(roundState==0||(roundState==4&&isPlayer())){//是回合内的变化则立即更新,否则等回合结束后会总体更新一次
                updConnectHexagonVirAttribute(getRegionId());
            }
            if(buildActor!=null&&(roundState==0||(roundState==4&&isPlayer()))){
                buildActor.update();
            }
            if(resetCapital!=-1){
                LegionData l=  getLegionDataByLi(resetCapital);
                if(l!=null){
                    resetCapital(l);
                }
            }
        }

        @Override
        public void randomReduceSkillLv(int i) {
            randomReduceTech(i,0);
        }

        @Override
        public void updUnitModelDirect() {

        }

        @Override
        public int getUnitLife() {
            return game.resGameConfig.cityBaseHp;
        }

        @Override
        public int getArmor(int direct) {
            return (getDefenceLvNow()+getCityLvNow())*game.resGameConfig.addDefEachRank;
        }

        @Override
        public MainGame getGame() {
            return game;
        }

        @Override
        public int getMapW() {
            return masterData.getWidth();
        }

        @Override
        public int getUnitDirection() {
            return 0;
        }

        @Override
        public int getWeaponValue(int direct, int targetType) {
            return 0;
        }

        @Override
        public int getUnitAbility(int index) {
            return 0;
        }

        @Override
        public int getUnitCount() {
            return 1;
        }

        @Override
        public int getDefAirLv() {
            return getMissileLvNow();
        }

        @Override
        public int getKillSum() {
            return (1+cityLvNow)*(1+cityLvNow)*(1+cityLvNow);
        }

        @Override
        public int getExp() {
            return ComUtil.max(armyLvNow,1);
        }

        @Override
        public boolean inScreen() {
            if(buildActor!=null&&buildActor.inScreen()){
                return true;
            }
            return false;
        }

        @Override
        public int getArrowDirect() {
            return 0;
        }

        @Override
        public boolean isEmptyBuild() {
            ArmyData a=getRegionUnit();
            if(a==null||a.getArmyHpNow()<=0){
                return true;
            }
            return false;
        }

        @Override
        public int getDirectByBorderId(int targetHexagonIndex) {
            return Fb2Smap.this.getDirectByBorderId(getRegionId(),targetHexagonIndex);
        }

        public int getAirExp() {
            return ComUtil.max(airLvNow,1);
        }

        private int buildName;//地名id

        public int getBuildName() {
            return buildName;
        }
        /*public String getBuildNameStr(){
            return new StringBuilder("areaname_").append(buildName).toString();
        }*/


        public void setBuildName(int buildName) {
            this.buildName = buildName;
        }



        private void changeAllArmyMorale(int moraleChangeMax) {
            IntArray armyH=regionHexagonMap.get(getRegionId());
            ArmyData a;
            if(ifEffective(0)){
                addCityStability(moraleChangeMax);
            }
            for(int i=0;i<armyH.size;i++){
                a=getArmyDataByHexagon(armyH.get(i));
                if(a!=null&&ifAllyByLi(a.getLegionIndex(),getLegionIndex())){
                    int v=ComUtil.getRandom(0,moraleChangeMax);
                    a.setArmyMoraleChange(v);
                }
            }
            if(airIndex1 !=-1){
                airIDatas.get(airIndex1).setAirMoraleChange(ComUtil.getRandom(0,moraleChangeMax));
            }
            if(airIndex2 !=-1){
                airIDatas.get(airIndex2).setAirMoraleChange(ComUtil.getRandom(0,moraleChangeMax));
            }
            if(airIndex3 !=-1){
                airIDatas.get(airIndex3).setAirMoraleChange(ComUtil.getRandom(0,moraleChangeMax));
            }
            if(airIndex4 !=-1){
                airIDatas.get(airIndex4).setAirMoraleChange(ComUtil.getRandom(0,moraleChangeMax));
            }
            if(isPlayer()){
                setBuildStatus(3);
            }else if(isPlayerAlly()){
                setBuildStatus(2);
            }else {
                setBuildStatus(1);
            }
        }


        /*
     0无
   id	effect	min	max	base	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	26	27
1	增加资源产出	1	7	0	金钱	工业	科技	食物	矿产	石油	电力
2	当区域驻兵时,使城市的[XX]不低于xx 	1	3	0	生命	税率	稳定度
3	减少某种卡牌使用费用	1	10	0	步兵	炮兵	坦克	船只	飞机	要塞	超武	潜艇	民用建筑	军用建筑
4	增加卡牌的升级上限	1  14		1贸易	2文化	3交通	4研究	5原料	6电力	7城市	8工业	9医院	10城防	11飞机厂	12防空基地	13军事研究所	14军营
5	增加区域内xx兵种的	1	5	0	士气恢复	生命恢复	攻击	防御	攻击范围
6	此区域xx部队视为拥有特性xx	7	27	6							冲击	火力	威慑	布雷	驻体	扫雷	连击	机动	游击	碾压	下潜	声呐	防空	警戒	蓄力	弹道	舰炮	重整	反击	防患	识途
7	招募时增加额外的属性  	1	4	0	初始士气	初始生命	初始编队	初始军衔
8	研究某类卡牌时准备回合减少	1	7	0	步兵	炮兵	坦克	船只	飞机	要塞	超武	潜艇
9	减少受到的某种类型造成的伤害	1	7	0	步兵	炮兵	坦克	船只	飞机	要塞	超武	潜艇
10	海洋城市可以提供资源
     */
        private int buildWonder;//建筑特色

        public int getBuildWonder() {
            return buildWonder;
        }

        public void setBuildWonder(int buildWonder) {
            if(masterData.getPlayerMode()==0&&wonderIDatas!=null){
                if(wonderIDatas.contains( this.buildWonder)){
                    wonderIDatas.removeValue(this.buildWonder);
                }
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null&&xE.getInt("state",0)==1){
                    wonderIDatas.add(buildWonder);
                }
            }
            this.buildWonder = buildWonder;
        }

        private int buildStatus;//状态 3玩家自己 2友军 1敌军 0正常

        public int getBuildStatus() {
            return buildStatus;
        }

        public void setBuildStatus(int buildStatus) {
            this.buildStatus = buildStatus;
        }

        private int airforcePolicy;//暂时为设定

        public int getAirforcePolicy() {
            return airforcePolicy;
        }

        public void setAirforcePolicy(int airforcePolicy) {
            this.airforcePolicy = airforcePolicy;
        }

        private int cityHpMax;//城市hp

        public int getCityHpMax() {
            if(ifSea()){
                return 0;
            }
            return cityHpMax;
        }

        public void setCityHpMax(int cityHpMax) {
            this.cityHpMax = cityHpMax;
        }

        private int cityHpNow;//当前hp 当一个建筑的血量被清空时,该军团归属归到0

        public int getCityHpNow() {
            return cityHpNow;
        }

        public void setCityHpNow(int cityHpNow) {
            if(cityHpMax==0){
                this.cityHpNow = 0;
            }else {
                int hpM=0;
                if(buildWonder!=0){
                    XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                    if(xE!=null){
                        int function=xE.getInt("fucntion",0);
                        int effect=xE.getInt("effect",0);
                        int value=xE.getInt("value",0);
                        if(function==2&&effect==1){
                            hpM=value;
                        }
                    }
                }
                if(hpM>0&&getArmyDataByHexagon(regionId)!=null&&cityHpNow<hpM&&hpM<cityHpMax){
                    this.cityHpNow = ComUtil.limitValue(hpM,0,cityHpMax);
                }else{
                    this.cityHpNow = ComUtil.limitValue(cityHpNow,0,cityHpMax);
                }
                //Gdx.app.log("setCityHpNow",regionId+": "+cityHpNow+"/"+cityHpMax);
            }
        }
        public void setCityHpNowByRate(int rate) {
            setCityHpNow((int) (cityHpNow*rate*1f/100));
        }

        public void replayHp(int hp) {
            if(legionIndex==0){
                return;
            }
            this.cityHpNow += hp;
            if (cityHpNow > cityHpMax) {
                cityHpNow = cityHpMax;
            }
        }

        public int getIncomeMoney(int rate) {
            rate= (int) (rate/getRegionRate());
            // Gdx.app.log("getIncomeMoney", "r:" + rate + " b:" + buildIndex);
            rate=rate+getLegionData().getLegionFeatureEffect(15);
            rate= (int) (rate* game.resGameConfig.moneyIncomeRate);
            rate=rate* (100+game.gameConfig.getDEF_WEATHER().getElementById(weatherId).getInt("moneyExtraRate",0))/100;
            int min=0;
            boolean notSeaIncome=true;
            int addRes=0;
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==1&&effect==1){
                        addRes=value;
                    }else if(function==10){
                        notSeaIncome=false;
                    }else if(function==2&&effect==1&&getArmyDataByHexagon(regionId)!=null){
                        rate=ComUtil.limitValue(rate,0,100-value);
                    }
                }
            }
            int rs=0;

            if(ifHunger()){
                rate=rate/2;
            }


            if(buildType==2&&notSeaIncome){
                return rs;
            }else if(this.cityLvNow==0||cityHpNow==0){
                if(min==0){
                    return  rs;
                }else{
                    rs=  ComUtil.limitValue(( (this.tradeLvNow + 1)*3 ) * rate / 100+addRes,min,1);
                }
            } else if (isCapital()) {
                rs= ComUtil.limitValue(((this.cityLvNow + 3+this.tradeLvNow)*4  ) * rate / 100+addRes,min,9999);
            }else if(cityStability<30) {
                rs=  ComUtil.limitValue( -(((this.cityLvNow + 1+this.tradeLvNow)*4  ) * rate / 100+addRes),min,9999);
            }else  {
                rs=  ComUtil.limitValue(((this.cityLvNow + 1+this.tradeLvNow)*4  ) * rate / 100+addRes,min,9999);
            }
            int skillEffect=getSkillEffect(90,false);
            if(rs>0&&skillEffect>0){
                rs=rs*(100+skillEffect)/100;
            }
            return rs;
        }

        //重置位置
        public void resetLegionUnitPotion(){
            ai_MergeLegionUnit(getRegionId());

            IntArray hs=regionHexagonMap.get(regionId);



            Array<ArmyData> armys=game.tempUtil.getTempArray();

            if(hs!=null){
                //合并残血单位 123

                int firstU=-1;//0 第一个是随机将领  1 第一个是历史将领
                if(ifSea()){//海洋
                    for(int i=0;i<hs.size;i++){
                        int id=hs.get(i);
                        ArmyData a=getArmyDataByHexagon(id);
                        if(a!=null&&a.getArmyType()!=6){
                            if(a.getGeneralIndex()!=0&&firstU!=1){
                                if(a.getGeneralData().getState()==0){//正常将军
                                    armys.insert(0,a);
                                    firstU=1;
                                }else{//随机将军
                                    armys.insert(0,a);
                                    firstU=0;
                                }
                            }else{
                                armys.add(a);
                            }
                        }
                    }
                    Gdx.app.log("resetPotion1:"+buildType,""+armys.size);
                    //重置位置
                    if(armys.size>0){
                        armys.removeIndex(0).armyMove(hs.get(0));
                        armys.random();
                        for(int i=0;i<armys.size;i++){
                            ArmyData a=armys.get(i);
                            a.armyMove(hs.get(i+1));
                        }
                    }
                }else{//陆地
                    //存储陆军能移动的位置
                    IntArray rs=game.tempUtil.getTempIntArray();
                    rs.add(regionId);
                    for(int i=0;i<hs.size;i++){
                        int id=hs.get(i);
                        ArmyData a=getArmyDataByHexagon(id);
                        if(a!=null&&a.getArmyType()!=4&&a.getArmyType()!=8&&a.getArmyType()!=6){
                            if(a.getGeneralIndex()!=0&&firstU!=1){
                                if(a.getGeneralData().getState()==0){//正常将军
                                    armys.insert(0,a);
                                    firstU=1;
                                }else{//随机将军
                                    armys.insert(0,a);
                                    firstU=0;
                                }
                            }else{
                                armys.add(a);
                            }
                        }
                        if(id!=regionId&&!Fb2Smap.this.ifSea(id)&&(a==null||(a.getArmyType()!=4&&a.getArmyType()!=8&&a.getArmyType()!=6))){
                            rs.add(id);
                        }
                    }

                    Gdx.app.log("resetPotion2:"+buildType,rs.size+":"+armys.size);

                    if(armys.size>0&&rs.size>=armys.size){
                        armys.removeIndex(0).armyMove(rs.get(0));
                        armys.random();
                        for(int i=0;i<armys.size;i++){
                            ArmyData a=armys.get(i);
                            a.armyMove(rs.get(i+1));
                        }
                    }
                    game.tempUtil.disposeTempIntArray(rs);
                }
            }

            game.tempUtil.disposeTempArray(armys);
        }


        public int getIncomeIndustry(int rate) {
            if(cityLvNow==0||cityHpNow==0){
                return 0;
            }
            rate= (int) (rate/getRegionRate());
            rate=rate+getLegionData().getLegionFeatureEffect(16);
            rate= (int) (rate* game.resGameConfig.industryIncomeRate);
            rate=rate* (100+game.gameConfig.getDEF_WEATHER().getElementById(weatherId).getInt("industryExtraRate",0))/100;
            //  Gdx.app.log("getIncomeIndustryLog",""+connectDatas.get(this.buildIndex).size);
            boolean notSeaIncome=true;
            int addRes=0;
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==1&&effect==2){
                        addRes=value;
                    }else if(function==10){
                        notSeaIncome=false;
                    }
                }
            }

            int rs=0;
            if(buildType==2&&notSeaIncome){
                rs= rs;
            }else if (isCapital()) {
                rs= ComUtil.limitValue((this.industryLvNow + 1) *2 * rate / 100+addRes,1,9999);
            }else if(this.industryLvNow==0){
                rs= 0;
            } else {
                rs= ComUtil.limitValue((this.industryLvNow) *2 * rate / 100+addRes,0,9999);
            }
            int skillEffect=getSkillEffect(36,false);
            if(rs>0&&skillEffect>0){
                rs=rs*(100+skillEffect)/100;
            }
            return rs;
        }

        public int getIncomeTech(int rate) {
            if(cityLvNow==0||cityHpNow==0){
                return 0;
            }
            rate= (int) (rate/getRegionRate());
            rate=rate+getLegionData().getLegionFeatureEffect(17);
            rate= (int) (rate* game.resGameConfig.techIncomeRate);
            rate=rate* (100+game.gameConfig.getDEF_WEATHER().getElementById(weatherId).getInt("techExtraRate",0))/100;

            boolean notSeaIncome=true;
            int addRes=0;
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==1&&effect==3){
                        addRes=value;
                    }else if(function==10){
                        notSeaIncome=false;
                    }
                }
            }

            if(buildType==2&&notSeaIncome){
                return 0;
            }else if (isCapital()) {
                return  ComUtil.limitValue((this.techLvNow + 1) * rate / 100+addRes,1,9999);
            }else if(this.techLvNow==0){
                return 0;
            } else {
                return  ComUtil.limitValue((this.techLvNow) * rate / 100+addRes,0,9999);
            }
        }

        public int getIncomeFood(int rate) {

           /* if(isPlayer()){
                int s=0;
            }*/
            rate= (int) (rate/getRegionRate());
            rate=rate+getLegionData().getLegionFeatureEffect(18);
            rate= (int) (rate* game.resGameConfig.foodIncomeRate);
            rate=rate* (100+game.gameConfig.getDEF_WEATHER().getElementById(weatherId).getInt("foodExtraRate",0))/100;
            int min=1;
            boolean notSeaIncome=true;
            int addRes=ComUtil.limitValue(10-developLv,0,10);
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==1&&effect==4){
                        addRes=value;
                    }else if(function==10){
                        notSeaIncome=false;
                    }
                }
            }
            int rs=0;
            if(buildType==2&&notSeaIncome){
                return 0;
            }else if (isCapital()) {
                rs= ComUtil.limitValue(( ComUtil.max(this.foodLvNow*2-cityLvNow ,0)+ 2)*4   * rate / 100+addRes,min,9999);
            } else if(cityStability<30) {
                rs= ComUtil.limitValue(-((this.cityLvNow*2+1) *4  * rate / 100+addRes),min,9999);
            }else if(min<0){
                rs= ComUtil.limitValue((this.foodLvNow*2-cityLvNow  +1) *4  * rate / 100+addRes,min,9999);
            }  else {
                rs= ComUtil.limitValue((ComUtil.max(this.foodLvNow*2-cityLvNow ,0) +1) *4  * rate / 100+addRes,min,9999);
            }
            int skillEffect=getSkillEffect(114,false);
            if(rs>0&&skillEffect>0){
                rs=rs*(100+skillEffect)/100;
            }
            return rs;
        }



        public int getIncomeMinterial(int rate) {
            if(mineralLv==0){
                return 0;
            }
            rate= (int) (rate/getRegionRate());
            rate= (int) (rate* game.resGameConfig.mineralIncomeRate);
            boolean notSeaIncome=true;
            int addRes=0;

            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==1&&effect==5){
                        addRes=value;
                    }else if(function==10){
                        notSeaIncome=false;
                    }
                }
            }
            if(buildType==2&&notSeaIncome){
                return 0;
            }else {
                int rs=mineralLv*rate/100+addRes;
                if(rs<mineralLv){
                    rs=mineralLv;
                }
                return rs;
            }
        }

        public int getIncomeOil(int rate) {
            if(getAge()<1||oilLv==0){
                return 0;
            }
            rate= (int) (rate/getRegionRate());
            rate= (int) (rate* game.resGameConfig.oilIncomeRate);
            boolean notSeaIncome=true;
            int addRes=0;
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==1&&effect==6){
                        addRes=value;
                    }else if(function==10){
                        notSeaIncome=false;
                    }
                }
            }

            if(buildType==2&&notSeaIncome){
                return 0;
            }else {
                int rs=oilLv*rate/100+addRes;
                if(rs<oilLv){
                    rs=oilLv;
                }
                return rs;
            }
        }



        private int cityStability;//城市稳定度

        public int getCityStability() {
            if(Fb2Smap.this.ifSystemEffective(0)){
                return cityStability;
            }
            return 100;
        }

        public float getCityStabilityRate(){
            if(Fb2Smap.this.ifSystemEffective(0)){
                return cityStability/100f;
            }
            return 1;
        }

        public void addCityStability(int v){
            if(v>0){
                v=v+cultureLvNow;
            }
            setCityStability(cityStability+v);
        }
        public void addCityStability(int v,int max){
            if(v>0){
                v=v+cultureLvNow;
            }
            if(cityStability>max){

            }else if(cityStability+v>max){
                setCityStability(max);
            }else{
                setCityStability(cityStability+v);
            }
        }

        public void setCityStability(int cityStability) {
            int stability=0;
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==2&&effect==3){
                        stability=value;
                    }else if(function==2&&effect==1&&getArmyDataByHexagon(regionId)!=null&&stability<value){//当城市驻兵时,使城市的生命和稳定度不低于x,税率不高于100-x
                        stability= ComUtil.limitValue(stability,0,value);
                    }
                }
            }
            if(stability>0&&getArmyDataByHexagon(regionId)!=null&&cityStability<stability){
                this.cityStability = ComUtil.limitValue(stability,0,100);
            }else{
                this.cityStability = ComUtil.limitValue(cityStability,0,100);
            }
        }

        public void changeCityStability(int v) {
            if(masterData.getPlayerMode()==0){
                setCityStability(cityStability+v);
            }
        }


        private int developLv;//原料潜力  城市越高的地方 潜力越小

        public int getDevelopLv() {
            return developLv;
        }

        public void setDevelopLv(int developLv) {
            this.developLv = developLv;
        }

        private int cityTax;//城市总税率 比如天灾,万博会等通过这个来影响城市

        public int getCityTax() {
            return cityTax;
        }

        public void setCityTax(int cityTax) {

            int tax=0;
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==2&&effect==2){
                        tax=value;
                    }
                }
            }
            if(tax>0&&getArmyDataByHexagon(regionId)!=null&&cityTax<tax){
                this.cityTax = ComUtil.limitValue(tax,0,200);
            }else{
                this.cityTax = ComUtil.limitValue(cityTax,0,200);
            }
        }


        private int cityLvNow;//城市等级


        public int getCityLvNow() {
            return cityLvNow;
        }

        public void setCityLvNowValue(int cityLvNow) {
            this.cityLvNow =cityLvNow;
        }
        public boolean setCityLvNow(int cityLvNow) {
            // this.cityLvNow =ComUtil.limitValue( cityLvNow,0,ResConfig.Game.cardUpdMax_cityLv);
            if(ComUtil.ifValueBetween(cityLvNow,0, game.resGameConfig.cardUpdMax_cityLv,true)){
                this.cityLvNow =cityLvNow;
                resetCityHpMax();
                if(buildActor!=null&&(roundState==0||(roundState==4&&isPlayer()))){
                    buildActor.update();
                }
                return true;
            }else {
                return false;
            }
        }
        public void resetCityHpMax(){
            if(ifSea()){
                cityHpMax=0;
            }
            int oldMax=cityHpMax;
            if(cityLvNow==0){
                setCityHpMax(0);
            }else{
                setCityHpMax(game.resGameConfig.cityBaseHp * (cityLvNow+defenceLvNow));
            }
            setCityHpNow(cityHpNow+(cityHpMax-oldMax));
        }

        public boolean updCityLvNow() {
            addCityHpByRate((cityLvNow+1)*10);
            return setCityLvNow( this.cityLvNow + 1);
        }
        public void reduceCityLvNow() {
            setCityLvNow( this.cityLvNow - 1);
        }
        private int industryLvNow;//工业等级

        public int getIndustryLvNow() {
            return industryLvNow;
        }

        public boolean setIndustryLvNow(int industryLvNow) {
            //  this.industryLvNow =ComUtil.limitValue( industryLvNow,0,ResConfig.Game.cardUpdMax_industryLv);
            if(ComUtil.ifValueBetween(industryLvNow,0, game.resGameConfig.cardUpdMax_industryLv,true)){
                this.industryLvNow =industryLvNow;
                return true;
            }else {
                return false;
            }
        }

        public boolean updIndustLvNow() {
            addCityHpByRate(cityLvNow*industryLvNow);
            return setIndustryLvNow( this.industryLvNow + 1);
        }
        public void reduceIndustLvNow() {
            setIndustryLvNow( this.industryLvNow - 1);
        }
        public void updIndustLvNow(int v)
        {
            setIndustryLvNow( this.industryLvNow + v);
        }
        private int foodLvNow;//原料等级

        public int getFoodLvNow() {
            return foodLvNow;
        }

        public boolean setFoodLvNow(int foodLvNow) {
            if(ComUtil.ifValueBetween(foodLvNow,0, game.resGameConfig.cardUpdMax_foodLv,true)){
                this.foodLvNow =foodLvNow;
                return true;
            }else {
                return false;
            }
        }

        public boolean updFoodLvNow() {
            addCityHpByRate(foodLvNow *cityLvNow);
            return  setFoodLvNow(foodLvNow +1);
        }
        public void reduceMateriLvNow() {
            setFoodLvNow(foodLvNow -1);
        }

        private int techLvNow;//研究等级

        public int getTechLvNow() {
            return techLvNow;
        }

        public boolean setTechLvNow(int techLvNow) {
            // this.techLvNow = ComUtil.limitValue(techLvNow, 0, ResConfig.Game.cardUpdMax_techLv);
            if(ComUtil.ifValueBetween(techLvNow,0, game.resGameConfig.cardUpdMax_techLv,true)){
                this.techLvNow =techLvNow;
                return true;
            }else {
                return false;
            }

        }
        public boolean updTechLvNow() {
            addCityHpByRate(techLvNow*cityLvNow);
            return setTechLvNow(techLvNow+1);
        }
        public void reduceTechLvNow() {
            setTechLvNow(techLvNow-1);
        }
        private int energyLvNow;//能源等级


        public int getEnergyLvNow() {
            return energyLvNow;
        }

        public boolean setEnergyLvNow(int energyLvNow) {
            // this.energyLvNow =ComUtil.limitValue( energyLvNow,0,ResConfig.Game.cardUpdMax_eneryLv);
            if(energyLvNow>=0&&energyLvNow<= game.resGameConfig.cardUpdMax_eneryLv){
                this.energyLvNow =energyLvNow;
                resetEnergyCost();
                return true;
            }else {
                return false;
            }

        }

        public boolean updEnergyLvNow() {
            if(ifEffective(0)){
                addCityStability(energyLvNow);
            }
            return  setEnergyLvNow(energyLvNow+1);
        }
        public void reduceEnergyLvNow() {
            setEnergyLvNow(energyLvNow-1);
        }
        private int transportLvNow;//交通等级

        public int getTransportLvNow() {
            return transportLvNow;
        }

        public boolean setTransportLvNow(int transportLvNow) {
            //  this.transportLvNow =ComUtil.limitValue( transportLvNow,0,ResConfig.Game.cardUpdMax_transportLv);
            if(ComUtil.ifValueBetween(transportLvNow,0, game.resGameConfig.cardUpdMax_transportLv,true)){
                this.transportLvNow =transportLvNow;
                return true;
            }else {
                return false;
            }
        }

        public boolean updTransportLvNow() {
            addCityHpByRate(transportLvNow*cityLvNow);
            return   setTransportLvNow(transportLvNow+1);
        }
        public void reduceTransportLvNow() {
            setTransportLvNow(tradeLvNow-1);
        }
        private int armyLvNow;//军队等级

        public int getArmyLvNow() {
            return armyLvNow;
        }

        public boolean setArmyLvNow(int armyLvNow) {
            // this.armyLvNow =ComUtil.limitValue( armyLvNow,0,ResConfig.Game.cardUpdMax_unitLv);
            if(ComUtil.ifValueBetween(armyLvNow,0, game.resGameConfig.cardUpdMax_unitLv,true)){
                this.armyLvNow =armyLvNow;
                return true;
            }else {
                return false;
            }
        }

        public boolean updArmyLvNow() {
            if(ifEffective(0)){
                addCityStability(armyLvNow);
            }
            return setArmyLvNow(armyLvNow+1);
        }
        public void reduceArmyLvNow() {
            setArmyLvNow(armyLvNow-1);
        }
        private int airLvNow;//空军等级

        public int getAirLvNow() {
            return airLvNow;
        }
        public int getAirCount(){
            int c=0;
            if(airIndex1 !=-1){
                c++;
            }
            if(airIndex2 !=-1){
                c++;
            }
            if(airIndex3 !=-1){
                c++;
            }
            if(airIndex4 !=-1){
                c++;
            }
            return c;
        }

        public int getNuclearCount(){
            int c=0;
            if(nulIndex1 !=-1){
                c++;
            }
            if(nulIndex2 !=-1){
                c++;
            }
            if(nulIndex3 !=-1){
                c++;
            }
            if(nulIndex4 !=-1){
                c++;
            }
            return c;
        }


        public boolean setAirLvNow(int airLvNow) {
            //this.airLvNow =ComUtil.limitValue( airLvNow,0,ResConfig.Game.cardUpdMax_airportLv);
            if(ComUtil.ifValueBetween(airLvNow,0, game.resGameConfig.cardUpdMax_airportLv,true)){
                this.airLvNow =airLvNow;
                return true;
            }else {
                return false;
            }
        }

        public boolean updAirLvNow() {
            if(ifEffective(0)){
                addCityStability(airLvNow);
            }
            return setAirLvNow(airLvNow+1);
        }
        public void reduceAirLvNow() {
            setAirLvNow(airLvNow-1);
        }
        private int supplyLvNow;//补给等级

        public int getSupplyLvNow() {
            return supplyLvNow;
        }

        public int getBuildReplyHp() {
            float v=1+getLegionData().getLegionFeatureEffect(19)/100;
            if (buildWonder == 3) {
                return (int) (cityHpNow / 4 * ((supplyLvNow+1)*15+100)/100*v);
            } else if (isCapital()) {
                return (int) (cityHpNow / 5 * ((supplyLvNow+1)*15+100)/100*v);
            } else {
                return (int) (cityHpNow / 6 * ((supplyLvNow+1)*15+100)/100*v);
            }
        }

        public boolean setSupplyLvNow(int supplyLvNow) {
            //   this.supplyLvNow =ComUtil.limitValue( supplyLvNow,0,ResConfig.Game.cardUpdMax_supplyLv);
            if(ComUtil.ifValueBetween(supplyLvNow,0, game.resGameConfig.cardUpdMax_supplyLv,true)){
                this.supplyLvNow =supplyLvNow;
                return true;
            }else {
                return false;
            }


        }

        public boolean updSupplyLvNow() {
            if(ifEffective(0)){
                addCityStability(supplyLvNow);
            }
            return   setSupplyLvNow(supplyLvNow+1);
        }
        public void reduceSupplyLvNow() {
            setSupplyLvNow(supplyLvNow-1);
        }
        private int defenceLvNow;//城防等级

        public int getDefenceLvNow() {
            return defenceLvNow;
        }
        // 随后增加特殊飞机的加成
        public int getDefenceChance(){
            return (defenceLvNow+1)*5;
        }


        public boolean setDefenceLvNow(int defenceLvNow) {
            // this.defenceLvNow =ComUtil.limitValue( defenceLvNow,0,ResConfig.Game.cardUpdMax_defenceLv);
            if(ComUtil.ifValueBetween(defenceLvNow,0, game.resGameConfig.cardUpdMax_defenceLv,true)){
                this.defenceLvNow =defenceLvNow;
                return true;
            }else {
                return false;
            }
        }

        public boolean updDefenceLvNow() {
            if(ifEffective(0)){
                addCityStability(defenceLvNow);
            }
            boolean rs=setDefenceLvNow(defenceLvNow+1);
            resetCityHpMax();
            return rs;
        }
        public void reduceDefenceLvNow() {
            setDefenceLvNow(defenceLvNow-1);
        }
        private int missileLvNow;//导弹等级

        public int getMissileLvNow() {
            return missileLvNow;
        }

        public boolean setMissileLvNow(int missileLvNow) {
            /*if(missileLvNow<0||missileLvNow>20){
                int s=0;
            }*/
            //this.missileLvNow =ComUtil.limitValue( missileLvNow,0,ResConfig.Game.cardUpdMax_missileLv);
            if(ComUtil.ifValueBetween(missileLvNow,0, game.resGameConfig.cardUpdMax_missileLv,true)){
                this.missileLvNow =missileLvNow;
                return true;
            }else {
                return false;
            }

        }

        public boolean updMissileLvNow() {
            if(ifEffective(0)){
                addCityStability(missileLvNow);
            }
            return setMissileLvNow(this.missileLvNow+1);
        }
        public void reduceMissileLvNow() {
            setMissileLvNow( this.missileLvNow - 1);
        }
        private int nuclearLvNow;//核弹等级

        public int getNuclearLvNow() {
            return nuclearLvNow;
        }

        public boolean setNuclearLvNow(int nuclearLvNow) {
            //  this.nuclearLvNow =ComUtil.limitValue( nuclearLvNow,0,ResConfig.Game.cardUpdMax_nuclearLv);
            if(ComUtil.ifValueBetween(nuclearLvNow,0, game.resGameConfig.cardUpdMax_nuclearLv,true)){
                this.nuclearLvNow =nuclearLvNow;
                return true;
            }else {
                return false;
            }
        }

        public boolean updNuclearLvNow() {
            if(ifEffective(0)){
                addCityStability(nuclearLvNow);
            }
            return setNuclearLvNow(1+nuclearLvNow);
        }
        public void reduceNuclearLvNow() {
            setNuclearLvNow(nuclearLvNow-1);
        }

        private int cultureLvNow;//文化等级

        public int getCultureLvNow() {
            return cultureLvNow;
        }

        public boolean setCultureLvNow(int cultureLvNow) {
            // this.cultureLvNow =ComUtil.limitValue( cultureLvNow,0,ResConfig.Game.cardUpdMax_cultureLv);
            if(ComUtil.ifValueBetween(cultureLvNow,0, game.resGameConfig.cardUpdMax_cultureLv,true)){
                this.cultureLvNow =cultureLvNow;
                return true;
            }else {
                return false;
            }
        }

        public boolean updCultureLvNow() {
            addCityHpByRate(cultureLvNow*cityLvNow);
            return   setCultureLvNow(1+cultureLvNow);
        }
        public void reduceCultureLvNow() {
            setCultureLvNow(cultureLvNow-1);
        }

        private int tradeLvNow;//贸易等级

        public int getTradeLvNow() {
            return tradeLvNow;
        }

        public boolean setTradeLvNow(int tradeLvNow) {
            //    this.tradeLvNow =ComUtil.limitValue( tradeLvNow,0,ResConfig.Game.cardUpdMax_tradeLv);
            if(tradeLvNow>=0&&tradeLvNow<= game.resGameConfig.cardUpdMax_tradeLv){
                this.tradeLvNow=tradeLvNow;
                return true;
            }else {
                return false;
            }


        }

        public boolean updTradeLvNow() {
            addCityHpByRate(tradeLvNow*cityLvNow);
            return setTradeLvNow(1+tradeLvNow);
        }
        public void reduceTradeLvNow() {
            setTradeLvNow(tradeLvNow-1);
        }
        private int varEnergyCost;//能源消耗量

        public int getVarEnergyCost() {
            return varEnergyCost;
        }

        private void setVarEnergyCost(int varEnergyCost) {
            this.varEnergyCost = varEnergyCost;
        }

        private int areaZone;
        // 代表洲际  10亚20欧30北美40南美50非60大洋洲

        public int getIntercontinentalZone(){
            return areaZone/10;
        }


        public boolean isTargetAreaZone(int targetZone){
            // int tagetZone=getLegionDataByLi(li).getTargetAreaZone();
            if((getAreaZone()==targetZone||getIntercontinentalZone()*10==targetZone)){
                return true;
            }
            return false;
        }


        public int getAreaZone(){
            return areaZone;
        }
        public void setAreaZone(int areaZone){
            this.areaZone = areaZone;
            if(buildActor!=null){
                buildActor.updPoint();
            }
        }

        public void resetEnergyCost(){
            if(getAge()>0&& Fb2Smap.this.ifSystemEffective(7)){
                setVarEnergyCost( game.gameMethod.getBuildEnergyCost(this));
            }else{
                setVarEnergyCost(0);
            }
        }
        //电力是否超载
        public boolean ifEnergyOverload(){
            if(getAge()==0||buildType==2||cityLvNow<5){
                return false;
            }else if(Fb2Smap.this.ifSystemEffective(7)&&varEnergyCost >getBuildEnergyAfford()){
                return true;
            }else {
                return false;
            }
        }

        public int getEnergyTaxBonus() {
            if(buildType==2){return 0;}
            if(Fb2Smap.this.ifSystemEffective(7)){
                return  (getBuildEnergyAfford()- varEnergyCost)*getAge();
            }
            return 0;
        }

        //是否孤立无援
        public boolean ifIsolate(){
            if(getBuildType()==2){
                return false;
            }
            ConnectData c=getConnectData();
            if(c!=null){
                BuildData b=null;int r;
                for(int i=1,iMax=c.getRegionConnectCount();i<=iMax;i++){
                    //r=c[i];
                    r=c.getConnectValue(i,0);
                    b=getBuildDataByRegion(r);
                    if(b!=null&&b.getBuildType()!=2 && ifAllyByLi(b.getLegionIndex(),legionIndex) ){
                        return false;
                    }
                }
                return true;
            }
            return false;
        }



        private int weatherId;//研发目标

        public int getWeatherId() {
            return weatherId;
        }

        public void setWeatherId(int weatherId) {
            this.weatherId = ComUtil.limitValue(weatherId,0,255);
        }

        private int buildRound;//研发回合

        public int getBuildRound() {
            return buildRound;
        }

        public void setBuildRound(int buildRound) {
            this.buildRound = ComUtil.limitValue(buildRound,0,255);
        }

        public void addBuildRound(int buildRound) {
            if(spiritMap!=null&&ifEffective(16)){
                if(spiritMap.containsKey(41)||(isPlayer()&&spiritMap.containsKey(43))){
                    buildRound=ComUtil.max(buildRound/2,1);
                }
            }
            setBuildRound(this.buildRound + buildRound);
        }

        private int hinge;//非征服模式 1据点

        public int getHinge() {
            return hinge;
        }

        public void setHinge(int hinge) {
            this.hinge = hinge;
        }

        private int climateZone;//建筑外形

        public int getClimateZone() {
            return climateZone;
        }

        public void setClimateZone(int climateZone) {
            this.climateZone = climateZone;
        }

        private int strategicRegion;//战略区域

        public int getStrategicRegion() {
            return strategicRegion;
        }

        public void setStrategicRegion(int strategicRegion) {
            this.strategicRegion = strategicRegion;
        }

        private int influenceLi;//势力归属

        public int getInfluenceLi() {
            return influenceLi;
        }

        public void setInfluenceLi(int influenceLi) {
            this.influenceLi = influenceLi;
        }

        private int buildBuff2;//buff标记2

        public int getBuildBuff2() {
            return buildBuff2;
        }

        public void setBuildBuff2(int buildBuff2) {
            this.buildBuff2 = buildBuff2;
        }

        private int buildBuff3;//buff标记3

        public int getBuildBuff3() {
            return buildBuff3;
        }

        public void setBuildBuff3(int buildBuff3) {
            this.buildBuff3 = buildBuff3;
        }

        private int eventIndex;//关联事件

        public int getEventIndex() {
            return eventIndex;
        }

        public void setEventIndex(int eventIndex) {
            this.eventIndex = eventIndex;
        }

        private int buildPolicy;//方针

        public int getBuildPolicy() {
            return buildPolicy;
        }

        public void setBuildPolicy(int buildPolicy) {
            this.buildPolicy = buildPolicy;
            /*if(markRegionList!=null){
                   if(buildPolicy==1){
                       if(!markRegionList.contains(regionId)){
                           markRegionList.add(regionId);
                       }
                   }else {
                       markRegionList.removeValue(regionId);
                   }
            }*/
        }
        // public int varBuildStatus;//建筑状态 1敌人战斗区域 2友方战斗区域 3我方战斗区域


        public String getGeneralImageName(){
            IntArray hs=regionHexagonMap.get(regionId);
            ArmyData a;String ag;
            if(hs!=null){
                for(int i=0;i<hs.size;i++){
                    int h=hs.get(i);
                    if(h!=0){
                        a=getArmyDataByHexagon(h);
                        if(a!=null){
                            ag=a.getGeneralImageName();
                            if(ag!=null){
                                return ag;
                            }
                        }
                    }
                }
            }
            return null;
        }
        public GeneralData getGeneralData(){
            IntArray hs=regionHexagonMap.get(regionId);
            ArmyData a;GeneralData ag;
            if(hs!=null){
                for(int i=0;i<hs.size;i++){
                    int h=hs.get(i);
                    if(h!=0){
                        a=getArmyDataByHexagon(h);
                        if(a!=null&&a.getLegionIndex()==legionIndex&&a.getGeneralIndex()!=0){
                            ag=a.getGeneralData();
                            if(ag!=null){
                                return ag;
                            }
                        }
                    }
                }
            }
            return null;
        }

        public void beAttack(ArmyData army,int damage,float damageTime) {
            if(cityHpMax!=0){
                changeCityStability( ComUtil.limitValue(damage*50/cityHpMax,1,10));
            }
            int li=army.getLegionIndex();
            ArmyData a=getArmyDataByHexagon(regionId);
            boolean ifOne=(cityHpNow!=0&&cityHpMax==cityHpNow&&masterData.getPlayerMode()!=2);//在军团模式中一次保护失效
            cityHpNow -= damage;
            LegionData legionB=getLegionData();
            ForeignData f = getForeignData(legionB.getLegionIndex(), li);
            if(f!=null){
                f.reduceFavor(ComUtil.getRandom(1, 10));
            }
            if(cityHpNow <= 0){
                boolean ifHaveArmy=a!=null&&a.getLegionIndex()==legionIndex&&a.getArmyType()!=5&&a.getArmyType()!=7;
                if (!ifOne&&!ifHaveArmy) {
                    //设定与进攻者关系恶化

                    if(legionB!=null&&legionB.getLegionIndex()!=0&&legionB.getInternIndex()==0){
                        legionB.setInternIndex(legionB.getLegionIndex());
                        legionB.setSuzerainLi(0);
                    }

                    if(Fb2Smap.this.ifSystemEffective(0)&&legionB!=null){
                        legionB.reduceStability(ComUtil.getRandom(1, 3));
                        //如果是玩家进攻ai,对ai进行资源补偿或兵种补偿
                        if (ifAllyPlayerByLi(li)) {
                            if(legionB.ifAiCheatChance()){
                                ai_resBalanceByPlayerOccup(legionB);
                            }
                            if(masterData.ifFog==1&&legionB.ifAiCheatChance()){
                                ai_unitBalanceByPlayerOccupTIA1A2(regionId,legionB,army);
                                if(legionB.ifAiCheatChance()){
                                    ai_unitTeleportToAroundRegion(regionId,legionIndex,getRoundProgress()>50);
                                }
                            }
                        }
                        addLegionConfidence(legionB.getLegionIndex(),-1);
                    }
                    cityHpNow = 0;

                    if(masterData.getVictoryType()==0){//占领胜利
                        //海军使 1海港 2海洋(海洋不能建造) 3临海城市
                        if(!isCapital()){
                            if( (army.ifHaveFeature(9)&&army.triggerFeature(9))){
                                setLegionIndex(army.getLegionIndex());
                                army.drawFeature(9);
                            }else if(army.triggerSkill(97) ){
                                setLegionIndex(army.getLegionIndex());
                                army.drawSkill(97);
                            }
                        }
                            /*else {
                            setLegionIndex(0);
                            hexagonDatas.get(regionId).setLegionIndex(0);
                        }*/
                    }else if(masterData.getVictoryType()==1){//据点胜利
                        if(!isCapital()&& hinge !=0){
                            if(army.ifHaveFeature(9)&&army.triggerFeature(9)){
                                setLegionIndex(army.getLegionIndex());
                                army.drawFeature(9);
                            }else if(army.triggerSkill(97)){
                                setLegionIndex(army.getLegionIndex());
                                army.drawSkill(97);
                            }
                        }
                        /*else {
                            setLegionIndex(0);
                            hexagonDatas.get(regionId).setLegionIndex(0);
                        }*/
                    }

                    //addUpdColorRegion(regionId);
                    setFogByRegion(regionId, 0);
                    clearAllAirAndNul();
                    setBuildPolicy(0);
                    randomReduceTech(1,1);
                }else {
                    cityHpNow = 1;
                }
            }

            /*if (buildStatus == 0) {
                addUpdColorRegion(regionId);
            }*/
            if(army.isPlayer()||isPlayer()){
                setBuildStatus(3);
            }else if(ifAllyPlayerByLi(army.getLegionIndex())||ifAllyPlayerByLi(legionIndex)){
                setBuildStatus(2);
            }else {
                setBuildStatus(1);
            }
            if((roundState==0||(roundState==4&&(isPlayer()||army.isPlayer())))&&buildActor!=null){
                if(buildActor.inDrawScope()){
                    this.drawStrike(army.getAttackStrike(),damageTime);
                    effectStage.drawUnitHp(regionId,-damage,damageTime);
                }
                buildActor.update();
            }
        }

        public void beNulclearAttack(int nuclearId,int li,int damage ,float damageTime) {
            //催泪弹不降低城市等级
            if(nuclearId==1701){
                return;
            }

            boolean ifSelf=li==legionIndex;

            ArmyData a=getArmyDataByHexagon(regionId);
            if(cityHpMax!=0&&!ifSelf){
                changeCityStability( ComUtil.limitValue(damage*50/cityHpMax,1,50));
            }
            cityHpNow -= damage;
            if(nuclearId<1703){
                beAttackForAir(damage,ResDefaultConfig.Effect.effect_gas,damageTime);
            }else{
                beAttackForAir(damage,ResDefaultConfig.Effect.effect_nuclearbomb,damageTime);
            }

            if(cityHpNow <= 0) {
                boolean ifHaveArmy = a != null && a.getLegionIndex() == legionIndex;
                if (!ifHaveArmy&&!ifSelf) {
                    //设定与进攻者关系恶化
                    LegionData legionB=getLegionData();
                    LegionData legionN=Fb2Smap.this.getLegionDataByLi(li);


                    if (legionN!=null&&legionB != null&&legionB.getLegionIndex()!=li) {
                        legionB.reduceStability(ComUtil.getRandom(1, 10));
                        ForeignData f = getForeignData(legionB.getLegionIndex(), li);
                        if(f!=null&&ifEffective(4)){
                            f.reduceFavor(ComUtil.getRandom(50, 90));
                            f.setForeignType(-1);
                            if(legionN.isPlayer()){
                                GeneralData g=getMaxRankGeneralData(legionB.getLegionIndex(),true);
                                if(g!=null){
                                    // int countryId,GeneralData g,int dialogueIdType,String value
                                    addDialogueData(legionB.getCountryId(),g,17,"",true);
                                    legion_intensifyUnity(legionB,(masterData.getGameDifficulty()+legionB.getLevel())/2+1);
                                }
                            }
                            if(isPlayer()){
                                // prompt_title_101=受到弹头攻击
                                //prompt_detail_101=处于{0}区域的我方城市受到{1}的弹头武器攻击
                                //      prompt_effect_101=我们与{0}的好感度为{1}
                                addPromptData(game.gameMethod.getPromptStr(101,0),
                                        game.gameMethod.getPromptStr(101,1,srName,legionN.legionName),
                                        game.gameMethod.getPromptStr(101,2,legionN.legionName,f.getFavorValue()),legionB.getLegionIndex(),legionN.getLegionIndex(),false);
                            }
                            for (int i = 0, iMax = legionDatas.size; i < iMax; i++) {
                                LegionData l = legionDatas.get(i);
                                if (l.getLegionIndex() == legionB.getLegionIndex()) {
                                    continue;
                                }
                                f = getForeignData(l.getLegionIndex(), li);
                                //如果是被核弹进攻国的宗主国,则关系减少
                                if (legionB.suzerainLi != 0 && l.legionIndex == legionB.suzerainLi) {
                                    f.reduceFavor(ComUtil.getRandom(30, 90));
                                    f.setForeignType(-1);
                                    if(l.isPlayer()){
                                        addPromptData(game.gameMethod.getPromptStr(102,0),
                                                game.gameMethod.getPromptStr(102,1,srName,legionB.legionName,legionN.legionName),
                                                game.gameMethod.getPromptStr(102,2,legionN.legionName,f.getFavorValue()),l.getLegionIndex(),legionN.getLegionIndex(),false);
                                    }else if(legionN.isPlayer()){
                                        GeneralData g=getMaxRankGeneralData(l.getLegionIndex(),true);
                                        if(g!=null){
                                            // int countryId,GeneralData g,int dialogueIdType,String value
                                            addDialogueData(l.getCountryId(),g,17,"",true);
                                            legion_intensifyUnity(l,(masterData.getGameDifficulty()+l.getLevel())/2+1);
                                        }
                                    }

                                    //如果是被核弹进攻国的同盟国,则关系减少
                                }  else if (ifAllyByLi(l.getLegionIndex(),legionB.getLegionIndex())) {
                                    f.reduceFavor(ComUtil.getRandom(20, 80));
                                    f.setForeignType(-1);
                                    if(l.isPlayer()){
                                        addPromptData(game.gameMethod.getPromptStr(103,0),
                                                game.gameMethod.getPromptStr(103,1,srName,legionB.legionName,legionN.legionName),
                                                game.gameMethod.getPromptStr(103,2,legionN.legionName,f.getFavorValue()),l.getLegionIndex(),legionN.getLegionIndex(),false);
                                    }else  if(legionN.isPlayer()){
                                        GeneralData g=getMaxRankGeneralData(l.getLegionIndex(),true);
                                        if(g!=null){
                                            // int countryId,GeneralData g,int dialogueIdType,String value
                                            addDialogueData(l.getCountryId(),g,17,"",true);
                                            legion_intensifyUnity(l,(masterData.getGameDifficulty()+l.getLevel())/2+1);
                                        }
                                    }
                                }else if(!ifAllyByLi(l.getLegionIndex(),li)){//对非同盟国家,减少好感度
                                    f.reduceFavor(ComUtil.getRandom(5, 10));
                                }else  {
                                    f.addFavor(ComUtil.getRandom(0, 2));
                                }
                            }
                        }
                        //如果是玩家进攻ai,对ai进行资源补偿或兵种补偿
                        if (ifAllyPlayerByLi(li)&&legionB.ifAiCheatChance()) {
                            ai_resBalanceByPlayerOccup(legionB);
                            if (legionB.ifAiCheatChance()) {
                                ai_unitTeleportToAroundRegion(regionId, legionIndex,getRoundProgress()>50);
                            }
                        }
                        addLegionConfidence(legionB.getLegionIndex(), -10);
                    }
                    cityHpNow = 0;
                    setLegionIndex(0);
                    clearAllAirAndNul();
                    setBuildPolicy(0);
                    hexagonDatas.get(regionId).setLegionIndexValue(0);

                    //addUpdColorRegion(regionId);
                    setFogByRegion(regionId, 0);
                } else {
                    cityHpNow = 1;
                }
                randomReduceTech(ComUtil.getRandom(1,cityLvNow),1);
            }else {
                randomReduceTech(ComUtil.getRandom(0,cityLvNow/2),1);
            }
            if((roundState==0||(roundState==4||isPlayer()))&&buildActor!=null){
                buildActor.update();
            }
            if(buildRound==0){
                addBuildRound(1);
            }
        }

        private void beAttackForAir(int damage,String effectName,float damageTime) {
            for(int i=0;i<4;i++){
                AirData air=getBuildAirData(i);
                if(air!=null){
                    if (air.injured(damage)) {//受伤死亡
                        air_Death(air);
                    }
                }
            }
            if((roundState==0||(roundState==4||isPlayer()))&&buildActor!=null){
                buildActor.update();
            }
            if((roundState==0||(roundState==4||isPlayer()))&&buildActor.inDrawScope()){
                effectStage.drawUnitHp( regionId,-damage,damageTime);
                drawStrike(effectName,damageTime);
            }
        }


        public void beAttack(int li,int damage) {

            if(cityHpMax!=0){
                changeCityStability( ComUtil.limitValue(damage*50/cityHpMax,1,10));
            }
            //int li=air.getLegionIndex();

            ArmyData a=getArmyDataByHexagon(regionId);
            boolean ifOne=(cityHpNow!=0&&cityHpMax==cityHpNow);
            cityHpNow -= damage;

            //设定与进攻者关系恶化
            LegionData legionB=getLegionData();
            LegionData legionA=getLegionDataByLi(li);
            if(legionA!=null&&legionB!=null){
                if(li!=0){
                    ForeignData f = getForeignData(legionB.getLegionIndex(), li);
                    if(f!=null&&ifEffective(4)&&f.getTargetLegionIndex()!=0&&f.getSourceLegionIndex()!=0){
                        if(f!=null&&f.getForeignType()>=0&&Fb2Smap.this.ifSystemEffective(0)){
                            legionB.reduceStability(ComUtil.getRandom(1, 3));
                            addLegionConfidence(legionB.getLegionIndex(),-cityLvNow);
                        }
                        f.reduceFavor(ComUtil.getRandom(20, 40));
                        if(f.getForeignType()!=-1&&ifEffective(4)){
                            if(isPlayer()){//我方受到攻击
                                addPromptData(game.gameMethod.getPromptStr(104,0),
                                        game.gameMethod.getPromptStr(104,1,srName,legionA.legionName),
                                        game.gameMethod.getPromptStr(104,2,legionA.legionName,f.getFavorValue()),legionB.getLegionIndex(),legionA.getLegionIndex(),false);
                            }else if(legionA.isPlayer()){//我方进攻非敌军
                                addPromptData(game.gameMethod.getPromptStr(100,0,legionB.legionName),
                                        game.gameMethod.getPromptStr(100,1,srName,legionB.legionName),
                                        game.gameMethod.getPromptStr(100,2,legionB.legionName,f.getFavorValue()),legionA.getLegionIndex(),legionB.getLegionIndex(),true);
                            }
                        }
                        if(f.getFavorValue()<60&&f.getForeignType()!=-1){
                            f.setForeignType(-1);
                            if(legionA.isPlayer()){
                                GeneralData g=getMaxRankGeneralData(legionB.getLegionIndex(),true);
                                if(g!=null){
                                    // int countryId,GeneralData g,int dialogueIdType,String value
                                    addDialogueData(legionB.getCountryId(),g,17,"",true);
                                    legion_intensifyUnity(legionB,(masterData.getGameDifficulty()+legionB.getLevel())/2+1);
                                }
                            }
                        }

                    }
                    //如果是玩家进攻ai,对ai进行资源补偿或兵种补偿
                    if (ifAllyPlayerByLi(li)&&legionB.ifAiCheatChance()) {
                        if(ComUtil.ifGet(30)){
                            ai_resBalanceByPlayerOccup(legionB);
                        }else if(masterData.ifFog==1){
                            ai_unitTeleportToAroundRegion(regionId,legionIndex,getRoundProgress()>50);
                        }
                    }
                }
            }

            if(cityHpNow <= 0){
                boolean ifHaveArmy=a!=null&&a.getLegionIndex()==legionIndex&&a.getArmyType()!=5&&a.getArmyType()!=7;;
                if (!ifOne&&!ifHaveArmy) {

                    cityHpNow = 0;
                    clearAllAirAndNul();
                    setBuildPolicy(0);
                  /*  setLegionIndex(0);
                    hexagonDatas.get(regionId).setLegionIndex(0);*/

                    //addUpdColorRegion(regionId);
                    setFogByRegion(regionId, 0);
                    randomReduceTech(1,1);
                }else {
                    cityHpNow = 1;
                }
            }

            /*if (buildStatus == 0) {
                addUpdColorRegion(regionId);
            }*/
            if(masterData.playerLegionIndex==li||isPlayer()){
                setBuildStatus(3);
            }else if(ifAllyPlayerByLi(li)||ifAllyPlayerByLi(legionIndex)){
                setBuildStatus(2);
            }else {
                setBuildStatus(1);
            }
            if((roundState==0||(roundState==4||isPlayer())&&buildActor!=null)){
                buildActor.update();
            }
        }

        private void clearAllAirAndNul() {
            AirData air;NulcleData nul;
            if(airIndex1!=-1&&airIDatas.containsKey(airIndex1)){
                air_Death(getAirData(airIndex1));
                airIndex1=-1;
            }
            if(airIndex2!=-1&&airIDatas.containsKey(airIndex2)){
                air_Death(getAirData(airIndex2));
                airIndex2=-1;
            }
            if(airIndex3!=-1&&airIDatas.containsKey(airIndex3)){
                air_Death(getAirData(airIndex3));
                airIndex3=-1;
            }
            if(airIndex4!=-1&&airIDatas.containsKey(airIndex4)){
                air_Death(getAirData(airIndex4));
                airIndex4=-1;
            }
            if(nulIndex1!=-1&&nulcleIDatas.containsKey(nulIndex1)){
                nul_Death(nulIndex1);
                nulIndex1=-1;
            }
            if(nulIndex2!=-1&&nulcleIDatas.containsKey(nulIndex2)){
                nul_Death(nulIndex2);
                nulIndex2=-1;
            }
            if(nulIndex3!=-1&&nulcleIDatas.containsKey(nulIndex3)){
                nul_Death(nulIndex3);
                nulIndex3=-1;
            }
            if(nulIndex4!=-1&&nulcleIDatas.containsKey(nulIndex4)){
                nul_Death(nulIndex4);
                nulIndex4=-1;
            }
            if((roundState==0||(roundState==4||isPlayer())&&buildActor!=null)){
                buildActor.update();
            }
        }

        //-----------------------------------
        private int airIndex1;

        public int getAirIndex1() {
            return airIndex1;
        }

        public void setAirIndex1(int airIndex1) {
            this.airIndex1 = airIndex1;
        }

        private int airIndex2;

        public int getAirIndex2() {
            return airIndex2;
        }

        public void setAirIndex2(int airIndex2) {
            this.airIndex2 = airIndex2;
        }

        private int airIndex3;

        public int getAirIndex3() {
            return airIndex3;
        }

        public void setAirIndex3(int airIndex3) {
            this.airIndex3 = airIndex3;
        }

        private int airIndex4;

        public int getAirIndex4() {
            return airIndex4;
        }

        public void setAirIndex4(int airIndex4) {
            this.airIndex4 = airIndex4;
        }

        private int nulIndex1;

        public int getNulIndex1() {
            return nulIndex1;
        }

        public void setNulIndex1(int nulIndex1) {
            this.nulIndex1 = nulIndex1;
        }

        private int nulIndex2;

        public int getNulIndex2() {
            return nulIndex2;
        }

        public void setNulIndex2(int nulIndex2) {
            this.nulIndex2 = nulIndex2;
        }

        private int nulIndex3;

        public int getNulIndex3() {
            return nulIndex3;
        }

        public void setNulIndex3(int nulIndex3) {
            this.nulIndex3 = nulIndex3;
        }

        private int nulIndex4;

        public int getNulIndex4() {
            return nulIndex4;
        }

        public void setNulIndex4(int nulIndex4) {
            this.nulIndex4 = nulIndex4;
        }

        public void initBuildData() {
            this.buildIndex = 0;
            this.regionId = 0;
            this.buildType = 0;
            this.legionIndex = 0;
            this.buildName = 0;
            this.buildWonder = 0;
            this.buildStatus = 0;
            this.airforcePolicy = 0;
            this.cityHpMax = 0;
            this.cityHpNow = 0;
            this.cityStability = 60;
            this.developLv = 0;
            this.cityTax = 100;
            this.cityLvNow = 0;
            this.industryLvNow = 0;
            this.foodLvNow = 0;
            this.techLvNow = 0;
            this.energyLvNow = 0;
            this.transportLvNow = 0;
            this.armyLvNow = 0;
            this.airLvNow = 0;
            this.supplyLvNow = 0;
            this.defenceLvNow = 0;
            this.missileLvNow = 0;
            this.nuclearLvNow = 0;
            this.cultureLvNow = 0;
            this.tradeLvNow = 0;
            this.varEnergyCost = 0;
            this.weatherId = 0;
            this.buildRound = 0;
            this.hinge = 0;
            this.climateZone = 0;
            this.strategicRegion = 0;
            this.influenceLi = 0;
            this.buildBuff2 = 0;
            this.buildBuff3 = 0;
            this.eventIndex = -1;
            this.buildPolicy = 0;
            this.airIndex1=-1;
            this.airIndex2=-1;
            this.airIndex3=-1;
            this.airIndex4=-1;
            this.nulIndex1=-1;
            this.nulIndex2=-1;
            this.nulIndex3=-1;
            this.nulIndex4=-1;
        }


        public String getAllAttributes() {
            return " buildIndex:" + buildIndex
                    +" legionIndex:"+legionIndex
                    + " inlandSeaLi:" + inlandSeaLi
                    + " regionId:"  + regionId
                    + " buildType:" + buildType
                    + " buildName:" + buildName
                    + " buildWonder:" + buildWonder
                    + " buildStatus:" + buildStatus
                    + " buildStatusRound:" + airforcePolicy
                    + " cityHpMax:" + cityHpMax
                    + " cityHpNow:" + cityHpNow
                    + " cityStability:" + cityStability
                    + " developLv:" + developLv
                    + " cityTax:" + cityTax
                    + " cityLvNow:" + cityLvNow
                    + " industryLvNow:" + industryLvNow
                    + " foodLvNow:" + foodLvNow
                    + " techLvNow:" + techLvNow
                    + " energyLvNow:" + energyLvNow
                    + " transportLvNow:" + transportLvNow
                    + " armyLvNow:" + armyLvNow
                    + " airLvNow:" + airLvNow
                    + " supplyLvNow:" + supplyLvNow
                    + " defenceLvNow:" + defenceLvNow
                    + " missileLvNow:" + missileLvNow
                    + " nuclearLvNow:" + nuclearLvNow
                    + " cultureLvNow:" + cultureLvNow
                    + " tradeLvNow:" + tradeLvNow
                    + " varEnergyCost:" + varEnergyCost
                    + " weatherId:" + weatherId
                    + " buildRound:" + buildRound
                    + " landZone:"+ areaZone
                    + " hinge:" + hinge
                    + " buildWonder:" + climateZone
                    + " buildWonderRound:" + strategicRegion
                    + " buildBuff1:" + influenceLi
                    + " buildBuff2:" + buildBuff2
                    + " buildBuff3:" + buildBuff3
                    + " eventIndex:" + eventIndex
                    + " buildPolicy:" + buildPolicy;
        }

        public void removeAirIndex(int airIndex) {
            if(airIndex1 ==airIndex){
                airIndex1 =-1;
            }else if(airIndex2 ==airIndex){
                airIndex2 =-1;
            }else if(airIndex3 ==airIndex){
                airIndex3 =-1;
            }else if(airIndex4 ==airIndex){
                airIndex4 =-1;
            }
            if(buildActor!=null){
                buildActor.update();
            }
        }

        public boolean setAirIndex(int airIndex) {
            if(airIndex1 ==-1){
                airIndex1 =airIndex;
                return true;
            }
            if(airIndex2 ==-1){
                airIndex2 =airIndex;
                return true;
            }
            if(airIndex3 ==-1){
                airIndex3 =airIndex;
                return true;
            }
            if(airIndex4 ==-1){
                airIndex4 =airIndex;
                return true;
            }
            return false;
        }
        public void removeNulIndex(int nulIndex) {
            if(nulIndex1 ==nulIndex){
                nulIndex1 =-1;
            }else if(nulIndex2 ==nulIndex){
                nulIndex2 =-1;
            }else if(nulIndex3 ==nulIndex){
                nulIndex3 =-1;
            }else if(nulIndex4 ==nulIndex){
                nulIndex4 =-1;
            }
            getBuildActor().updDrawInfo();
        }

        public boolean setNulIndex(int nulIndex) {
            if(nulIndex1 ==-1){
                nulIndex1 =nulIndex;
                return true;
            }
            if(nulIndex2 ==-1){
                nulIndex2 =nulIndex;
                return true;
            }
            if(nulIndex3 ==-1){
                nulIndex3 =nulIndex;
                return true;
            }
            if(nulIndex4 ==-1){
                nulIndex4 =nulIndex;
                return true;
            }
            return false;
        }
        public float getHpRateF() {
            if(getCityHpMax()==0){
                return 0;
            }else {
                return cityHpNow*1f/cityHpMax;
            }
        }
        public int getHpRate() {
            if(getCityHpMax()==0){
                return 0;
            }else {
                return cityHpNow*100/cityHpMax;
            }
        }
        public int canUpdTradeLv() {
            int lv=0;
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==4&&effect==1){
                        lv=value;
                    }
                }
            }
            if(isCapital()){
                return ComUtil.limitValue(legionDatas.get(this.legionIndex).getTradeLvMax()+Math.max(2,lv),0, game.resGameConfig.cardUpdMax_tradeLv);
            }
            if(getLegionData().ifLegionFeature(1)){
                return ComUtil.limitValue(legionDatas.get(this.legionIndex).getTradeLvMax()+getLegionData().getLegionFeatureEffect(1)+lv,0, game.resGameConfig.cardUpdMax_tradeLv);
            }
            return legionDatas.get(this.legionIndex).getTradeLvMax()+lv;
        }


        public int canUpdCultureLv() {
            int lv=0;
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==4&&effect==2){
                        lv=value;
                    }
                }
            }
            if(isCapital()){
                return ComUtil.limitValue(legionDatas.get(this.legionIndex).getCultureLvMax()+Math.max(2,lv),0, game.resGameConfig.cardUpdMax_cultureLv);
            }

            if(getLegionData().ifLegionFeature(2)){
                return ComUtil.limitValue(legionDatas.get(this.legionIndex).getCultureLvMax()+getLegionData().getLegionFeatureEffect(2)+lv,0, game.resGameConfig.cardUpdMax_cultureLv);
            }

            return legionDatas.get(this.legionIndex).getCultureLvMax()+lv;
        }

        public int canUpdTransportLv() {
            int lv=0;
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==4&&effect==3){
                        lv=value;
                    }
                }
            }
            if(isCapital()){
                return ComUtil.limitValue(legionDatas.get(this.legionIndex).getTransportLvMax()+Math.max(2,lv),0, game.resGameConfig.cardUpdMax_transportLv);
            }
            if(getLegionData().ifLegionFeature(3)){
                return ComUtil.limitValue(legionDatas.get(this.legionIndex).getTransportLvMax()+getLegionData().getLegionFeatureEffect(3)+lv,0, game.resGameConfig.cardUpdMax_transportLv);
            }
            return legionDatas.get(this.legionIndex).getTransportLvMax()+lv;
        }
        public int canUpdFoodLv() {
            int lv=0;
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==4&&effect==5){
                        lv=value;
                    }
                }
            }
            if(isCapital()){
                return ComUtil.limitValue(legionDatas.get(this.legionIndex).getCityLvMax()+Math.max(2,lv),0, game.resGameConfig.cardUpdMax_foodLv);
            }
            if(getLegionData().ifLegionFeature(5)){
                return ComUtil.limitValue(legionDatas.get(this.legionIndex).getCityLvMax()+getLegionData().getLegionFeatureEffect(5)+lv,0, game.resGameConfig.cardUpdMax_foodLv);
            }
            return legionDatas.get(this.legionIndex).getCityLvMax()+lv;
        }
        public int canUpdTechLv() {
            int lv=0;
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==4&&effect==4){
                        lv=value;
                    }
                }
            }
            if(isCapital()){
                return ComUtil.limitValue(legionDatas.get(this.legionIndex).getTechLvMax()+Math.max(2,lv),0, game.resGameConfig.cardUpdMax_cultureLv);
            }

            if(getLegionData().ifLegionFeature(4)){
                return ComUtil.limitValue(legionDatas.get(this.legionIndex).getTechLvMax()+getLegionData().getLegionFeatureEffect(4)+lv,0, game.resGameConfig.cardUpdMax_techLv);
            }

            return legionDatas.get(this.legionIndex).getTechLvMax()+lv;
        }
        public int canUpdEnergyLv() {
            if(getAge()==0){
                return 0;
            }
            int lv=0;
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==4&&effect==6){
                        lv=value;
                    }
                }
            }
            if(isCapital()){
                return ComUtil.limitValue(legionDatas.get(this.legionIndex).getEnergyLvMax()+Math.max(2,lv),0, game.resGameConfig.cardUpdMax_eneryLv);
            }
            if(getLegionData().ifLegionFeature(6)){
                return ComUtil.limitValue(legionDatas.get(this.legionIndex).getEnergyLvMax()+getLegionData().getLegionFeatureEffect(6)+lv,0, game.resGameConfig.cardUpdMax_eneryLv);
            }
            return legionDatas.get(this.legionIndex).getEnergyLvMax()+lv;
        }
        public int canUpdCityLv() {
            int lv=0;
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==4&&effect==7){
                        lv=value;
                    }
                }
            }
            if(isCapital()){
                return ComUtil.limitValue(legionDatas.get(this.legionIndex).getCityLvMax()+Math.max(2,lv),0, game.resGameConfig.cardUpdMax_cityLv);
            }
            if(getLegionData().ifLegionFeature(7)){
                return ComUtil.limitValue(legionDatas.get(this.legionIndex).getCityLvMax()+getLegionData().getLegionFeatureEffect(7)+lv,0, game.resGameConfig.cardUpdMax_cityLv);
            }
            return legionDatas.get(this.legionIndex).getCityLvMax()+lv;
        }

        public int canUpdIndustryLv() {
            int lv=0;
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==4&&effect==8){
                        lv=value;
                    }
                }
            }
            if(isCapital()){
                return ComUtil.limitValue(legionDatas.get(this.legionIndex).getIndustLvMax()+Math.max(2,lv),0, game.resGameConfig.cardUpdMax_industryLv);
            }
            if(getLegionData().ifLegionFeature(8)){
                return ComUtil.limitValue(legionDatas.get(this.legionIndex).getIndustLvMax()+getLegionData().getLegionFeatureEffect(8)+lv,0, game.resGameConfig.cardUpdMax_industryLv);
            }
            return legionDatas.get(this.legionIndex).getIndustLvMax()+lv;
        }
        public int canUpdSupplyLv() {
            int lv=0;
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==4&&effect==9){
                        lv=value;
                    }
                }
            }
            if(isCapital()){
                return ComUtil.limitValue(legionDatas.get(this.legionIndex).getSupplyLvMax()+Math.max(2,lv),0, game.resGameConfig.cardUpdMax_supplyLv);
            }
            if(getLegionData().ifLegionFeature(9)){
                return ComUtil.limitValue(legionDatas.get(this.legionIndex).getSupplyLvMax()+getLegionData().getLegionFeatureEffect(9)+lv,0, game.resGameConfig.cardUpdMax_supplyLv);
            }
            return legionDatas.get(this.legionIndex).getSupplyLvMax()+lv;
        }
        public int canUpdArmyLv() {
            int lv=0;
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==4&&effect==14){
                        lv=value;
                    }
                }
            }
            if(isCapital()){
                return ComUtil.limitValue(legionDatas.get(this.legionIndex).getCityLvMax()+Math.max(2,lv),0, game.resGameConfig.cardUpdMax_unitLv);
            }
            return legionDatas.get(this.legionIndex).getCityLvMax()+lv;
        }

        public int getCountryId() {
            return legionDatas.get(this.legionIndex).getCountryId();
        }
        /*public String getCountryStr() {
            return legionDatas.get(this.legionIndex).getCountryStr();
        }*/


        public boolean isCapital() {
            return getLegionData().capitalId==regionId;
        }

        //是否有驻兵
        public boolean ifHaveGarrison(){
            ArmyData a=getArmyDataByHexagon(regionId);
            if(a==null||a.getArmyHpNow()==0){
                return false;
            }
            return true;
        }


        public int getAllRate() {
            return Fb2Smap.this.getAllRate(this,getLegionData());
        }

        public boolean canRecruitAir() {
            if(airIndex1==-1||airIndex2==-1||airIndex3==-1||airIndex4==-1){
                return true;
            }
            return false;
        }
        public boolean canRecruitNul() {
            if(nulIndex1==-1||nulIndex2==-1||nulIndex3==-1||nulIndex4==-1){
                return true;
            }
            return false;
        }



        //获得准备好的且在范围内的air  airFeature  -1
        //1 弹头携带
        //3 军队运输
        //28 空战
        //29 轰炸
        //30 侦查
        public AirData getReadyAir(int airFeature,int targetHexagon){
            AirData airData=getAirData(airIndex1);//ifInRange(tArmy.getHexagonIndex(), army.getHexagonIndex(), tArmy.getMinRange(), tArmy.getMaxRange(), tArmy.getIfOnlySeaForTarget());
            if(airData!=null&& airData.ifOkByAirPolicy(targetHexagon)&&(airData.ifHaveAirFeature(airFeature)||airFeature==-1)&&airData.getAirRound()==0&&airData.getAirGoodsNow()>0&&ifInRange(airData.getHexagon(),targetHexagon,airData.getMinRange(),airData.getMaxRange(),false)){
                return airData;
            }airData=getAirData(airIndex2);
            if(airData!=null&& airData.ifOkByAirPolicy(targetHexagon)&&(airData.ifHaveAirFeature(airFeature)||airFeature==-1)&&airData.getAirRound()==0&&airData.getAirGoodsNow()>0&&ifInRange(airData.getHexagon(),targetHexagon,airData.getMinRange(),airData.getMaxRange(),false)){
                return airData;
            }airData=getAirData(airIndex3);
            if(airData!=null&& airData.ifOkByAirPolicy(targetHexagon)&&(airData.ifHaveAirFeature(airFeature)||airFeature==-1)&&airData.getAirRound()==0&&airData.getAirGoodsNow()>0&&ifInRange(airData.getHexagon(),targetHexagon,airData.getMinRange(),airData.getMaxRange(),false)){
                return airData;
            }airData=getAirData(airIndex4);
            if(airData!=null&& airData.ifOkByAirPolicy(targetHexagon)&&(airData.ifHaveAirFeature(airFeature)||airFeature==-1)&&airData.getAirRound()==0&&airData.getAirGoodsNow()>0&&ifInRange(airData.getHexagon(),targetHexagon,airData.getMinRange(),airData.getMaxRange(),false)){
                return airData;
            }
            return null;
        }

        public AirData getBorderReadyAir(int airFeature,int targetHexagon) {
            AirData airData= getReadyAir(airFeature,targetHexagon);
            if(airData==null){
                ConnectData c=getConnectData();
                if(c==null){
                    return null;
                }
                //    int[] c=getConnectData(regionId);
                //IntArray ia=c.getIntArrayTIA2(0,game.tempUtil.getTempIntArray());
                BuildData b=null;int r;
                for(int i=1,iMax=c.getRegionConnectCount();i<=iMax;i++){
                    //r=c[i];
                    r=c.getConnectValue(i,0);
                    b=getBuildDataByRegion(r);
                    if(b!=null&&b.getLegionIndex()==legionIndex){
                        airData=b.getReadyAir(airFeature,targetHexagon);
                        if(airData!=null){
                            //game.tempUtil.disposeTempIntArray(ia);
                            return  airData;
                        }
                    }
                }
                // game.tempUtil.disposeTempIntArray(ia);
            }
            return null;
        }


        //护航机  1503 获得该区域与邻近区域的护航机
        public AirData getEscortAir(int targetHexagon) {
            return getBorderReadyAir(28,targetHexagon);
        }

        //获得拦截机
        public AirData getInterceptorAir() {
            AirData airData= getBorderReadyAir(28,regionId);
            if(airData==null){
                return getReadyAir(28,regionId);
            }
            return airData;
        }

        public boolean isPlayer() {
            return legionIndex==masterData.playerLegionIndex;
        }


        public boolean isPlayerAlly() {
            return ifAllyPlayerByLi(legionIndex);
        }

        @Override
        public int getMaxRange() {
            return 0;
        }

        @Override
        public int getUnitMorale() {
            return getCityStability();
        }

        @Override
        public boolean inCity() {
            return false;
        }

        @Override
        public int getDistance(int hexagon) {
            return getDistanceForMap(getRegionId(),hexagon);
        }

        @Override
        public int getIfMove() {
            return 1;
        }

        @Override
        public int getTerrainId() {
            Fb2Map.MapHexagon h = getHexagonData();
            if (h != null) {
                return h.getActualTerrain();
            }
            return 0;
        }

        @Override
        public void setUnitHpNow(int i) {
            setCityHpNow(i);
        }

        @Override
        public void addUnitRound(int i) {
            addBuildRound(i);
        }

        @Override
        public int getAroundUnitCount(int i) {
            return getAroundUnitCountIA1(getLegionIndex(),getHexagonIndex(),i);
        }

        //1004 设计build的等级为0~bontyValue 的随机值 value的值:是否优化所有城市,贸易,文化,交通,研究所,原料,电力,城市,工业,医院,城防,飞机厂,防空基地,秘密武器,军营


        public void setCardLvByBuffValue(String value) {
            String[] ts=value.split(",");

            boolean ifAllCity=Boolean.parseBoolean(ts[0]);
            if(!ifAllCity&&!isCapital()&&getBuildName()==0   ){
                //如果电力过载,则随机削减一些建筑等级使电力正常
                resetEnergyCost();
                if(ifEnergyOverload()){
                    //setEnergyLvToAfford();
                    randomReduceTechUntilEnergyAffordTIA3(20);
                }
                return;
            }

            int v=Integer.parseInt(ts[1]);int lv;
            int legionLevel=getLegionData().getLevel();
            if(v>0){
                lv=ComUtil.getRandomForXIsMinValue(developLv/3+legionLevel,v);
                if(tradeLvNow<lv){ setTradeLvNow(lv);}
            }

            //文化
            v=Integer.parseInt(ts[2]);
            if(v>0){
                lv=ComUtil.getRandomForXIsMinValue(developLv/3+legionLevel,v);
                if(cultureLvNow<lv){ setCultureLvNow(lv);}
            }

            //交通
            v=Integer.parseInt(ts[3]);
            if(v>0){
                lv=ComUtil.getRandomForXIsMinValue(developLv/3+legionLevel,v);
                if(transportLvNow<lv){ setTransportLvNow(lv);}
            }

            //研究所
            v=Integer.parseInt(ts[4]);
            if(v>0){
                lv=ComUtil.getRandomForXIsMinValue(developLv/3+legionLevel,v);
                if(techLvNow<lv){ setTechLvNow(lv);}
            }

            //原料
            v=Integer.parseInt(ts[5]);
            if(v>0){
                lv=ComUtil.getRandomForXIsMinValue(developLv/3+legionLevel,v);
                if(foodLvNow <lv){ setFoodLvNow(lv);}
            }


            //城市
            v=Integer.parseInt(ts[7]);
            if(v>0){
                lv=ComUtil.getRandomForXIsMinValue(ComUtil.limitValue(v-4,0,v)+developLv/3+legionLevel,v);
                if(cityLvNow<lv){ setCityLvNow(lv);}
            }

            //工业
            v=Integer.parseInt(ts[8]);
            if(v>0){
                lv=ComUtil.getRandomForXIsMinValue(developLv/3+legionLevel,v);
                if(industryLvNow<lv){ setIndustryLvNow(lv);}
            }

            //医院
            v=Integer.parseInt(ts[9]);
            if(v>0){
                lv=ComUtil.getRandomForXIsMinValue(developLv/3+legionLevel,v);
                if(supplyLvNow<lv){ setSupplyLvNow(lv);}
            }

            //城防
            v=Integer.parseInt(ts[10]);
            if(v>0){
                lv=ComUtil.getRandomForXIsMinValue(developLv/3+legionLevel,v);
                if(defenceLvNow<lv){ setDefenceLvNow(lv);}
            }

            //飞机厂
            v=Integer.parseInt(ts[11]);
            if(v>0){
                lv=ComUtil.getRandomForXIsMinValue(developLv/3+legionLevel,v);
                if(airLvNow<lv){ setAirLvNow(lv);}
            }

            //防空基地
            v=Integer.parseInt(ts[12]);
            if(v>0){
                lv=ComUtil.getRandomForXIsMinValue(developLv/3+legionLevel,v);
                if(missileLvNow<lv){ setMissileLvNow(lv);}
            }

            //秘密武器
            v=Integer.parseInt(ts[13]);
            if(v>0){
                lv=ComUtil.getRandomForXIsMinValue(developLv/3+legionLevel,v);
                if(nuclearLvNow<lv){ setNuclearLvNow(lv);}
            }

            //军营
            v=Integer.parseInt(ts[14]);
            if(v>0){
                lv=ComUtil.getRandomForXIsMinValue(developLv/3+legionLevel,v);
                if(armyLvNow<lv){ setArmyLvNow(lv);}
            }




            v=Integer.parseInt(ts[6]);
            if(v>0){
                lv=ComUtil.getRandom(ComUtil.limitValue(v-2,0,v)+developLv/3+legionLevel,v);
                if(energyLvNow<lv){ setEnergyLvNow(lv);}
            }

            //如果电力过载,则随机削减一些建筑等级使电力正常
            resetEnergyCost();
            if(ifEnergyOverload()){
                //setEnergyLvToAfford();
                randomReduceTechUntilEnergyAffordTIA3(20);
            }


        }

        //随意削减等级直到电力可以供应
        //
        private void randomReduceTechUntilEnergyAffordTIA3(int limitCount) {
            if(getAge()>0){
                int i=0;int excludeCardId=2006, cardId;
                IntArray tempIntArray3=game.tempUtil.getTempIntArray();
                getBuildCardIdByLvNotZero(tempIntArray3,excludeCardId);
                while (ifEnergyOverload()){
                    i++;
                    // cardId=ComUtil.getRandOne(ResConfig.Game.aiRandomReduceBuildCardId);
                    cardId=tempIntArray3.random();
                    reduceBuildCardLv(cardId);
                    if(getBuildLvByBuildCardId(cardId)==0){
                        tempIntArray3.removeValue(cardId);
                    }
                    if(i>limitCount&&limitCount>0){
                        setEnergyLvToAfford();
                    }
                }
                game.tempUtil.disposeTempIntArray(tempIntArray3);
            }
        }

        private void reduceBuildCardLv(int cardId) {
            switch (cardId){
                case 2001:reduceTradeLvNow();
                    break;
                //文化
                case 2002:reduceCultureLvNow();
                    break;
                //交通
                case 2003:reduceTransportLvNow();
                    break;
                //学校
                case 2004:reduceTechLvNow();
                    break;
                //原料
                case 2005:reduceMateriLvNow();
                    break;
                //能源
                case 2006:reduceEnergyLvNow();
                    break;
                //城市
                case 2007:reduceCityLvNow();
                    break;
                //工业
                case 2008:reduceIndustLvNow();
                    break;
                //补给
                case 2009:reduceSupplyLvNow();
                    break;
                //城防
                case 2010:reduceDefenceLvNow();
                    break;
                //飞机厂
                case 2011:reduceAirLvNow();
                    break;
                //防空/飞弹
                case 2012:reduceMissileLvNow();
                    break;
                //秘密武器
                case 2013:reduceNuclearLvNow();
                    break;
                //军营
                case 2014:reduceArmyLvNow();
                    break;
            }
        }

        private IntArray getBuildCardIdByLvNotZero(IntArray rs,int excludeCardId){
            if(rs==null){
                rs=new IntArray();
            }else {
                rs.clear();
            }
            ;
            for(int cardId=2001,cardIdMax=2014;cardId<=cardIdMax;cardId++ ){
                if(excludeCardId!=cardId&& getBuildLvByBuildCardId(cardId)>0&&!rs.contains(cardId)){rs.add(cardId);}
            }
            return rs;
        }

        private int getBuildLvByBuildCardId(int cardId){
            switch (cardId){
                case 2001:
                    return this.getTradeLvNow();
                case 2002:
                    return this.getCultureLvNow();
                case 2003:
                    return this.getTransportLvNow();
                case 2004:
                    return this.getTechLvNow();
                case 2005:
                    return this.getFoodLvNow();
                case 2006:
                    return this.getEnergyLvNow();
                case 2007:
                    return this.getCityLvNow();
                case 2008:
                    return this.getIndustryLvNow();
                case 2009:
                    return this.getSupplyLvNow();
                case 2010:
                    return this.getDefenceLvNow();
                case 2011:
                    return this.getAirLvNow();
                case 2012:
                    return this.getMissileLvNow();
                case 2013:
                    return this.getNuclearLvNow();
                case 2014:
                    return this.getArmyLvNow();
                case 2015:
                    return this.getTransportLvNow();
            }
            return 0;
        }




        private void setEnergyLvToAfford() {
            resetEnergyCost();
            if(Fb2Smap.this.ifSystemEffective(7)&&varEnergyCost >getBuildEnergyAfford()){
                setEnergyLvNow(game.gameMethod.getEnergyLvToAfford(varEnergyCost));
            }
        }
        public String areaName;
        public String srName;
        public void initVirAttribute() {

            Fb2Map.MapHexagon hexagonData=getHexagonData();
            hexagonData.buildData=this;
            LegionData l=getLegionData();
            if(nulIndex1!=-1){
                NulcleData n=nulcleIDatas.get(nulIndex1);
                n.setBuildData(this);
            }
            if(nulIndex2!=-1){
                NulcleData n=nulcleIDatas.get(nulIndex2);

                n.setBuildData(this);
            }
            if(nulIndex3!=-1){
                NulcleData n=nulcleIDatas.get(nulIndex3);

                n.setBuildData(this);
            }
            if(nulIndex4!=-1){
                NulcleData n=nulcleIDatas.get(nulIndex4);

                n.setBuildData(this);
            }
           // areaName=game.gameMethod.getStrValueT(("zoneName_")+getAreaZone());
            if(buildName>0){
                areaName=game.gameMethod.getStrValueT(new StringBuilder("areaname_").append(buildName).toString());
                if(!game.resGameConfig.onlyGeneralWonder&&Fb2Smap.this.ifSystemEffective(19)){
                    XmlReader.Element xml=   game.gameConfig.getDEF_AREA().getElementById(buildName);
                    if(xml!=null){
                        ifCanBuildWonder=!xml.get("wonder","0").equals("0");
                    }else{
                        ifCanBuildWonder=false;
                    }
                }else{
                    ifCanBuildWonder=false;
                }
            }else{
                ifCanBuildWonder=false;
            }
            if(strategicRegion!=0){
                srName=game.gameMethod.getStrValueT(new StringBuilder("strategicRegion_").append(strategicRegion).toString());
            }
            inlandSeaLi=getInlandSeaLi(getRegionId());



            /*if(getEnemyCount()>0){
                if(isPlayer()||ifHavePalyerUnit()){
                    varBuildStatus = 3;
                }else if(ifAllyPlayerByLi(legionIndex)){
                    varBuildStatus = 2;
                }else {
                    varBuildStatus = 1;
                }
            }else{
                varBuildStatus = 0;
            }*/
        }
        public NulcleData getNulData(int nulIndex){
            if(nulcleIDatas.containsKey(nulIndex)){
                return nulcleIDatas.get(nulIndex);
            }
            return null;
        }
        public NulcleData getNulData() {
            if(nulIndex1!=-1){
                return nulcleIDatas.get(nulIndex1);
            }else if(nulIndex2!=-1){
                return nulcleIDatas.get(nulIndex2);
            }else if(nulIndex3!=-1){
                return nulcleIDatas.get(nulIndex3);
            }else if(nulIndex4!=-1){
                return nulcleIDatas.get(nulIndex4);
            }
            return null;
        }

        public AirData getCanLoadNulAir(NulcleData n) {
            if(airIndex1!=-1){
                AirData air=getAirData(airIndex1);
                if(air.getNucleIndex()==-1&&air.ifAirCanLoadNul(n.getNuclearId())){
                    return air;
                }
            }
            if(airIndex2!=-1){
                AirData air=getAirData(airIndex2);
                if(air.getNucleIndex()==-1&&air.ifAirCanLoadNul(n.getNuclearId())){
                    return air;
                }
            }
            if(airIndex3!=-1){
                AirData air=getAirData(airIndex3);
                if(air.getNucleIndex()==-1&&air.ifAirCanLoadNul(n.getNuclearId())){
                    return air;
                }
            }
            if(airIndex4!=-1){
                AirData air=getAirData(airIndex4);
                if(air.getNucleIndex()==-1&&air.ifAirCanLoadNul(n.getNuclearId())){
                    return air;
                }
            }
            return null;
        }

        //自动招募军队
        public boolean ifAutoRecruitArmy() {
            if(getBuildPolicy()==3&&(getBuildStatus()!=0&&ifBorderRegionWar())){
                return true;
            }
            return false;
        }


        public boolean ifBorderRegionWar() {
            //   int[] regions=getConnectData(regionId);
            ConnectData connectData=getConnectData();
            if(connectData==null){
                return false;
            }
            for(int i=1,iMax=connectData.getRegionConnectCount();i<=iMax;i++){
                // BuildData b=buildRDatas.get(regions[i]);
                BuildData b=getBuildDataByRegion(connectData.getConnectValue(i,0));
                if(b!=null&&(b.getBuildStatus()!=0||!ifAllyByLi(legionIndex,b.getLegionIndex()))){
                    return true;
                }
            }
            return false;
        }

        public boolean ifAutoRecruitNuclear() {
            if(getBuildPolicy()==5&&getAge()>=1){
                return true;
            }
            return false;
        }

        public boolean ifAutoRecruitMissile() {
            if(getBuildPolicy()==6&&getAge()>=2){
                return true;
            }
            return false;
        }


        /*public int getBuildReplyGoods() {
            return (cityLvNow+getLegionData().getLegionFeatureEffect(21))/2;
        }*/

        public int getBuildReplyMorale() {
            return cultureLvNow*2+getLegionData().getLegionFeatureEffect(20);
        }



        public ArmyData getRegionUnit() {
            return getArmyDataByHexagon(regionId);
        }

        public boolean haveTactics(int cardId) {
            int limitLv=game.gameConfig.getDEF_CARD().getInt(cardId,"min");
            switch (cardId){
                case 2001:  if(tradeLvNow>limitLv){return true;} break;
                case 2002:  if(cultureLvNow>limitLv){return true;} break;
                case 2003:  if(transportLvNow>limitLv){return true;} break;
                case 2004:  if(techLvNow>limitLv){return true;} break;
                case 2005:  if(foodLvNow >limitLv){return true;} break;
                case 2006:  if(energyLvNow>limitLv){return true;} break;
                case 2007:  if(cityLvNow>limitLv){return true;} break;
                case 2008:  if(industryLvNow>limitLv){return true;} break;
                case 2009:  if(supplyLvNow>limitLv){return true;} break;
                case 2010:  if(defenceLvNow>limitLv){return true;} break;
                case 2011:  if(airLvNow>limitLv){return true;} break;
                case 2012:  if(missileLvNow>limitLv){return true;} break;
                case 2013:  if(nuclearLvNow>limitLv){return true;} break;
                case 2014:  if(armyLvNow>limitLv){return true;} break;
            }

            return false;
        }

        public void updAllAirMorale(int v) {
            for(int i=0;i<4;i++){
                AirData air=getBuildAirData(i);
                if(air!=null){
                    air.setAirMoraleChange(v, game.resGameConfig.resetUnitMoraleMax);
                }
            }
        }

        //城市,飞机按比例增加血
        public int repairByRate(int v) {
            for(int i=0;i<4;i++){
                AirData air=getBuildAirData(i);
                if(air!=null){
                    air.addAirHpByRate(v);
                }
            }
            return    addCityHpByRate(v);
        }

        private int addCityHpByRate(int v) {
            int hp=cityHpMax*v/100+1;
            setCityHpNow(cityHpNow+hp);
            return hp;
        }

        private AirData getBuildAirData(int i) {
            switch (i){
                case 0:if(airIndex1!=-1){return getAirData(airIndex1);}else{return null;}
                case 1:if(airIndex2!=-1){return getAirData(airIndex2);}else{return null;}
                case 2:if(airIndex3!=-1){return getAirData(airIndex3);}else{return null;}
                case 3:if(airIndex4!=-1){return getAirData(airIndex4);}else{return null;}
            }
            return null;
        }
        private NulcleData getBuildNulData(int i) {
            switch (i){
                case 0:if(nulIndex1!=-1){return getNulData(nulIndex1);}else{return null;}
                case 1:if(nulIndex2!=-1){return getNulData(nulIndex2);}else{return null;}
                case 2:if(nulIndex3!=-1){return getNulData(nulIndex3);}else{return null;}
                case 3:if(nulIndex4!=-1){return getNulData(nulIndex4);}else{return null;}
            }
            return null;
        }
        //获得战略等级
        public int getTacticsLv(int cardId) {
            int lv=0;
            ArmyData a=getArmyDataByHexagon(regionId);
            if(a!=null){
                lv=a.getGeneralData().political;
            }
            ////cardId 1001开始   所以要+1000
            return lv+ getBuildLvByBuildCardId(cardId+1000);
        }


        //获得未满级的cardid.用以升级战术卡
        public int getBuildCardIdForTactical() {
            IntArray tempIntArray3=game.tempUtil.getTempIntArray();
            if(tradeLvNow<5){tempIntArray3.add(2001);}
            if(cultureLvNow<5){tempIntArray3.add(2002);}
            if(transportLvNow<5){tempIntArray3.add(2003);}
            if(techLvNow<5){tempIntArray3.add(2004);}
            if(foodLvNow <5){tempIntArray3.add(2005);}
            if(energyLvNow<5&&getAge()>0){tempIntArray3.add(2006);}
            if(cityLvNow<5){tempIntArray3.add(2007);}
            if(industryLvNow<5){tempIntArray3.add(2008);}
            if(supplyLvNow<5){tempIntArray3.add(2009);}
            if(defenceLvNow<5){tempIntArray3.add(2010);}
            if(airLvNow<5&&getAge()>0){tempIntArray3.add(2011);}
            if(missileLvNow<5&&getAge()>0){tempIntArray3.add(2012);}
            if(nuclearLvNow<5&&getAge()>0){tempIntArray3.add(2013);}
            if(armyLvNow<5){tempIntArray3.add(2014);}
            if(tempIntArray3.size>0){
                int rs=tempIntArray3.random();
                game.tempUtil.disposeTempIntArray(tempIntArray3);
                return rs;
            }else{
                game.tempUtil.disposeTempIntArray(tempIntArray3);
                return -1;
            }
        }

        public Fb2Map.MapHexagon getHexagonData() {
            return hexagonDatas.get(regionId);
        }

        @Override
        public boolean isRound() {
            if (legionIndex == roundLegionIndex) {
                return true;
            }
            return false;
        }


        public void updAllAirLv(int lv){
            if(lv<=0){
                return;
            }
            AirData a;
            for(int i=0;i<4;i++){
                a=getBuildAirData(i);
                if(a!=null){
                    a.randomUpdAirAbility(lv);
                }
            }
        }

        public void resetAllAirState() {
            AirData a;
            for(int i=0;i<4;i++){
                a=getBuildAirData(i);
                if(a!=null){
                    a.setAirHpNow(a.getAirHpMax());
                    a.setAirGoodsNow(a.getAirGoodsMax());
                    a.setAirRound(0);
                    a.setAirMoraleChange(50,game.resGameConfig.resetUnitMoraleMax);
                    a.setTargetRegion(-1);
                }
            }
        }
        public void resetAllNulState() {
            NulcleData n;
            for(int i=0;i<4;i++){
                n=getBuildNulData(i);
                if(n!=null){
                    n.setNucleRound(0);
                }
            }
        }

        //掠夺资源
        public void robResource(LegionData l,int robRate) {
            int rate= getAllRate();
            //LegionData l=getLegionData();
            l.addMoney(getIncomeMoney(rate)*robRate/100);
            l.addIndustry(getIncomeIndustry(rate)*robRate/100);
            l.addTech(getIncomeTech(rate)*robRate/100);
            l.addFood(getIncomeFood(rate)*robRate/100);
            l.addMineral(getIncomeMinterial(rate)*robRate/100);
            l.addOil(getIncomeOil(rate)*robRate/100);
        }

        //立刻恢复这片区域上所有己方单位的v%生命值和v士气
        public void restoreArmyState(int value) {

            IntArray armyH=regionHexagonMap.get(getRegionId());
            if(armyH!=null){
                ArmyData a;
                for(int i=0;i<armyH.size;i++){
                    a=getArmyDataByHexagon(armyH.get(i));
                    if(a!=null&&a.getLegionIndex()==getLegionIndex()){
                        a.setArmyMoraleChange(value);
                        a.addArmyHpByRate(value);
                    }
                }
            }
            AirData ai=null;
            if(airIndex1 !=-1){
                ai=airIDatas.get(airIndex1);
                ai.setAirMoraleChange(value);
                ai.addAirHpByRate(value);
            }
            if(airIndex2 !=-1){
                ai=airIDatas.get(airIndex2);
                ai.setAirMoraleChange(value);
                ai.addAirHpByRate(value);
            }
            if(airIndex3 !=-1){
                ai=airIDatas.get(airIndex3);
                ai.setAirMoraleChange(value);
                ai.addAirHpByRate(value);
            }
            if(airIndex4 !=-1){
                ai=airIDatas.get(airIndex4);
                ai.setAirMoraleChange(value);
                ai.addAirHpByRate(value);
            }
        }

        //type 0全部 1民用 2军用
        private void randomReduceTech(int reduceCount,int type) {
            int techId=0;
            LegionData l=getLegionData();
            for(int i=0;i<reduceCount;i++){
                if(type==0){
                    if(ComUtil.ifGet(50)){
                        techId=ComUtil.getRandom(2001,2014);
                    }else {
                        techId=ComUtil.getRandom(3001,3030);
                    }
                }else if(type==1){
                    techId=ComUtil.getRandom(2001,2014);
                }else if(type==2){
                    techId=ComUtil.getRandom(3001,3030);
                }
                GameMethod.reduceTechLv(l,this,techId);
            }
        }

        public boolean isWar() {
            if(haveEnemyInRegion(getRegionId())||(cityHpNow<cityHpMax&&cityHpMax>0)){
                return true;
            }
            /*if(cityHpMax==cityHpNow&&cityHpMax>0){
                return false;
            }*/
            return false;
        }
        //获得设施 坐标
        public int getFacilityHexagon(int facilityId) {
            IntArray rs=regionHexagonMap.get(regionId);
            if(rs!=null){
                FacilityData f;
                for(int i=0;i<rs.size;i++){
                    f=getFacilityDataByHexagon(rs.get(i));
                    if(f!=null&&f.getFacilityId()==facilityId){
                        return rs.get(i);
                    }
                }
            }else{
                Gdx.app.error("getFacilityHexagon",regionId+":"+facilityId);
            }
            return -1;
        }

        public int getHexagonToRecruitCardTIA1(int cardType, int cardId) {
            int rs=-1;
            if(cardType<0&&cardId>0){
                XmlReader.Element xml=game.gameConfig.getDEF_CARD().getElementById(cardId);
                cardType=xml.getInt("type",0);
            }
            if(cardType==15){
                if(cardId==6001){
                    IntArray tempIntArray =game.tempUtil.getTempIntArray();
                    tempIntArray=   getHexagonToBuild(regionId, cardType,cardId,  tempIntArray);
                    if(tempIntArray.size>0){
                        rs=tempIntArray.random();
                    }
                    game.tempUtil.disposeTempIntArray(tempIntArray);
                    return rs;
                }
            }


            if (cardType < 1 || cardType > 8) {//非兵种单位的
                return regionId;
            }

            if(isEditMode(true)&&masterData.getPlayerMode()!=2){
                ArmyData a=getArmyDataByHexagon(regionId);
                if(a==null&&cardType!=6){
                    if(cardType==4||cardType==8){
                        if(ifSea()) {
                            return regionId;
                        }
                    }else{
                        return regionId;
                    }
                }
                if(cardType==5||cardType==7){
                    return regionId;
                }else {
                    IntArray hexagonArray = regionHexagonMap.get(regionId);
                    a=null;
                    if(hexagonArray!=null){
                        IntArray tempIntArray1 =game.tempUtil.getTempIntArray();
                        for (int i = 0; i <  hexagonArray.size; i++) {
                            Fb2Map.MapHexagon h=hexagonDatas.get(hexagonArray.get(i));
                            if(cardType==4||cardType==8){//如果要造海军
                                if (h.getBlockType() == 1 ) {
                                    a=getArmyDataByHexagon(h.getHexagonIndex() );
                                    if(a==null){
                                        tempIntArray1.add(h.getHexagonIndex() );
                                    }
                                }
                            }else{//如果要造非海军
                                if(cardType==6&&h.getHexagonIndex() == regionId){
                                    continue;
                                }
                                a=getArmyDataByHexagon(h.getHexagonIndex() );
                                if(a==null){
                                    tempIntArray1.add(h.getHexagonIndex() );
                                }
                            }
                        }
                        if(tempIntArray1.size==0){
                            game.tempUtil.disposeTempIntArray(tempIntArray1);
                            return -1;
                        }
                        rs=tempIntArray1.random();
                        game.tempUtil.disposeTempIntArray(tempIntArray1);
                        return rs;
                    }
                }
            }else if(masterData.getPlayerMode()==2){//军团模式判断能否建造
                IntArray tempIntArray1 =game.tempUtil.getTempIntArray();
                IntArray hexagonArray = regionHexagonMap.get(regionId);
                ArmyData a=null;
                if(hexagonArray!=null){
                    for (int i = 0; i <  hexagonArray.size; i++) {
                        Fb2Map.MapHexagon h=hexagonDatas.get(hexagonArray.get(i));
                        if(cardType==4||cardType==8){//如果要造海军
                            if (h.getBlockType() == 1 ) {
                                a=getArmyDataByHexagon(h.getHexagonIndex() );
                                if(a==null){
                                    tempIntArray1.add(h.getHexagonIndex() );
                                }else  if(a.canMerge(cardType,cardId)){
                                    tempIntArray1.add(h.getHexagonIndex() );
                                }
                            }
                        }else{//如果要造非海军
                            if(cardType==6&&h.getHexagonIndex() == regionId){
                                continue;
                            }
                            if (h.getBlockType() != 1 ) {
                                a=getArmyDataByHexagon(h.getHexagonIndex() );
                                if(a==null){
                                    tempIntArray1.add(h.getHexagonIndex() );
                                }else  if(a.canMerge(cardType,cardId)){
                                    tempIntArray1.add(h.getHexagonIndex() );
                                }
                            }
                        }
                    }
                }else{
                    Gdx.app.error("getHexagonToRecruitCardTIA1",regionId+":"+cardId);
                }
                if(tempIntArray1.size>0){
                    if(tempIntArray1.contains(regionId)){
                        return regionId;
                    }
                    rs=tempIntArray1.random();
                    game.tempUtil.disposeTempIntArray(tempIntArray1);
                    return rs;
                }else {
                    game.tempUtil.disposeTempIntArray(tempIntArray1);
                    return -1;
                }
            }
            if (cardType == 5) {//空军
                if (this.getAirIndex1() == -1
                        || this.getAirIndex2() == -1
                        || this.getAirIndex3() == -1
                        || this.getAirIndex4() == -1
                ) {
                    return regionId;
                }


            } else if (cardType == 7) {//超武
                if (this.getNulIndex1() == -1
                        || this.getNulIndex2() == -1
                        || this.getNulIndex3() == -1
                        || this.getNulIndex4() == -1
                ) {
                    return regionId;
                }


            } else if (cardType == 4 || cardType == 8) {//实体单位 海军
                return getFacilityHexagon(1);
            } else {//实体单位  陆军
                if (cardType == 6) {//要塞
                    IntArray tempIntArray1 =game.tempUtil.getTempIntArray();
                    IntArray hexagonArray = regionHexagonMap.get(regionId);
                    ArmyData a=null;
                    if(hexagonArray!=null){
                        for (int i = 0; i <  hexagonArray.size; i++) {
                            Fb2Map.MapHexagon h=hexagonDatas.get(hexagonArray.get(i));
                            if (h.getBlockType() != 1 ) {
                                if (h.getHexagonIndex() == regionId) {
                                    continue;
                                }
                                if(isPlayer()){
                                    if(h.getOtherTile()==1){
                                        continue;
                                    }
                                }else{
                                    if(h.getOtherTile()==1||h.getPresetRailway()==1){
                                        continue;
                                    }
                                }
                                a=getArmyDataByHexagon(h.getHexagonIndex() );
                                if(a==null){
                                    tempIntArray1.add(h.getHexagonIndex() );
                                }else  if(a.canMerge(cardType,cardId)){
                                    tempIntArray1.add(h.getHexagonIndex() );
                                }
                            }
                        }
                    }else{
                        Gdx.app.error("getHexagonToRecruitCardTIA1",regionId+":"+cardId);
                    }
                    if(tempIntArray1.size>0){
                        rs=tempIntArray1.random();
                        game.tempUtil.disposeTempIntArray(tempIntArray1);
                        return rs;
                    }else {
                        game.tempUtil.disposeTempIntArray(tempIntArray1);
                        return -1;
                    }
                } else {//其他陆军
                    if (hexagonDatas.get(regionId).getBlockType() != 1) {
                        //!ifHArmyDatasContainsKey(regionId)
                          ArmyData a=getArmyDataByHexagon(regionId);
                           if(a==null||(!a.ifHaveFeature(33)&&!game.gameMethod.ifHaveFeature(getLegionData(),cardId,33)
                          &&a.canMerge(cardType,cardId))){
                              return regionId;
                          }
                        return -1;
                    } else {
                        return -1;
                    }
                }
            }
            return -1;
        }







        //建筑类型 0城市 1海港 2海洋 3沿海城市
        public void resetBuildType() {
            Fb2Map.MapHexagon h=getHexagonData();/*
            if(h.getRegionId()==7959){
                int s=0;
            }*/
            if (h.getBlockType() != 1) {
                if (ifCoastCity(getRegionId())) {
                    setBuildType(3);
                } else if(canBuildNavy()){
                    if(!ifSea()){
                        setBuildType(3);
                    }else{
                        setBuildType(1);
                    }
                }else {
                    setBuildType(0);
                }
            } else {
                setBuildType(2);
            }
        }

        public void updBuildData(int extralLv) {
            LegionData l=getLegionData();
            setIndustryLvNow(ComUtil.getRandom(0+extralLv,l.getIndustry()));
            setFoodLvNow(ComUtil.getRandom(0+extralLv,l.getFood()));
            setTechLvNow(ComUtil.getRandom(0+extralLv,l.getTechLvMax()));
            setEnergyLvNow(ComUtil.getRandom(0+extralLv,l.getEnergyLvMax()));
            setTransportLvNow(ComUtil.getRandom(0+extralLv,l.getTransportLvMax()));
            setArmyLvNow(ComUtil.getRandom(0+extralLv,getCityLvNow()));
            setAirLvNow(ComUtil.getRandom(0+extralLv,l.getAirLvMax()));
            setSupplyLvNow(ComUtil.getRandom(0+extralLv,l.getSupplyLvMax()));
            setDefenceLvNow(ComUtil.getRandom(0+extralLv,l.getDefenceLvMax()));
            setMissileLvNow(ComUtil.getRandom(0+extralLv,l.getMissileLvMax()));
            setNuclearLvNow(ComUtil.getRandom(0+extralLv,l.getNuclearLvMax()));
            setCultureLvNow(ComUtil.getRandom(0+extralLv,l.getCultureLvMax()));
            setTradeLvNow(ComUtil.getRandom(0+extralLv,getCityLvNow()));
            setBuildPolicy(0);
            setBuildRound(0);
            resetBuildType();
            if(extralLv>0){
                setEnergyLvToAfford();
            }
            updActor();
        }

        public void updActor() {
            if(buildActor!=null&&(roundState==0||(roundState==4||isPlayer()))){
                buildActor.update();
            }
        }

        //判断城市的稳定度是否过低
        public boolean ifCityStabilityTooLow() {
            if(Fb2Smap.this.ifSystemEffective(16)&&isPlayer()){
                LegionData l=getLegionData();
                return getCityStability() < game.resGameConfig.cityStabilityTriggerValue;
                /*if(getPlayerAmbition()==100){
                    return getCityStability() < game.resGameConfig.cityStabilityTriggerValue;
                }else   if(getPlayerAmbition()>100){
                    if(getCityStability()<(20+getAge()*10)||(l.getStability()<getPlayerAmbitionValue()/2&&getCityStability()>l.getStability())){
                        return true;
                    }
                }else if(getPlayerAmbition()<100){
                    if(getCityStability()<(30+getAge()*5)){
                        return true;
                    }
                }*/
            }else if(getCityStability() < game.resGameConfig.cityStabilityTriggerValue){
                return true;
            }
            return false;

        }

        public boolean isPlayerAroundRegion() {
            ConnectData connectData=getConnectData();
            if(connectData==null){
                return false;
            }
            for(int i=1,iMax=connectData.getRegionConnectCount();i<=iMax;i++){
                // BuildData b=buildRDatas.get(regions[i]);
                BuildData b=getBuildDataByRegion(connectData.getConnectValue(i,0));
                if(b!=null&&ifAllyPlayerByLi(b.getLegionIndex())){
                    return true;
                }
            }
            return false;
        }

        public boolean ifHavePalyerUnit(){
            IntArray hexagonArray = regionHexagonMap.get(regionId);
            if(hexagonArray!=null){
                for (int i = 0; i <  hexagonArray.size; i++) {
                    ArmyData  a=getArmyDataByHexagon(hexagonArray.get(i));
                    if(a!=null&&a.isPlayer()){
                        return true;
                    }
                }
            }else{
                Gdx.app.error("ifHavePalyerUnit",regionId+"");
            }
            return false;
        }

        public boolean getPalyerUnitType(){
            IntArray hexagonArray = regionHexagonMap.get(regionId);
            boolean ifArmy=false;

            if(hexagonArray!=null){
                for (int i = 0; i <  hexagonArray.size; i++) {
                    ArmyData  a=getArmyDataByHexagon(hexagonArray.get(i));
                    if(a!=null&&a.isPlayer()){
                        return true;
                    }
                }
            }else{
                Gdx.app.error("ifHavePalyerUnit",regionId+"");
            }
            return false;
        }

        public boolean ifHaveEnemyUnit(){
            IntArray hexagonArray = regionHexagonMap.get(regionId);
            if(hexagonArray!=null){
                for (int i = 0; i <  hexagonArray.size; i++) {
                    ArmyData  a=getArmyDataByHexagon(hexagonArray.get(i));
                    if(a!=null&&getForeignDegree(legionIndex,a.legionIndex)==-1){
                        return true;
                    }
                }
            }else{
                Gdx.app.error("ifHaveEnemyUnit",regionId+"");
            }
            return false;
        }

        public boolean ifHaveLegionAllyUnit(boolean ifHaveFort){
            IntArray hexagonArray = regionHexagonMap.get(regionId);
            if(hexagonArray!=null){
                for (int i = 0; i <  hexagonArray.size; i++) {
                    ArmyData  a=getArmyDataByHexagon(hexagonArray.get(i));
                    if(a!=null) {
                        if(!ifHaveFort&&a.getArmyType()==6){
                            continue;
                        }
                        if (getForeignDegree(legionIndex, a.legionIndex) == 1) {
                            return true;
                        }
                    }
                }
            }else{
                Gdx.app.error("ifHaveEnemyUnit",regionId+"");
            }
            return false;
        }

        public boolean ifHaveAllyUnit(int li,boolean ifHaveFort){
            IntArray hexagonArray = regionHexagonMap.get(regionId);
            if(hexagonArray!=null){
                for (int i = 0; i <  hexagonArray.size; i++) {
                    ArmyData  a=getArmyDataByHexagon(hexagonArray.get(i));
                    if(a!=null){
                        if(!ifHaveFort&&a.getArmyType()==6){
                            continue;
                        }
                        if(getForeignDegree(li,a.legionIndex)==1){
                            return true;
                        }
                    }

                }
            }else{
                Gdx.app.error("ifHaveAllyUnit",regionId+":"+li);
            }
            return false;
        }
        public boolean ifHaveCanAtkUnit(int li){
            IntArray hexagonArray = regionHexagonMap.get(regionId);
            if(hexagonArray!=null){
                for (int i = 0; i <  hexagonArray.size; i++) {
                    ArmyData  a=getArmyDataByHexagon(hexagonArray.get(i));
                    if(a!=null&&ifCanAtk(li,a.getLegionIndex())){
                        return true;
                    }
                }
            }else{
                Gdx.app.error("ifHaveCanAtkUnit",regionId+":"+li);
            }
            return false;
        }

        public boolean ifHaveLegionUnit(int li){
            IntArray hexagonArray = regionHexagonMap.get(regionId);
            if(hexagonArray!=null){
                for (int i = 0; i <  hexagonArray.size; i++) {
                    ArmyData  a=getArmyDataByHexagon(hexagonArray.get(i));
                    if(a!=null&&a.getLegionIndex()==li){
                        return true;
                    }
                }
            }else{
                Gdx.app.error("ifHaveLegionUnit",regionId+":"+li);
            }
            return false;
        }

        public boolean ifHaveEnemyHistoryGeneralUnit(int li){
            IntArray hexagonArray = regionHexagonMap.get(regionId);
            if(hexagonArray!=null){
                for (int i = 0; i <  hexagonArray.size; i++) {
                    ArmyData  a=getArmyDataByHexagon(hexagonArray.get(i));
                    if(a!=null&&a.getGeneralIndex()!=0&&getForeignDegree(li,a.getLegionIndex())==-1){
                        GeneralData g=a.getGeneralData();
                        if(g.getState()==0){
                            return true;
                        }
                    }
                }
            }else{
                Gdx.app.error("ifHaveEnemyUnit",regionId+":"+li);
            }
            return false;
        }
        public boolean ifHaveEnemyUnit(int li){
            IntArray hexagonArray = regionHexagonMap.get(regionId);
            if(hexagonArray!=null){
                for (int i = 0; i <  hexagonArray.size; i++) {
                    ArmyData  a=getArmyDataByHexagon(hexagonArray.get(i));
                    if(a!=null&&getForeignDegree(li,a.getLegionIndex())==-1){
                        return true;
                    }
                }
            }else{
                Gdx.app.error("ifHaveEnemyUnit",regionId+":"+li);
            }
            return false;
        }

        public int getEnemyCount() {
            int c=0;
            IntArray hexagonArray = regionHexagonMap.get(regionId);
            if(hexagonArray!=null){
                for (int i = 0; i <  hexagonArray.size; i++) {
                    ArmyData  a=getArmyDataByHexagon(hexagonArray.get(i));
                    if(a!=null){
                        int fg=getForeignDegree(legionIndex,a.legionIndex);
                        if(fg==-1){
                            c++;
                        }else if(fg==0&&a.isPlayer()&&getCityHpNow()<getCityHpMax()){
                            c++;
                        }

                    }
                }
            }else{
                Gdx.app.error("getEnemyCount",regionId+"");
            }
            return c;
        }
        public int getAllyUnitCount(boolean ifHaveFort) {
            int c=0;
            IntArray hexagonArray = regionHexagonMap.get(regionId);
            if(hexagonArray!=null){
                for (int i = 0; i <  hexagonArray.size; i++) {
                    ArmyData  a=getArmyDataByHexagon(hexagonArray.get(i));
                    if(a!=null){
                        if(!ifHaveFort&&a.getArmyType()==6){
                            continue;
                        }
                        if(a.getLegionIndex()==getLegionIndex()){
                            c+=1;
                        }else{
                            int fg=getForeignDegree(legionIndex,a.legionIndex);
                            if(fg==1){
                                c+=1;
                            }
                        }
                    }
                }
            }else{
                Gdx.app.error("getEnemyCount",regionId+"");
            }
            return c;
        }

        public int getAllyUnitPower(boolean ifHaveFort) {
            int c=0;
            IntArray hexagonArray = regionHexagonMap.get(regionId);
            if(hexagonArray!=null){
                for (int i = 0; i <  hexagonArray.size; i++) {
                    ArmyData  a=getArmyDataByHexagon(hexagonArray.get(i));
                    if(a!=null){
                        if(!ifHaveFort&&a.getArmyType()==6){
                            continue;
                        }
                        if(a.getLegionIndex()==getLegionIndex()){
                            c+=a.getPower();
                        }else{
                            int fg=getForeignDegree(legionIndex,a.legionIndex);
                            if(fg==1){
                                c+=a.getPower();
                            }
                        }
                    }
                }
            }else{
                Gdx.app.error("getEnemyCount",regionId+"");
            }
            return c;
        }

        public int getEnemyUnitPower(boolean ifHaveFort) {
            int c=0;
            IntArray hexagonArray = regionHexagonMap.get(regionId);
            if(hexagonArray!=null){
                for (int i = 0; i <  hexagonArray.size; i++) {
                    ArmyData  a=getArmyDataByHexagon(hexagonArray.get(i));
                    if(a!=null){
                        if(!ifHaveFort&&a.getArmyType()==6){
                            continue;
                        }
                        int fg=getForeignDegree(legionIndex,a.legionIndex);
                        if(fg==-1){
                            c+=a.getPower();
                        }else if(fg==0&&a.isPlayer()&&getCityHpNow()<getCityHpMax()){
                            c+=a.getPower();
                        }
                    }
                }
            }else{
                Gdx.app.error("getEnemyCount",regionId+"");
            }
            return c;
        }

        public boolean ifDrawWarLine() {
            if(buildType!=2&& (getBuildStatus()==3||getBuildStatus()==2)){
                return true;
            }
            return false;
        }

        public int getForgeinTypeForPlayer() {//外交类型 0无 1同盟 2互不侵犯  -1敌对
            return getRealForgeinType(legionIndex,masterData.playerLegionIndex);
        }

        //地区卡牌购买 则* 地区花费则/
        public float getRegionRate() {
            LegionData l=getLegionData();
            if(l==null||!l.ifEffective(24)){
                return game.resGameConfig.defaultRegionRate;
            }else {
                if(isCapital()){// 当招募或花费时相乘  提供收入时则相除
                    return game.resGameConfig.capitalRegionRate;
                }else if(l.isCoreAreaRegion(regionId)){
                    return game.resGameConfig.coreRegionRate;
                }else if(l.getCapitalAreaZone()== getAreaZone()){
                    if(l.isMajorAreaRegion(regionId)){
                        return game.resGameConfig.majorRegionRate;
                    }else{
                        return game.resGameConfig.sameZoneRegionRate;
                    }
                }else{
                    return game.resGameConfig.otherRegionRate;
                }
            }

        }

        public boolean ifBorderLi(int li, boolean ifHaveSea) {
            return Fb2Smap.this.ifBorderLi(regionId,li,ifHaveSea);
        }

        public void setBorderLi(boolean ifHaveSea,IntArray rs) {
            Fb2Smap.this.setBorderLi(regionId,ifHaveSea,rs);
        }

        public int getBuildEnergyAfford() {

            int addRes=0;
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==1&&effect==7){
                        addRes=value;
                    }
                }
            }

            return   addRes+(getEnergyLvNow())*game.resGameConfig.addEnergyEachEnergyLv;
        }

        public int canUpdDefenceLv() {
            LegionData l=getLegionData();

            int lv=0;
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==4&&effect==10){
                        lv=value;
                    }
                }
            }
            if(isCapital()&&lv<2){
                lv=2;
            }


            return 	ComUtil.limitValue(l.getDefenceLvMax()+l.getLegionFeatureEffect(10)+lv,0, game.resGameConfig.cardUpdMax_defenceLv);
        }

        public int canUpdAirLv() {
            LegionData l=getLegionData();
            int lv=0;
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==4&&effect==11){
                        lv=value;
                    }
                }
            }
            if(isCapital()&&lv<2){
                lv=2;
            }
            return ComUtil.limitValue(l.getAirLvMax()+l.getLegionFeatureEffect(11)+lv,0, game.resGameConfig.cardUpdMax_airportLv);
        }

        public int canUpdMissileLv() {
            LegionData l=getLegionData();
            int lv=0;
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==4&&effect==12){
                        lv=value;
                    }
                }
            }
            if(isCapital()&&lv<2){
                lv=2;
            }
            return ComUtil.limitValue(l.getMissileLvMax()+l.getLegionFeatureEffect(12)+lv,0, game.resGameConfig.cardUpdMax_missileLv);
        }

        public int canUpdNuclearLv() {
            LegionData l=getLegionData();
            int lv=0;
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==4&&effect==13){
                        lv=value;
                    }
                }
            }
            if(isCapital()&&lv<2){
                lv=2;
            }
            return ComUtil.limitValue(l.getNuclearLvMax()+l.getLegionFeatureEffect(13)+lv,0, game.resGameConfig.cardUpdMax_nuclearLv);
        }

        public int getIncome(int priceType) {
            int rate=getAllRate();
            switch (priceType){
                case 0:
                    return getIncomeMoney(rate);
                case 1:
                    return getIncomeIndustry(rate);
                case 2:
                    return getIncomeTech(rate);
                case 3:
                    return getIncomeFood(rate);
                case 4:
                    return getIncomeMinterial(rate);
                case 5:
                    return getIncomeOil(rate);
            }
            return 0;
        }

        public MainGame getMainGame() {
            return game;
        }

        public String getBuildWonderStr() {
            return  game.gameMethod.getStrValueT( new StringBuilder("buildwonder_name_").append(buildWonder).toString())+":"+
                    game.gameMethod.getStrValueT( new StringBuilder("buildwonder_info_").append(buildWonder).toString()) ;
        }

        public String getBuildPolarityStr(){
            return new StringBuilder("buildwonder_name_").append(buildWonder).toString();
        }

        public int getSuzLegionIndex() {
            return getLegionData().getSuzerainLegionData().getLegionIndex();
        }

        //type 1战术空降 2战略空降
        public IntArray getAirborneHexagons(IntArray selectedHexagonIds,int type) {

            switch (type){
                case 0:return getIdsInRange(getRegionId(),getLegionIndex(),1,getAirLvNow(),false,2, false,5,true,false,false,false,selectedHexagonIds);
                case 1:return getIdsInRange(getRegionId(),getLegionIndex(),1,getAirLvNow(),true,2, false,6,true,false,false,false,selectedHexagonIds);
            }



            return getIdsInRange(getRegionId(),getLegionIndex(),1,getAirLvNow(),false,2, false,5,true,false,false,false,selectedHexagonIds);

        }

        public int getFD() {
            return getForeignDegree(masterData.getPlayerLegionIndex(),getLegionIndex());
        }

        public boolean ifSea() {
            if(hexagonDatas.get(regionId).getBlockType()==1){
                return true;
            }
            return false;
        }

        //是否有空的位置能用来铁路运行
        public boolean haveFreeTranspotion(int legionIndex) {
            if(!ifAllyByLi(getLegionIndex(),legionIndex)){
                return false;
            }
            if(legionIndex==getLegionIndex()&&getArmyDataByHexagon(regionId)==null){
                return true;
            }
            IntArray tempIntArrray1=game.tempUtil.getTempIntArray();
            getRangePostion(regionId, 0, 1,false, tempIntArrray1);
            //int  hexagon = getRecentHexagon(-1,armyData.getHexagonIndex(),targetId, tempIntIntMap2, armyData.getIfSeaForMove());
            if(tempIntArrray1.size==0){
                return false;
            }
            tempIntArrray1.random();
            for(int i=0;i<tempIntArrray1.size;i++){
                int hexagon=tempIntArrray1.get(i);
                if(ifGridIsPass(hexagon)&&getArmyDataByHexagon(regionId)==null){
                    game.tempUtil.disposeTempIntArray(tempIntArrray1);
                    return true;
                }
            }
            return false;
        }

        public int getFreeTranspotion(int legionIndex) {
            if(!ifAllyByLi(getLegionIndex(),legionIndex)){
                return -1;
            }
            if(legionIndex==getLegionIndex()&&getArmyDataByHexagon(regionId)==null){
                return -1;
            }
            IntArray tempIntArrray1=game.tempUtil.getTempIntArray();
            getRangePostion(regionId, 0, 1,false, tempIntArrray1);
            //int  hexagon = getRecentHexagon(-1,armyData.getHexagonIndex(),targetId, tempIntIntMap2, armyData.getIfSeaForMove());
            if(tempIntArrray1.size==0){
                return -1;
            }
            tempIntArrray1.random();
            for(int i=0;i<tempIntArrray1.size;i++){
                int hexagon=tempIntArrray1.get(i);
                if(ifGridIsPass(hexagon)&&getArmyDataByHexagon(regionId)==null){
                    game.tempUtil.disposeTempIntArray(tempIntArrray1);
                    return hexagon;
                }
            }
            return -1;
        }

        public int getRandomCanRecruitUnitId() {
            IntArray ia=game.tempUtil.getTempIntArray();
            int rs=getRandomBaseArmyId();
            Array<XmlReader.Element> cardEs=  game.gameConfig.getDEF_CARD().e.getChildrenByName("card");
            LegionData l=getLegionData();
            for(int i=0;i<cardEs.size;i++){
                XmlReader.Element cardE=cardEs.get(i);
                int cardType=cardE.getInt("type");
                int reqCityLv=cardE.getInt("reqCityLv");
                int reqIndLv=cardE.getInt("reqIndLv");
                int reqTechLv=cardE.getInt("reqTechLv");
                int reqAirLv=cardE.getInt("reqAirLv");
                int age=cardE.getInt("age");
                int armyId=cardE.getInt("id",1101);
                if(cityLvNow>=reqCityLv&&industryLvNow>=reqIndLv&&techLvNow>=reqTechLv&&airLvNow>=reqAirLv&&cardType>=1&&cardType<=8&&getAge()>=age&&armyId!=1105 &&canPayCardPrice(l,this,armyId)){
                    ia.add(armyId);
                }
            }
            game.tempUtil.disposeTempIntArray(ia);
            if(ia.size>0){
                rs=ia.random();
            }
            return rs;
        }
        //ifChecRecruitCondition 是否检查招募条件,true,则必须地区可以招募且有钱招募
        public int getRandomCanRecruitMergeUnitId(ArmyData a,boolean ifChecRecruitCondition) {
            if(!a.isUnitGroup()||a.getUnitGroup()>6){
                return -1;
            }
            IntArray ia=game.tempUtil.getTempIntArray();
            int rs=-1;
            LegionData l=getLegionData();
            Array<XmlReader.Element> cardEs=  game.gameConfig.getDEF_CARD().e.getChildrenByName("card");
            for(int i=0;i<cardEs.size;i++){
                XmlReader.Element cardE=cardEs.get(i);
                if(ifChecRecruitCondition){
                    int cardType=cardE.getInt("type");
                    int reqCityLv=cardE.getInt("reqCityLv");
                    int reqIndLv=cardE.getInt("reqIndLv");
                    int reqTechLv=cardE.getInt("reqTechLv");
                    int reqAirLv=cardE.getInt("reqAirLv");
                    int age=cardE.getInt("age");
                    int armyId=cardE.getInt("id",1101);
                    if(cityLvNow>=reqCityLv&&industryLvNow>=reqIndLv&&techLvNow>=reqTechLv&&airLvNow>=reqAirLv&&cardType>=1&&cardType<=8&&getAge()>=age&&armyId!=1105
                            &&canPayCardPrice(l,this,armyId)
                            &&a.canMerge(cardType,armyId)){
                        ia.add(armyId);
                    }
                }else{
                    int cardType=cardE.getInt("type");
                    int age=cardE.getInt("age");
                    int armyId=cardE.getInt("id",1101);
                    if(cardType>=1&&cardType<=8&&getAge()>=age&&armyId!=1105
                            &&a.canMerge(cardType,armyId)){
                        ia.add(armyId);
                    }
                }

            }
            game.tempUtil.disposeTempIntArray(ia);
            if(ia.size>0){
                rs=ia.random();
            }
            return rs;
        }


        //0基础城市 1海港 2海洋(海洋不能建造) 3临海城市 4工业城市 5资源城市 6商业城市
        public boolean canBuyCard(int cardId) {
            if(getCityHpNow()==0){
               return false; 
            }
            XmlReader.Element cardE=game.gameConfig.getDEF_CARD().getElementById(cardId);
            if(cardE==null){
                return false;
            }
            int cardType=cardE.getInt("type");
            int reqCityLv=cardE.getInt("reqCityLv");
            int reqIndLv=cardE.getInt("reqIndLv");
            int reqTechLv=cardE.getInt("reqTechLv");
            int reqAirLv=cardE.getInt("reqAirLv");
            int reqAge=cardE.getInt("age");
            if((getCityHpNow()==0||getCityHpMax()==0)&&cardType>=1&&cardType<=8){
                return false;
            }
            if(cityLvNow<reqCityLv||industryLvNow<reqIndLv||techLvNow<reqTechLv||airLvNow<reqAirLv||getAge()<reqAge){
                return false;
            }
            if(buildType==2){
                return false;
            }
            if((cardType==4||cardType==8)){
                if(buildType==1||buildType==3){
                    return true;
                }else {
                    return false;
                }
            }
            if((cardType==9||cardType==10)&&!ifCanBuildCardForCityLv(cardId)){//如果是民用设施的,当基础等级>1的时候可以建造
                return false;
            }
            return true;
        }
        public boolean ifCanBuildCardForCityLv(int cardId){
            if(isCapital()){
                return true;
            }
            int cardLv=getBuildLvByBuildCardId(cardId);
            int cardSum=getBuildCardSum();
            int cityLv=getCityLvNow();
            if(buildWonder!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildWonder);
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==4&&effect+2000==cardId){
                        cityLv+=value;
                    }
                }
            }
            if(cardId!=2006&&cardId!=2007&&cardLv==0&&cardSum>cityLv){
                return false;
            }
            return true;
        }

        public int getBuildCardSum(){
            return (this.getTradeLvNow()>0?1:0)+(this.getCultureLvNow()>0?1:0)+(this.getTransportLvNow()>0?1:0)+(this.getTechLvNow()>0?1:0)+(this.getFoodLvNow()>0?1:0)+(this.getEnergyLvNow()>0?1:0)+(this.getCityLvNow()>0?1:0)
                    +(this.getIndustryLvNow()>0?1:0)+(this.getSupplyLvNow()>0?1:0)+(this.getDefenceLvNow()>0?1:0)+(this.getAirLvNow()>0?1:0)+(this.getMissileLvNow()>0?1:0)+(this.getNuclearLvNow()>0?1:0)+(this.getArmyLvNow()>0?1:0);
        }

        //cardType  0战术 1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇 9民用建筑卡 10军用建筑卡 11国策卡 12外交卡 -1全部  -2全部军队 -3全部陆军 -4全部海军 -5 全部建筑用卡牌 -6全部陆军或海军
        public boolean canBuildCardType(int cardType){
            int cardId= getBuildCardIdTIA1(getLegionData(),this,false,cardType,false);
            return cardId!=-1;
        }

        //区域兵力更新
        public float getRegionForcesRateF(LegionData l) {
           /* if(regionId==13409){
                int s=0;
            }*/
            int allyHp=0;
            int enemyHp=0;
            int allyC=0;
            IntArray hexagonArray = regionHexagonMap.get(regionId);
            for (int i = 0; i <  hexagonArray.size; i++) {
                ArmyData  a=getArmyDataByHexagon(hexagonArray.get(i));
                if(a!=null){
                    int fg=getForeignDegree(l.getLegionIndex(),a.legionIndex);
                    if(fg==1){
                        allyHp+=a.getArmyHpNow();
                        allyC++;
                    }else{
                        enemyHp+=a.getArmyHpNow();
                    }
                }
            }
            if(getLegionIndex()==l.getLegionIndex()){
                allyHp+=getCityHpNow();
            }
            if(!ifSea()){
                if(allyC==0&&buildStatus!=0){
                    return 0f;
                }
                if(enemyHp==0){
                    if(allyHp>0){
                        return 1f;
                    }else {
                        return 0f;
                    }
                }
            }

            return allyHp*1f/(allyHp+enemyHp);
        }

        //获得主要的国家
        public LegionData getMainLegionData() {
           /* if(regionId==11643){
                int s=0;
            }*/

            LegionData l=getLegionData();
            if(isCapital()){
                return l;
            }
            int allyHp=0;
            int enemyHp=0;
            boolean ifPlayer=false;
            IntArray hexagonArray = regionHexagonMap.get(regionId);
            int allyLi=0; int enemyLi=0;
            for (int i = 0; i <  hexagonArray.size; i++) {
                ArmyData  a=getArmyDataByHexagon(hexagonArray.get(i));
                if(a!=null){
                    if(a.isPlayer()){
                        ifPlayer=true;
                    }
                    int fg=getForeignDegree(getLegionIndex(),a.legionIndex);
                    if(fg==1){
                        allyHp+=a.getArmyHpNow();
                        allyLi=a.getLegionIndex();
                    }else{
                        enemyHp+=a.getArmyHpNow();
                        enemyLi=a.getLegionIndex();
                    }
                }
            }
            if(!ifSea()&&l.getInternIndex()!=0){
                if(allyHp>0||enemyHp>0||hinge!=0){
                    return l;
                }
            }
            if(ifPlayer){
                return getPlayerLegionData();
            }
            if(allyLi!=0){
                return getLegionDataByLi(allyLi);
            }
            if(enemyLi!=0){
                return getLegionDataByLi(enemyLi);
            }
            return null;
        }

        public int getPlayerLegionIndex() {
            return masterData.getPlayerLegionIndex();
        }
        public LegionData getPlayerLegion() {
            return Fb2Smap.this.getPlayerLegionData();
        }
        public boolean isAlly(int li) {
            return ifAllyByLi(legionIndex,li);
        }

        public ConnectData getConnectData() {
            return Fb2Smap.this.getConnectData(regionId);
        }


        //设置本区域的所有敌军根据区域稳定度和士气停滞1回合
        public void setEnemyUnitStagnate() {
            if(regionHexagonMap.containsKey(regionId)){
                IntArray hs=regionHexagonMap.get(regionId);
                for(int i=0;i<hs.size;i++){
                    ArmyData a=getArmyDataByHexagon(hs.get(i));
                    if(a!=null&&getForeignDegree(a.getLegionIndex(),getLegionIndex())==-1&&ComUtil.ifGet(getCityStability())&&ComUtil.ifGet(100-a.getArmyMorale())){
                        a.addArmyRound(1);
                    }
                }
            }
        }

        //
        //0是否有无兵的地块 1是否有无兵的陆地地块 2是否有无兵的海洋地块 3 是否有任意部队 4是否有海军部队 5 是否有陆地地块 6是否有海洋地块
        public boolean haveLegionActGrid(int type) {
            regionHexagonMap.get(regionId);
            if(regionHexagonMap.containsKey(regionId)){
                IntArray hs=regionHexagonMap.get(regionId);
                for(int i=0;i<hs.size;i++){
                    int hexagon=hs.get(i);
                    switch (type){
                        case 5:
                            if(!Fb2Smap.this.ifSea(hexagon)){
                                return true;
                            }
                            break;
                        case 6:
                            if(Fb2Smap.this.ifSea(hexagon)){
                                return true;
                            }
                            break;
                    }
                    ArmyData a=getArmyDataByHexagon(hexagon);
                    if(a==null){
                        switch (type){
                            case 0:
                                return true;
                            case 1:
                                if(!Fb2Smap.this.ifSea(hexagon)){
                                    return true;
                                }
                                break;
                            case 2:
                                if(Fb2Smap.this.ifSea(hexagon)){
                                    return true;
                                }
                                break;
                        }
                    }else {
                        switch (type){
                            case 3:
                                return true;
                            case 4:
                                if(a.getArmyType()==4||a.getArmyType()==8){
                                    return true;
                                }
                                break;
                        }

                    }
                }
            }
            return false;
        }

        //type
        //0 任意
        //1 防守军队 除飞机和核弹以外
        //2 海军
        //3 海军以及处于海洋的陆军
        //fd 关系
        public boolean ifHaveUnit(int type,int fd) {
            if(regionHexagonMap.containsKey(regionId)){
                IntArray hs=regionHexagonMap.get(regionId);
                // boolean ifSea=ifSea(regionId);
                for(int i=0;i<hs.size;i++){
                    ArmyData a=getArmyDataByHexagon(hs.get(i));
                    if(a==null){
                        continue;
                    }
                    if(fd!=-1){
                        int cfd=getForeignDegree(a.getLegionIndex(),getLegionIndex());
                        if(fd!=cfd){
                            continue;
                        }
                    }

                    switch (type){
                        case 0:  if(a!=null){return true; } break;
                        case 1:  if(a!=null&&a.getArmyType()!=5&&a.getArmyType()!=7){return true; } break;
                        case 2:  if(a!=null&& (a.getArmyType()==4||a.getArmyType()==8)  ){return true; } break;
                        case 3:  if(a!=null&& (a.getArmyType()==4||a.getArmyType()==8||Fb2Smap.this.ifSea(a.getHexagonIndex()))  ){return true; } break;
                    }
                }
            }
            return false;
        }

        //可以作为军团行动
        public boolean canLegionAct() {
            if(regionHexagonMap.containsKey(regionId)){
                IntArray hs=regionHexagonMap.get(regionId);
                for(int i=0;i<hs.size;i++){
                    ArmyData a=getArmyDataByHexagon(hs.get(i));
                    if(a!=null&&a.getLegionIndex()==legionIndex&&a.getArmyRound()==0&&a.getArmyType()!=6){
                        return true;
                    }
                }
            }
            return false;
        }


        public boolean regionHavePlayerCanCommderArmy() {
            if(regionHexagonMap.containsKey(regionId)){
                IntArray hs=regionHexagonMap.get(regionId);
                for(int i=0;i<hs.size;i++){
                    ArmyData a=getArmyDataByHexagon(hs.get(i));
                    if(a!=null&&a.playerCanCommand()&&a.getArmyRound()==0&&a.getArmyType()!=6){
                        return true;
                    }
                }
            }
            return false;
        }

        //随机获得周围的敌对region, 无兵的海洋region不算
        public BuildData getRandomAroundEnemyBuildData() {
            ConnectData c=getConnectData();
            if(c!=null){
                int rsR=-1;
                //优先获取sr一致的
                IntArray rs=game.tempUtil.getTempIntArray();
                for(int j=1;j<=c.regionConnectCount;j++){
                    int  region=c.getConnectValue(j,0);
                    BuildData b=getBuildDataByRegion(region);
                    if (b==null||!ifCanAtk(legionIndex,b.getLegionIndex())) {
                        continue;
                    }
                    if(b.ifSea()&&!b.ifHaveCanAtkUnit(legionIndex)){
                        continue;
                    }
                    if(getStrategicRegion()==b.getStrategicRegion()){
                        rs.add(region);
                    }
                }
                if(rs.size>0){
                    rsR=rs.random();
                    game.tempUtil.disposeTempIntArray(rs);
                    return getBuildDataByRegion(rsR);
                }else{
                    rs.clear();
                    for(int j=1;j<=c.regionConnectCount;j++){
                        int  region=c.getConnectValue(j,0);
                        BuildData b=getBuildDataByRegion(region);
                        if (b==null||ifAllyByLi(legionIndex,b.getLegionIndex())) {
                            continue;
                        }
                        if(b.ifSea()&&!b.ifHaveCanAtkUnit(legionIndex)){
                            continue;
                        }
                        rs.add(region);
                    }
                    if(rs.size>0){
                        rsR=rs.random();
                        game.tempUtil.disposeTempIntArray(rs);
                        return getBuildDataByRegion(rsR);
                    }else{
                        return null;
                    }
                }
            }else{
                return null;
            }
        }

        public BuildData getRandomAroundBuildDataByLi(int li) {
            ConnectData c=getConnectData();
            if(c!=null){
                int rsR=-1;
                //优先获取sr一致的
                IntArray rs=game.tempUtil.getTempIntArray();
                for(int j=1;j<=c.regionConnectCount;j++){
                    int  region=c.getConnectValue(j,0);
                    BuildData b=getBuildDataByRegion(region);
                    if (b==null||b.getLegionIndex()!=li) {
                        continue;
                    }
                    if(b.ifSea()&&!b.ifHaveCanAtkUnit(legionIndex)){
                        continue;
                    }
                    if(getStrategicRegion()==b.getStrategicRegion()){
                        rs.add(region);
                    }
                }
                if(rs.size>0){
                    rsR=rs.random();
                    game.tempUtil.disposeTempIntArray(rs);
                    return getBuildDataByRegion(rsR);
                }else{
                    rs.clear();
                    for(int j=1;j<=c.regionConnectCount;j++){
                        int  region=c.getConnectValue(j,0);
                        BuildData b=getBuildDataByRegion(region);
                        if (b==null||b.getLegionIndex()!=li) {
                            continue;
                        }
                        if(b.ifSea()&&!b.ifHaveCanAtkUnit(legionIndex)){
                            continue;
                        }
                        rs.add(region);
                    }
                    if(rs.size>0){
                        rsR=rs.random();
                        game.tempUtil.disposeTempIntArray(rs);
                        return getBuildDataByRegion(rsR);
                    }else{
                        return null;
                    }
                }
            }else{
                return null;
            }
        }

        //获得周边有敌人部队的敌对地区的数量
        public int getAroundEnemyLegionUnitRegionCount() {
            int count=0;
            ConnectData c=getConnectData();
            if(c!=null){
                for(int j=1;j<=c.regionConnectCount;j++){
                    int  region=c.getConnectValue(j,0);
                    BuildData b=getBuildDataByRegion(region);
                    if (b!=null&&b.ifHaveCanAtkUnit(legionIndex)) {
                        count++;
                    }
                }
            }
            return count;
        }
        public int getAroundAllyLegionUnitRegionCount() {
            int count=0;
            ConnectData c=getConnectData();
            if(c!=null){
                for(int j=1;j<=c.regionConnectCount;j++){
                    int  region=c.getConnectValue(j,0);
                    BuildData b=getBuildDataByRegion(region);
                    if (b!=null&&b.ifHaveLegionAllyUnit(true)) {
                        count++;
                    }
                }
            }
            return count;
        }

        public BuildData getRandomAroundSafeBuildData() {
            return getRandomAroundSafeBuildData(this.getAroundEnemyLegionUnitRegionCount());
        }

        //获得周围安全的陆地区域
        public BuildData getRandomAroundSafeBuildData(int enemyLegionUnitCount) {
            ConnectData c=getConnectData();
            BuildData rs=null;
            if(c!=null){
                Array<BuildData> bs=game.tempUtil.getTempArray();
                for(int j=1;j<=c.regionConnectCount;j++){
                    int  region=c.getConnectValue(j,0);
                    BuildData b=getBuildDataByRegion(region);
                    if (b!=null&&b.getLegionIndex()==legionIndex&&b.getAroundEnemyLegionUnitRegionCount()<(enemyLegionUnitCount+1)) {
                        bs.add(b);
                    }
                }

                if(bs.size>0){
                    rs=bs.random();
                    game.tempUtil.disposeTempArray(bs);
                    return rs;
                }else{
                    for(int j=1;j<=c.regionConnectCount;j++){
                        int  region=c.getConnectValue(j,0);
                        BuildData b=getBuildDataByRegion(region);
                        if (b!=null&&(ifAllyByLi(b.getLegionIndex(),legionIndex)||(b.getLegionData().getInternIndex()==0&&!b.ifHaveLegionAllyUnit(true)))&&b.getAroundEnemyLegionUnitRegionCount()<(enemyLegionUnitCount+1)) {
                            bs.add(b);
                        }
                    }
                    if(bs.size>0){
                        rs=bs.random();
                        game.tempUtil.disposeTempArray(bs);
                        return rs;
                    }else{
                        for(int j=1;j<=c.regionConnectCount;j++){
                            int  region=c.getConnectValue(j,0);
                            BuildData b=getBuildDataByRegion(region);
                            if (b!=null&&(ifAllyByLi(b.getLegionIndex(),legionIndex)||(b.getLegionData().getInternIndex()==0&&!b.ifHaveLegionAllyUnit(true)))) {
                                bs.add(b);
                            }
                        }
                        if(bs.size>0){
                            rs=bs.random();
                            game.tempUtil.disposeTempArray(bs);
                            return rs;
                        }
                    }
                }
            }
            return rs;

        }
        //获取兵力
        //type 0全部 1 士气大于30 2血量大于30% 3士气和血量都大于30的
        public int getForces(int type) {
            int forces=0;
            IntArray hr=regionHexagonMap.get(regionId);
            boolean ifSea=ifSea();
            if(hr!=null){
                for(int i=0;i<hr.size;i++){
                    ArmyData a=getArmyDataByHexagon(hr.get(i));
                    if(a!=null&&ifAllyByLi(a.getLegionIndex(),legionIndex)){
                        if(ifSea){//如果是海洋,忽视防御物
                            if(a.getArmyType()==6){
                                continue;
                            }
                        }else{//如果是陆地,忽视海军
                            if(a.getArmyType()==4||a.getArmyType()==8){
                                continue;
                            }
                        }
                        switch (type){
                            case 0:
                                forces+=a.getArmyHpNow();
                                break;
                            case 1:
                                if(a.getArmyMorale()>game.resGameConfig.unitMoraleMinLimit){ forces+=a.getArmyHpNow();}
                                break;
                            case 2:
                                if(a.getHpRate()>game.resGameConfig.unitHpRateMinLimit){ forces+=a.getArmyHpNow();}
                                break;
                            case 3:
                                if(a.getArmyMorale()>game.resGameConfig.unitMoraleMinLimit&&a.getHpRate()>game.resGameConfig.unitHpRateMinLimit){ forces+=a.getArmyHpNow();}
                                break;
                        }

                    }
                }
            }
            if(forces>0){
                forces+=cityHpNow;
            }
            return forces;
        }

        //type 0 全部 1 全部友方 2有战斗力的友方(血量和士气>30) 3无战力的友方 4可以移动的友方
        public Array<ArmyData> getCanActLegionUnitTAA(int type) {//要塞不计入单位
            tempArmyDataArray.clear();
            if(regionHexagonMap.containsKey(regionId)){

                IntArray hs=regionHexagonMap.get(regionId);
                for(int i=0;i<hs.size;i++){
                    ArmyData a=getArmyDataByHexagon(hs.get(i));
                    if(a!=null&&a.getArmyType()!=6&&a.getArmyRound()==0){
                        switch (type){
                            case 0:tempArmyDataArray.add(a);
                                break;
                            case 1:if(ifAllyByLi(a.getLegionIndex(),legionIndex)){tempArmyDataArray.add(a);}
                                break;
                            case 2:if(a.getArmyMorale()>game.resGameConfig.unitMoraleMinLimit&&a.getHpRate()>game.resGameConfig.unitHpRateMinLimit&&ifAllyByLi(a.getLegionIndex(),legionIndex)){
                                tempArmyDataArray.add(a);
                            }
                                break;
                            case 3:if((a.getArmyMorale()<game.resGameConfig.unitMoraleMinLimit||a.getHpRate()<game.resGameConfig.unitHpRateMinLimit)&&ifAllyByLi(a.getLegionIndex(),legionIndex)){
                                tempArmyDataArray.add(a);
                            }
                                break;
                        }
                    }
                }
            }

            return tempArmyDataArray;
        }

        //判断有单位是否满足某个特性
        public boolean haveFeature(int feature) {
            IntArray hm=regionHexagonMap.get(regionId);
            if(hm!=null&&hm.size>0){
                for(int i=0;i<hm.size;i++){
                    int id=hm.get(i);
                    ArmyData a=getArmyDataByHexagon(id);
                    if(a!=null&&ifAllyByLi(a.getLegionIndex(),legionIndex)&&a.ifHaveFeature(feature)){
                        return true;
                    }
                }
            }
            AirData airData=getAirData(airIndex1);
            if(airData!=null&& airData.ifHaveAirFeature(feature)){
                return true;
            }
            airData=getAirData(airIndex2);
            if(airData!=null&& airData.ifHaveAirFeature(feature)){
                return true;
            }
            airData=getAirData(airIndex3);
            if(airData!=null&& airData.ifHaveAirFeature(feature)){
                return true;
            }
            airData=getAirData(airIndex4);
            if(airData!=null&& airData.ifHaveAirFeature(feature)){
                return true;
            }
            return false;
        }

        public boolean haveSkill(int skillId) {
            if(!ifEffective(21)){
                return false;
            }
            IntArray hm=regionHexagonMap.get(regionId);
            if(hm!=null&&hm.size>0){
                for(int i=0;i<hm.size;i++){
                    int id=hm.get(i);
                    ArmyData a=getArmyDataByHexagon(id);
                    if(a!=null&&ifAllyByLi(a.getLegionIndex(),legionIndex)&&a.ifHaveSkill(skillId)){
                        return true;
                    }
                }
            }

            return haveAirSkill(skillId);
        }

        public boolean haveAirSkill(int skillId){
            AirData airData=getAirData(airIndex1);
            if(airData!=null&& airData.ifHaveSkill(skillId)){
                return true;
            }
            airData=getAirData(airIndex2);
            if(airData!=null&& airData.ifHaveSkill(skillId)){
                return true;
            }
            airData=getAirData(airIndex3);
            if(airData!=null&& airData.ifHaveSkill(skillId)){
                return true;
            }
            airData=getAirData(airIndex4);
            if(airData!=null&& airData.ifHaveSkill(skillId)){
                return true;
            }
            return false;
        }



        public int getSkillEffect(int skillId,boolean ifOnlyRegion) {
            if(!ifEffective(21)){
                return 0;
            }
            int rs=0;
            if(ifOnlyRegion){
                ArmyData a=getRegionUnit();
                if(a!=null&&ifAllyByLi(a.getLegionIndex(),legionIndex)&&a.ifHaveSkill(skillId)){
                    rs=a.getSkillEffect(skillId);
                }
            }else {
                IntArray hm=regionHexagonMap.get(regionId);
                if(hm!=null&&hm.size>0){
                    for(int i=0;i<hm.size;i++){
                        int id=hm.get(i);
                        ArmyData a=getArmyDataByHexagon(id);
                        if(a!=null&&ifAllyByLi(a.getLegionIndex(),legionIndex)&&a.ifHaveSkill(skillId)){
                            int effect=a.getSkillEffect(skillId);
                            if(effect>rs){
                                rs=effect;
                            }
                        }
                    }
                }
            }
            int effect=getAirSkillEffect(skillId);
            return ComUtil.max(rs,effect);
        }
        public int getSkillChance(int skillId,boolean ifOnlyRegion) {
            if(!ifEffective(21)){
                return 0;
            }
            int rs=0;
            if(ifOnlyRegion){
                ArmyData a=getRegionUnit();
                if(a!=null&&ifAllyByLi(a.getLegionIndex(),legionIndex)&&a.ifHaveSkill(skillId)){
                    rs=a.getSkillChance(skillId);
                }
            }else {
                IntArray hm=regionHexagonMap.get(regionId);
                if(hm!=null&&hm.size>0){
                    for(int i=0;i<hm.size;i++){
                        int id=hm.get(i);
                        ArmyData a=getArmyDataByHexagon(id);
                        if(a!=null&&ifAllyByLi(a.getLegionIndex(),legionIndex)&&a.ifHaveSkill(skillId)){
                            int effect=a.getSkillChance(skillId);
                            if(effect>rs){
                                rs=effect;
                            }
                        }
                    }
                }
            }
            int effect=getAirSkillChance(skillId);
            return ComUtil.max(rs,effect);
        }


        public int getAirSkillEffect(int skillId) {
            int rs=0;
            if(!ifEffective(21)){
                return rs;
            }
            AirData airData=getAirData(airIndex1);
            if(airData!=null&& airData.ifHaveSkill(skillId)){
                int effect= airData.getSkillEffect(skillId);
                if(effect>rs){
                    effect=rs;
                }
            }
            airData=getAirData(airIndex2);
            if(airData!=null&& airData.ifHaveSkill(skillId)){
                int effect= airData.getSkillEffect(skillId);
                if(effect>rs){
                    effect=rs;
                }
            }
            airData=getAirData(airIndex3);
            if(airData!=null&& airData.ifHaveSkill(skillId)){
                int effect= airData.getSkillEffect(skillId);
                if(effect>rs){
                    effect=rs;
                }
            }
            airData=getAirData(airIndex4);
            if(airData!=null&& airData.ifHaveSkill(skillId)){
                int effect= airData.getSkillEffect(skillId);
                if(effect>rs){
                    effect=rs;
                }
            }
            return rs;
        }
        public int getAirSkillChance(int skillId) {
            int rs=0;
            if(!ifEffective(21)){
                return rs;
            }
            AirData airData=getAirData(airIndex1);
            if(airData!=null&& airData.ifHaveSkill(skillId)){
                int chance= airData.getSkillChance(skillId);
                if(chance>rs){
                    chance=rs;
                }
            }
            airData=getAirData(airIndex2);
            if(airData!=null&& airData.ifHaveSkill(skillId)){
                int chance= airData.getSkillChance(skillId);
                if(chance>rs){
                    chance=rs;
                }
            }
            airData=getAirData(airIndex3);
            if(airData!=null&& airData.ifHaveSkill(skillId)){
                int chance= airData.getSkillChance(skillId);
                if(chance>rs){
                    chance=rs;
                }
            }
            airData=getAirData(airIndex4);
            if(airData!=null&& airData.ifHaveSkill(skillId)){
                int chance= airData.getSkillChance(skillId);
                if(chance>rs){
                    chance=rs;
                }
            }
            return rs;
        }

        public boolean haveAirFeature(int feature) {
            AirData airData=getAirData(airIndex1);
            if(airData!=null&& airData.ifHaveAirFeature(feature)){
                return true;
            }
            airData=getAirData(airIndex2);
            if(airData!=null&& airData.ifHaveAirFeature(feature)){
                return true;
            }
            airData=getAirData(airIndex3);
            if(airData!=null&& airData.ifHaveAirFeature(feature)){
                return true;
            }
            airData=getAirData(airIndex4);
            if(airData!=null&& airData.ifHaveAirFeature(feature)){
                return true;
            }
            return false;
        }

        //fd 关系
        //type  ifHaveUnit
        public boolean ifBorderRegionHaveEnemyUnit(int fd,int type) {
            ConnectData c=getConnectData();
            if(c!=null){
                for(int j=1;j<=c.regionConnectCount;j++){
                    int  region=c.getConnectValue(j,0);
                    BuildData b=getBuildDataByRegion(region);
                    if (b!=null&&getForeignDegree(b.getLegionIndex(),legionIndex)==fd&&b.ifHaveUnit(type,1)) {
                        return true;
                    }
                }
            }
            return false;
        }

        //获得境内的最大飞机飞行位置
        public int getMaxAirActRange() {
            int actRange=getAirLvNow();
            int exera=getSkillEffect(16,true);
            if(masterData.getPlayerMode()==2){//飞机为实体
                IntArray hm=regionHexagonMap.get(regionId);
                if(hm!=null&&hm.size>0){
                    for(int i=0;i<hm.size;i++){
                        int id=hm.get(i);
                        ArmyData a=getArmyDataByHexagon(id);
                        if(a!=null&&a.getLegionIndex()==legionIndex&&a.armyType==5){
                            int maxR=a.armyXmlE0.getInt("maxAtkrange",0);
                            maxR+=exera;
                            if(getLegionIndex()==getLegionIndex()){
                                if(getBuildWonder()>0){
                                    XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(getBuildWonder());
                                    if(xE!=null){
                                        int function=xE.getInt("fucntion",0);
                                        int effect=xE.getInt("effect",0);
                                        int value=xE.getInt("value",0);
                                        if(function==5&&effect==5){
                                            maxR+=value;
                                        }
                                    }
                                }
                            }

                            if(maxR>actRange){
                                actRange=maxR;
                            }
                        }
                    }
                }
            }else{//飞机为虚体
                for(int i=0;i<4;i++){
                    AirData a=getBuildAirData(i);
                    if(a!=null){
                        int maxR=a.getMaxRange();
                        if(maxR>actRange){
                            actRange=maxR;
                        }
                    }
                }
            }
            if(actRange<3){
                actRange=3;
            }
            return actRange;
        }

        public int getAge() {
            return Fb2Smap.this.getAge();
        }

        public boolean canBuildWonder() {
            if(game.resGameConfig.onlyGeneralWonder||!Fb2Smap.this.ifSystemEffective(19)||cityLvNow<=1||buildName==0){
                return false;
            }
            return ifCanBuildWonder;
        }

        public boolean ifEffective(int i) {
            return Fb2Smap.this.ifSystemEffective(i);
        }


        public boolean ifBorderRegion(int regionId,boolean ifCanCommonPotion) {
            return Fb2Smap.this.ifBorderRegion(getRegionId(),regionId,ifCanCommonPotion);
        }
        //是城市所属者的关键领土
        public boolean isLegionTerritoryRegion() {
            return getLegionData().isTerritoryRegion(regionId);
        }

        public void drawSkill(int skillId) {

            if(roundState==0){
                Gdx.app.log(getHexagonIndex()+"","triggerSkill:"+game.gameMethod.getSkillStr(skillId));
            }
            if(roundState==0||(roundState==4||isPlayer())){
                effectStage.drawSkill(regionId,skillId);
            }
        }

        @Override
        public boolean ifUnitGroupIsFormation(int direct, boolean ifChick) {
            return false;
        }

        @Override
        public int getUnitType(int targetHexagon) {
            return 6;
        }

        @Override
        public int getBorderAttackCrit() {
            return 0;
        }

        @Override
        public int getRangeAttackCrit() {
            return 0;
        }

        @Override
        public int getUnitRank() {
            return getCityLvNow();
        }

        @Override
        public void setUnitMoraleChange(int i) {
            addCityStability(i);
        }

        @Override
        public void setUnitMorale(int i) {
            setCityStability(i);
        }

        @Override
        public void drawMorale(int v, float time) {
            if (roundState == 0 && v != 0&&buildActor!=null) {
                effectStage.drawMorale(getHexagonIndex(),v,time);
            }
        }

        @Override
        public String getFeature() {
            return "";
        }

        @Override
        public int getTransportType() {
            return 0;
        }

        @Override
        public void drawFeature(int i) {
            if(effectStage==null){ return;  }
            if(roundState==0){
                Gdx.app.log(getHexagonIndex()+"","triggerFeature:"+game.gameMethod.getFeatureStr(i));
            }
            if(roundState==0||(roundState==4||isPlayer())){
                effectStage.drawFeature(getRegionId(),i);
            }
        }

        public boolean canBuildNavy() {
            if(hexagonDatas.get(regionId).getBlockType()!=1||isEditMode(true)){
                IntArray hm=regionHexagonMap.get(regionId);
                if(hm!=null&&hm.size>0){
                    for(int i=0;i<hm.size;i++){
                        int id=hm.get(i);
                        if(ifGridIsPass(id)&&Fb2Smap.this.ifSea(id)){
                            if(checkCanBuildPort(id)||hexagonIsFacility(id,1)){
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }


        //定制海军
        public boolean canPreorderNavy(){
            int hexagon=   getFacilityHexagon(1);
            if(ifGridIsPass(hexagon)){
                int cardId=getBuildCardIdTIA1(getLegionData(),this,false,4,true);
                if(cardId!=-1){
                    return true;
                }
            }
            return false;
        }

        public boolean canRecruitNavy() {
            if(hexagonDatas.get(regionId).getBlockType()!=1||isEditMode(true)){
                IntArray hm=regionHexagonMap.get(regionId);
                if(hm!=null&&hm.size>0){
                    for(int i=0;i<hm.size;i++){
                        int id=hm.get(i);
                        if(ifGridIsPass(id)&&Fb2Smap.this.ifSea(id)){
                            ArmyData a=getArmyDataByHexagon(id);
                            if((a==null||a.getArmyHpNow()==0)&&(checkCanBuildPort(id)||hexagonIsFacility(id,1))){
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }

        public int getLegionCapital() {
            LegionData l=getLegionData();
            if(l!=null){
                return l.getCapitalId();
            }
            return -1;
        }

        public LegionData getInfluenceLegionData() {
            if(influenceLi>0){
                return getLegionDataByLi(influenceLi);
            }
            LegionData l=getLegionData();
            if(l!=null&&l.getSuzerainLi()>0){
                return l.getSuzerainLegionData();
            }
            return l;
        }


        public boolean canBuildRailwayCard() {
            if(isEditMode(true)){
                return true;
            }
            if(transportLvNow<=0){
                return false;
            }
            if(!ifSea()){
                Fb2Map.MapHexagon h=getHexagonData();
                if(h.getOtherTile()==0){
                    return true;
                }
            }
            if(transportLvNow>0){
                IntArray hm=regionHexagonMap.get(regionId);
                if(hm!=null&&hm.size>0){
                    for(int i=0;i<hm.size;i++){
                        int id=hm.get(i);
                        if(ifGridIsPass(id)&&!Fb2Smap.this.ifSea(id)&&mapbin.ifRailway(id)&&mapbin.ifBorderRailway(id)&&Fb2Smap.this.getHexagonData(id).canBuildRailway(transportLvNow)){
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        public boolean ifRegionHaveRailway() {
            if(!ifSea()){
                Fb2Map.MapHexagon h=getHexagonData();
                if(h.getOtherTile()==1){
                    return true;
                }
            }
            return false;
        }

        public boolean ifClick() {
            if(game.sMapScreen!=null){
                return game.sMapScreen.smapGameStage.coord.getId()==regionId;
            }
            return false;
        }

        public int getSumLv() {
            return (cityLvNow+this.developLv)*2+ this.industryLvNow+ this.foodLvNow +this.techLvNow + this.energyLvNow +this.transportLvNow+
                    this.armyLvNow + this.airLvNow + this.supplyLvNow +  this.defenceLvNow +this.missileLvNow +   this.nuclearLvNow +this.cultureLvNow +  this.tradeLvNow ;
        }

        public boolean ifHunger() {
            if(foodLvNow*2<cityLvNow){
                return true;
            }
            return false;
        }

        public void resetAllUnitMorale(int v) {
            IntArray armyH=regionHexagonMap.get(getRegionId());
            for(int i=0;i<armyH.size;i++){
                ArmyData a=getArmyDataByHexagon(armyH.get(i));
                if(a!=null&&ifAllyByLi(a.getLegionIndex(),getLegionIndex())){
                    a.setArmyMorale(v);
                }
            }
        }
        public void resetAllUnitState() {
            IntArray armyH=regionHexagonMap.get(getRegionId());
            for(int i=0;i<armyH.size;i++){
                ArmyData a=getArmyDataByHexagon(armyH.get(i));
                if(a!=null&&ifAllyByLi(a.getLegionIndex(),getLegionIndex())){
                    a.resetState();
                }
            }
        }

        /* buildState_0=正常
                 buildState_1=饥饿
         buildState_2=战争
                 buildState_3=能源不足*/
        public String getBuildStateInfo() {

            if(isWar()){
                return "buildState_2";
            }else if(isSeaArea()){
                return "buildState_0";
            }else if(ifEnergyOverload()){
                return "buildState_3";
            }else if(ifHunger()){
                return "buildState_1";
            }
            return "buildState_0";
        }

        public String getAreaTypeStr() {
            LegionData pl=getPlayerLegion();
            if(pl.isMajorAreaRegion(this.getRegionId())){
                return this.getMainGame().gameMethod.getStrValue("areaType_2");
            }else if(pl.isCoreAreaRegion(this.getRegionId())){
                return this.getMainGame().gameMethod.getStrValue("areaType_3");
            }
            if(this.ifSea()){
                return this.getMainGame().gameMethod.getStrValue("areaType_0");
            }else{
                return this.getMainGame().gameMethod.getStrValue("areaType_1");
            }
        }

        public boolean isRell() {
            ArmyData a=getArmyDataByHexagon(regionId);
            if(a!=null&&a.getLegionIndex()!=getLegionIndex()&&a.getLegionIndex()==0){
                return true;
            }
            return false;
        }

        public void drawStrike(String attackStrike, float damageTime) {
            if(buildActor!=null){
                buildActor.drawStrike( attackStrike,  damageTime);
            }
        }

        public SMapEffectStage getEffectStage() {
            return effectStage;
        }

        public boolean isEditMode(boolean b) {
            return Fb2Smap.this.isEditMode(b);
        }

        public void setAllUnitToTarget(int minHpRateLimit,int regionId) {
            IntArray armyH=regionHexagonMap.get(getRegionId());
            for(int i=0;i<armyH.size;i++){
                ArmyData a=getArmyDataByHexagon(armyH.get(i));
                if(a!=null&&a.getLegionIndex()==getLegionIndex()){
                    if(a.getHpRate()>minHpRateLimit&&(regionId==-1||a.canActRegion(regionId))){
                        a.setTargetRegion(regionId);
                    }else{
                        a.setTargetRegion(-1);
                    }
                }
            }
        }

        public void setAllUnitStandBy(boolean ifEnhance) {
            IntArray armyH=regionHexagonMap.get(getRegionId());
            LegionData l=getLegionData();
            for(int i=0;i<armyH.size;i++){
                ArmyData a=getArmyDataByHexagon(armyH.get(i));
                if(a!=null&&a.getLegionIndex()==getLegionIndex()&&a.getArmyRound()==0){
                    if(ifEnhance&&l.ifAiCheatChance()){
                       army_enhance(a);
                    }else{
                        army_Standby(a);
                    }
                    a.addArmyRound(1);
                }
            }
        }

        public void updAllActorUpdMarkByRegion() {
            IntArray hexagons=regionHexagonMap.get(getRegionId());
            if(hexagons.size>0){
                for(int i=0;i<hexagons.size;i++){
                    ArmyData a=getArmyDataByHexagon(hexagons.get(i));
                    if(a!=null&&a.armyActor!=null){
                        a.armyActor.resetUpdMark();
                    }
                }
            }
        }

        public ArmyData getGeneralEnemyArmyData(int li) {
            IntArray hexagonArray = regionHexagonMap.get(regionId);
            if(hexagonArray!=null){
                for (int i = 0; i <  hexagonArray.size; i++) {
                    ArmyData  a=getArmyDataByHexagon(hexagonArray.get(i));
                    if(a!=null&&a.getGeneralIndex()!=0&&getForeignDegree(li,a.getLegionIndex())==-1){
                        return a;
                    }
                }
            }
            return null;
        }

        public ArmyData getEnemyArmyData(int li){
            IntArray hexagonArray = regionHexagonMap.get(regionId);
            if(hexagonArray!=null){
                for (int i = 0; i <  hexagonArray.size; i++) {
                    ArmyData  a=getArmyDataByHexagon(hexagonArray.get(i));
                    if(a!=null&&getForeignDegree(li,a.getLegionIndex())==-1){
                        GeneralData g=a.getGeneralData();
                        return a;
                    }
                }
            }
            return null;
        }

        public ArmyData getEnemyArmyData(){
            return getEnemyArmyData(getLegionIndex());
        }
        //判断城市科技是否是最高
        public boolean ifBuildLvIsOnlyTop(int cardId) {
            int cityLv=getBuildLvByBuildCardId(cardId);
            for(int i=2001;i<=2014;i++){
                if(i==cardId){
                    continue;
                }
                int lv=getBuildLvByBuildCardId(i);
                if(lv>=cityLv){
                    return false;
                }
            }
            return true;
        }
        //获得与城市等级最小的差值
        public int getBuildCardLvPoorForCityLv() {
            int cityLv=getBuildLvByBuildCardId(2007);
            int minLv=cityLv;
            for(int i=2001;i<=2014;i++){
                if(i==2007){
                    continue;
                }
                int lv=getBuildLvByBuildCardId(i);
                if(lv<minLv){
                    minLv=lv;
                }
            }
            return cityLv-minLv;
        }

        public Fb2Smap.MasterData getMasterData() {
            return masterData;
        }

        public boolean isWonderFunction(int fucntion1, int effect1) {
            if(getBuildWonder()>0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(getBuildWonder());
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                   // int value=xE.getInt("value",0);
                    if(function==fucntion1){
                        if(effect1==-1||effect1==effect){
                            return true;
                        }
                    }
                }
            }
            return false;
        }


        public int getWonderValue(int fucntion1, int effect1) {
            if(getBuildWonder()>0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(getBuildWonder());
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                     int value=xE.getInt("value",0);
                    if(function==fucntion1){
                        if(effect1==-1||effect1==effect){
                            return value;
                        }
                    }
                }
            }
            return -1;
        }


        /*if (mapBin.getMapbin().get(b.getRegionId()).getBlockType() != 1) {
         *//*if(b.getRegionId()==15841){
                    Gdx.app.log("test",b.getRegionId()+":"+mapBin.ifCoastCity(b.getRegionId()));
                }*//*
                if (ifCoastCity(b.getRegionId())) {
                    b.setBuildType(3);
                } else {
                    b.setBuildType(0);
                }
            } else {
                if (mapBin.getAroundIdById(b.getRegionId(), 10, tempIds).size > 0) {
                    b.setBuildType(1);
                } else {
                    b.setBuildType(2);
                }
            }
        }*/
    }

    private boolean hexagonIsFacility(int hexagon, int facilityId) {
        FacilityData f=getFacilityDataByHexagon(hexagon);
        if(f!=null&&f.getFacilityId()==facilityId){
            return true;
        }
        return false;
    }

    private ArmyData army_initArmyData(int buildRegion, int armyId, ArmyData a) {

        LegionData l=getLegionDataByRegion(buildRegion);
        if(l==null||armyId==0){
            return null;
        }
        checkTask(true,l.getLegionIndex(),1,1);

        XmlReader.Element armyE = game.gameConfig.getDEF_ARMY().getElementById(armyId);
        XmlReader.Element cardE = game.gameConfig.getDEF_CARD().getElementById(armyId);

        //buildPolicy 用来计算维护费和重要度
        int gameValue = ComUtil.limitValue(cardE.getInt("money") / 10, 1, 250);
        int armyType = armyE.getInt("type");

        int armyAbility=0;
        int armyLv=0;
        if(masterData.getPlayerMode()==0){ //1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇
            armyAbility=game.gameMethod.getLegionEffectValueForUnitAbility(l,armyType,armyId);
            gameValue=game.gameMethod.getLegionEffectValueForUnitGameValue(l,armyType,armyId,gameValue);
            armyLv=game.gameMethod.getLegionEffectValueForUnitLv(l,armyType,armyId);
        }

        BuildData b = getBuildDataByRegion(buildRegion);
        int stability= armyE.getInt("population",0)+b.getCultureLvNow();
        if(ifSystemEffective(0)){
            b.addCityStability(stability,game.resGameConfig.cityStabilityChangeValueMax);
        }


        //LegionData l=legionDatas.get(getLegionIndexByHexagon(region));
        int unitTechLv = getArmyLvByArmyType(armyId,armyType, l.getLegionIndex());
        // int unitGradeLv=getArmyGradeLvByArmyType(armyId,armyType, l.getLegionIndex());
        //Gdx.app.log("recruit",hexagon+" a:"+ armyId+" li:"+ l.getBuildPolicy());



        int addMorale=l.getExtraMoraleByLegionFeature(armyId,armyType);
        int addHp=0;
        int addGroup=0;
        int addRank=0;
        int recrutRound=0;
        int addWeaLv=0;

        if(b!=null&&b.getBuildWonder()>0){
            XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(b.getBuildWonder());
            if(xE!=null){
                int function=xE.getInt("fucntion",0);
                int effect=xE.getInt("effect",0);
                int value=xE.getInt("value",0);
                if(function==7){
                    switch (effect){
                        case 1:
                            addMorale+=value;
                            break;
                        case 2:
                            addWeaLv+=value;
                            break;
                        case 3:
                            addGroup+=value;
                            break;
                        case 4:
                            addRank+=value;
                            break;
                    }
                }else
                if(function==8){
                    if(effect==armyType){
                        recrutRound=value;
                    }
                }
            }
        }

        if(a==null){
            a=new ArmyData();
        }else {
            a.initArmyData();
        }
            a.setArmyIndex(armyHDatas.size);
            a.setRegionId(buildRegion);
            a.setLegionIndex(l.getLegionIndex());
            a.setUnitArmyId0(armyId);
            a.setArmyType(armyType);
            a.setArmyKills(0);
            a.armyRank = addRank + ComUtil.getRandom(0, b.getArmyLvNow() + armyLv);
            a.unitArmyId1 =0;
            a.armyFormation =0;// ComUtil.limitValue(armyE.getInt("grade", 1) + (a.getUnitGradeLv() + 2) / 3 + addGroup, 1, 9);
            a.armyHpMax = (int) ((game.resGameConfig.addHpEachRank * a.armyRank + 1f) *armyE.getInt("strength", 1)) * a.unitWealv1;
            a.armyHpNow = a.armyHpMax;

            a.setUnitGroup0Lv(1+addGroup);
            a.unitGroup1Lv =1;
            a.unitGroup2Lv =0;
            a.unitGroup3Lv = 0;
            a.unitGroup4Lv =0;
            a.unitGroup5Lv = 0;
            a.unitGroup6Lv = 0;
            a.setUnitWealv0( ComUtil.getRandom(0, b.getArmyLvNow()));
            a.skillId1 = 0;
            a.skillId2 = 0;
            a.skillId3 = 0;
            a.skillId4 = 0;
            a.generalIndex = 0;
            a.armyMorale = addMorale + (int) (game.resGameConfig.recruitUnitBaseMorale + l.getStability() * game.resGameConfig.recruitUnitLegionStabilityMoraleRate + ComUtil.max(b.getCultureLvNow() * game.resGameConfig.recruitUnitCultureLvMoraleRate, b.getCityStability() * game.resGameConfig.recruitUnitBuildStabilityMoraleRate));
            a.hinge = 0;
            a.armyDirectionValue = 0;
            a.airforcePolicy = 0;
            a.armyRound = ComUtil.limitValue(armyE.getInt("round", 1) - recrutRound, 0, 100);
            a.unitWealv0 = addWeaLv;
            if (l.isPlayer() || ComUtil.ifGet(50 - getAge() * 10)) {
                a.transportType = 0;
            } else {
                a.setTransportType(ComUtil.getRandom(0, l.getNavyLvMax() / 2 + getAge()));
            }

            a.armyAi = 0;
            a.nucleIndex = -1;
            a.targetRegion = -1;
            a.skillLv1 = 0;
            a.standyRound = 0;
            //a.goodsMax = ComUtil.limitValue(ComUtil.getRandom(1, 3) + unitTechLv, 3, 10);
            a.skillLv3 = 0;
            a.skillLv4 = 0;
            a.ifMove = 0;
            a.ifAttack = 0;
            a.armyBuff1 = 0;
            a.armyBuff2 = 0;
            a.armyBuff3 = 0;
            a.eventIndex = 0;
            a.gameValue = gameValue;
            a.setHexagonIndex(-1);
            a.randomUpdArmyWealv(armyAbility);
            a.resetArmyHpMax();
            a.initVirAttribute();

            //  Gdx.app.log("recruit",hexagon+" a:"+ armyId+" li:"+ l.getBuildPolicy()+" ai:"+a.armyHexagon);
                /*if(l.getBuildPolicy()==1){
                    Gdx.app.log("",l.getAllAttributes());
                }*/

            //招募陆军部队时,有{0}%几率将其编队提高1级"/>
            if(a.isPlayer()&&ifHaveSpirit(8)&&ifTriggerSpirit(8)){
                if( a.updArmyGroup()){
                    a.resetArmyHpMax();
                }
            }
            if (a.ifNeedCreateActor()) {
                a.createActor();
            }
            if(ifSystemEffective(21)){
                a.updSkillForRank();
            }
            if(isEditMode(true)){
                a.setArmyRound(0);
            }
            // 1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇
            switch (a.armyType) {
                case 1:
                    l.varInfantryNum +=a.getPopulation();
                    l.varInfantryCost += a.getFoodCost() *getMilitaryCostRate();
                    break;
                case 2:
                    l.varArtilleryNum += a.getPopulation();
                    l.varArtilleryCost += a.getFoodCost()  *getMilitaryCostRate();
                    break;
                case 3:
                    l.varArmorNum += a.getPopulation();;
                    l.varArmorCost += a.getFoodCost()  *getMilitaryCostRate();
                    break;
                case 4:
                    l.varNavyNum += a.getPopulation();
                    l.varNavyCost += a.getFoodCost()  *getMilitaryCostRate();
                    break;
                case 5:
                    l.varAirNum += 1;
                    l.varAirCost += a.getFoodCost() *getMilitaryCostRate();
                    break;
                case 6:
                    if(a.ifHaveFeature(5)){
                        l.varMissileNum += 1;
                        l.varMissileCost += a.getFoodCost()  *getMilitaryCostRate();
                    }else {
                        l.varDefenceNum +=1;
                        l.varDefenceCost += a.getFoodCost()  *getMilitaryCostRate();
                    }
                    break;
                case 7:
                    l.varNuclearNum += 1;
                    l.varNuclearCost +=a.getFoodCost()  *getMilitaryCostRate();
                    break;
                case 8:
                    l.varSubmarineNum += a.getPopulation();
                    l.varSubmarineCost += a.getFoodCost() *getMilitaryCostRate();
                    break;
                default:
                    Gdx.app.error("initCardNumAndCost no bontyType",""+a.getArmyType());
                    break;
            }
            if (a.getGeneralIndex() != 0) {
                l.varGeneralNum += 1;
                l.varGeneralCost +=  ComUtil.limitValue(a.getFoodCost()/2 ,10,255)*getMilitaryCostRate();
            }
            if(a.isPlayer()&& recruitSkills !=null&& recruitSkills.size>0){
                for(int i=0;i<recruitSkills.size;i++){
                    int spiritId=recruitSkills.get(i);
                    XmlReader.Element spiritE=game.gameConfig.getDEF_SPIRIT().getElementById(spiritId);
                    if(spiritE!=null&&checkRecruitSkill(a.getArmyType(),spiritE.getInt("effect",100))){
                        int skillId=spiritE.getInt("rule",0);
                        XmlReader.Element skillE=game.gameConfig.getDEF_SKILL().getElementById(skillId);
                        if(skillId>0&&skillE!=null&&a.checkSkillConditions(skillE)){//验证技能是否适合这个类
                            if(!a.learnSkill(skillId)){
                                break;
                            }
                        }
                    }
                }
            }
        a.initVirAttribute();
        return a;
    }

    private GeneralData getMaxRankGeneralData(int legionIndex,boolean ifCheckDiagloue) {
        GeneralData g=null;
        Iterator<IntMap.Entry<GeneralData>> itG = generalIDatas.iterator();
        while (itG.hasNext()) {
            GeneralData c = itG.next().value;
            if(c!=null&&c.getGeneralIndex()!=0&&c.getLegionIndex()==legionIndex&&c.getState()==0){
                if(ifCheckDiagloue&&dialogueGenerals.contains(c.getGeneralId())){
                    continue;
                }
                if(g==null){
                    g=c;
                }else if(c.getRank()>g.getRank()||c.getAllAbility()>g.getAllAbility()){
                    g=c;
                }
            }
        }
        return g;
    }


    private GeneralData getMaxRankGeneralDataByRegion(BuildData build, int legionIndex,boolean ifCheckDiagloue) {
        IntArray hexagons=regionHexagonMap.get(build.getRegionId());
        GeneralData g=null;
        if(hexagons.size>0){
            for(int i=0;i<hexagons.size;i++){
                Fb2Map.MapHexagon h=getHexagonData(hexagons.get(i));
                if(h!=null){
                    ArmyData a=getArmyDataByHexagon(h.getHexagonIndex());
                    if(a!=null&&a.getGeneralIndex()!=0&&a.getLegionIndex()!=legionIndex){
                        GeneralData c =a.getGeneralData();
                        if((ifCheckDiagloue&&dialogueGenerals.contains(a.getGeneralIndex()))||c.getState()!=0){
                            continue;
                        }
                        if(g==null){
                            g=c;
                        }else if(c.getRank()>g.getRank()||c.getAllAbility()>g.getAllAbility()){
                            g=c;
                        }
                    }
                }
            }
        }
        return g;
    }


    public boolean ifSea(int hexagon) {
        if (hexagon>=0&&hexagon<hexagonDatas.size&&hexagonDatas.get(hexagon).getBlockType() == 1) {
            return true;
        }
        return false;
    }




    //两个陆地单位交换位置
    private void army_exchangePotion(ArmyData army1, ArmyData army2) {
        Gdx.app.log("army_exchangePotion",army1.getHexagonIndex()+":"+army2.getHexagonIndex());

        Fb2Map.MapHexagon h1=army1.getHexagonData();
        Fb2Map.MapHexagon h2=army2.getHexagonData();
        if((army1.getArmyType()==6&&h2.buildData!=null)||(army2.getArmyType()==6&&h1.buildData!=null)||((army1.getArmyType()==4||army1.getArmyType()==8)&&!h2.isSea()) ||((army2.getArmyType()==4||army2.getArmyType()==8)&&!h1.isSea()) ){
            int s=0;
            return;
        }
        int hexagon1=army2.getHexagonIndex();
        int hexagon2=army1.getHexagonIndex();
        army1.setHexagonIndex(hexagon1);
        army2.setHexagonIndex(hexagon2);
        armyHDatas.put(hexagon1,army1);
        armyHDatas.put(hexagon2,army2);
        h1.setLegionIndexValue(army2.getLegionIndex());
        h2.setLegionIndexValue(army1.getLegionIndex());
        h1.armyData=army2;
        h2.armyData=army1;
        if(army1.armyActor==null){
            if(army1.ifNeedCreateActor()){
                army1.createActor();
            }
        }else{
            army1.armyActor.update();
            army1.armyActor.actorMoveHexagon(army1.getHexagonIndex(),false);
        }
        if(army2.armyActor==null){
            if(army2.ifNeedCreateActor()){
                army2.createActor();
            }
        }else{
            army2.armyActor.update();
            army2.armyActor.moveHexagon(army2.getHexagonIndex());
        }
    }


    public FacilityData getFacilityDataByHexagon(int hexagon) {
        return facilityHDatas.get(hexagon);
    }

    private int getFog(int hexagon){
        Fb2Map.MapHexagon h=getHexagonData(hexagon);
        if(h!=null){
            return h.getIfFog();
        }
        return -1;
    }
    //当玩家占领地块后把兵种瞬移支援
    //如果build的原归属国是玩家或其盟友,则让入侵国快速调兵或在周围快速生成兵 ifAlly是否容许盟友快速过来
    private boolean ai_unitTeleportToAroundRegion(int regionId, int legionIndex,boolean ifAlly) {
        /*if(masterData.getPlayerMode()==2){//123
            return false;
        }*/
        if(ifAllyPlayerByLi(legionIndex)){
            return false;
        }


        boolean rs=false;
        //  IntArray c=getBorderRegion(regionId);
        int targetRegion=getRandomRegionForAllyTIA1(legionIndex,regionId,false,true,0);
        IntArray hr=regionHexagonMap.get(targetRegion);
        int h, th=-1;
        if(hr!=null){
            for(int i=0;i<hr.size;i++){
                h=hr.get(i);
                if(getFog(h)==0&&getArmyDataByHexagon(h)==null&&getRegionId(h)!=h){
                    th=h;
                    break;
                }
            }
        }
        LegionData l=getLegionDataByLi(legionIndex);
        int roundProgress=getRoundProgress();
        if(th!=-1){
            Iterator<IntMap.Entry<ArmyData>> it = armyHDatas.iterator();
            while (it.hasNext()) {
                IntMap.Entry<ArmyData> ca = it.next();
                ArmyData armyData = ca.value;
                if (armyData==null||armyData.getArmyHpNow()<=0||armyData.armyActor!=null) {
                    continue;
                }
                if(ifAlly){
                    if(ifAllyByLi(armyData.getLegionIndex(),legionIndex)&&armyData.getArmyRound()==0&&armyData.armyActor==null&&armyData.getTargetRegion()==-1
                            &&armyData.ifCanTeleport(th)&&armyData.canMove(th)){
                        Gdx.app.log("ai_unitTeleportToAroundRegion:"+armyData.getUnitArmyId0()+" :"+armyData.getLegionData().legionName,armyData.getHexagonData()+"-->"+th);
                        army_Move(armyData,th);
                        if(l.ifAiCheatChance()){
                            army_enhance(armyData);
                        }

                        rs=true;
                        //armyData.createActor();
                        if(armyData.ifNeedCreateActor()){
                            armyData.createActor();
                        }
                        break;
                    }
                }else{
                    if(armyData.getLegionIndex()==legionIndex&&armyData.getArmyRound()==0&&armyData.armyActor==null&&armyData.getTargetRegion()==-1
                            &&armyData.ifCanTeleport(th)&&armyData.canMove(th)){
                        Gdx.app.log("ai_unitTeleportToAroundRegion:"+armyData.getUnitArmyId0()+" :"+armyData.getLegionData().legionName,armyData.getHexagonData()+"-->"+th);
                        army_Move(armyData,th);
                        if(l.ifAiCheatChance()){
                            army_enhance(armyData);
                        }

                        rs=true;
                        //armyData.createActor();
                        if(armyData.ifNeedCreateActor()){
                            armyData.createActor();
                        }
                        break;
                    }
                }

            }
        }
        if(rs){
            BuildData tb=getBuildDataByRegion(targetRegion);
            GeneralData g=getMaxRankGeneralDataByRegion(tb,legionIndex,true);
            if(g==null){
                g=getMaxRankGeneralData(legionIndex,true);
            }
            if(g!=null){
                addDialogueData(l.getCountryId(),g,22,"",true);
            }
        }
        return rs;
    }


    //当玩家占领一个城市,对相邻城市进行补兵
    private void ai_unitBalanceByPlayerOccupTIA1A2(int occupRegion, LegionData legionB, ArmyData pArmy) {
        Gdx.app.log("ai_unitBalanceByPlayerOccupTIA1A2 1",""+occupRegion);
        checkTask(true,pArmy.getLegionIndex(),29,1);
        //int[] ia=getConnectData(occupRegion);
        ConnectData c=getConnectData(occupRegion);
        if(c==null){
            return;
        }
        BuildData b=null;int r;
        for(int i=1,iMax=c.getRegionConnectCount();i<=iMax;i++){
            //r=ia[i];
            r=c.getConnectValue(i,0);
            b=getBuildDataByRegion(r);
            if(b!=null&&b.getLegionIndex()==legionB.getLegionIndex()&&getArmyDataByHexagon(r)==null){
                if(!ai_RecruitUnit(legionB,b,getBuildCardIdTIA1(legionB, b, true, -2,true),occupRegion)){
                    break;
                }
            }
        }
        if(b!=null){
            ArmyData army=getArmyDataByHexagon(b.getRegionId());
            if(army!=null&&army.armyActor==null&&army.getLegionIndex()==legionB.getLegionIndex()){
                if(legionB.ifAiCheatChance()){
                    army_enhance(army);
                }
                //额外提高当前难度的兵种能力
                army.randomUpdArmyWealv(masterData.gameDifficulty);

                if(army.armyActor==null&&army.ifNeedCreateActor()){
                    army.createActor();
                }
            }
            GeneralData g=getMaxRankGeneralDataByRegion(b,legionB.getLegionIndex(),true);
            if(g==null){
                g=getMaxRankGeneralData(legionB.getLegionIndex(),true);
            }
            if(g!=null){
                addDialogueData(legionB.getCountryId(),g,22,"",true);
            }
        }

    }


    //设施数据 废弃
    public class FacilityData {
        public FacilityData(){
            initFacilityData();
        }
        private int facilityIndex;//设施序列

        public int getFacilityIndex() {
            return facilityIndex;
        }

        public void setFacilityIndex(int facilityIndex) {
            this.facilityIndex = facilityIndex;
        }

        private int hexagonIndex;//设施坐标

        public int getHexagonIndex() {
            return hexagonIndex;
        }

        public void setHexagonIndex(int hexagonIndex) {
            this.hexagonIndex = hexagonIndex;
        }

        private int buildIndex;//所属建筑序列

        public int getBuildIndex() {
            return buildIndex;
        }

        public void setBuildIndex(int buildIndex) {
            this.buildIndex = buildIndex;
        }

        private int facilityId;//设施类型

        public int getFacilityId() {
            return facilityId;
        }

        public void setFacilityId(int facilityId) {
            this.facilityId = facilityId;
        }

        private int facilityLv;//设施等级

        public int getFacilityLv() {
            return facilityLv;
        }

        public void setFacilityLv(int facilityLv) {
            this.facilityLv = facilityLv;
        }

        private int facilityTarget;//研发目标

        public int getFacilityTarget() {
            return facilityTarget;
        }

        public void setFacilityTarget(int facilityTarget) {
            this.facilityTarget = facilityTarget;
        }

        private int facilityRound;//研发回合

        public int getFacilityRound() {
            return facilityRound;
        }

        public void setFacilityRound(int facilityRound) {
            this.facilityRound = facilityRound;
        }

        private int facilityStatus;//是否行动

        public int getFacilityStatus() {
            return facilityStatus;
        }

        public void setFacilityStatus(int facilityStatus) {
            this.facilityStatus = facilityStatus;
        }

        private int facilityBuff1;//buff标记1

        public int getFacilityBuff1() {
            return facilityBuff1;
        }

        public void setFacilityBuff1(int facilityBuff1) {
            this.facilityBuff1 = facilityBuff1;
        }

        private int facilityBuff2;//buff标记2

        public int getFacilityBuff2() {
            return facilityBuff2;
        }

        public void setFacilityBuff2(int facilityBuff2) {
            this.facilityBuff2 = facilityBuff2;
        }

        private int facilityBuff3;//buff标记3

        public int getFacilityBuff3() {
            return facilityBuff3;
        }

        public void setFacilityBuff3(int facilityBuff3) {
            this.facilityBuff3 = facilityBuff3;
        }

        private int gameValue;//价制度

        public int getGameValue() {
            return gameValue;
        }

        public void setGameValue(int gameValue) {
            this.gameValue = ComUtil.limitValue(gameValue, 0, 255);
        }

        public void initFacilityData() {
            this.facilityIndex = 0;
            this.hexagonIndex = 0;
            this.buildIndex = 0;
            this.facilityId = 0;
            this.facilityLv = 0;
            this.facilityTarget = -1;
            this.facilityRound = 0;
            this.facilityStatus = 0;
            this.facilityBuff1 = -1;
            this.facilityBuff2 = -1;
            this.facilityBuff3 = -1;
            this.gameValue = 0;
        }

        public int getRegionId() {
            return Fb2Smap.this.getRegionId(getHexagonIndex());
        }

        //-----------------------自定义属性------------------------------
        public Fb2Map.MapHexagon varHexagonData;
        public BuildData varBuildData;
        public FacilityActor facilityActor;





        //-----------------------自定义方法------------------------------



        public Fb2Map.MapHexagon getHexagonData() {
            return varHexagonData;
        }


        public void initVirAttribute(){
            int tempId=-1;
            if(varHexagonData==null&&ifGridIsPass(hexagonIndex)){
                varHexagonData=hexagonDatas.get(hexagonIndex);
            }
            tempId=getRegionId();
            if(varBuildData==null&&tempId!=-1){
                varBuildData=getBuildDataByRegion(tempId);
            }
            Fb2Map.MapHexagon hexagonData=getHexagonData();
            hexagonData.facilityData=this;
        }


        public void setFacilityActor(FacilityActor facilityActor) {
            this.facilityActor=facilityActor;
        }


        public void createActor(){
            if(game.sMapScreen!=null&&facilityActor==null){
                game.sMapScreen.smapGameStage.createFacilityActor(this);
                Fb2Map.MapHexagon h= getHexagonData();
                if(h!=null){h.setIfFog(1);}
                game.sMapScreen.hidUnitBackButton();
            }
        }

        public String getAllAttributes() {
            return "facilityIndex:"+this.facilityIndex +" hexagonIndex:"+
                    this.hexagonIndex +" buildIndex:"+
                    this.buildIndex+" facilityId:"+
                    this.facilityId +" facilityLv:"+
                    this.facilityLv +" facilityTarget:"+
                    this.facilityTarget +"facilityRound:"+
                    this.facilityRound +" facilityStatus:"+
                    this.facilityStatus +" facilityBuff1:"+
                    this.facilityBuff1 +" facilityBuff2:"+
                    this.facilityBuff2 +" facilityBuff3:"+
                    this.facilityBuff3 +" gameValue:"+
                    this.gameValue +" facilityActor+:"+facilityActor;
        }
    }


    //超武数据
    public class NulcleData {
        public NulcleData(){
            initNulcleData();
        }

        private void initNulcleData() {


        }

        private int nucleIndex;//超武编号

        public int getNucleIndex() {
            return nucleIndex;
        }

        public void setNucleIndex(int nucleIndex) {
            this.nucleIndex = nucleIndex;
        }

        private int regionId;//区域坐标

        public int getRegionId() {
            return regionId;
        }

        public void setRegionId(int regionId) {
            this.regionId = regionId;
        }

        private int nuclearId;//超武类型

        public int getNuclearId() {
            return nuclearId;
        }

        public void setNuclearId(int nuclearId) {
            this.nuclearId = nuclearId;
        }

        private int nucleRound;//是否行动

        public int getNucleRound() {
            return nucleRound;
        }

        public void setNucleRound(int nucleRound) {
            this.nucleRound = ComUtil.limitValue(nucleRound,0,100);
        }
        public void addNucleRound(int nucleRound) {
            setNucleRound(this.nucleRound + nucleRound);
        }
        private int gameValue;//价制度

        public int getGameValue() {
            return gameValue;
        }

        public void setGameValue(int gameValue) {
            this.gameValue = gameValue;
        }

        private int legionIndex;

        public int getLegionIndex() {
            return legionIndex;
        }

        public void setLegionIndex(int legionIndex) {
            this.legionIndex = legionIndex;
        }

        private BuildData buildData;
        private ArmyData armyData;
        private AirData airData;

        public  void initVirAttribute(){
            //buildData
            resetBuildData();
        }
        public void resetBuildData(){
            if(regionId!=-1){
                buildData=getBuildDataByRegion(regionId);
            }
        }
        public BuildData getBuildData() {
            if(regionId==-1){
                return null;
            }
            // return buildRDatas.get(regionId,null);
            return buildData;
        }

        public void setBuildData(BuildData buildData) {
            this.buildData = buildData;
        }

        public ArmyData getArmyData() {
            return armyData;
        }

        public void setArmyData(ArmyData armyData) {
            this.armyData = armyData;
        }

        public AirData getAirData() {
            return airData;
        }

        public void setAirData(AirData airData) {
            this.airData = airData;
        }

        //bontyType 0 全部卸载 1建筑 2兵种 3空军
        public boolean remove(int type) {
            if(buildData!=null&&(type==0||type==1)){
                buildData.removeNulIndex(nucleIndex);
                regionId=-1;
                buildData.buildActor.updDrawInfo();
                buildData=null;
                return true;
            }
            if(armyData!=null&&(type==0||type==2)){
                armyData.setNucleIndex(-1);
                if(armyData.armyActor!=null){
                    armyData.armyActor.update();
                }
                armyData=null;
                return true;
            }
            if(airData!=null&&(type==0||type==3)){
                airData.setNucleIndex(-1);
                airData=null;
                return true;
            }
            return false;
        }


        public void reduceNulRound(int i) {
            setNucleRound(nucleRound-i);
        }

        public LegionData getLegionData() {
            if(legionIndex>=legionDatas.size){
                setLegionIndex(0);
            }
            return legionDatas.get(legionIndex);
        }

        public String getAllAttribute() {
            return "nucleIndex:"+nucleIndex+
                    "regionId:"+regionId+
                    "nuclearId:"+nuclearId+
                    "nucleRound:"+nucleRound+
                    "gameValue:"+gameValue+
                    "legionIndex:"+legionIndex;
        }

        public boolean ifPlayer(){
            LegionData l=getLegionData();
            if(l.getLegionIndex()==masterData.playerLegionIndex){
                return true;
            }
            return false;
        }


        public boolean playerCanCommand() {
            LegionData l=getLegionData();
            if((l.getLegionIndex()==masterData.playerLegionIndex||l.getSuzerainLi()==masterData.playerLegionIndex)&&roundState==0){
                return true;
            }
            return false;
        }

        public int getMoveNeedRound(int targetRegion) {

            Fb2Map.MapHexagon h=getHexagonData(targetRegion);
            if(h==null||h.getRegionId()!=targetRegion||targetRegion==getRegionId()){
                return 0;
            }
            int jl=getDistanceForMap(targetRegion,getHexagon());
            return jl/getActRange()+1;
        }

        private int getHexagon() {
            if(armyData!=null){
                return armyData.getHexagonIndex();
            }else if(airData!=null){
                return airData.getHexagon();
            }else{
                BuildData build=getBuildData();
                if(build!=null){
                    return build.getRegionId();
                }
            }
            return regionId;
        }

        public int getActRange() {
            int actRange=0;
            if(armyData!=null){
                actRange=armyData.getMaxRange();
            }else{
                BuildData build=getBuildData();
                if(build!=null){
                    actRange = build.getAirLvNow();
                    if(airData!=null){
                        actRange=airData.getMaxRange();
                        if(actRange<build.getAirLvNow()){
                            actRange=build.getAirLvNow();
                        }
                    }
                }
            }
            if(actRange<3){
                actRange=3;
            }
            return actRange;
        }

        public boolean isPlayer() {
            if(getLegionIndex()==masterData.getPlayerLegionIndex()){
                return true;
            }
            return false;
        }
    }


    //空军数据
    public class AirData extends UnitData {
        public int getUnitTechLv(){
            return getArmyLvByArmyType(getAirId(),getAirType(),legionIndex);
        }
        public int getUnitGradeLv(){
            return getArmyGradeLvByArmyType(getAirId(),getAirType(),legionIndex);
        }

        private int airIndex;//空军序列

        public int getAirIndex() {
            return airIndex;
        }

        public void setAirIndex(int airIndex) {
            this.airIndex = airIndex;
        }

        private int regionId;//所在区域

        public int getRegionId() {
            if(armyData!=null){
                return armyData.getHexagonIndex();
            }
            return regionId;
        }

        public void setRegionId(int regionId) {
            this.regionId = regionId;
        }



        private int legionIndex;//所属军团

        public int getLegionIndex() {
            return legionIndex;
        }

        public void setLegionIndex(int legionIndex) {
            this.legionIndex = legionIndex;
        }
        public void resetLegionIndex(int legionIndex) {
            this.legionIndex = legionIndex;

            this.targetRegion=-1;
        }
        private void resetGameValue() {//存储其人口
            int v=airXmlE.getInt("population",5);
            if (generalIndex != 0) {
                GeneralData g=getGeneralData();
                if(g!=null){
                    v+=getAirRank() + g.getAbilityValue();
                }
            }
            v=ComUtil.limitValue(v,1,100);
            population=v;
            setGameValue(v/10);
        }

        private int airId;//空军id

        public int getAirId() {
            return airId;
        }

        public void setAirId(int airId) {
            this.airId = airId;
        }

        private int airType;//空军类型

        public int getAirType() {
            return airType;
        }

        public void setAirType(int airType) {
            this.airType = airType;
        }

        private int engLv;//兵模型号

        public int getEngLv() {
            return engLv;
        }

        public void setEngLv(int engLv) {
            this.engLv = engLv;
        }

        private int airKills;//杀敌数

        public int getAirKills() {
            return airKills;
        }

        public void setAirKills(int airKills) {
            this.airKills = airKills;
        }

        private int airHpMax;//hp上限

        public int getAirHpMax() {
            return airHpMax;
        }

        public void setAirHpMax(int airHpMax) {
            this.airHpMax = airHpMax;
        }

        private int airHpNow;//当期hp

        public int getAirHpNow() {
            return airHpNow;
        }

        public void setAirHpNow(int airHpNow) {
            this.airHpNow = airHpNow;
        }

        private int ackLv;//攻击等级

        public int getAckLv() {
            return ackLv;
        }

        public void setAckLv(int ackLv) {
            this.ackLv = ackLv;
        }

        private int defLv;//防御等级

        public int getDefLv() {
            return defLv;
        }

        public void setDefLv(int defLv) {
            this.defLv = defLv;
        }

        private int spyLv;//后勤等级

        public int getSpyLv() {
            return spyLv;
        }

        public void setSpyLv(int spyLv) {
            this.spyLv = spyLv;
        }

        private int supLv;//支援等级

        public int getSupLv() {
            return supLv;
        }

        public void setSupLv(int supLv) {
            this.supLv = supLv;
        }

        private int actLv;//行动等级

        public int getActLv() {
            return actLv;
        }

        public void setActLv(int actLv) {
            this.actLv = actLv;
        }

        private int weaLv;//武器等级

        public int getWeaLv() {
            return weaLv;
        }

        public void setWeaLv(int weaLv) {
            this.weaLv = weaLv;
        }

        public boolean  updWeaLv() {
            if(canUpdWeaLv()){
                this.weaLv += 1;
                checkTask(true,legionIndex,0,1);
                return true;
            }
            return false;
        }
        public boolean canUpdWeaLv(){
            if(weaLv<getUnitTechLv()&&weaLv<9){
                return true;
            }
            return false;
        }
        public boolean canUpdGoods(){
            if(goodsMax<getUnitGradeLv()&&goodsMax<9){
                return true;
            }
            return false;
        }

        private int skillId1;//装备的铠甲id

        public int getSkillId1() {
            return skillId1;
        }

        public void setSkillId1(int skillId1) {
            this.skillId1 = skillId1;
        }

        private int skillId2;//装备的引擎id

        public int getSkillId2() {
            return skillId2;
        }

        public void setSkillId2(int skillId2) {
            this.skillId2 = skillId2;
        }

        private int skillId3;//装备的补给id

        public int getSkillId3() {
            return skillId3;
        }

        public void setSkillId3(int skillId3) {
            this.skillId3 = skillId3;
        }

        private int skillId4;//装备的宝物id

        public int getSkillId4() {
            return skillId4;
        }

        public void setSkillId4(int skillId4) {
            this.skillId4 = skillId4;
        }

        private int generalIndex;//将军id

        public int getGeneralIndex() {
            return generalIndex;
        }

        public void setGeneralIndex(int generalIndex) {
            this.generalIndex = generalIndex;
        }

        private int airRank;//兵种军衔

        public int getAirRank() {
            return airRank;
        }

        public void setAirRank(int airRank) {
            this.airRank = airRank;
        }

        private int airMorale;//兵种士气

        public int getAirMorale() {
            return airMorale;
        }
        public void setAirMorale(int armyMorale) {
            this.airMorale = ComUtil.limitValue(armyMorale,getMinMorale(getRegionId(),getLegionIndex()),getMaxMorale(getLegionIndex()));
            if(ifHaveSkill(104)&&this.airMorale<game.resGameConfig.unitMoraleMinLimit+1){
                this.airMorale=game.resGameConfig.unitMoraleMinLimit+1;
                drawSkill(104);
            }
        }


        // v 正数上升 负数下降
        public void setAirMoraleChange(int v){
            setAirMorale(airMorale+v);
        }

        public void setAirMoraleChange(int v,int max){
            if(airMorale>max){
                return;
            }else if(airMorale+v>max){
                setAirMorale(max);
            }else {
                setAirMorale(airMorale+v);
            }
        }


        private int skillLv1;//兵种气力

        public int getSkillLv1() {
            return skillLv1;
        }

        public void setSkillLv1(int skillLv1) {
            this.skillLv1 = skillLv1;
        }

        private int skillLv2;//行动状态

        public int getSkillLv2() {
            return skillLv2;
        }

        public void setSkillLv2(int skillLv2) {
            this.skillLv2 = skillLv2;
        }



        private int skillLv3;//所属建筑

        public int getSkillLv3() {
            return skillLv3;
        }

        public void setSkillLv3(int skillLv3) {
            this.skillLv3 = skillLv3;
        }

        private int skillLv4;//所属建筑

        public int getSkillLv4() {
            return skillLv4;
        }

        public void setSkillLv4(int skillLv4) {
            this.skillLv4 = skillLv4;
        }


        private int airRound;//建造时间

        public int getAirRound() {
            return airRound;
        }

        public void setAirRound(int airRound) {
            this.airRound = ComUtil.limitValue(airRound,0,100);
        }

        private int airAi;//任务类型

        public int getAirAi() {
            return airAi;
        }

        public void setAirAi(int airAi) {
            this.airAi = airAi;
        }

        private int armyHexagon;//在加载和保存的时候更新这个数值,其他时候慎用

        public int getArmyHexagon() {
            if(armyData!=null){
                return armyData.getHexagonIndex();
            }
            return armyHexagon;
        }

        public int getHexagon(){
            if(armyData!=null){
                return armyData.getHexagonIndex();
            }
            return regionId;
        }


        public void setArmyHexagon(int armyHexagon) {
            this.armyHexagon = armyHexagon;
        }

        public ArmyData armyData;
        public void setArmyData(ArmyData armyData) {
            this.armyData=armyData;
            this.armyHexagon =armyData.getHexagonIndex();
            armyData.loadAir(this);
        }

        private int targetRegion;//目标区域

        public int getTargetRegion() {
            return targetRegion;
        }

        public void setTargetRegion(int targetRegion) {
            this.targetRegion = targetRegion;
        }

        private int nucleIndex;//携带的超武编号

        public int getNucleIndex() {
            return nucleIndex;
        }

        public void setNucleIndex(int nucleIndex) {
            this.nucleIndex = nucleIndex;
        }

        private int goodsMax;//物资上限

        public int getAirGoodsMax() {
            return goodsMax;
        }

        public void setAirGoodsMax(int goodsMax) {
            this.goodsMax =ComUtil.limitValue(goodsMax,1,9);
        }

        private int goodsNow;//当前物资

        public int getAirGoodsNow() {
            return goodsNow;
        }

        public void setAirGoodsNow(int goodsNow) {
            this.goodsNow =ComUtil.limitValue(goodsNow,0,goodsMax);
        }

        private int ifMove;//装弹时间

        public int getIfMove() {
            return ifMove;
        }

        @Override
        public int getTerrainId() {
            Fb2Map.MapHexagon h = getHexagonData();
            if (h != null) {
                return h.getActualTerrain();
            }
            return 0;
        }

        @Override
        public void setUnitHpNow(int i) {
            setAirHpNow(i);
        }

        @Override
        public void addUnitRound(int i) {
            addAirRound(i);
        }

        @Override
        public int getAroundUnitCount(int i) {
            return 0;
        }

        public void setIfMove(int ifMove) {
            this.ifMove = ifMove;
        }

        private int ifAttack;//当前装弹剩余

        public int getIfAttack() {
            return ifAttack;
        }

        public void setIfAttack(int ifAttack) {
            this.ifAttack = ifAttack;
        }

        private int airBuff1;//buff标记1

        public int getAirBuff1() {
            return airBuff1;
        }

        public void setAirBuff1(int airBuff1) {
            this.airBuff1 = airBuff1;
        }

        private int airBuff2;//buff标记2

        public int getAirBuff2() {
            return airBuff2;
        }

        public void setAirBuff2(int airBuff2) {
            this.airBuff2 = airBuff2;
        }

        private int airBuff3;//buff标记3

        public int getAirBuff3() {
            return airBuff3;
        }

        public void setAirBuff3(int airBuff3) {
            this.airBuff3 = airBuff3;
        }

        private int gameValue;//价制度

        public int getGameValue() {
            return gameValue;
        }

        public void setGameValue(int gameValue) {
            this.gameValue = ComUtil.limitValue(gameValue,0,255);
        }

        private int airEquip1;
        private int airEquip2;
        private int airEquip3;
        private int airEquip4;
        private int airSpecialType;
        private int airEquip1Lv;
        private int airEquip2Lv;
        private int airEquip3Lv;
        private int airEquip4Lv;
        private int airSpecialTypeLv;

        public int getAirEquip1() {
            return airEquip2;
        }

        public void setAirEquip1(int airEquip1) {
            this.airEquip1 = airEquip1;
        }

        public int getAirEquip2() {
            return airEquip2;
        }

        public void setAirEquip2(int airEquip2) {
            this.airEquip2 = airEquip2;
        }

        public int getAirEquip3() {
            return airEquip3;
        }

        public void setAirEquip3(int airEquip3) {
            this.airEquip3 = airEquip3;
        }

        public int getAirEquip4() {
            return airEquip4;
        }

        public void setAirEquip4(int airEquip4) {
            this.airEquip4 = airEquip4;
        }

        public int getAirSpecialType() {
            return airSpecialType;
        }

        public void setAirSpecialType(int airSpecialType) {
            this.airSpecialType = airSpecialType;
        }

        public int getAirEquip1Lv() {
            return airEquip1Lv;
        }

        public void setAirEquip1Lv(int airEquip1Lv) {
            this.airEquip1Lv = airEquip1Lv;
        }

        public int getAirEquip2Lv() {
            return airEquip2Lv;
        }

        public void setAirEquip2Lv(int airEquip2Lv) {
            this.airEquip2Lv = airEquip2Lv;
        }

        public int getAirEquip3Lv() {
            return airEquip3Lv;
        }

        public void setAirEquip3Lv(int airEquip3Lv) {
            this.airEquip3Lv = airEquip3Lv;
        }

        public int getAirEquip4Lv() {
            return airEquip4Lv;
        }

        public void setAirEquip4Lv(int airEquip4Lv) {
            this.airEquip4Lv = airEquip4Lv;
        }

        public int getAirSpecialTypeLv() {
            return airSpecialTypeLv;
        }

        public void setAirSpecialTypeLv(int airSpecialTypeLv) {
            this.airSpecialTypeLv = airSpecialTypeLv;
        }

        //
//        private int minRange;
//        private int maxRange;
//        private int movement;
//        private int searchRange;
//        private String feature;
        public XmlReader.Element airXmlE;
        public int population;
        public String getFeature(){
            return airXmlE.get("feature");
        }

        @Override
        public int getTransportType() {
            return 0;
        }

        //1 弹头携带
        //28 空战
        //29 轰炸
        //30 侦查
        public boolean ifHaveAirFeature(int v){
            boolean rs= ComUtil.ifHaveValueInStr(getFeature(),v);
            if(rs) {
                XmlReader.Element xE = game.gameConfig.getDEF_UNITFEATURE().getElementById(v);
                if (xE != null&&getAge()>=xE.getInt("reqAge", 0)) {
                    int cardId = xE.getInt("reqCardId", 0);
                    if (cardId != 0) {
                        int lv = xE.getInt("reqCardLv", 0);
                        if (GameMethod.getCardLv(getLegionData(),null,cardId)>=lv) {
                            return true;
                        }else{
                            rs=false;
                        }
                    }else{
                        rs=true;
                    }
                }else{
                    rs = false;
                }
            }
            if(!rs){
                BuildData b=getBuildData();
                if(b!=null&&b.getLegionIndex()==legionIndex&&b.getBuildWonder()>0){
                    XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(b.getBuildWonder());
                    if(xE!=null){
                        int function=xE.getInt("fucntion",0);
                        int effect=xE.getInt("effect",0);
                        //  int value=xE.getInt("value",0);
                        if(function==6&&effect==v&&v>6){
                            rs=true;
                        }
                    }
                }
            }
            return rs;
        }

        public int getAirFeatureLv(int featureId){
            boolean rs= ComUtil.ifHaveValueInStr(getFeature(),featureId);
            if(rs) {
                XmlReader.Element xE = game.gameConfig.getDEF_UNITFEATURE().getElementById(featureId);
                if (xE != null) {
                    int cardId = xE.getInt("reqCardId", 0);
                    if (cardId != 0) {
                        int reqLv = xE.getInt("reqCardLv", 0);
                        int lv=GameMethod.getCardLv(getLegionData(),null,cardId);
                        if (lv>=reqLv) {
                            return lv-reqLv+1;
                        }
                    }
                }
            }
            return 0;
        }


        public void clearAllSkill() {
            setSkillLv1(0);
            setSkillLv2(0);
            setSkillLv3(0);
            setSkillLv4(0);
            setSkillId1(0);
            setSkillId2(0);
            setSkillId3(0);
            setSkillId4(0);
        }
        public void clearSkill(int index) {
            switch (index){
                case 0:
                    setSkillLv1(0);
                    setSkillId1(0);
                    break;
                case 1:
                    setSkillLv2(0);
                    setSkillId2(0);
                    break;
                case 2:
                    setSkillLv3(0);
                    setSkillId3(0);
                    break;
                case 3:
                    setSkillLv4(0);
                    setSkillId4(0);
                    break;
            }
        }
        //是否有空缺的技能位
        public boolean haveCanLearnSkill() {
            if(getSkillId1()==0||getSkillId2()==0||getSkillId3()==0||getSkillId4()==0){
                return true;
            }
            return false;
        }

        public boolean learnSkill(int skillId){
            if(skillId1==0){
                setSkillId1(skillId);
                setSkillLv1(1);
                return true;
            }else  if(skillId2==0){
                setSkillId2(skillId);
                setSkillLv2(1);
                return true;
            }else if(skillId3==0){
                setSkillId3(skillId);
                setSkillLv3(1);
                return true;
            }else if(skillId4==0){
                setSkillId4(skillId);
                setSkillLv4(1);
                return true;
            }else{
                return false;
            }
        }
        public boolean updSkill(int skillId){
            if(skillId1==skillId){
                if(skillLv1<game.resGameConfig.skillMaxLv){
                    skillLv1++;
                    return true;
                }else {
                    return false;
                }
            }else  if(skillId2==skillId){
                if(skillLv2<game.resGameConfig.skillMaxLv){
                    skillLv2++;
                    return true;
                }else {
                    return false;
                }
            }else if(skillId3==skillId){
                if(skillLv3<game.resGameConfig.skillMaxLv){
                    skillLv3++;
                    return true;
                }else {
                    return false;
                }
            }else if(skillId4==skillId){
                if(skillLv4<game.resGameConfig.skillMaxLv){
                    skillLv4++;
                    return true;
                }else {
                    return false;
                }
            }else {
                return   learnSkill(skillId);
            }
        }

        public int getSkillIdByIndex(int index){
            switch (index){
                case 0:return skillId1;
                case 1:return skillId2;
                case 2:return skillId3;
                case 3:return skillId4;
            }
            return 0;
        }
        public int getSkillLvByIndex(int index){
            switch (index){
                case 0:return skillLv1;
                case 1:return skillLv2;
                case 2:return skillLv3;
                case 3:return skillLv4;
            }
            if(ifHaveSkill(70)&&ComUtil.ifGet(1)){
                drawSkill(70);
                return 1;
            }
            return 0;
        }

        private void setSkillLv(int index,int value) {
            switch (index){
                case 0:skillLv1=value;break;
                case 1: skillLv2=value;break;
                case 2: skillLv3=value;break;
                case 3: skillLv4=value;break;
            }
        }
        private int getRandomCanUpdSkill() {
            IntArray rs=game.tempUtil.getTempIntArray();
            for(int i=0;i<4;i++){
                int skillId= getSkillIdByIndex(i);
                if(skillId>0&& getSkillLvByIndex(i)<game.resGameConfig.skillMaxLv){
                    XmlReader.Element xmlE=game.gameConfig.getDEF_SKILL().getElementById(skillId);
                    if(checkSkillConditions(xmlE)){
                        rs.add(skillId);
                    }
                }
            }
            if(rs.size>0){
                int skill=rs.random();
                game.tempUtil.disposeTempIntArray(rs);
                return skill;
            }
            return 0;
        }

        public boolean ifHaveSkill(int skillId) {
            if(!ifEffective(21)){
                return false;
            }
            if(skillId1==skillId||(skillId1==70&&ComUtil.ifGet(1))){
                return true;
            }else  if(skillId2==skillId||(skillId2==70&&ComUtil.ifGet(1))){
                return true;
            }else if(skillId3==skillId||(skillId3==70&&ComUtil.ifGet(1))){
                return true;
            }else if(skillId4==skillId||(skillId4==70&&ComUtil.ifGet(1))){
                return true;
            }
            if(ifEffective(19)){
                BuildData b=getBuildData();
                if(b!=null&&b.getLegionIndex()==legionIndex&&b.getBuildWonder()>0){
                    XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(b.getBuildWonder());
                    if(xE!=null){
                        int function=xE.getInt("fucntion",0);
                        int effect=xE.getInt("effect",0);
                        //  int value=xE.getInt("value",0);
                        if(function==11&&effect==skillId){
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        public int getSkillChance(int skillId){
            if(ifHaveSkill(skillId)){
                int skillLv=getSkillLv(skillId);
                XmlReader.Element xmlE=game.gameConfig.getDEF_SKILL().getElementById(skillId);
                if(xmlE!=null){
                    return xmlE.getInt("baseChance",0)+xmlE.getInt("updChance",1)*skillLv;
                }
            }
            return 0;
        }

        private int getSkillIndex(int skillId) {
            if(skillId1==skillId){
                return 0;
            }else if(skillId2==skillId){
                return 1;
            }else if(skillId3==skillId){
                return 2;
            }else if(skillId4==skillId){
                return 3;
            }
            return -1;
        }

        public int getAirFeatureEffect(int feature) {
            return game.gameMethod.getUnitFeatureEffect(feature,getAirFeatureLv(feature));
        }

        public int getSkillEffect(int skillId){
            if(ifHaveSkill(skillId)){
                int skillLv= getSkillLv(skillId);
                XmlReader.Element xmlE=game.gameConfig.getDEF_SKILL().getElementById(skillId);
                if(xmlE!=null){
                    return xmlE.getInt("baseValue",1)+xmlE.getInt("updValue",0)*skillLv;
                }
            }
            return 0;
        }
        //升级技能
        public void updSkill(){
            updForSKill();
            int c=checkSkill();
            if(c>0){
                for(int i=0;i<c;i++){
                    updForSKill();
                }
            }
        }

        private int getSkillSum(){
            int rs=0;
            if(skillId1!=0){
                rs+=skillLv1;
            }
            if(skillId2!=0){
                rs+=skillLv2;
            }
            if(skillId3!=0){
                rs+=skillLv3;
            }
            if(skillId4!=0){
                rs+=skillLv4;
            }
            return rs;
        }
        public void updSkillForRank(){
            checkSkill();
            int sum=getSkillSum();
            if(sum<getAirRank()){
                for(int i=0,iMax=getAirRank()-sum;i<iMax;i++){
                    updForSKill();
                }
            }
        }

        //重置技能
        public void resetSkill(){
            if(getAirRank()>0){
                clearAllSkill();
                for(int i=0;i<getAirRank();i++){
                    updForSKill();
                }
            }
        }

        //返回移除的技能次数 为0则说明技能正常
        private int checkSkill(){
            int c=0;
            for(int i=0;i<4;i++){
                int skillId= getSkillIdByIndex(i);
                if(skillId>0) {
                    int skillLv= getSkillLvByIndex(i);
                    if(skillLv==0){
                        setSkillLv(i,1);
                    }
                }
            }
            if(getGeneralIndex()==0){//如果为普通单位,则检查有无内置技能
                for(int i=0;i<4;i++){
                    int skillId= getSkillIdByIndex(i);
                    if(skillId>0) {
                        XmlReader.Element sE = game.gameConfig.getDEF_SKILL().getElementById(skillId);
                        int unitType=sE.getInt("unitType", 0);
                        if ( unitType== 1) {
                            clearSkill(i);
                            c++;
                        }
                    }
                }
            }else {//如果为将军,则检查有无限制技能
                for(int i=0;i<4;i++){
                    int skillId= getSkillIdByIndex(i);
                    if(skillId>0) {
                        XmlReader.Element sE = game.gameConfig.getDEF_SKILL().getElementById(skillId);
                        int unitType=sE.getInt("unitType", 0);
                        if ( unitType== 2) {
                            clearSkill(i);
                            c++;
                        }
                    }
                }
            }
            return c;
        }



        private void updForSKill(){
            if(haveCanLearnSkill()){//有可以学习的新技能
                Array<XmlReader.Element> rs=game.gameConfig.getDEF_SKILL().e.getChildrenByName("skill");
                rs.shuffle();
                for(XmlReader.Element r:rs){
                    int id=r.getInt("id");
                    if(!ifHaveSkill(id)&&checkSkillConditions(r)){
                        if(learnSkill(id)){
                            if(id==82){
                                goodsMax++;
                            }
                        };
                        break;
                    }
                }
            }else{//升级已经有的技能
                int skillId=getRandomCanUpdSkill();
                if(skillId>0){
                    if(updSkill(skillId)){
                        if(skillId==82){
                            goodsMax++;
                        }
                    };
                }
            }
        }

        //检查是否满足技能的条件
        private boolean checkSkillConditions(XmlReader.Element sE) {
            int skillId=sE.getInt("id",0);
            if(getAge()<sE.getInt("age",0)){
                return false;
            }
            String useMode=sE.get("useMode","-1");
            if(!useMode.equals("-1")&&!ComUtil.ifHaveValueInStr(useMode,masterData.getPlayerMode())){
                return false;
            }
            if(ifHaveSkill(skillId)){
                int skillLv= getSkillLv(skillId);
                if(skillLv>game.resGameConfig.skillMaxLv|| (!sE.getBoolean("ifUpd",true)&&skillLv>0)){
                    return false;
                }
            }
            //skillType-1非步兵 -2非炮兵 -3非装甲 -4非舰船 -5非飞机 -6非要塞 -7非超武 -8非潜艇  -9仅近战非空军 -10仅远程非空军   -11 非步兵非要塞非空军 -12 非步兵非空军
            // 0无限制 1仅步兵 2仅炮兵 3仅装甲 4仅舰船 5仅飞机 6仅要塞 7仅超武 8仅潜艇 9仅陆军 10仅海军 11非空军 12非空军且非要塞 13 仅陆军且非要塞
            switch (sE.getInt("type")){
                case -1:if(getAirType()==1){return false;}break;
                case -2:if(getAirType()==2){return false;}break;
                case -3:if(getAirType()==3){return false;}break;
                case -4:if(getAirType()==4){return false;}break;
                case -5:if(getAirType()==5){return false;}break;
                case -6:if(getAirType()==6){return false;}break;
                case -7:if(getAirType()==7){return false;}break;
                case -8:if(getAirType()==8){return false;}break;
                case -9:if(getAirType()==5||getMaxRange()>1){return false;}break;
                case -10:if(getAirType()==5||getMaxRange()<2){return false;}break;
                case -11:if(getAirType()==1||getAirType()==5||getAirType()==6){return false;}break;
                case -12:if(getAirType()==1||getAirType()==5){return false;}break;
                case 1:if(getAirType()!=1){return false;}break;
                case 2:if(getAirType()!=2){return false;}break;
                case 3:if(getAirType()!=3){return false;}break;
                case 4:if(getAirType()!=4){return false;}break;
                case 5:if(getAirType()!=5){return false;}break;
                case 6:if(getAirType()!=6){return false;}break;
                case 7:if(getAirType()!=7){return false;}break;
                case 8:if(getAirType()!=8){return false;}break;
                case 9:if(getAirType()!=1&&getAirType()!=2&&getAirType()!=3&&getAirType()!=6){return false;}break;
                case 10:if(getAirType()!=4&&getAirType()!=8){return false;}break;
                case 11:if(getAirType()==5||getAirType()==7){return false;}break;
                case 12:if(getAirType()==5||getAirType()==6||getAirType()==7){return false;}break;
                case 13:if(getAirType()!=1&&getAirType()!=2&&getAirType()!=3){return false;}break;
            }
            //unitType 0 无限制 1仅将军   2 仅单位
            switch (sE.getInt("unitType")){
                case 1:if(getGeneralIndex()==0){return false;}break;
                case 2:if(getGeneralIndex()!=0){return false;}break;
                case 3:if(getGeneralIndex()!=0){return false;}break;
            }
            return true;
        }

        private int getSkillLv(int skillId) {
            int rs= getSkillLvByIndex(getSkillIndex(skillId));
            if(rs==0&&ifEffective(19)){
                BuildData b=getBuildData();
                if(b!=null&&b.getLegionIndex()==legionIndex&&b.getBuildWonder()>0){
                    XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(b.getBuildWonder());
                    if(xE!=null){
                        int function=xE.getInt("fucntion",0);
                        int effect=xE.getInt("effect",0);
                        int value=xE.getInt("value",0);
                        if(function==11&&effect==skillId){
                            rs= value;
                        }
                    }
                }
            }
            return rs;
        }





        private void initVirAttribute() {
            airXmlE=game.gameConfig.getDEF_ARMY().getElementById(getAirId());
            //minRange = xE.getInt("minAtkrange", 1);
            //maxRange = xE.getInt("maxAtkrange", 1);
            //movement = xE.getInt("movement");
            //searchRange = xE.getInt("searchRange");
            //feature=xE.get("feature");
            if(armyHexagon!=-1){
                ArmyData a=getArmyDataByHexagon(armyHexagon);
                if(a!=null){
                    setArmyData(a);
                }
            }

            if(nucleIndex!=-1){
                NulcleData n=nulcleIDatas.get(nucleIndex);
                if(n!=null){
                    n.setAirData(this);
                }
            }
            resetGameValue();
        }

        public int getMinRange() {
            return airXmlE.getInt("minAtkrange",0);
        }

        /*public void setMinRange(int minRange) {
            this.minRange = minRange+getBuildData().getAirLvNow();
        }*/

        public int getMaxRange() {

            int v=0;
            if(ifHaveAirFeature(22)&&getIfMove()==0){
                v= getAirFeatureLv(22);
            }
            v=v+getEngLv()/3+(GameMethod.getCardLv(getLegionData(),null,airId)+2)/4;
            BuildData b=getBuildData();
            if(b!=null&&b.getLegionIndex()==getLegionIndex()){
                if(b.getBuildWonder()>0){
                    XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(b.getBuildWonder());
                    if(xE!=null){
                        int function=xE.getInt("fucntion",0);
                        int effect=xE.getInt("effect",0);
                        int value=xE.getInt("value",0);
                        if(function==5&&effect==5){
                            v+=value;
                        }
                    }
                }
                int effect=b.getSkillEffect(16,true);
                if(effect>0){
                    v+=effect;
                }
            }
            return airXmlE.getInt("maxAtkrange",0)+getBuildData().getAirLvNow()+v;
        }

        @Override
        public int getUnitMorale() {
            return getAirMorale();
        }

        @Override
        public boolean inCity() {
            if(getHexagon()==regionId){
                return true;
            }
            return false;
        }

        @Override
        public int getDistance(int hexagon) {
            return getDistanceForMap(getHexagon(), hexagon);
        }

        public int getMoveNeedRound(int targetRegion){
            Fb2Map.MapHexagon h=Fb2Smap.this.getHexagonData(targetRegion);
            if(h==null||h.getRegionId()!=targetRegion||targetRegion==getHexagon()||targetRegion==getRegionId()){
                return 0;
            }
            int jl=getDistanceForMap(targetRegion,getHexagon());
            return jl/getMaxRange()+1;
        }

        /*public void setMaxRange(int maxRange) {
            this.maxRange = maxRange;
        }*/

        public int getMovement() {
            return airXmlE.getInt("movement",0);
        }

        /*public void setMovement(int movement) {
            this.movement = movement;
        }*/

        public int getSearchRange() {
            int rs=0;
            if(ifHaveSkill(117)){
                rs+=getSkillEffect(117);  drawSkill(117);
            }
            rs+= airXmlE.getInt("searchRange",0);
            if(rs<1){rs=1;}
            return rs;
        }

        /*public void setSearchRange(int searchRange) {
            this.searchRange = searchRange;
        }*/

        public void initAirData() {
            this.airIndex = 0;
            this.regionId = 0;
            this.skillLv3 = 0;
            this.legionIndex = 0;
            this.airId = 0;
            this.airType = 5;
            this.engLv = 0;
            this.airKills = 0;
            this.airHpMax = 0;
            this.airHpNow = 0;
            this.ackLv = 0;
            this.defLv = 0;
            this.spyLv = 0;
            this.supLv = 0;
            this.actLv = 0;
            this.weaLv = 0;
            this.skillId1 = 0;
            this.skillId2 = 0;
            this.skillId3 = 0;
            this.skillId4 = 0;
            this.generalIndex = 0;
            this.airRank = 0;
            this.airMorale = 0;
            this.skillLv1 = 0;
            this.skillLv2 = 0;
            this.airRound = 0;
            this.airAi = 0;
            this.armyHexagon = -1;
            this.targetRegion = -1;
            this.nucleIndex = -1;
            this.goodsMax = 0;
            this.goodsNow = 0;
            this.ifMove = 0;
            this.ifAttack = 0;
            this.airBuff1 = 0;
            this.airBuff2 = 0;
            this.airBuff3 = 0;
            this.gameValue = 0;
        }


        public void updKill(int v) {
            int gr= getGeneralData().getRank();
            if (airRank > gr) {
                return;
            }
            if(v>0&&ifHaveSkill(39)&&effectStage!=null){
                v+=getSkillEffect(39);
                drawSkill(39);
            }
            if(getAirMorale()<game.resGameConfig.resetUnitMoraleMax){
                setAirMorale(game.resGameConfig.resetUnitMoraleMax);
            }
            int killSum = /*DefDAO.getKillSumForUpd(airKills)*/ getKillSum();
            airKills=airKills+v;
            if (airKills > killSum) {
                if(airRank==6) {
                    //1 6级
                    if(generalIndex==0&&getLegionData().ifCanRecruitGeneral()){//可以上将
                        airRank += 1;
                        airUpdForGeneral(this);
                        airKills=0;
                    }else if(generalIndex!=0){//已上将
                        airRank += 1;
                        airKills=0;
                    }
                }else{
                    //2 非6级正常升级
                    airRank += 1;
                    airKills=0;
                }
                if(getLegionData().ifAiCheatChance()){
                    randomUpdAirAbility();
                }
                if(ifHaveSkill(33)){
                    randomUpdAirAbility();  drawSkill(33);
                }
                if(ifHaveSkill(32)){//升级后根据军衔等级恢复血量,在升级为将军后移除该技能
                    addAirHpByRate(airRank*getSkillEffect(32));
                    drawSkill(32);
                }
                if(ifHaveSkill(46)){
                    setAirMoraleChange(getSkillEffect(46));
                    drawSkill(46);
                }
                if(ifHaveSkill(55)){
                    resetState();
                    drawSkill(55);
                }
                if(ifHaveSkill(7)){
                    int effect=getSkillEffect(7);
                    addAirHpByRate(effect);
                    setAirMoraleChange(effect);
                    drawSkill(7);
                }
                if(ifEffective(21)){
                    updSkillForRank();
                }
                resetGameValue();
            }
        }

        private void resetState() {
            setAirRound(0);
            setAirHpNow(getAirHpMax());
            setIfMove(0);
            setIfAttack(0);
            setAirMorale(game.resGameConfig.resetUnitMoraleMax);
            setAirGoodsNow(getAirGoodsMax());
        }

        private boolean haveCanUpdAirAbilityLv(){
            for(int i=0;i<=6;i++){
                if(canUpdAirAbilityLv(i)){
                    return true;
                }
            }
            return false;
        }
        
        private void randomUpdAirAbility(){
            IntArray tempIntArray2=game.tempUtil.getTempIntArray();
           for(int i=0;i<=6;i++){
               if(canUpdAirAbilityLv(i)){
                   tempIntArray2.add(i);
               }
           }
            if(tempIntArray2.size>0){
                int rs=tempIntArray2.random();
                game.tempUtil.disposeTempIntArray(tempIntArray2);
                updAirAbilityLv(rs,1);
            }
        }
        //随机提升能力
        public void randomUpdAirAbility(int count){
            if(count<=0){return;};
            for(int i=0;i<count;i++){
                randomUpdAirAbility();
            }
        }
        //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
       /* private void updAirAbility(int i) {
            switch (i) {
                case 1:if(ackLv== game.resGameConfig.unitAbilityLvMax){return;}
                    ackLv += 1;break;
                case 2:if(defLv== game.resGameConfig.unitAbilityLvMax){return;}
                    defLv += 1;break;
                case 3:if(spyLv == game.resGameConfig.unitAbilityLvMax){return;}
                    spyLv += 1;break;
                case 4:if(supLv== game.resGameConfig.unitAbilityLvMax){return;}
                    supLv += 1;break;
                case 5:if(actLv== game.resGameConfig.unitAbilityLvMax){return;}
                    actLv += 1;break;
                case 6:if(weaLv== game.resGameConfig.unitAbilityLvMax){return;}
                    weaLv += 1;break;
            }
        }*/

        public void addGeneral(GeneralData g) {
            setGeneralIndex(g.getGeneralIndex());
            for(int i = 0; i<g.getAbilityValue(); i++){
                randomUpdAirAbility();
            }
            resetGameValue();
        }

        @Override
        public int getUnitHpNow() {
            return getAirHpNow();
        }

        @Override
        public int getUnitHpMax() {
            return getAirHpMax();
        }

        @Override
        public int getUnitHpRate() {
            return getHpRate();
        }

        @Override
        public float getUnitHpRateF() {
            return getHpRateF();
        }

        @Override
        public int getUnitType() {
            return 5;
        }

        @Override
        public int getUnitArmor(int direct) {
            return getArmor();
        }

        @Override
        public boolean ifUnitHaveFeature(int i) {
            return ifHaveAirFeature(i);
        }

        @Override
        public boolean ifUnitTriggerFeature(int i) {
            return triggerFeature(i);
        }

        @Override
        public boolean ifUnitHaveSkill(int i) {
            return ifHaveSkill(i);
        }

        @Override
        public boolean ifUnitTriggerSkill(int i) {
            return triggerSkill(i);
        }

        @Override
        public int getUnitDamage(BuildData build,int targetHexagon) {
            return (int) (game.gameMethod.getUnitDamage(getLegionData(),build,getAirId(),0)*getRankRate()+getAirAbility()* game.resGameConfig.addAtkEachRank);
        }

        @Override
        public boolean ifInUnitRange(int i) {
            return ifInRange(getHexagon(),i,getMinRange(),getMaxRange(),false);
        }

        @Override
        public int getUnitSkillEffect(int i) {
            return getSkillEffect(i);
        }

        @Override
        public int getUnitFeatureEffect(int i) {
            return getAirFeatureEffect(i);
        }

        @Override
        public boolean isUnitGroup() {
            return false;
        }

        @Override
        public int getDirect(int i) {
            return Fb2Smap.this.getDirect(getHexagonIndex(),i);
        }

        @Override
        public int getHexagonIndex() {
            return getHexagon();
        }

        @Override
        public boolean potionIsSea() {
            return Fb2Smap.this.ifSea(getHexagonIndex());
        }

        @Override
        public int getUnitId(int direct) {
            return getAirId();
        }

        public LegionData getLegionData() {
            if(legionIndex>=legionDatas.size){
                setLegionIndex(0);
            }
            return legionDatas.get(legionIndex);
        }


        public float getHpRateF() {
            return  airHpNow*1f/airHpMax;
        }
        public int getHpRate() {
            return  airHpNow*100/airHpMax;
        }
        public void reduceAirRound(int i) {
            setAirRound(airRound-i);
        }

        public boolean playerCanCommand() {
            if(roundState==0||roundState==4){
                LegionData l=getLegionData();
                if(l.getLegionIndex()==masterData.playerLegionIndex||l.getSuzerainLi()==masterData.playerLegionIndex){
                    return true;
                }
            }
            return false;
        }

        public boolean injured(int damage) {
            int ifSkillEffect=isPlayerRound()?-1:0;
            if(triggerSkill(47)){
                damage=damage*(100-getSkillEffect(47))/100;
                if(ifSkillEffect==-1){ifSkillEffect=47; }
                drawSkill(47);
            }
            airHpNow -= damage;
            if (airHpNow <= 0) {
                return true;
            }
            return false;
        }

        public BuildData getSourceBuildData() {
            return getBuildDataByRegion(regionId);
        }


        public BuildData getBuildData() {
            if(armyData!=null){
                return armyData.getBuildData();
            }else {
                return getBuildDataByRegion(regionId);
            }
        }

        public void addAirRound(int v) {
            if(isEditMode(true)){
                return;
            }
            setAirRound(airRound+v);
        }

        public IntArray getCanCarryUnit(IntArray rs){
            return  getIdsInRange(regionId,legionIndex,getMinRange(),getMaxRange(),true,2, true,2,true,false,false,false,rs);
        }

        //type 0全部 1 进攻目标 2移动目标
        public IntArray getCanActRegions(IntArray rs,int type) {
            if(isPlayer()&&    ( ifEffective(2)&&  (getLegionData().getOil()<=0)||  (ifEffective(3)&&getLegionData().getIndustry()<=0))){
                return rs;
            }
            rs.clear();



            //获得可以空战或侦查的区域
            //获得可以空战的区域
            if(ifHaveAirFeature(28)&&(type==0||type==1)){
                //ifSelfBuildSeaLimit 空军特殊限制, 空军不能移动到 自己的属于海洋类型的建筑
                //ifArmyCanCarryAir 单位是否可以携带空军
                //targetType 0全部 1仅敌人 2仅自己 3仅ai可攻击目标 4有可空战空军的地区
                //targetRegionType 0全部 1仅海洋 2仅陆地
                //ifBanAlly true 则禁止目标是友军单位
                rs=  getIdsInRange(regionId,legionIndex,getMinRange(),getMaxRange(),true,0, true,4,false,false,false,false,rs);
            }
//侦查 干扰
            if((ifHaveAirFeature(30)||ifHaveAirFeature(32))&&(type==0||type==1)){
                rs=  getIdsInRange(regionId,legionIndex,getMinRange(),getMaxRange(),true,0, true,1,false,false,false,false,rs);
            }


            //获得可以轰炸的坐标
            if(ifHaveAirFeature(29)&&(type==0||type==1)){
                rs=  getIdsInRange(regionId,legionIndex,getMinRange(),getMaxRange(),false,0, true,3,false,false,false,false,rs);
            }
            //获得可以运输
            if(ifHaveAirFeature(3)&&(type==0||type==2)){
                rs=  getIdsInRange(regionId,legionIndex,getMinRange(),getMaxRange(),false,0, false,2,true,true,false,false,rs);
            }

            if((type==0||type==2)){
                //获得可以移动的坐标
                rs=  getIdsInRange(regionId,legionIndex,getMinRange(),getMaxRange(),true,0, true,2,true,true,false,false,rs);
            }

            return rs;
        }



      /*  //0 默认玩家获得所有可行动地块
        //1 可进攻区域
        //2 可以搭载飞机的位置
        //3 只包含我方非海洋区域
        //4 获得所有可行动非海洋区域
        //5 ai的可进攻地面目标
        //6 可以空降的区域
        public IntArray getCanActRegions(IntArray rs,int type) {
            *//*if(rs==null){
                rs=new IntArray();
            }else {
                rs.clear();
            }*//*
            if(isPlayer()&&    ( ifEffective(2)&&  (getLegionData().getOil()<=0)||  (ifEffective(3)&&getLegionData().getIndustry()<=0))){
                return rs;
            }

            switch (type){
                case 0:return getIdsInRange(regionId,legionIndex,getMinRange(),getMaxRange(),true,0, true,0,true,true,false,false,rs);
                case 1:return getIdsInRange(regionId,legionIndex,getMinRange(),getMaxRange(),true,0, true,1,true,false,false,false,rs);
                case 2:return getIdsInRange(regionId,legionIndex,getMinRange(),getMaxRange(),false,2, true,0,true,true,false,false,rs);
                case 3:return getIdsInRange(regionId,legionIndex,getMinRange(),getMaxRange(),true,2, true,2,true,false,false,false,rs);
                case 4:return getIdsInRange(regionId,legionIndex,getMinRange(),getMaxRange(),true,2, true,0,true,false,false,false,rs);
                case 5:return getIdsInRange(regionId,legionIndex,getMinRange(),getMaxRange(),true,0, true,3,true,false,false,false,rs);
                //ifSelfBuildSeaLimit 空军特殊限制, 空军不能移动到 自己的属于海洋类型的建筑
                //ifArmyCanCarryAir 单位是否可以携带空军
                //targetType 0全部 1非友军 2仅自己 3仅ai可攻击目标 4有可空战空军的地区
                //targetRegionType 0全部 1仅海洋 2仅陆地
                //ifBanAlly true 则禁止目标是友军单位

                case 6:return getIdsInRange(regionId,legionIndex,getMinRange(),getMaxRange(),false,2, false,5,true,false,false,false,rs);
            }
            return getIdsInRange(regionId,legionIndex,getMinRange(),getMaxRange(),true,0, true,0,true,false,false,false,rs);
        }*/

        public void addAirHpNow(int hp) {
            this.airHpNow = this.airHpNow + airHpNow;
            if (this.airHpNow > this.getAirHpMax()) {
                this.airHpNow = this.airHpMax;
            }
        }

        public String getGeneralName() {
            if(generalIndex==0){
                return game.gameMethod.getStrValueT("generalName_pilot");
            }else {
                return  getGeneralData().getGeneralName();
            }
        }

        public GeneralData getGeneralData() {
            GeneralData g=generalIDatas.get(generalIndex);
            if(g!=null){
                return g;
            }
            Gdx.app.error("no general:"+getRegionId(),getAllAttribute());
            setGeneralIndex(0);
            return generalIDatas.get(0);
        }

        @Override
        public Fb2Map.MapHexagon getHexagonData() {
            return Fb2Smap.this.getHexagonData(getHexagon());
        }

        public void dissolve() {
            if(getLegionIndex()!=masterData.getPlayerLegionIndex()){
                legionDatas.get(getLegionIndex()).addMoney((int) (getGameValue() * getAirRank() *getMilitaryCostRate()));
            }
            air_Death(getAirData(getAirIndex()));
        }

        public NulcleData getAirNulData() {
            if(nucleIndex!=-1){
                return nulcleIDatas.get(nucleIndex);
            }else if(regionId!=-1){
                return getBuildData().getNulData();
            }else if(armyData!=null&&armyData.getNucleIndex()!=-1){
                return nulcleIDatas.get(armyData.getNucleIndex());
            }


            return null;
        }

        public boolean ifAirCanLoadNul(int nuclearId) {
            if(nucleIndex!=-1){return false;}
            switch (nuclearId){
                case 1701:if( ifHaveAirFeature(29)||ifHaveAirFeature(1)){return true;}break;
                case 1702:if( ifHaveAirFeature(29)||ifHaveAirFeature(1)){return true;}break;
                case 1703:if(ifHaveAirFeature(1)){return true;}break;
                case 1704:if(ifHaveAirFeature(1)){return true;}break;
                case 1705:if(ifHaveAirFeature(1)){return true;}break;
            }
            return false;
        }

        public boolean loadNul(NulcleData n) {
            if(nucleIndex==-1){
                setNucleIndex(n.getNucleIndex());
                if (isPlayer()) {
                    effectStage.drawFace(regionId,1);
                }
                n.addNucleRound(1);
                return true;
            }
            return false;
        }

        public boolean isPlayer() {
            return legionIndex==masterData.playerLegionIndex;
        }

        public boolean haveNulCanLoad() {
            if(nucleIndex!=-1){
                return false;
            }
            BuildData build=getBuildData();
            if(build!=null&&build.getNuclearCount()>0){
                if(build.nulIndex1!=-1){
                    NulcleData n=nulcleIDatas.get(build.nulIndex1);
                    if(n!=null&& ifAirCanLoadNul(n.getNuclearId())){
                        return true;
                    }
                }
                if(build.nulIndex2!=-1){
                    NulcleData n=nulcleIDatas.get(build.nulIndex2);
                    if(n!=null&& ifAirCanLoadNul(n.getNuclearId())){
                        return true;
                    }
                }
                if(build.nulIndex3!=-1){
                    NulcleData n=nulcleIDatas.get(build.nulIndex3);
                    if(n!=null&& ifAirCanLoadNul(n.getNuclearId())){
                        return true;
                    }
                }
                if(build.nulIndex4!=-1){
                    NulcleData n=nulcleIDatas.get(build.nulIndex4);
                    if(n!=null&& ifAirCanLoadNul(n.getNuclearId())){
                        return true;
                    }
                }
            }
            return false;
        }

        public void addAirGoods(int goods) {
            setAirGoodsNow(goodsNow+goods);
        }

        public void addAirHpByRate(int v) {
            int hp=airHpMax*v/100;
            addAirHpNow(hp);
        }

        public void changeMoraleByWeather() {
            int wM=getWeatherXmlE().getInt("morale",0);
            setAirMoraleChange(wM);
        }

        public XmlReader.Element getWeatherXmlE(){
            BuildData b=getBuildData();
            if(b!=null){
                return  game.gameConfig.getDEF_WEATHER().getElementById(b.getWeatherId());
            }else{
                return  game.gameConfig.getDEF_WEATHER().getElementById(0);
            }
        }

        public int getWeatherId() {
            BuildData b=getBuildData();
            if(b!=null){
                return b.getWeatherId();
            }
            return 0;
        }

        public boolean isPlayerAlly() {
            return ifAllyPlayerByLi(legionIndex);
        }

        public String getAllAttribute() {


            return "airIndex:"+airIndex+
                    "regionId:"+regionId+
                    "buildIndex:"+ skillLv3 +
                    "legionIndex:"+legionIndex+
                    "airId:"+airId+
                    "airType:"+airType+
                    "airModel:"+ engLv +
                    "airKills:"+airKills+
                    "airHpMax:"+airHpMax+
                    "airHpNow:"+airHpNow+
                    "ackLv:"+ackLv+
                    "defLv:"+defLv+
                    "resLv:"+ spyLv +
                    "supLv:"+supLv+
                    "actLv:"+actLv+
                    "weaLv:"+weaLv+
                    "armorId:"+ skillId1 +
                    "engineId:"+ skillId2 +
                    "supplyId:"+ skillId3 +
                    "gemId:"+ skillId4 +
                    "generalIndex:"+generalIndex+
                    "airRank:"+airRank+
                    "airMorale:"+airMorale+
                    "airPneumatic:"+ skillLv1 +
                    "airStatus:"+ skillLv2 +
                    "airRound:"+airRound+
                    "airAi:"+airAi+
                    "armyHexagon:"+armyHexagon+
                    "targetRegion:"+targetRegion+
                    "nucleIndex:"+nucleIndex+
                    "goodsMax:"+goodsMax+
                    "goodsNow:"+goodsNow+
                    "ifMove:"+ ifMove +
                    "ifAttack:"+ ifAttack +
                    "airBuff1:"+airBuff1+
                    "airBuff2:"+airBuff2+
                    "airBuff3:"+airBuff3+
                    "gameValue:"+gameValue;
        }

        public String getFeatureTriggerStr() {
            StringBuilder str=new StringBuilder();
            String features=getFeature();
            if(!features.equals("0")){
                String[] strs = features.split(",");
                for (int i = 0; i < strs.length; i++) {
                    if(ComUtil.isNumeric(strs[i])){
                        int feature=Integer.parseInt(strs[i]);
                        if(ifHaveAirFeature(feature)&&GameMethod.ifUnitFeatureCanUpd(feature)){
                            str.append("\n").append(game.gameMethod.getStrValue("feature_effect_"+feature,game.gameMethod.getUnitFeatureEffect(feature, getAirFeatureLv(feature))));
                        }else{
                            continue;
                        }
                    }
                }
            }
            return str.toString();
        }

        public int getPopulation() {
          /*  XmlReader.Element aE= game.gameConfig.getDEF_ARMY().getElementById(airId);
            if(aE!=null){
                return ComUtil.limitValue(aE.getInt("population",0)+getAirRank()-getAirFeatureEffect(26),1,10);
            }*/
            return population;
        }

        public int getArmor() {
            int armor=0;
            XmlReader.Element armyE=game.gameConfig.getDEF_ARMY().getElementById(airId);
            if(armyE!=null){
                armor+=armyE.getInt("armor",0);
            }
            if(isPlayer()){
                if(controlMode==1){
                    armor+=1000;
                }else if(game.gameConfig.ifLeisureMode){
                    armor*=2;
                }
            }
            armor+=airRank+getAirRank()* game.resGameConfig.addDefEachRank;
            if(ifHaveSkill(35)){
                armor=armor*(100+getSkillEffect(35))/100;
                drawSkill(35);
            }
            BuildData b=getBuildData();
            if(b!=null&&b.getLegionIndex()==getLegionIndex()){
                if(b.getBuildWonder()>0){
                    XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(b.getBuildWonder());
                    if(xE!=null){
                        int function=xE.getInt("fucntion",0);
                        int effect=xE.getInt("effect",0);
                        int value=xE.getInt("value",0);
                        if(function==5&&effect==4){
                            armor+=value;
                        }
                    }
                }
                int effect=b.getSkillEffect(106,true);
                if(effect>0){
                    armor=armor*(100+effect)/100;
                }
                effect=b.getSkillEffect(87,true);
                if(effect>0){
                    armor=armor*(100+effect)/100;
                }
            }//因为单位没有group属性,所以多加一层rank

            if(spiritMap!=null&&ifEffective(16)){
                if(spiritMap.containsKey(41)){
                    armor=armor*2;
                }
            }
            armor= (100+getDefLv()*game.resGameConfig.addDefForDefLv)/100;
            return armor;
        }

        public int getCrit() {
            int crit;
            crit= airMorale/2+5+getSpyLv()*game.resGameConfig.addCritForAirSpyLv;
            BuildData b=getBuildData();
            if(b!=null&&b.getLegionIndex()==getLegionIndex()&&b.getBuildWonder()>0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(b.getBuildWonder());
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==9&&effect==5){
                        crit+=value;
                    }
                }
            }
            return crit;
        }

        public int getFoodCost() {
            return ComUtil.limitValue( population,1+airRank,999);
        }

        public AirData getEscortAir(int targetHexagon) {
            AirData air=null;
            if(ifHaveAirFeature(28)){
                return this;
            }
            if(armyData!=null){
                air=armyData.getReadyAir(28,targetHexagon);
            }else {
                BuildData b=getBuildData();
                if(b.getLegionIndex()==getLegionIndex()){
                    air=b.getEscortAir(targetHexagon);
                }
            }
            return air;
        }

        public AirData getReadyAir(int airFeature,int targetHexagon) {
            AirData air=null;
            if(ifHaveAirFeature(airFeature)){
                return this;
            }
            if(armyData!=null){
                air=armyData.getReadyAir(airFeature,targetHexagon);
            }else {
                BuildData b=getBuildData();
                if(b.getLegionIndex()==getLegionIndex()){
                    air=b.getEscortAir(targetHexagon);
                }
            }
            return air;

        }

        public boolean ifOkByAirPolicy(int hexagon) {
            int policy=0;
            if(armyData==null){
                BuildData b=getBuildData();
                if(b!=null){
                    policy=b.getAirforcePolicy();
                }
            }else{
                policy=armyData.getAirforcePolicy();
            }
            switch (policy){
                case 0:  if(getHpRateF()>0.5){return true;}break;
                case 1:  return true;
                case 2:  if(getLegionIndexByRegion(hexagon)==regionId){return true;}break;
                case 3: return false;
            }
            return true;
        }


        public float getRankRate() {
            float rs= 1+ airRank*0.1f;
            if(rs<1f){
                rs=1f;
            }
            return rs;
        }

        public void resetAbility() {
            if(generalIndex==0){
                airRank=ComUtil.limitValue(ComUtil.getRandom(airRank-3,airRank+3),0,game.resGameConfig.unityRankMax);
            }
            ackLv =ComUtil.limitValue(ComUtil.getRandom(ackLv-3,ackLv+3),0,getWealMaxLv());
            defLv =ComUtil.limitValue(ComUtil.getRandom(defLv-3,defLv+3),0,getWealMaxLv());
            spyLv =ComUtil.limitValue(ComUtil.getRandom(spyLv -3, spyLv +3),0,getWealMaxLv());
            supLv =ComUtil.limitValue(ComUtil.getRandom(supLv-3,supLv+3),0,getWealMaxLv());
            actLv =ComUtil.limitValue(ComUtil.getRandom(actLv-3,actLv+3),0,getWealMaxLv());
            engLv =ComUtil.limitValue(ComUtil.getRandom(engLv-3,engLv+3),0,getWealMaxLv());
        }
        public void clearAbility() {
            ackLv =0;
            defLv =0;
            spyLv =0;
            supLv =0;
            actLv =0;
            weaLv =0;
            engLv =0;
        }

        public int getRegionDefAirLv() {
            BuildData b=getBuildData();
            if(b!=null&&b.getLegionIndex()==legionIndex){
                return b.getMissileLvNow();
            }
            return 0;
        }

        public float getAirMoraleRate() {
            return  airMorale*1f/100;
        }

        public void updForGeneral() {
            airUpdForGeneral(this);
        }

        public void setAirMoraleValue(int v) {
            this.airMorale = ComUtil.limitValue(v,0,100);
        }

        public boolean isRound() {
            if(isPlayer()&&(roundState==0||roundState==4)){
                return true;
            }else if(roundLegionIndex==legionIndex){
                return true;
            }
            return false;
        }

        public boolean isPlayerRound() {
            return roundState==0||(roundState==4&&isPlayer());
        }
        //是否触发技能
        public boolean triggerSkill(int skillId) {
            return ComUtil.ifGet(getSkillChance(skillId));
        }
        public boolean triggerFeature(int featureId) {
            return ComUtil.ifGet(game.gameMethod.getUnitFeatureEffect(featureId,getAirFeatureLv(featureId)));
        }
        public void randomReduceSkillLv(int count) {
            for(int i=0;i<count;i++){
                int index=ComUtil.getRandom(0,3);
                reduceSkillLvByIndex(index);
            }
        }

        @Override
        public void updUnitModelDirect() {

        }

        @Override
        public int getUnitLife() {
            return getAirLife();
        }
        public int getAirLife() {
            if(airXmlE==null){
                airXmlE=game.gameConfig.getDEF_ARMY().getElementById(airId);
            }
            if(airXmlE!=null){
                return airXmlE.getInt("strength",0);
            }
            return 1;
        }
        @Override
        public int getArmor(int direct) {
            return getArmor();
        }

        @Override
        public MainGame getGame() {
            return game;
        }

        @Override
        public int getMapW() {
            return masterData.getWidth();
        }

        @Override
        public int getUnitDirection() {
            return 0;
        }

        @Override
        public int getWeaponValue(int direct, int targetType) {
            XmlReader.Element xmlE=game.gameConfig.getDEF_ARMY().getElementById(airId);
            if(xmlE!=null){
                return game.gameMethod.getWeaponValue(xmlE.getInt("weapon",101),targetType,getWeaLv());
            }
            return 0;
        }

        @Override
        public int getUnitAbility(int index) {
            switch (index){
                case 0: return weaLv;
                case 1: return ackLv;
                case 2: return spyLv ;
                case 3: return supLv ;
                case 4: return defLv;
                case 5: return engLv ;
                case 6: return actLv ;
            }
            return 0;
        }

        @Override
        public int getUnitCount() {
            return 1;
        }

        @Override
        public int getDefAirLv() {
            return 0;
        }

        @Override
        public int getKillSum() {
            return (1+airRank)*(1+airRank)*(1+airRank);
        }

        @Override
        public int getExp() {
            return ComUtil.max(getAirRank(),1);
        }

        @Override
        public boolean inScreen() {
            return false;
        }

        @Override
        public int getArrowDirect() {
            return 0;
        }

        @Override
        public boolean isEmptyBuild() {
            return false;
        }

        @Override
        public int getDirectByBorderId(int targetHexagonIndex) {
            return Fb2Smap.this.getDirectByBorderId(getHexagonIndex(),targetHexagonIndex);
        }

        private boolean reduceSkillLvByIndex(int index) {
            switch (index){
                case 0:
                    if(skillLv1>1){
                        skillLv1--;
                    }else{
                        clearSkill(index);
                    }
                    return true;
                case 1:
                    if(skillLv2>1){
                        skillLv2--;
                    }else{
                        clearSkill(index);
                    }
                    return true;
                case 2:
                    if(skillLv3>1){
                        skillLv3--;
                    }else{
                        clearSkill(index);
                    }
                    return true;
                case 3:
                    if(skillLv4>1){
                        skillLv4--;
                    }else{
                        clearSkill(index);
                    }
                    return true;
            }
            return false;

        }

        public void drawSkill(int skillId) {
            if(effectStage==null){ return;  }

            if(roundState==0){
                Gdx.app.log(getHexagonIndex()+"","triggerSkill:"+game.gameMethod.getSkillStr(skillId));
            }
            if(roundState==0&&(roundState==4&&isPlayer())){
                effectStage.drawSkill(getHexagon(),skillId);
            }
        }

        @Override
        public boolean ifUnitGroupIsFormation(int direct, boolean ifChick) {
            return false;
        }

        @Override
        public int getUnitType(int targetHexagon) {
            return 5;
        }

        @Override
        public int getBorderAttackCrit() {
            return getCrit();
        }

        @Override
        public int getRangeAttackCrit() {
            return getCrit();
        }

        @Override
        public int getUnitRank() {
            return getAirRank();
        }

        @Override
        public void setUnitMoraleChange(int i) {
            setAirMoraleChange(i);
        }

        @Override
        public void setUnitMorale(int i) {
            setAirMorale(i);
        }

        @Override
        public void drawMorale(int v, float time) {
            if (roundState == 0 && v != 0) {
                effectStage.drawMorale(getHexagonIndex(),v,time);
            }
        }
        @Override
        public void drawFeature(int skillId) {
            if(effectStage==null){ return;  }
            if(roundState==0){
                Gdx.app.log(getHexagonIndex()+"","triggerFeature:"+game.gameMethod.getFeatureStr(skillId));
            }
            if(roundState==0&&(roundState==4&&isPlayer())){
                effectStage.drawFeature(getHexagon(),skillId);
            }
        }


        public boolean ifEffective(int i) {
            return Fb2Smap.this.ifSystemEffective(i);
        }

        public int getWealMaxLv() {
            return getArmyLvByArmyType(airId, 5, legionIndex);
        }

        public int getAirReplyGoods() {
            return getAirRank()* game.resGameConfig.extraReplyAirGoodsRatio;
        }
        public int getAirReplyHp(){
            int regionLegion=getLegionIndexByRegion(getRegionId());
            if(regionLegion>0){
                int fd=getForeignDegree(regionLegion,getLegionIndex());
                if(fd==-1){
                    return 0;
                }
            }

            int hp = (int) (this.getAirHpMax()* game.resGameConfig.unityReplyHpRatio *(this.getSupLv()+1));
            if(isPlayerAlly()&&getLegionData().getFood()==0){
                return hp;
            }
            int replayRate=getWeatherXmlE().getInt("replyRate",100);




            BuildData build = getBuildData();
            if(build==null){
                return hp;
            }


            if(roundState==2||roundState==0||roundState==4){
                if(isPlayer()) {
                    if (masterData.ifChief == 1 && chiefData != null) {
                        replayRate += chiefData.varUnitRestoreEfficiencyChange;
                    }
                }
            }
            if (build.getLegionIndex() == getLegionIndex()&&build.getCityStability()>30) {
                hp = build.getBuildReplyHp();
            }
            int weatherId=getWeatherId();
            if(weatherId==3||weatherId==7){
                replayRate=replayRate+getLegionData().getLegionFeatureEffect(83);
            }else if(weatherId==5||weatherId==6){
                replayRate=replayRate+getLegionData().getLegionFeatureEffect(84);
            }else if(weatherId==2||weatherId==4){
                replayRate=replayRate+getLegionData().getLegionFeatureEffect(85);
            }
            if(ifHaveAirFeature(26)&&replayRate<100){
                replayRate=100;
            }
            if(getIfAttack()==0){
                replayRate+=getAckLv()*2;
            }
            if(getIfMove()==0){
                replayRate+=getActLv()*2;
            }
            if(ifAllyByLi(getLegionIndexByHexagon(getHexagon()),getLegionIndex())&&ifHaveAirFeature(24)){
                replayRate+= getAirFeatureEffect(24);;
            }
            hp=hp*replayRate/100;
            if(build.getCityHpMax()==build.getCityHpNow()&&build.getCityHpMax()>0){
                hp=hp*2;
                if(ifHaveSkill(100)){
                    hp=hp*(100+getSkillEffect(100))/100;
                    drawSkill(100);
                }
            }
            if(ifHaveSkill(98)){
                hp=hp*(100+getSkillEffect(98))/100;
                drawSkill(98);
            }
            if(build.getLegionIndex()==getLegionIndex()&&ifHaveSkill(88)){
                hp=hp*(100+getSkillEffect(88))/100;
                drawSkill(88);
            }
            return hp;
        }


        public int getMinAttack() {
            return  (int) (game.gameMethod.getUnitDamage(getLegionData(),getBuildData(),getAirId(),-1)*getRankRate()+getAirAbility()* game.resGameConfig.addAtkEachRank);
        }
        public int getMaxAttack() {
            return  (int) (game.gameMethod.getUnitDamage(getLegionData(),getBuildData(),getAirId(),1)*getRankRate()+getAirAbility()* game.resGameConfig.addAtkEachRank);
        }

        public int getAvgAttack() {
            return  (int) (game.gameMethod.getUnitDamage(getLegionData(),getBuildData(),getAirId(),0)*getRankRate()+getAirAbility()* game.resGameConfig.addAtkEachRank);
        }

        public boolean isEmptyBuildRound() {
            BuildData b=getBuildData();
            if(b!=null&&b.getLegionIndex()==legionIndex&&b.getBuildRound()==0){
                return true;
            }
            return false;
        }

        public boolean isEditMode(boolean b) {
            return Fb2Smap.this.isEditMode(b);
        }

        public void updUnitWealvAndPayRes(int index,int lv) {
            if(canUpdAirAbilityLv(index)){
                updAirAbilityLv(index,lv);
                payCardPrice(getLegionData(),getBuildData(),airId,true);
            }
        }

        private void updAirAbilityLv(int index,int lv) {
            switch (index){
                case 0: this.weaLv =ComUtil.limitValue(weaLv+lv,0,9);
                case 1: this.ackLv=ComUtil.limitValue(ackLv+lv,0,9);
                case 2: this.spyLv =ComUtil.limitValue(spyLv+lv,0,9);
                case 3: this.supLv =ComUtil.limitValue(supLv+lv,0,9);
                case 4: this.defLv=ComUtil.limitValue(defLv+lv,0,9);
                case 5: this.engLv =ComUtil.limitValue(engLv+lv,0,9);
                case 6: this.actLv =ComUtil.limitValue(actLv+lv,0,9);
            }
            checkTask(true,legionIndex,0,1);
        }

        private boolean canUpdAirAbilityLv(int index) {
            switch (index){
                case 0:return canUpdWeaLv();
                case 1:
                    if(ackLv<weaLv&&ackLv<9){
                        return true;
                    }
                    break;
                case 2:
                    if(spyLv<weaLv&&spyLv<9){
                        return true;
                    }
                    break;
                case 3:
                    if(getSupLv()<weaLv&&getSupLv()<9){
                        return true;
                    }
                    break;
                case 4:
                    if(getDefLv()<weaLv&&getDefLv()<9){
                        return true;
                    }
                    break;
                case 5:
                    if(getEngLv()<weaLv&&getEngLv()<9){
                        return true;
                    }
                    break;
                case 6:
                    if(getActLv()<weaLv&&getActLv()<9){
                        return true;
                    }
                    break;
            }
            return false;
        }

        public void updGoodsMax() {
            setAirGoodsMax(getAirGoodsMax()+1);
        }

        public void updGoodsMaxAndPayRes() {
            if(canUpdGoods()){
                updGoodsMax();
                payCardPrice(getLegionData(),getBuildData(),airId,true);
            }
        }

        public boolean canPayRes() {
            return canPayCardPrice(getLegionData(),getBuildData(),airId);
        }

        public boolean canRecruitGeneral() {
            BuildData build=getBuildData();
            if(build!=null&&build.getLegionIndex()==getLegionIndex()&&build.getBuildRound()==0&&getGeneralIndex()==0&&getLegionData().ifCanRecruitGeneral()){
                return true;
            }
            return false;
        }

        public int getAirAbility() {
            GeneralData g=getGeneralData();
            if(g!=null){
                if(g.getType()==0||g.getState()==1){
                    return airRank+g.getAllAbility();
                }else if(g.getType()==5){
                    return (airRank+g.getAllAbility())*2;
                }
               return (airRank+g.getAllAbility())/2;
            }
            return airRank;
        }

        public float getExpRateF() {
            GeneralData g=getGeneralData();
            if(g!=null&&getAirRank()>=g.getRank()){
                return 1f;
            }else{
                return getAirKills() * 1f / getKillSum();
            }
        }

        public void removeSkill(int killId) {
            int index=getSkillIndex(killId);
            clearSkill(index);
        }
    }

    public abstract class UnitData {
        public UnitData() {
        }
        public abstract int getUnitHpNow();
        public abstract int getUnitHpMax();
        public abstract int getUnitHpRate();
        public abstract float getUnitHpRateF();
        public abstract int getUnitType(); //1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇
        public abstract int getUnitArmor(int direct);

        public abstract boolean ifUnitHaveFeature(int i);

        public abstract boolean ifUnitTriggerFeature(int i);

        public abstract boolean ifUnitHaveSkill(int i);

        public abstract boolean ifUnitTriggerSkill(int i);

        public abstract int getUnitDamage(BuildData build,int targetHexagon);

        public abstract boolean ifInUnitRange(int i);

        public abstract int getUnitSkillEffect(int i);

        public abstract int getUnitFeatureEffect(int i);

        public abstract boolean isUnitGroup();
        public abstract int getDirect(int i);

        public abstract int getHexagonIndex();

        public abstract boolean potionIsSea();

        public abstract int getUnitId(int direct);

        public abstract LegionData getLegionData();

        public abstract int getLegionIndex();

        public abstract BuildData getBuildData();

        public abstract int getGeneralIndex();
        public abstract GeneralData getGeneralData();

        public abstract Fb2Map.MapHexagon getHexagonData();
        public abstract boolean isRound();
        public abstract int getWeatherId();
        public abstract void drawSkill(int i);
        public abstract boolean ifUnitGroupIsFormation(int direct,boolean ifChick);
        public abstract int getUnitType(int targetHexagon);
        public abstract int getBorderAttackCrit();
        public abstract int getRangeAttackCrit();
        public abstract int getUnitRank();
        public abstract  void setUnitMoraleChange(int i);

        public abstract  void setUnitMorale(int i);
        public abstract   void  drawMorale(int v,float time);

        public abstract   String getFeature();
        public abstract   int getTransportType();
        public abstract   void drawFeature(int i);
        public abstract  boolean isPlayer();
        public abstract  boolean isPlayerAlly();
        public abstract  int getMaxRange();
        public abstract  int getUnitMorale();
        public abstract  boolean inCity();
        public abstract  int getDistance(int hexagon);
        public abstract  int getIfMove();
        public abstract  int getTerrainId();
        public abstract  void setUnitHpNow(int i);
        public abstract  void addUnitRound(int i);
        public abstract  int getAroundUnitCount(int i);
        public abstract  void setLegionIndex(int i);
        public abstract  void randomReduceSkillLv(int i);
        public abstract  void updUnitModelDirect();
        public abstract  int getUnitLife();
        public abstract  int getArmor(int direct);
        public abstract  MainGame getGame();
        public   int getMapW(){
            return masterData.getWidth();
        }
        public abstract  int getUnitDirection();
        public abstract int getWeaponValue(int direct,int targetType);

        public int getGameMode() {
            return masterData.getPlayerMode();
        }
        //0 weaLv 1 ackLv 2 spyLv 3 supLv 4 defLv 5 engLv 6 actLv
        public abstract int getUnitAbility(int index);

        public boolean inCapital() {
            LegionData l=getLegionData();
            Fb2Map.MapHexagon h=getHexagonData();
            if(l!=null&&h!=null&&l.capitalId==h.getRegionId()){
                return true;
            }
            return false;
        }

        public abstract int getUnitCount();

        public abstract int getDefAirLv();


        //1~0.5
        //1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇
        public float getAttackRateByRange(int targetHexagon){
            int unitType=getUnitType();
            if(unitType!=5&&unitType!=7){
                int distance=getDistance(targetHexagon);
                int range=getMaxRange();
                if(distance<=1||range<=1||distance>range){
                    return 1f;
                }else{
                    return ComUtil.limitFValue((100-(50/(distance-1)*(range-1)))*0.01f,0.5f,1f);
                }
            }
            return 1f;
        }

        public abstract int getKillSum();
        public abstract int getExp();

        public LegionData getPlayerLegionData() {
            return Fb2Smap.this.getPlayerLegionData();
        }

        public XmlReader.Element getArmyE(int tDirect) {
            return  game.gameConfig.getDEF_ARMY().getElementById(getUnitId(tDirect));
        }

        public abstract boolean inScreen();

        public abstract int getArrowDirect();

        public int getRoundState() {
            return roundState;
        }

        public abstract boolean isEmptyBuild();

        public abstract int getDirectByBorderId(int hexagonIndex);
    }

    //兵种数据
    public class ArmyData extends UnitData {

        public MainGame getGame(){
            return game;
        }

        public ArmyActor armyActor;

        public boolean isPlayer() {
            if (legionIndex == masterData.playerLegionIndex) {
                return true;
            } else {
                return false;
            }
        }
        //单位是否是横向的前排
        public boolean ifCrossFront(int index){//是否是前排
            if(isUnitGroup()&&getUnitGroup()>1&&!potionIsSea()){
                switch (index){
                    case 0:return false;
                    case 1:
                        if(getUnitId(index)>0&&getArmyDirection()==0){
                            return true;
                        }
                        break;
                    case 2:
                        if(getUnitId(index)>0&&getArmyDirection()==0){
                            return true;
                        }
                        break;
                    case 3:
                        if(getUnitId(index)>0&&getArmyDirection()==1){
                            return true;
                        }
                        break;
                    case 4:
                        if(getUnitId(index)>0&&getArmyDirection()==1){
                            return true;
                        }
                        break;
                    case 5:
                        if(getUnitId(index)>0&&getArmyDirection()==0){
                            return true;
                        }
                        break;
                    case 6:
                        if(getUnitId(index)>0&&getArmyDirection()==1){
                            return true;
                        }
                        break;
                }

            }
            return false;
        }


        //0全部 1盟友 2敌人
        public int getAroundUnitCountIA1(int type) {
            return Fb2Smap.this.getAroundUnitCountIA1(this, type);
        }

        public int getUnitTechLv(int index) {
            return getArmyLvByArmyType(getUnitGroupArmyId(index),getUnitGroupArmyType(index), legionIndex);
        }

        public int getUnitGradeLv(int index) {
            return getArmyGradeLvByArmyType(getUnitGroupArmyId(index),getUnitGroupArmyType(index), legionIndex);
        }

        //获得兵种回血量  有4%*n的几率回血翻倍
        public int getArmyReplyHp() {
            int regionLegion=getLegionIndexByRegion(getRegionId());
            if(regionLegion>0){
                int fd=getForeignDegree(regionLegion,getLegionIndex());
                if(fd==-1){
                    return 0;
                }
            }
            int hpReplayRate=0;
            int hp = 0;
            Fb2Map.MapHexagon hexagon=getHexagonData();
            if(hexagon==null){
                return hp;
            }

            int replayRate=getWeatherXmlE().getInt("replyRate",100);
            if(ifHaveSpirit(23)){
                replayRate=replayRate+getSpiritValue(23);
            }
            int weatherId=getWeatherId();
            if(weatherId==3||weatherId==7){
                replayRate=replayRate+getLegionData().getLegionFeatureEffect(83);
            }else if(weatherId==5||weatherId==6){
                replayRate=replayRate+getLegionData().getLegionFeatureEffect(84);
            }else if(weatherId==2||weatherId==4){
                replayRate=replayRate+getLegionData().getLegionFeatureEffect(85);
            }
            if(ifHaveFeature(26)&&replayRate<100){
                replayRate=100;
            }
            if(getIfAttack()==0){
                replayRate+=getUnitGroup1Lv()*2;
            }
            if(getIfMove()==0){
                replayRate+=getArmyRank()*2;
            }
            //因为单位的物资功能合并到士气中,所以对其效果进行补偿
            //可以额外恢复 士气值的1/3的hp 和1/2的士气
            BuildData build = getBuildDataByRegion(hexagon.getRegionId());
            if(build==null){
                return hp;
            }


            if(roundState==2||roundState==0){
                if(isPlayer()){
                    if(masterData.ifChief==1&&chiefData!=null){
                        hpReplayRate+=chiefData.varUnitRestoreEfficiencyChange;
                    }
                }else{
                    if(masterData.ifChief==1&&chiefData!=null){
                        hpReplayRate+=build.getCityLvNow()+1;
                    }
                }
            }
            FacilityData f=getFacilityDataByHexagon(getHexagonIndex());

            if(getHexagonData().getBlockType()==1&&f==null){
                return hp;
            }
            if((getArmyType()==4||getArmyType()==8)&&f==null){
                return hp;
            }
            if (ifAllyByLi(build.getLegionIndex(), getLegionIndex())&&build.getCityStability()>30) {
                if(hexagon.getOtherTile()==1){
                    hpReplayRate+=build.getTransportLvNow();
                }
                hp += build.getBuildReplyHp();
                if(!isUnitGroup()){
                    hp+=armyHpMax* (game.resGameConfig.unityReplyHpRatio*(getUnitWealv3()+1));
                }else{
                    hp+=armyHpMax* (game.resGameConfig.unityReplyHpRatio);
                }
                if(ifHaveFeature(24)){
                    replayRate+=getFeatureEffect(24);
                }
                if(build.getBuildWonder()!=0){
                    XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(build.getBuildWonder());
                    if(xE!=null){
                        int function=xE.getInt("fucntion",0);
                        int effect=xE.getInt("effect",0);
                        int value=xE.getInt("value",0);
                        if(function==5&&effect==2){
                            hpReplayRate=value;
                        }
                    }
                }
            }

            hp=hp*(replayRate+hpReplayRate)/100;
            //goods=goods*replayRate/100;

            if(build.getCityHpMax()==build.getCityHpNow()&&build.getCityHpMax()>0){
                hp=hp*2;
                if(ifHaveSkill(100)){
                    hp=hp*(100+getSkillEffect(100))/100;
                    drawSkill(100);
                }
            }
            if(ifHaveSkill(98)){
                hp=hp*(100+getSkillEffect(98))/100;
                drawSkill(98);
            }
            if(build.getLegionIndex()==getLegionIndex()&&ifHaveSkill(88)){
                hp=hp*(100+getSkillEffect(88))/100;
            }
            if(hp>getArmyHpMax()/2){
                hp=getArmyHpMax()/2;
            }
            return hp;
        }

        public int getArmyReplyMorale(){
            int moraleReplayRate=0;
            Fb2Map.MapHexagon hexagon=getHexagonData();
            int morale=0;
            if(hexagon==null||getArmyMorale()>game.resGameConfig.resetUnitMoraleMax){
                return morale;
            }

            // army.addArmyRound(1);
            int replayRate=getWeatherXmlE().getInt("replyRate",100);
            int weatherId=getWeatherId();
            if(weatherId==3||weatherId==7){
                replayRate=replayRate+getLegionData().getLegionFeatureEffect(83);
            }else if(weatherId==5||weatherId==6){
                replayRate=replayRate+getLegionData().getLegionFeatureEffect(84);
            }else if(weatherId==2||weatherId==4){
                replayRate=replayRate+getLegionData().getLegionFeatureEffect(85);
            }
            if(ifHaveFeature(26)&&replayRate<100){
                replayRate=100;
            }
            if(getIfAttack()==0){
                replayRate+=getUnitGroup1Lv()*2;
            }
            if(getIfMove()==0){
                replayRate+=getArmyRank()*2;
            }
            //因为单位的物资功能合并到士气中,所以对其效果进行补偿
            //可以额外恢复 士气值的1/3的hp 和1/2的士气
            BuildData build = getBuildDataByRegion(hexagon.getRegionId());
            if(build==null){
                return morale;
            }


            if(roundState==2||roundState==0){
                if(isPlayer()){
                    if(masterData.ifChief==1&&chiefData!=null){
                        moraleReplayRate+=chiefData.varUnitRestoreEfficiencyChange;
                    }
                }else{
                    if(masterData.ifChief==1&&chiefData!=null){
                        moraleReplayRate+=build.getCityStability()/10+1;
                    }
                }
            }
            FacilityData f=getFacilityDataByHexagon(getHexagonIndex());

            if(hexagon.getBlockType()==1&&f==null){
                return morale;
            }
            if((getArmyType()==4||getArmyType()==8)&&f==null){
                return morale;
            }
            if (ifAllyByLi(build.getLegionIndex(), getLegionIndex())&&build.getCityStability()>30) {
                if(hexagon.getOtherTile()==1){
                    moraleReplayRate+=build.getTransportLvNow();
                }
                morale=build.getBuildReplyMorale();
                if(ifHaveFeature(24)){
                    replayRate+=getFeatureEffect(24);
                }
                if(build.getBuildWonder()!=0){
                    XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(build.getBuildWonder());
                    if(xE!=null){
                        int function=xE.getInt("fucntion",0);
                        int effect=xE.getInt("effect",0);
                        int value=xE.getInt("value",0);
                        if(function==5&&effect==1){
                            moraleReplayRate+=value;
                        }
                    }
                }
            }

            morale=morale*(replayRate+moraleReplayRate)/100;
            //goods=goods*replayRate/100;

            if(build.getCityHpMax()==build.getCityHpNow()&&build.getCityHpMax()>0){
                morale=morale*2;
            }


        /*if(goods>0){
            army.addArmyGoods(goods);
        }*/


            int m=0;   //士气只会在小于标准士气的时候提高
            if(getArmyMorale()< game.resGameConfig.resetUnitMoraleMax){//如果士气低于标准士气,则回复一下
                if(morale>0&&ComUtil.ifGet(game.resGameConfig.resetUnitMoraleChance +getArmyRank()* game.resGameConfig.addRestoreMoraleChanceForRankLv)){
                    m=(ComUtil.getRandom(1, game.resGameConfig.extraReplyMoraleRatio*getArmyRank())+morale/2);
                    if((getArmyMorale()+m)>game.resGameConfig.unitMoraleChangeValueMax){
                        m=game.resGameConfig.unitMoraleChangeValueMax-getArmyMorale();
                    }
                }else {
                    m=(ComUtil.getRandom( game.resGameConfig.unitMoraleChangeValueMax/2, game.resGameConfig.unitMoraleChangeValueMax)+morale/2);
                }
            }else if(getArmyMorale()>game.resGameConfig.unitMoraleMaxLimit){
                m=(-ComUtil.getRandom( game.resGameConfig.unitMoraleChangeValueMax/2, game.resGameConfig.unitMoraleChangeValueMax));
            }
            return m;
        }


        public boolean ifNeedCreateActor() {
            if (armyActor != null) {
                return false;
            }
            if(isEditMode(true)){
                return true;
            }
            if (masterData.getPlayerMode() == 1) {
                if (ifAllyByLi(legionIndex, masterData.playerLegionIndex) || ifAllyPlayerByRegion(hexagonIndex)) {
                    return true;
                }
                BuildData b = getBuildData();
                if (b.isPlayerAroundRegion()) {
                    return true;
                }
            } else {
                if (ifAllyByLi(legionIndex, masterData.playerLegionIndex) || ifAllyPlayerByRegion(hexagonIndex)) {
                    return true;
                }
                if (getHexagonData().getIfFog() == 1) {
                    return true;
                }
            }
            return false;
        }

        public boolean createActor() {
            if (game.sMapScreen != null && armyActor == null) {
                game.sMapScreen.smapGameStage.createArmyActor(this.getHexagonIndex(), unitArmyId0);
                Fb2Map.MapHexagon h = getHexagonData();
                if (h != null) {
                    h.setIfFog(1);
                }
                game.sMapScreen.hidUnitBackButton();
            }
            if (masterData.getPlayerMode() == 2) {
                getBuildData().resetLegionUnitPotion();
            }
            return armyActor!=null;
        }

        public void removeActor() {
            if (game.sMapScreen != null && armyActor != null) {
                game.sMapScreen.smapGameStage.armyActorClear(armyActor);
                armyActor = null;
            }
        }



        //受到攻击
        //damagehexagon 受伤来源
        public boolean injured(int damage,int damagehexagon) {
            if (triggerSkill(47)) {
                damage = damage * (100 - getSkillEffect(47)) / 100;
                drawSkill(47);
            }
            armyHpNow -= damage;
            if (armyHpNow <= 0) {
                return true;
            }
            if(getUnitGroup()>1){
                if(isUnitGroup()){
                    int direct=Fb2Smap.this.getDirect(hexagonIndex,damagehexagon);
                    if(ifUnitGroupIsFormation(direct,false)){
                        reduceUnitGroupGroupLvForDirect(direct);
                    }else{
                        reduceUnitGroupGroupLvForRandom();
                    }
                    initVirAttribute();
                    if(armyActor!=null){
                        armyActor.updArmyModel();
                        armyActor.update();
                    }
                }else{
                    int nMax= (int) ((armyRank * game.resGameConfig.addHpEachRank + 1) + ComUtil.limitFValue(1 + (unitGroup0Lv - 2) * 0.5f, 1, 6) * getArmyLife());
                    if(nMax>armyHpNow){
                        unitGroup0Lv--;
                        this.setArmyHpMax(nMax);
                    }
                }
            }

            return false;
        }
        private void reduceUnitGroupGroupLvForDirect(int formationDirect){
            int hpMax=armyHpMax-armyHpNow;
            int hp=9999,potion=-1;
            int[] armyFormation=DefDAO.getArmyDirectByDirect(formationDirect);
            for(int i=0;i<armyFormation.length;i++){
                int potionIndex=armyFormation[i];
                if(potionIndex==0&&getUnitGroupGroupLv(potionIndex)<2){
                    continue;
                }
                int armyId=getUnitGroupArmyId(potionIndex);
                if(armyId==0){continue; }
                XmlReader.Element xml=game.gameConfig.getDEF_ARMY().getElementById(armyId);
                if(xml!=null){
                    int strength=xml.getInt("strength",0);
                    if(strength<hp||hp==9999){
                        hp=strength;
                        potion=potionIndex;
                    }
                }
            }
            if(hp!=9999&&hp<hpMax&&potion>=0){
                updUnitGroupGroupLv(potion,-1,false);
                if(getUnitGroupGroupLv(potion)==0){
                    setUnitGroupWealLv(potion,0,true);
                    setUnitGroupArmyId(potion,0);
                    resetXmlE();
                }
                resetArmyHpMax();
            }
        }


        //随机削弱单位的编队等级
        private void reduceUnitGroupGroupLvForRandom() {
            int hpMax=armyHpMax-armyHpNow;
            int hp=9999,potion=-1;
            for(int i=0;i<=6;i++){
                if(i==0&&getUnitGroupGroupLv(i)<2){
                    continue;
                }
                int armyId=getUnitGroupArmyId(i);
                if(armyId==0){continue; }
                XmlReader.Element xml=game.gameConfig.getDEF_ARMY().getElementById(armyId);
                if(xml!=null){
                    int strength=xml.getInt("strength",0);
                    if(strength<hp||hp==9999){
                        hp=strength;
                        potion=i;
                    }
                }
            }
            if(hp!=9999&&hp<hpMax&&potion>=0){
                updUnitGroupGroupLv(potion,-1,false);
                if(getUnitGroupGroupLv(potion)==0){
                    setUnitGroupWealLv(potion,0,true);
                    setUnitGroupArmyId(potion,0);
                    resetXmlE();
                }
                resetArmyHpMax();
            }

        }

        private int armyIndex;//兵种编号

        public int getArmyIndex() {
            return armyIndex;
        }

        public void setArmyIndex(int armyIndex) {
            this.armyIndex = armyIndex;
        }

        private int regionId;//区域坐标  仅保存时更新,实际中不用

        public int getRegionId() {
            if(ifGridIsPass(regionId)&&buildRDatas.containsKey(regionId)){
                return regionId;
            }
            regionId=getHexagonData().getRegionId();
            return regionId;
        }

        public void setRegionId(int regionId) {
            this.regionId = regionId;
        }

        private int legionIndex;//军团归属
        @Override
        public int getLegionIndex() {
            return legionIndex;
        }
        @Override
        public LegionData getLegionData() {
            if(legionIndex>=legionDatas.size){
                setLegionIndex(0);
            }
            return legionDatas.get(legionIndex);
        }

        public void setLegionIndexValue(int legionIndex) {
            this.legionIndex = legionIndex;
        }
        public void setLegionIndex(int legionIndex) {
            this.legionIndex = legionIndex;
            if(getAirData1()!=null){
                getAirData1().setLegionIndex(legionIndex);
            }
            if(getAirData2()!=null){
                getAirData2().setLegionIndex(legionIndex);
            }
            if(getAirData3()!=null){
                getAirData3().setLegionIndex(legionIndex);
            }
            if(getAirData4()!=null){
                getAirData4().setLegionIndex(legionIndex);
            }
            NulcleData  n=getNulData();
            if(n!=null){
                n.setLegionIndex(legionIndex);
            }
            if(armyActor!=null){
                armyActor.updHpColor();
                if((roundState==0||(roundState==4&&isPlayer()))){
                    armyActor.update();
                }
            }
            if(getArmyHpNow()>0){
                BuildData b = getBuildData();
                if (b!=null&&b.getLegionIndex()!=legionIndex&&b.getRegionId() == hexagonIndex && !b.isSeaArea()) {//如果b的位置与其相等,则也一同叛变
                    b.setLegionIndex(legionIndex);
                }
            }
        }

        public NulcleData getNulData(){
            return Fb2Smap.this.getNulData(getNucleIndex());
        }

        private int unitArmyId0;//兵种代码

        public int getUnitArmyId0() {
            return unitArmyId0;
        }

        public void setUnitArmyId0(int unitArmyId0) {
            this.unitArmyId0 = unitArmyId0;
            if(armyActor!=null){
                armyActor. updArmyModel();
            }
        }

        private int armyType;//兵种类型  1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇

        public int getArmyType() {
            return armyType;
        }

        public void setArmyType(int armyType) {
            this.armyType = armyType;
        }

        private int unitGroup0Lv;//兵种型号

        public int getUnitGroup0Lv() {
            return unitGroup0Lv;
        }

        public void setUnitGroup0Lv(int unitGroup0Lv) {
            this.unitGroup0Lv = unitGroup0Lv;
        }

        private int armyKills;//兵种杀敌数

        public int getArmyKills() {
            return armyKills;
        }

        public void setArmyKills(int armyKills) {
            this.armyKills = armyKills;
        }

        private int unitArmyId1;//单个兵力上限

        public int getUnitArmyId1() {
            return unitArmyId1;
        }



        public int getArmyLife() {
            if(armyXmlE0 ==null){
                armyXmlE0 = game.gameConfig.getDEF_ARMY().getElementById(getUnitArmyId0());
            }
            return  armyXmlE0.getInt("strength",0);
        }

        private int unitWealv1;

        public int getUnitWealv1() {
            return unitWealv1;
        }

        public boolean updArmyGroup() {
            if(isUnitGroup()){
                return randomUpdUnitGroupLv();
            }else{
                if (unitGroup0Lv < getUnitGradeLv(0)) {
                    unitGroup0Lv += 1;
                    if (unitGroup0Lv == armyRank) {
                        armyUpdForGeneral(this);
                    }else{
                        if(armyActor!=null){
                            armyActor.update();
                        }
                    }
                    return true;
                }
                return false;
            }
        }

        ;

        //花费2h查找错误,错误原因为先读取group,后读取max
        public void setUnitWealv1(int unitWealv1) {
            this.unitWealv1 = ComUtil.limitValue(unitWealv1, 0, 9);
        }

        public void updForGeneral() {
            armyUpdForGeneral(this);
        }


        private int armyHpMax;//兵力上限

        public int getArmyHpMax() {
            return armyHpMax;
        }

        public float getHpRateF() {
            return armyHpNow * 1f / armyHpMax;
        }

        public float getExpRateF() {
            GeneralData g=getGeneralData();
            if(g!=null&&getArmyRank()>=g.getRank()){
                return 1f;
            }else{
                return getArmyKills() * 1f / getKillSum();
            }
        }

        @Override
        public int getUnitHpNow() {
            return getArmyHpNow();
        }

        @Override
        public int getUnitHpMax() {
            return getArmyHpMax();
        }

        @Override
        public int getUnitHpRate() {
            return getHpRate();
        }

        @Override
        public float getUnitHpRateF() {
            return getHpRateF();
        }

        @Override
        public int getUnitType() {
            return getArmyType();
        }

        @Override
        public int getUnitArmor(int direct) {
            if(!isUnitGroup()||getGameMode()==2){
                return getArmorByDirect();
            }
            return getArmyFormationArmor(direct);
        }

        @Override
        public boolean ifUnitHaveFeature(int i) {
            return ifHaveFeature(i);
        }

        @Override
        public boolean ifUnitTriggerFeature(int i) {
            return triggerFeature(i);
        }

        @Override
        public boolean ifUnitHaveSkill(int i) {
            return ifHaveSkill(i);
        }

        @Override
        public boolean ifUnitTriggerSkill(int i) {
            return triggerSkill(i);
        }

        @Override
        public int getUnitDamage(BuildData  build,int targetHexagon) {
            int damage=0;
            /*if(masterData.getPlayerMode()==2){//军团
                damage= (int) (game.gameMethod.getUnitDamage(this.getLegionData(),build,getUnitArmyId0(),0)*(100+this.getWealMaxLv()*game.resGameConfig.addDamageForAckLv)/100        * this.getGroupRate()   +this.getUnitAbility()* game.resGameConfig.addAtkEachRank);
            }else if(potionIsSea()&&getTransportType()>0){//非组合非军团
                damage= (int) (game.gameMethod.getUnitDamage(this.getLegionData(),build,getTransportType()+1400,0)   * this.getGroupRate()  +this.getUnitAbility()* game.resGameConfig.addAtkEachRank);
            }else if(isUnitGroup()){//非组合非军团
                damage= (int) (game.gameMethod.getUnitGroupUnitDamage(this.getLegionData(),this,0,targetHexagon)   * this.getGroupRate()  +this.getUnitAbility()* game.resGameConfig.addAtkEachRank);
            }else{
                damage= (int) (game.gameMethod.getUnitDamage(this.getLegionData(),build,getUnitArmyId0(),0)*(100+this.getUnitGroupArmyId(1,false)*game.resGameConfig.addDamageForAckLv)/100        * this.getGroupRate()   +this.getUnitAbility()* game.resGameConfig.addAtkEachRank);
            }*/

            if(masterData.getPlayerMode()==2){//军团
                damage= (int) (game.gameMethod.getUnitDamageByMorale(this.getLegionData(),build,getUnitArmyId0(),getArmyMorale())*(100+this.getWealMaxLv()*game.resGameConfig.addDamageForAckLv)/100        * this.getGroupRate()   +this.getUnitAbility()* game.resGameConfig.addAtkEachRank);
            }else if(potionIsSea()&&getTransportType()>0){//非组合非军团
                damage= (int) (game.gameMethod.getUnitDamageByMorale(this.getLegionData(),build,getTransportType()+1400,getArmyMorale())   * this.getGroupRate()  +this.getUnitAbility()* game.resGameConfig.addAtkEachRank);
            }else if(isUnitGroup()){//非组合非军团
                damage= (int) (game.gameMethod.getUnitGroupUnitDamageByMorale(this.getLegionData(),this,getArmyMorale(),targetHexagon)   * this.getGroupRate()  +this.getUnitAbility()* game.resGameConfig.addAtkEachRank);
            }else{
                damage= (int) (game.gameMethod.getUnitDamageByMorale(this.getLegionData(),build,getUnitArmyId0(),getArmyMorale())*(100+this.getUnitGroupArmyId(1,false)*game.resGameConfig.addDamageForAckLv)/100        * this.getGroupRate()   +this.getUnitAbility()* game.resGameConfig.addAtkEachRank);
            }
            return damage;
        }

        @Override
        public boolean ifInUnitRange(int hexagon) {
            return ifInArmyRange(hexagon);
        }

        @Override
        public int getUnitSkillEffect(int i) {
            return getSkillEffect(i);
        }

        @Override
        public int getUnitFeatureEffect(int i) {
            return getFeatureEffect(i);
        }


        public int getHpRate() {
            return armyHpNow * 100 / armyHpMax;
        }

        public void setArmyHpMax(int armyHpMax) {
            this.armyHpMax = ComUtil.limitValue(armyHpMax, 1, 9999);
        }

        private int armyHpNow;//当期兵力

        public int getArmyHpNow() {
            return armyHpNow;
        }

        public void setArmyHpNow(int armyHpNow) {
            if (armyHpMax == 0) {
                this.armyHpNow = armyHpNow;
            } else {
                this.armyHpNow = ComUtil.limitValue(armyHpNow, 0, armyHpMax);
            }
        }

        public void setArmyHpNowByRate(int rate) {
            setArmyHpNow((int) (armyHpNow * rate * 1f / 100));
        }

        public void setArmyHpNowByRate(float rate) {
            setArmyHpNow((int) (armyHpMax * rate));
        }

        public void addArmyHpNow(int armyHpNow) {
            this.armyHpNow = this.armyHpNow + armyHpNow;
            if (this.armyHpNow > this.getArmyHpMax()) {
                this.armyHpNow = this.armyHpMax;
            }
        }

        private int unitGroup1Lv;//攻击等级

        public int getUnitGroup1Lv() {
            return unitGroup1Lv;
        }

        public void setUnitGroup1Lv(int unitGroup1Lv) {
            this.unitGroup1Lv = unitGroup1Lv;
        }

        private int unitGroup2Lv;//防御等级

        public int getUnitGroup2Lv() {
            return unitGroup2Lv;
        }

        public void setUnitGroup2Lv(int unitGroup2Lv) {
            this.unitGroup2Lv = unitGroup2Lv;
        }

        private int unitGroup3Lv;//后勤等级

        public int getUnitGroup3Lv() {
            return unitGroup3Lv;
        }

        public void setUnitGroup3Lv(int unitGroup3Lv) {
            this.unitGroup3Lv = unitGroup3Lv;
        }

        private int unitGroup4Lv;//支援等级

        public int getUnitGroup4Lv() {
            return unitGroup4Lv;
        }

        public void setUnitGroup4Lv(int unitGroup4Lv) {
            this.unitGroup4Lv = unitGroup4Lv;
        }

        private int unitGroup5Lv;//行动等级

        public int getUnitGroup5Lv() {
            return unitGroup5Lv;
        }

        public void setUnitGroup5Lv(int unitGroup5Lv) {
            this.unitGroup5Lv = unitGroup5Lv;
        }

        private int unitGroup6Lv;//武器等级

        public int getUnitGroup6Lv() {
            return unitGroup6Lv;
        }

        public void setUnitGroup6Lv(int unitGroup6Lv) {
            this.unitGroup6Lv = unitGroup6Lv;
        }

        public boolean updWeaLv() {
            // if(weaLv== game.resGameConfig.unitAbilityLvMax){return;}
            if (getUnitWealv0Value() < getUnitTechLv(0)) {
                this.unitWealv0 += 1;
                checkTask(true, legionIndex, 0, 1);
                return true;
            }
            return false;
        }

        public boolean canUpdWeaLv() {
            if (getUnitWealv0Value()+1 > getUnitTechLv(0)) {
                return false;
            }
            return true;
        }
        public boolean canUpdGroupLv() {
            if ( getUnitGroup0Lv() + 1 > getUnitGradeLv(0)) {
                return false;
            }
            return true;
        }
        public boolean haveCanUpdUnitWealv() {
            if(isUnitGroup()){
                for(int i=0;i<=6;i++){
                    if( canUpdUnitGroupWealLv(i)){
                        return true;
                    }
                }
                return false;
            }else{
                return canUpdUnitGroupWealLv(0);
            }
        }
        public boolean haveCanUpdUnitGrouplv() {
            if(isUnitGroup()){
                for(int i=0;i<=6;i++){
                    if( canUpdUnitGroupGroupLv(i)){
                        return true;
                    }
                }
                return false;
            }else{
                return canUpdUnitGroupGroupLv(0);
            }
        }

        public int getPotionForCanUpdUnitWealv() {
            if(isUnitGroup()){
                for(int i=0;i<=6;i++){
                    if( canUpdUnitGroupWealLv(i)){
                        return i;
                    }
                }
                return -1;
            }else{
               if(canUpdUnitGroupWealLv(0)){
                   return 0;
               }
               return -1;
            }
        }
        public int getPotionForCanUpdUnitGrouplv() {
            if(isUnitGroup()){
                for(int i=0;i<=6;i++){
                    if( canUpdUnitGroupGroupLv(i)){
                        return i;
                    }
                }
                return -1;
            }else{
                if( canUpdUnitGroupGroupLv(0)){
                    return 0;
                }
                return -1;
            }
        }

        public int getPotionForCanUpdUnitWealv(int armyId) {
            if(isUnitGroup()){
                for(int i=0;i<=6;i++){
                    int ta=getUnitGroupArmyId(i);
                    if( canUpdUnitGroupWealLv(i)&&armyId==ta){
                        return i;
                    }
                }
                return -1;
            }else{
                if(canUpdUnitGroupWealLv(0)&&getUnitArmyId0()==armyId){
                    return 0;
                }
                return -1;
            }
        }
        public int getPotionForCanUpdUnitGrouplv(int armyId) {
            if(isUnitGroup()){
                for(int i=0;i<=6;i++){
                    int ta=getUnitGroupArmyId(i);
                    if( canUpdUnitGroupGroupLv(i)&&armyId==ta){
                        return i;
                    }
                }
                return -1;
            }else{
                if( canUpdUnitGroupGroupLv(0)&&getUnitArmyId0()==armyId){
                    return 0;
                }
                return -1;
            }
        }
        private int skillId1;//装备的铠甲id

        public int getSkillId1() {
            return skillId1;
        }

        public void setSkillId1(int skillId1) {
            this.skillId1 = skillId1;
        }

        private int skillId2;//装备的引擎id

        public int getSkillId2() {
            return skillId2;
        }

        public void setSkillId2(int skillId2) {
            this.skillId2 = skillId2;
        }

        private int skillId3;//装备的补给id

        public int getSkillId3() {
            return skillId3;
        }

        public void setSkillId3(int skillId3) {
            this.skillId3 = skillId3;
        }

        private int skillId4;//装备的宝物id

        public int getSkillId4() {
            return skillId4;
        }

        public void setSkillId4(int skillId4) {
            this.skillId4 = skillId4;
        }

        private int generalIndex;//将军id
        @Override
        public int getGeneralIndex() {
            return generalIndex;
        }

        public String getGeneralName() {
            if (generalIndex == 0) {
                if (armyRank < 5) {
                    return game.gameMethod.getStrValueT("generalName_soldier");
                } else if (armyType == 4 || armyType == 8) {
                    return game.gameMethod.getStrValueT("generalName_captain");
                } else {
                    return game.gameMethod.getStrValueT("generalName_officer");
                }
            } else {
                return getGeneralData().getGeneralName();
            }
        }

        public void setGeneralIndex(int generalIndex) {
            this.generalIndex = generalIndex;
        }

        private int armyRank;//兵种军衔

        public int getArmyRank() {
            return armyRank;
        }

        public int getUnitAbility() {
            GeneralData g=getGeneralData();// DefDAO.ifArmyTypeEqualGeneralType(getArmyType(),g.getType())
            if(g!=null){
                if(potionIsSea()&&getTransportType()>0&&g.getType()==4){
                    return (armyRank+g.getAllAbility())*2;
                }else if(armyType==0||g.getType()==0||g.getState()==1){
                    return armyRank+g.getAllAbility();
                }else if(DefDAO.ifArmyTypeEqualGeneralType(getArmyType(),g.getType())){
                    return (armyRank+g.getAllAbility())*2;
                }
                return (armyRank+g.getAllAbility())/2;
            }
            return armyRank;
        }
        public void setArmyRank(int armyRank) {
            this.armyRank = ComUtil.limitValue(armyRank, 0, game.resGameConfig.generalRankMax);
        }

        private int armyMorale;//兵种士气 默认50


        public int getArmyMorale() {
            return ComUtil.limitValue(armyMorale, 0, 100);
        }

        public void setArmyMoraleValue(int armyMorale) {
            this.armyMorale = ComUtil.limitValue(armyMorale, 0, 100);
        }

        public void setArmyMorale(int armyMorale) {
            this.armyMorale = ComUtil.limitValue(armyMorale, getMinMorale(getRegionId(), getLegionIndex()), getMaxMorale(getLegionIndex()));
            if (ifHaveSkill(104) && this.armyMorale < game.resGameConfig.unitMoraleMinLimit + 1) {
                this.armyMorale = game.resGameConfig.unitMoraleMinLimit + 1;
                drawSkill(104);
            }
            checkTask(this.armyMorale > 80, legionIndex, 15, 1);
            checkTask(this.armyMorale > 80, legionIndex, 31, 1);
            if (armyActor != null&&(roundState==0||roundState==4)) {
                armyActor.updateMorale();
            }
        }

        // v 正数上升 负数下降
        public void setArmyMoraleChange(int v) {
            if(getArmyMorale()+v>game.resGameConfig.unitMoraleMaxLimit&&ifMove==0&&ifAttack==0){
                int s=0;
            }
            if(v>0&&isPlayer()&&getChiefSpecialEffect(19)>=0){
                v++;
            }
            setArmyMorale(armyMorale + v);
        }

        public void setArmyMoraleChange(int v, int max) {
            if (armyMorale > max) {
                return;
            } else {
                /* if (roundState == 0 && v != 0&&armyActor!=null) {
                 *//*if (v > 0) {
                        effectStage.drawFace(getHexagonIndex(), 1);
                    } else {
                        effectStage.drawFace(getHexagonIndex(), 3);
                    }*//*
                    effectStage.drawMorale(getHexagonIndex(),v,0f);
                }*/
                if(v>0&&isPlayer()&&getChiefSpecialEffect(19)>=0){
                    v++;
                }
                if (armyMorale + v > max) {
                    setArmyMorale(max);
                } else {
                    setArmyMorale(armyMorale + v);
                }
            }
        }

        private int armyFormation;//阵型 0自由阵型 1固定阵型 2顺向阵型

        public int getArmyFormation() {
            return armyFormation;
        }

        public void setArmyFormation(int armyFormation) {
            this.armyFormation = ComUtil.limitValue(armyFormation, 0, 30);
        }

        private int hinge;//红圈

        public int getHinge() {
            return hinge;
        }

        public void setHinge(int hinge) {
            this.hinge = hinge;
        }

        private int armyDirectionValue;//兵种方向 0左 1右   1↖ 2↑ 3↗ 4↙ 5↓ 6↘

        public int getArmyDirectionValue() {
            return armyDirectionValue;
        }

        public int getArmyDirection() {//兵模朝向
            return armyDirectionValue>9?1:0;
        }
        //如果值大于10则右,否则左,个位数 1↖ 2↑ 3↗ 4↙ 5↓ 6↘
        public void setArmyDirectionValue(int armyDirection) {
            this.armyDirectionValue = armyDirection;
        }
        public int getArrowDirect(){//箭头朝向 0 1↖ 2↑ 3↗ 4↙ 5↓ 6↘
            if(!game.resGameConfig.ifUnitArrow){
                return 0;
            }
            if(getArmyType()==6||getGameMode()==2||standyRound>5){
                return 0;
            }
            if(armyDirectionValue>9){//兵模朝向右
                int rs= armyDirectionValue-10;
                if(rs==1||rs==4){
                    return 0;
                }
                return rs;
            }else{
                if(armyDirectionValue==3||armyDirectionValue==6){
                    return 0;
                }
                return armyDirectionValue;
            }
        }


        private int airforcePolicy;//空军策略

        public int getAirforcePolicy() {
            return airforcePolicy;
        }

        public void setAirforcePolicy(int airforcePolicy) {
            this.airforcePolicy = airforcePolicy;
        }

        private int armyRound;//冷却回合

        public int getArmyRound() {
            return armyRound;
        }

        public void setArmyRound(int armyRound) {
            if(armyRound>10){
                int s=0;
            }
            this.armyRound = ComUtil.limitValue(armyRound, 0, 100);
        }

        public void addArmyRound(int armyRound) {
            if(isEditMode(true)){
                return;
            }
            if(getHexagonIndex()==9899){
                int s=0;
            }
            setArmyRound(this.armyRound + armyRound);
        }


        private int unitWealv0;//是否需要部署

        public int getUnitWealv0() {
            return unitWealv0;
        }
        public int getUnitWealv0Value() {
            if(masterData.getPlayerMode()==2){
                return armyRank;
            }
            return unitWealv0;
        }

        public boolean getIfOnlySeaForTarget() {
            if (this.armyType == 8) {
                return true;
            }
            return false;
        }

        public boolean getIfSeaForMove() {
            if (this.armyType == 4 || this.armyType == 8) {
                return true;
            }
            return false;
        }

        public void setUnitWealv0(int unitWealv0) {
            this.unitWealv0 = unitWealv0;
        }

        private int transportType;//运输种类  0运输船 1护卫舰 2驱逐舰 3巡洋舰 4战列舰 5重型战列舰
        @Override
        public int getTransportType() {
            return transportType;
        }

        public void setTransportType(int transportType) {
            this.transportType = ComUtil.limitValue(transportType, 0, 5);
        }

        private int armyAi;//任务类型

        public int getArmyAi() {
            return armyAi;
        }

        public void setArmyAi(int armyAi) {
            this.armyAi = armyAi;
        }

        private int nucleIndex;//携带的超武标号

        public int getNucleIndex() {
            return nucleIndex;
        }

        public void setNucleIndex(int nucleIndex) {
            this.nucleIndex = nucleIndex;
        }

        private int targetRegion;//目标区域  箭头显示这个

        public int getTargetRegion() {
            return targetRegion;
        }

        public void setTargetRegion(int targetRegion) {
            this.targetRegion = targetRegion;
            if(((roundState==0||(roundState==4&&isPlayer()))||roundState==3)&&armyActor!=null&&armyActor.ifPlayerCommand){
                armyActor.resetTarget();
            }
        }

        private int skillLv1;//目标建筑  暂时废弃

        public int getSkillLv1() {
            return skillLv1;
        }

        public void setSkillLv1(int skillLv1) {
            this.skillLv1 = skillLv1;
        }

        private int skillLv2;//目标建筑  暂时废弃

        public int getSkillLv2() {
            return skillLv2;
        }

        public void setSkillLv2(int skillLv2) {
            this.skillLv2 = skillLv2;
        }

        private int standyRound;//休息回合

        public int getStandyRound() {
            return standyRound;
        }

        public void setStandyRound(int standyRound) {
            this.standyRound = standyRound;
        }

        private int skillLv3;//物资上限

        public int getSkillLv3() {
            return skillLv3;
        }

        public void setSkillLv3(int goodsMax) {
            this.skillLv3 = goodsMax;
        }

        private int skillLv4;//当前物资

        public int getSkillLv4() {
            return skillLv4;
        }

        public void setSkillLv4(int goodsNow) {
            this.skillLv4 = goodsNow;
        }

        private int ifMove;//装弹时间上限
        @Override
        public int getIfMove() {
            if(isEditMode(true)){
                return 0;
            }
            return ifMove;
        }

        @Override
        public void setUnitHpNow(int i) {
            setArmyHpNow(i);
        }

        @Override
        public void addUnitRound(int i) {
            addArmyRound(i);
        }

        @Override
        public int getAroundUnitCount(int i) {
            return getAroundUnitCountIA1(i);
        }


        public void setIfMove(int ifMove) {

            this.ifMove = ifMove;
        }

        private int ifAttack;//当前装弹剩余回合

        public int getIfAttack(){
            if(isEditMode(true)){
                return 0;
            }
            return ifAttack;
        }

        public void setIfAttack(int ifAttack) {
            this.ifAttack = ifAttack;
        }

        private int armyBuff1;//buff标记1

        public int getArmyBuff1() {
            return armyBuff1;
        }

        public void setArmyBuff1(int armyBuff1) {
            this.armyBuff1 = armyBuff1;
        }

        private int armyBuff2;//buff标记2

        public int getArmyBuff2() {
            return armyBuff2;
        }

        public void setArmyBuff2(int armyBuff2) {
            this.armyBuff2 = armyBuff2;
        }

        private int armyBuff3;//buff标记3

        public int getArmyBuff3() {
            return armyBuff3;
        }

        public void setArmyBuff3(int armyBuff3) {
            this.armyBuff3 = armyBuff3;
        }

        private int eventIndex;//关联事件

        public int getEventIndex() {
            return eventIndex;
        }

        public void setEventIndex(int eventIndex) {
            this.eventIndex = eventIndex;
        }

        private int gameValue;//存储为人口

        public int getGameValue() {
            return gameValue;
        }


        public void setGameValue(int gameValue) {
            this.gameValue = ComUtil.limitValue(gameValue, 0, 255);
        }

        private int hexagonIndex;//兵种坐标  仅保存时更新,实际中不用
        @Override
        public int getHexagonIndex() {
            return hexagonIndex;
        }
        @Override
        public Fb2Map.MapHexagon getHexagonData() {
            return hexagonDatas.get(hexagonIndex);
        }

        public void setHexagonIndexValue(int hexagonIndex) {
            this.hexagonIndex = hexagonIndex;
        }

        public void setHexagonIndex(int hexagonIndex) {
           /* Fb2Map.MapHexagon m =Fb2Smap.this.getHexagonData(hexagonIndex);
            if(m!=null&&(m.armyData!=null&&m.armyData.getArmyIndex()!=getArmyIndex()&&m.armyData.getArmyHpNow()>0)){
                int s=0;
            }*/
            this.hexagonIndex = hexagonIndex;
            this.regionId = Fb2Smap.this.getRegionId(hexagonIndex);
        }

        private int unitArmyId2;
        private int unitArmyId3;
        private int unitArmyId4;
        private int unitArmyId5;
        private int unitArmyId6;
        private int unitWealv2;
        private int unitWealv3;
        private int unitWealv4;
        private int unitWealv5;
        private int unitWealv6;
        public void setUnitArmyId1(int unitArmyId1) {
            if(unitArmyId1>0&&unitArmyId1<1000){
                int s=0;
            }
            this.unitArmyId1 = unitArmyId1;
        }
        public int getUnitArmyId2() {
            return unitArmyId2;
        }

        public void setUnitArmyId2(int unitArmyId2) {
            if(unitArmyId2>0&&unitArmyId2<1000){
                int s=0;
            }
            this.unitArmyId2 = unitArmyId2;
        }

        public int getUnitArmyId3() {
            return unitArmyId3;
        }

        public void setUnitArmyId3(int unitArmyId3) {
            if(unitArmyId3>0&&unitArmyId3<1000){
                int s=0;
            }
            this.unitArmyId3 = unitArmyId3;
        }

        public int getUnitArmyId4() {
            return unitArmyId4;
        }

        public void setUnitArmyId4(int unitArmyId4) {
            if(unitArmyId4>0&&unitArmyId4<1000){
                int s=0;
            }
            this.unitArmyId4 = unitArmyId4;
        }

        public int getUnitArmyId5() {
            return unitArmyId5;
        }

        public void setUnitArmyId5(int unitArmyId5) {
            if(unitArmyId5>0&&unitArmyId5<1000){
                int s=0;
            }
            this.unitArmyId5 = unitArmyId5;
        }

        public int getUnitArmyId6() {
            return unitArmyId6;
        }

        public void setUnitArmyId6(int unitArmyId6) {
            if(unitArmyId6>0&&unitArmyId6<1000){
                int s=0;
            }
            this.unitArmyId6 = unitArmyId6;
        }

        public int getUnitWealv2() {
            return unitWealv2;
        }

        public void setUnitWealv2(int unitWealv2) {
            this.unitWealv2 = unitWealv2;
        }

        public int getUnitWealv3() {
            return unitWealv3;
        }

        public void setUnitWealv3(int unitWealv3) {
            this.unitWealv3 = unitWealv3;
        }

        public int getUnitWealv4() {
            return unitWealv4;
        }

        public void setUnitWealv4(int unitWealv4) {
            this.unitWealv4 = unitWealv4;
        }

        public int getUnitWealv5() {
            return unitWealv5;
        }

        public void setUnitWealv5(int unitWealv5) {
            this.unitWealv5 = unitWealv5;
        }

        public int getUnitWealv6() {
            return unitWealv6;
        }

        public void setUnitWealv6(int unitWealv6) {
            this.unitWealv6 = unitWealv6;
        }
        @Override
        public boolean potionIsSea() {
            return ifSea(getHexagonIndex());
        }

        @Override
        public int getUnitId(int direct) {
            int armyId=getUnitArmyId0();
            //根据海陆计算伤害差,如果是非4,8的则伤害削减
            if(getUnitType()!=4&&getUnitType()!=8&&potionIsSea()){
                armyId=getTransportType()+1400;
            }else if(isUnitGroup()&&direct!=0){
                armyId=getUnitGroupFormationArmyId(direct);
            }
            return armyId;
        }


        public void initArmyData() {
            this.armyIndex = 0;
            this.regionId = -1;
            this.legionIndex = 0;
            this.unitArmyId0 = 0;
            this.armyType = 0;
            this.unitGroup0Lv = 1;
            this.armyKills = 0;
            this.unitArmyId1 = 0;
            this.unitWealv1 = 0;
            this.armyHpMax = 0;
            this.armyHpNow = 0;
            this.unitGroup1Lv = 0;
            this.unitGroup2Lv = 0;
            this.unitGroup3Lv = 0;
            this.unitGroup4Lv = 0;
            this.unitGroup5Lv = 0;
            this.unitGroup6Lv = 0;
            this.skillId1 = 0;
            this.skillId2 = 0;
            this.skillId3 = 0;
            this.skillId4 = 0;
            this.generalIndex = 0;
            this.armyRank = 0;
            this.armyMorale = 50;
            this.armyFormation = 0;
            this.hinge = 0;
            this.armyDirectionValue = 0;
            this.airforcePolicy = 0;
            this.armyRound = 0;
            this.unitWealv0 = 0;
            this.transportType = 0;
            this.armyAi = 0;
            this.nucleIndex = -1;
            this.targetRegion = -1;
            this.skillLv1 = 0;
            this.standyRound = 0;
            this.skillLv3 = 0;
            this.skillLv4 = 0;
            this.ifMove = 0;
            this.ifAttack = 0;
            this.armyBuff1 = -1;
            this.armyBuff2 = -1;
            this.armyBuff3 = -1;
            this.eventIndex = 0;
            this.gameValue = 0;
            this.hexagonIndex = 0;
        }

        public void initArmyData(XmlReader.Element xmlE) {
            this.armyIndex = 0;
            this.regionId = -1;
            this.legionIndex = 0;
            this.unitArmyId0 =  xmlE.getInt("id",0);
            this.armyType = xmlE.getInt("type",0);
            this.unitGroup0Lv = 1;
            this.armyKills = 0;
            this.unitArmyId1 = 0;
            this.unitWealv1 = 0;
            this.armyHpMax =  xmlE.getInt("strength",0);
            this.armyHpNow =  xmlE.getInt("strength",0);
            this.unitGroup1Lv = 0;
            this.unitGroup2Lv = 0;
            this.unitGroup3Lv = 0;
            this.unitGroup4Lv = 0;
            this.unitGroup5Lv = 0;
            this.unitGroup6Lv = 0;
            this.skillId1 = 0;
            this.skillId2 = 0;
            this.skillId3 = 0;
            this.skillId4 = 0;
            this.generalIndex = 0;
            this.armyRank = 0;
            this.armyMorale = 50;
            this.armyFormation = 0;
            this.hinge = 0;
            this.armyDirectionValue = 0;
            this.airforcePolicy = 0;
            this.armyRound = 0;
            this.unitWealv0 = 0;
            this.transportType = 0;
            this.armyAi = 0;
            this.nucleIndex = -1;
            this.targetRegion = -1;
            this.standyRound = 0;
            this.skillLv1 = 0;
            this.skillLv2 = 0;
            this.skillLv3 = 0;
            this.skillLv4 = 0;
            this.ifMove = 0;
            this.ifAttack = 0;
            this.armyBuff1 = -1;
            this.armyBuff2 = -1;
            this.armyBuff3 = -1;
            this.eventIndex = 0;
            this.gameValue = 0;
            this.hexagonIndex = 0;
        }

        public String getAllAttributes() {
            return " armyIndex:" + armyIndex
                    + " population:"+getPopulation()
                    + " regionId:" + regionId
                    + " buildPolicy:" + legionIndex
                    + " armyId:" + unitArmyId0
                    + " armyType:" + armyType
                    + " unitGroup0Lv:" + unitGroup0Lv
                    + " armyKills:" + armyKills
                    + " armyLife:" + getArmyLife()
                    + " unitWealv1:" + unitWealv1
                    + " armyHpMax:" + armyHpMax
                    + " armyHpNow:" + armyHpNow
                    + " unitGroup1Lv:" + unitGroup1Lv
                    + " unitGroup2Lv:" + unitGroup2Lv
                    + " unitGroup3Lv:" + unitGroup3Lv
                    + " unitGroup4Lv:" + unitGroup4Lv
                    + " unitGroup5Lv:" + unitGroup5Lv
                    + " unitGroup6Lv:" + unitGroup6Lv
                    + " armorId:" + skillId1
                    + " engineId:" + skillId2
                    + " supplyId:" + skillId3
                    + " gemId:" + skillId4
                    + " generalIndex:" + generalIndex
                    + " armyRank:" + armyRank
                    + " armyMorale:" + armyMorale
                    + " armyGroupMax:" + armyFormation
                    + " target:" + hinge
                    + " armyDirection:" + armyDirectionValue
                    + " armyStatus:" + airforcePolicy
                    + " armyRound:" + armyRound
                    + " ifDeploy:" + unitWealv0
                    + " transportType:" + transportType
                    + " armyAi:" + armyAi
                    + " nucleIndex:" + nucleIndex
                    + " targetRegion:" + targetRegion
                    + " targetBuild:" + skillLv1
                    + " standyRound:" + standyRound
                    + " goodsMax:" + skillLv3
                    + " goodsNow:" + skillLv4
                    + " ifMove:" + ifMove
                    + " ifAttack:" + ifAttack
                    + " armyBuff1:" + armyBuff1
                    + " armyBuff2:" + armyBuff2
                    + " armyBuff3:" + armyBuff3
                    + " eventIndex:" + eventIndex
                    + " buildPolicy:" + gameValue
                    + " hexagonIndex:" + hexagonIndex;
        }

        public void resetArmyHpMax() {
            resetArmyHpMax(false);
        }
        //ifLimitMax true 如果限制最大 ,如果重置的最大<原最大,则替换
        public void resetArmyHpMax(boolean ifLimitMax) {

            resetXmlE();
            int oldHpMax = getArmyHpMax();
            int newHpMax =0;
            if(isUnitGroup()){//组合部队
                int life=0;
                if(unitArmyId0 >0){
                    XmlReader.Element xmlE=getArmyXmlE(0,false);
                    if(xmlE==null){
                        unitArmyId0=0;
                        unitGroup0Lv=0;
                        unitWealv0=0;
                    }else{
                        if(unitGroup0Lv<1){unitGroup0Lv=1;}
                        life+=xmlE.getInt("strength",0)*unitGroup0Lv;
                    }
                }
                if(unitArmyId1 >0){
                    XmlReader.Element xmlE=getArmyXmlE(1,false);
                    if(xmlE==null){
                        unitArmyId1=0;
                        unitGroup1Lv=0;
                    }else{
                        if(unitGroup1Lv<1){unitGroup1Lv=1;}
                        life+=xmlE.getInt("strength",0)*unitGroup1Lv;
                    }
                }
                if(unitArmyId2 >0){
                    XmlReader.Element xmlE=getArmyXmlE(2,false);
                    if(xmlE==null){
                        unitArmyId2=0;
                        unitGroup2Lv=0;
                    }else{
                        if(unitGroup2Lv<1){unitGroup2Lv=1;}
                        life+=xmlE.getInt("strength",0)*unitGroup2Lv;
                    }
                }
                if(unitArmyId3 >0){
                    XmlReader.Element xmlE=getArmyXmlE(3,false);
                    if(xmlE==null){
                        unitArmyId3=0;
                        unitGroup3Lv=0;
                    }else{
                        if(unitGroup3Lv<1){unitGroup3Lv=1;}
                        life+=xmlE.getInt("strength",0)*unitGroup3Lv;
                    }
                }
                if(unitArmyId4 >0){
                    XmlReader.Element xmlE=getArmyXmlE(4,false);
                    if(xmlE==null){
                        unitArmyId4=0;
                        unitGroup4Lv=0;
                    }else{
                        if(unitGroup4Lv<1){unitGroup4Lv=1;}
                        life+=xmlE.getInt("strength",0)*unitGroup4Lv;
                    }
                }
                if(unitArmyId5 >0){
                    XmlReader.Element xmlE=getArmyXmlE(5,false);
                    if(xmlE==null){
                        unitArmyId5=0;
                        unitGroup5Lv=0;
                    }else{
                        if(unitGroup5Lv<1){unitGroup5Lv=1;}
                        life+=xmlE.getInt("strength",0)*unitGroup5Lv;
                    }
                }
                if(unitArmyId6 >0){
                    XmlReader.Element xmlE=getArmyXmlE(6,false);
                    if(xmlE==null){
                        unitArmyId6=0;
                        unitGroup6Lv=0;
                    }else{
                        if(unitGroup6Lv<1){unitGroup6Lv=1;}
                        life+=xmlE.getInt("strength",0)*unitGroup6Lv;
                    }
                }
                /*if (generalIndex==0&&ifHaveSkill(32)) {//升级后提升{0}%的hp上限,在升级为将军后移除该技能
                    life = life * (100 + getSkillEffect(32)) / 100;
                }*/
                newHpMax=life;
                this.setArmyHpMax(life);
            }else{
                int life= getArmyLife()*(100+getArmyRank()*10)/100;
                /*if (generalIndex==0&&ifHaveSkill(32)) {//升级后提升{0}%的hp上限,在升级为将军后移除该技能
                    life = getArmyLife() * (100+getArmyRank()*10 + getSkillEffect(32)) / 100;
                }*/
                if(unitGroup0Lv<1){unitGroup0Lv=1;}
                newHpMax=(int) ((armyRank * game.resGameConfig.addHpEachRank + 1) + getGroupRate(0.5f, 1f, 6f) *life);
            }
            if((ifLimitMax&&newHpMax<getArmyHpMax())||!ifLimitMax ){
                setArmyHpMax(ComUtil.max(newHpMax,1));
                if(oldHpMax==0){
                    addArmyHpNow(ComUtil.max(armyHpMax,1));
                }else{
                    setArmyHpNow(ComUtil.max(armyHpMax*armyHpNow/oldHpMax,1));
                }
            }
            resetGameValue();
            /*addArmyHpNow(armyHpMax - oldHpMax);*/
        }

        //返回结果 true 升级成功,false 升级失败
        public boolean updKill(int value,boolean ifUpd) {
            int gr = getGeneralData().getRank();
            if (armyRank > gr) {
                return false;
            }
            if (value>0&&ifHaveSkill(39) && effectStage != null) {
                value += getSkillEffect(39);
                drawSkill(39);
            }
            if (value>0&&getArmyMorale() < game.resGameConfig.resetUnitMoraleMax) {
                setArmyMorale(game.resGameConfig.resetUnitMoraleMax);
            }
            if(!isPlayer()&&armyActor==null){
                ifUpd=true;
            }
            /*if(!generalIDatas.containsKey(this.getGeneralIndex())){
                int s=0;
            }*/
            int killSum = /*DefDAO.getKillSumForUpd(armyKills)*/getKillSum();
            boolean rs = false;
            armyKills = armyKills + value;
            if (armyKills >= killSum) {
                if (ifUpd) {
                    if (armyRank == 6) {
                        //1 6级
                        if (generalIndex == 0 && getLegionData().ifCanRecruitGeneral()) {//可以上将
                            setArmyRank(armyRank + 1);
                            armyKills=0;
                            armyUpdForGeneral(this);
                            rs = true;
                        } else if (generalIndex != 0) {//已上将
                            setArmyRank(armyRank + 1);
                            armyKills=0;
                            rs = true;
                        } else {
                            rs = false;
                        }
                    } else {
                        //2 非6级正常升级
                        setArmyRank(armyRank + 1);
                        armyKills=0;
                        rs = true;
                    }
                    if (ifHaveSkill(33)) {
                        randomUpdArmyWealv();
                        drawSkill(33);
                    }
                    if (ifHaveSkill(32)) {
                        addArmyHpByRate(armyRank*getSkillEffect(32));
                        drawSkill(32);
                    }
                    if (ifHaveSkill(46)) {
                        setArmyMoraleChange(getSkillEffect(46));
                        drawSkill(46);
                    }
                    if (ifHaveSkill(55)) {
                        resetState();
                        drawSkill(55);
                    }
                    if (ifHaveSkill(7)) {
                        int effect = getSkillEffect(7);
                        addArmyHpByRate(effect);
                        setArmyMoraleChange(effect);
                        drawSkill(7);
                    }
                    if (ifEffective(21)) {
                        updSkillForRank();
                    }
                    if (rs) {
                        resetArmyHpMax();
                    }
                }else{
                    armyKills = killSum;
                }
            }
            return rs;
        }

        public boolean randomUpdArmyWealv() {
            return randomUpdArmyWealv(1)>=0;
        }

        public int randomUpdArmyWealv(int count) {
           int potion=-1;
            if(getGameMode()==2){
                return potion;
            }
            if (count > 0) {
                IntArray tempIntArray2 = game.tempUtil.getTempIntArray();
                for(int i=0;i<count;i++){
                    if (canUpdUnitGroupWealLv(0)) {
                        tempIntArray2.add(0);
                    }
                    if (canUpdUnitGroupWealLv(1)) {
                        tempIntArray2.add(1);
                    }
                    if (canUpdUnitGroupWealLv(2)) {
                        tempIntArray2.add(2);
                    }
                    if (canUpdUnitGroupWealLv(3)) {
                        tempIntArray2.add(3);
                    }
                    if (canUpdUnitGroupWealLv(4)) {
                        tempIntArray2.add(4);
                    }
                    if (canUpdUnitGroupWealLv(5)) {
                        tempIntArray2.add(5);
                    }
                    if (canUpdUnitGroupWealLv(6)) {
                        tempIntArray2.add(6);
                    }
                    if(tempIntArray2.size>0){
                        potion = tempIntArray2.random();
                        updUnitGroupWealLv(potion,1);
                        tempIntArray2.clear();
                    }
                }
                game.tempUtil.disposeTempIntArray(tempIntArray2);
            }
            return potion;
        }

        public boolean randomUpdUnitGroupLv() {
            return  randomUpdUnitGroupLv(1)>=0;
        }

        public int randomUpdUnitGroupLv(int count) {
            int potion=-1;
            if(getGameMode()==2){
                return potion;
            }
            if (count > 0) {
                if(isUnitGroup()){
                    IntArray tempIntArray2 = game.tempUtil.getTempIntArray();
                    for(int i=0;i<count;i++){
                        if (canUpdUnitGroupGroupLv(0)) {
                            tempIntArray2.add(0);
                        }
                        if (canUpdUnitGroupGroupLv(1)) {
                            tempIntArray2.add(1);
                        }
                        if (canUpdUnitGroupGroupLv(2)) {
                            tempIntArray2.add(2);
                        }
                        if (canUpdUnitGroupGroupLv(3)) {
                            tempIntArray2.add(3);
                        }
                        if (canUpdUnitGroupGroupLv(4)) {
                            tempIntArray2.add(4);
                        }
                        if (canUpdUnitGroupGroupLv(5)) {
                            tempIntArray2.add(5);
                        }
                        if (canUpdUnitGroupGroupLv(6)) {
                            tempIntArray2.add(6);
                        }
                        if(tempIntArray2.size>0){
                            potion = tempIntArray2.random();
                            updUnitGroupGroupLv(potion,1,true);
                            tempIntArray2.clear();
                            if(armyActor!=null){
                                armyActor.updArmyModel();
                                armyActor.update();
                            }
                        }
                    }
                    game.tempUtil.disposeTempIntArray(tempIntArray2);
                    resetArmyHpMax();
                }else{
                    if (canUpdUnitGroupGroupLv(potion)) {
                        updUnitGroupGroupLv(potion,count,true);
                    }
                }
            }
            return potion;
        }
        //增加一个基础部队
        public void addUnitGroupArmy(int armyId) {
            if(armyId>0&&game.gameConfig.getDEF_ARMY().getElementById(armyId)!=null){
                IntArray tempIntArray2 = game.tempUtil.getTempIntArray();
                for(int i=0;i<7;i++){
                    if(getUnitGroupArmyId(i)==0){
                        tempIntArray2.add(i);
                    }
                }
                if(tempIntArray2.size>0){
                    int rs = tempIntArray2.random();
                    setUnitGroupArmyId(rs,armyId);
                    initVirAttribute();
                }
                tempIntArray2.clear();
            }
        }

        //---------自定义属性
        //private int minRange;
        //private int maxRange;
        //private int movement;
        //private int searchRange;
        //private String feature;


        //private int shipMinRange;
        //private int shipMaxRange;
        //private int shipMovement;
        //private int shipSearchRange;
        public int population;
        public XmlReader.Element armyXmlE0;
        public XmlReader.Element armyXmlE1;
        public XmlReader.Element armyXmlE2;
        public XmlReader.Element armyXmlE3;
        public XmlReader.Element armyXmlE4;
        public XmlReader.Element armyXmlE5;
        public XmlReader.Element armyXmlE6;
        @Override
        public String getFeature() {
            return armyXmlE0.get("feature");
        }

        private XmlReader.Element shipXmlE;

        public boolean ifHaveFeature(int i) {
            boolean rs = ComUtil.ifHaveValueInStr(getFeature(), i);
            if (rs) {
                XmlReader.Element xE = game.gameConfig.getDEF_UNITFEATURE().getElementById(i);
                if (xE != null && getAge() >= xE.getInt("reqAge", 0)) {
                    String useMode = xE.get("useMode", "-1");
                    if (!useMode.equals("-1") && !ComUtil.ifHaveValueInStr(useMode, masterData.getPlayerMode())) {
                        return false;
                    }
                    int cardId = xE.getInt("reqCardId", 0);
                    if (cardId != 0) {
                        int lv = xE.getInt("reqCardLv", 0);
                        if (GameMethod.getCardLv(getLegionData(), null, cardId) >= lv) {
                            return true;
                        } else {
                            return false;
                        }
                    } else {
                        return true;
                    }
                } else {
                    rs = false;
                }
            }
            if (!rs) {
                BuildData b = getBuildData();
                if (b != null && b.getLegionIndex() == legionIndex && b.getBuildWonder() > 0) {
                    XmlReader.Element xE = game.gameConfig.getDEF_WONDER().getElementById(b.getBuildWonder());
                    if (xE != null) {
                        int function = xE.getInt("fucntion", 0);
                        int effect = xE.getInt("effect", 0);
                        //  int value=xE.getInt("value",0);
                        if (function == 6 && effect == i && i > 6) {
                            rs = true;
                        }
                    }
                }
            }
            return rs;
        }

        //获得特性等级  结果为0则无法触发该特性
        public int getFeatureLv(int featureId) {
            boolean rs = ComUtil.ifHaveValueInStr(getFeature(), featureId);
            if (rs) {
                XmlReader.Element xE = game.gameConfig.getDEF_UNITFEATURE().getElementById(featureId);
                if (xE != null) {
                    int cardId = xE.getInt("reqCardId", 0);
                    if (cardId != 0) {
                        int reqLv = xE.getInt("reqCardLv", 0);
                        int lv = GameMethod.getCardLv(getLegionData(), null, cardId);
                        if (lv >= reqLv) {
                            return lv - reqLv + 1;
                        }
                    }
                }
            }
            return 0;
        }

        //初始化虚拟数据
        public int movment;
        public int minRange;
        public int maxRange;

        public int armyAttack;
        public int armyMinAttack;
        public int armyMaxAttack;
        //阵型的实际计算攻击应该是通过方法 getArmyFormationRandomAttack
        //近战暴击率应该取决于士气
        public int formationAttack1;
        public int formationAttack2;
        public int formationAttack3;
        public int formationAttack4;
        public int formationAttack5;
        public int formationAttack6;
        public int armyArmor;
        public int formationArmor1;
        public int formationArmor2;
        public int formationArmor3;
        public int formationArmor4;
        public int formationArmor5;
        public int formationArmor6;
        public int rangedAttack;
        public int rangeCritChance;
        public int airDefendBonus;//空袭防御加成
        public int airStrikeBonus;//对空中的反击伤害




        private void initVirAttribute() {
            resetXmlE();

            Fb2Map.MapHexagon hexagonData=getHexagonData();
            hexagonData.armyData=this;
            if (nucleIndex != -1) {
                NulcleData n = nulcleIDatas.get(nucleIndex);
                n.setArmyData(this);
            }
            if(isUnitGroup()){
                int unitCount=0;
                int sumMovment=0;
                minRange=9999;
                maxRange=0;
                armyMaxAttack=0;
                armyMinAttack=9999;
                rangedAttack =0;
                rangeCritChance=0;// MDB战线近战攻击加成  FDB=战线防御加成  RDB远程攻击加成 RCC 远程攻击暴击概率   ADB=空中防御加成
                int rdb=0;
                int tempV=0;
                airDefendBonus=0;
                for(int i=0;i<7;i++){
                    int id=getUnitGroupArmyId(i);
                    if(id==0){
                        continue;
                    }
                    XmlReader.Element xml=game.gameConfig.getDEF_ARMY().getElementById(id);
                    if(xml!=null){
                        sumMovment+= xml.getInt("movement",0);
                        unitCount++;
                        if(i==0){//本体额外计算
                            sumMovment+= xml.getInt("movement",0);
                            rdb+=xml.getInt("RDB",0);
                            rangeCritChance+=xml.getInt("RCC",0);
                            airDefendBonus+=xml.getInt("ADB",0);
                        }
                        tempV= xml.getInt("minAtkrange",0);
                        if(tempV<minRange||minRange==9999){
                            minRange=tempV;
                        }
                        tempV= xml.getInt("maxAtkrange",0);
                        if(tempV>maxRange){
                            maxRange=tempV;
                        }
                        int addD=addTechDamage(xml.getInt("id"),xml.getInt("type"));
                        tempV= (int) ((xml.getInt("maxAtk",0)+addD)*getUnitGroupGroupRate(i));
                        if(tempV>armyMaxAttack){
                            armyMaxAttack=tempV;
                        }
                        tempV= (int) ((xml.getInt("minAtk",0)+addD)*getUnitGroupGroupRate(i));
                        if(tempV<armyMinAttack||armyMinAttack==9999){
                            armyMinAttack=tempV;
                        }
                        if(maxRange>1){
                            rangedAttack+= (int) (((xml.getInt("maxAtk",0)+xml.getInt("minAtk",0))/2+addD)*getUnitGroupGroupRate(i));
                        }
                        rangeCritChance+=xml.getInt("RCC",0);
                        rdb+=xml.getInt("RDB",0);
                        airDefendBonus+=xml.getInt("ADB",0);
                        airStrikeBonus+=game.gameMethod.getWeaponValue(xml.getInt("weapon"),5,getUnitGroupWealLv(i));
                    }
                }
                if(unitCount>0){
                    airDefendBonus=airDefendBonus/unitCount;
                    airStrikeBonus=airStrikeBonus*2/unitCount;
                }else{
                    airDefendBonus=0;
                    airStrikeBonus=0;
                }

                if(maxRange>1){
                    rangedAttack = rangedAttack *(100+rdb)/200;
                }
                BuildData b=getBuildData();
                if (b != null && b.getLegionIndex() == getLegionIndex()) {
                    if (b.getBuildWonder() > 0) {
                        XmlReader.Element xE = game.gameConfig.getDEF_WONDER().getElementById(b.getBuildWonder());
                        if (xE != null) {
                            int function = xE.getInt("fucntion", 0);
                            int effect = xE.getInt("effect", 0);
                            int value = xE.getInt("value", 0);
                            if (function == 5 ) {
                                switch (effect){
                                    case 3:
                                        formationAttack1+=value;
                                        formationAttack2+=value;
                                        formationAttack3+=value;
                                        formationAttack4+=value;
                                        formationAttack5+=value;
                                        formationAttack6+=value;
                                        break;
                                    case 4:
                                        armyArmor+=value;
                                        formationArmor1+=value;
                                        formationArmor2+=value;
                                        formationArmor3+=value;
                                        formationArmor4+=value;
                                        formationArmor5+=value;
                                        formationArmor6+=value;
                                        break;
                                    case 5:
                                        if(armyMaxAttack>0){
                                            armyMaxAttack+=1;
                                        }
                                        break;
                                }
                            }
                        }
                    }
                }
                int wM = getWeatherXmlE().getInt("move", 0) + 1;
                movment = 0;
                if (!isWar()) {
                    if (potionIsSea() && ifHaveSkill(20)) {
                        wM += getSkillEffect(20);
                        drawSkill(20);
                    }
                    if (ifHaveSkill(52)) {
                        wM += getSkillEffect(52);
                        drawSkill(52);
                    }
                }
                movment= (sumMovment+1)/(unitCount+1)+wM+armyRank/3;
                if (isEditMode(true)||(controlMode == 1&& isPlayer()) ||(spiritMap!=null&&ifEffective(16)&&(spiritMap.containsKey(41)||(getGeneralIndex()>0&&spiritMap.containsKey(42)))) ) {
                    movment = movment * 2;
                }
                //对计算的数值初始化
                if(minRange==9999){minRange=1;}
                if(armyMinAttack==9999){armyMinAttack=0;}
                if(rangedAttack ==9999){
                    rangedAttack =0;}
                armyAttack=getUnitGroupAvgAttack(0);
                formationAttack1= getArmyFormationAvgAttack(1);
                formationAttack2= getArmyFormationAvgAttack(2);
                formationAttack3= getArmyFormationAvgAttack(3);
                formationAttack4= getArmyFormationAvgAttack(4);
                formationAttack5= getArmyFormationAvgAttack(5);
                formationAttack6= getArmyFormationAvgAttack(6);
                armyArmor=getUnitGroupArmor(0);
                formationArmor1=getArmyFormationArmor(1);
                formationArmor2=getArmyFormationArmor(2);
                formationArmor3=getArmyFormationArmor(3);
                formationArmor4=getArmyFormationArmor(4);
                formationArmor5=getArmyFormationArmor(5);
                formationArmor6=getArmyFormationArmor(6);
            }else{
                minRange=getMinRange();
                maxRange=getMaxRange();
                armyMaxAttack=getMaxAttack();
                armyMinAttack=getMinAttack();
            }
            resetGameValue();
        }

        /*public void resetTransShip(){
            XmlReader.Element xE=game.gameConfig.getDEF_ARMY().getElementById(1400+getTransportType());
           // shipMinRange = xE.getInt("minAtkrange", 1);
           // shipMaxRange = xE.getInt("maxAtkrange", 1);
           // shipMovement = xE.getInt("movement");
          //  shipSearchRange =xE.getInt("searchRange");
        }*/
        public void resetXmlE() {
            //armyXmlE0 = game.gameConfig.getDEF_ARMY().getElementById(getUnitArmyId0());
            for(int i=0;i<7;i++){
                int armyId=getUnitGroupArmyId(i);
                if(armyId>0){
                    setArmyXmlE(i,game.gameConfig.getDEF_ARMY().getElementById(armyId));
                }else{
                    setArmyXmlE(i,null);
                }
            }
            shipXmlE = game.gameConfig.getDEF_ARMY().getElementById(1400 + getTransportType());
            if (armyXmlE0 == null) {
                //int s=0;
                setUnitArmyId0(1101);
                armyXmlE0 = game.gameConfig.getDEF_ARMY().getElementById(getUnitArmyId0());
            }
            setArmyType(armyXmlE0.getInt("type",1));
        }

        public void setArmyXmlE(int index,XmlReader.Element xmlE){
            switch (index){
                case 0:armyXmlE0=xmlE;break;
                case 1:armyXmlE1=xmlE;break;
                case 2:armyXmlE2=xmlE;break;
                case 3:armyXmlE3=xmlE;break;
                case 4:armyXmlE4=xmlE;break;
                case 5:armyXmlE5=xmlE;break;
                case 6:armyXmlE6=xmlE;break;
            }
        }
        public XmlReader.Element getArmyXmlE(int index,boolean ifDefault){
            if(ifDefault){
                switch (index){
                    case 0:if(armyXmlE0!=null){return armyXmlE0;}break;
                    case 1:if(armyXmlE1!=null){return armyXmlE1;}break;
                    case 2:if(armyXmlE2!=null){return armyXmlE2;}break;
                    case 3:if(armyXmlE3!=null){return armyXmlE3;}break;
                    case 4:if(armyXmlE4!=null){return armyXmlE4;}break;
                    case 5:if(armyXmlE5!=null){return armyXmlE5;}break;
                    case 6:if(armyXmlE6!=null){return armyXmlE6;}break;
                }
                if(armyXmlE0==null){
                    resetXmlE();
                }
                if(armyXmlE0==null){
                    int s=0;
                    Gdx.app.error("getArmyXmlE() is errror:"+getHexagonIndex(),getUnitGroupArmyId(index)+":"+index);
                }
                return armyXmlE0;
            }else{
                switch (index){
                    case 0:return armyXmlE0;
                    case 1:return armyXmlE1;
                    case 2:return armyXmlE2;
                    case 3:return armyXmlE3;
                    case 4:return armyXmlE4;
                    case 5:return armyXmlE5;
                    case 6:return armyXmlE6;
                    default:return null;
                }
            }
        }

        @Override
        public BuildData getBuildData() {
            return getHexagonData().getRegionBuildData().getBuildData();
        }

        public BuildData getHBuildData() {
            return getBuildDataByRegion(hexagonIndex);
        }

        public XmlReader.Element getWeatherXmlE() {
            BuildData b = getBuildData();
            if (b != null) {
                return game.gameConfig.getDEF_WEATHER().getElementById(b.getWeatherId());
            } else {
                return game.gameConfig.getDEF_WEATHER().getElementById(0);
            }
        }
        @Override
        public int getWeatherId() {
            BuildData b = getBuildData();
            if (b != null) {
                return b.getWeatherId();
            } else {
                return 0;
            }
        }

        public boolean isWar() {
            BuildData b = getBuildData();
            if (b != null) {
                return b.isWar();
            }
            return false;
        }

        public boolean isBorderWar() {
            BuildData b = getBuildData();
            if (b != null) {
                return b.ifBorderRegionWar();
            }
            return false;
        }

        public int getSearchRange() {
            int  rs=0;
            int wV = getWeatherXmlE().getInt("view", 0);
            //如果没有行动过,增加额外的视野
            if (ifHaveFeature(20)) {
                int v = getFeatureLv(20) / 3;
                if (v <= 0) {
                    v = 1;
                }
                wV = wV + v;
            }

            if (ifHaveSkill(117)) {
                wV += getSkillEffect(117);
                drawSkill(117);
            }
            FortData f = getFortDataByHexagon(hexagonIndex);

            if (f != null && (f.getFortId() == 5003 || f.getFortId() == 5007)) {

                rs+= armyXmlE0.getInt("searchRange", 0)+ComUtil.limitValue(f.getFortLv(), 1, 2 + getAge()) + wV;
            } else if (armyType != 4 && armyType != 8 && potionIsSea()&&shipXmlE!=null) {
                rs+=shipXmlE.getInt("searchRange", 0)+wV;
            } else {
                rs+= armyXmlE0.getInt("searchRange", 0)+wV;
            }
            if(rs<1){rs=1;}
            return rs;
        }

        public boolean ifAllyRegion() {
            int regionId = getHexagonIndex();
            return regionId == -1 || ifSea(regionId) || ifAllyByLi(legionIndex, getLegionIndexByHexagon(regionId));
        }

        public void changeMoraleByWeather() {
            int wM = getWeatherXmlE().getInt("morale", 0);
            if (wM > 0) {
                if (ifAllyRegion()) {
                    setArmyMoraleChange(wM, game.resGameConfig.resetUnitMoraleMax);
                }
            } else {
                setArmyMoraleChange(wM, game.resGameConfig.resetUnitMoraleMax);
            }
        }

        public int getMinRange() {
            if (armyType != 4 && armyType != 8 && potionIsSea()) {
                return shipXmlE.getInt("minAtkrange", 0);
            } else {
                if(isUnitGroup()){
                    return minRange;
                }else{
                    return armyXmlE0.getInt("minAtkrange", 0);
                }
            }
        }
        @Override
        public int getMaxRange() {
            if (armyType == 5) {
                int v = 0;
                if (ifHaveFeature(22) && getIfMove() == 0) {
                    v = getFeatureLv(22);
                }
                v = v + (getUnitGradeLv(0) + 2) / 3;
                return (getBuildData().getMaxAirActRange() + v);
            } else if (armyType == 7) {
                int actRange = 0;
                BuildData build = getBuildData();
                if (build != null) {
                    actRange = build.getAirLvNow();
                }
                if (actRange < 3) {
                    actRange = 3;
                }
                return actRange;
            }


            int v = 0;
            if (ifHaveFeature(22) && getIfMove() == 0) {
                v = getMinRange();
            }
            if (unitArmyId0 == 1606) {
                v = v + (getUnitGradeLv(0) + 2) / 3;
            }

            if (armyType != 4 && armyType != 8 && potionIsSea()) {
                return shipXmlE.getInt("maxAtkrange", 0) + v;
            } else if (ifHaveFeature(5)) {
                if(isUnitGroup()){
                    return maxRange + getUnitWealv0Value() * 2 + getBuildData().getMissileLvNow() + v;
                }else{
                    return armyXmlE0.getInt("maxAtkrange", 0) + getUnitWealv0Value() * 2 + getBuildData().getMissileLvNow() + v;
                }

            } else {
                if(isUnitGroup()){
                    return maxRange + v;
                }else{
                    return armyXmlE0.getInt("maxAtkrange", 0) + v;
                }
            }
        }

        @Override
        public int getUnitMorale() {
            return getArmyMorale();
        }

        public void addGeneral(GeneralData g) {
            setGeneralIndex(g.getGeneralIndex());
            for (int i = 0; i < g.getAbilityValue(); i++) {
                randomUpdArmyWealv();
            }
            resetGameValue();
        }

        private void resetGameValue() {//存储其人口
            int v=0;
            if(isUnitGroup()){
                int c=0;
                for(int i=0;i<7;i++){
                    XmlReader.Element xmlE=getArmyXmlE(i,false);
                    if(xmlE!=null){
                        v+=xmlE.getInt("population",5)*getUnitGroupGroupLv(i);
                        c++;
                    }
                }
                if(c>1){
                    v=v*2/c;
                }
            }else{
                XmlReader.Element xmlE=getArmyXmlE(0,false);
                v+=xmlE.getInt("population",5)*getUnitGroupGroupLv(0);
            }
            if (generalIndex != 0) {
                GeneralData g=getGeneralData();
                if(g!=null){
                    v+=getArmyRank() + g.getAbilityValue();
                }
            }
            v=ComUtil.limitValue(v,0,100);
            population=v;
            setGameValue(v/10);
        }

        public void setRankForValue(int v) {
            if (this.getGeneralIndex() != 0) {
                int gr = getGeneralData().getRank();
                if (v > gr) {
                    v = gr;
                }
            }
            while (armyRank < v) {
                if (armyRank >= v) {
                    return;
                }
                updKill(1,true);
            }
        }
        public void updRankForValue(int v) {
            if (this.getGeneralIndex() != 0) {
                int gr = getGeneralData().getRank();
                if (v+armyRank > gr) {
                    v = gr;
                }else{
                    v = v+armyRank;
                }
            }
            if(masterData.getPlayerMode()==2){
                setUnitWealv0(v);
            }
            while (armyRank < v) {
                if (armyRank >= v) {
                    return;
                }
                updKill(1,true);
            }
        }

        public void dissolve(Boolean ifTrue) {
            // Gdx.app.log("dissolve",this.getHexagonIndex()+":"+armyId);
            if (getLegionIndex() != masterData.getPlayerLegionIndex()) {
                legionDatas.get(getLegionIndex()).addMoney((int) (getGameValue() * getUnitGroup() * getMilitaryCostRate()));
            }
            armyDeath(ifTrue);
        }

        //0-100 血量越低,合并的几率越高
        public int getMergeChance() {
            //int chance= ;
            // Gdx.app.log("test getMergeChance",((int) (((armyHpMax-armyHpNow)*1f)/armyHpMax*100))+""   );
            return ComUtil.limitValue((int) (((armyHpMax - armyHpNow) * 1f) / armyHpMax * 100), 50, 100);
        }



        //血量0.5以下或编队未满
        public boolean canMerge(int cardType,int cardId) {
            if(getArmyType()==6&&cardType!=6){
                return false;
            }
            if(isUnitGroup()){//组合部队
                if(!Fb2Smap.this.isUnitGroup(cardType)){
                    return false;
                }
                int uc=getUnitGroup();//0~6
                if(uc<7){//armyType 1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇
                   /* if(armyType==6){
                        if(cardType==armyType&&getUnitArmyId0()>=cardId){
                            return true;
                        }
                    }else {
                        return true;
                    }*/
                    switch (cardType){
                        case 1:return true;
                        case 2:return true;
                        case 3:return true;
                        case 6:
                            if(cardType==armyType&&getUnitArmyId0()>=cardId){
                                return true;
                            }break;
                    }
                }else {
                    for(int i=0;i<7;i++){
                        int armyId=getUnitGroupArmyId(i);
                        int index=  getPotionForCanUpdUnitWealv(armyId);
                        if(index>-1){
                            return true;
                        }
                        index=  getPotionForCanUpdUnitGrouplv(armyId);
                        if(index>-1){
                            return true;
                        }
                    }
                }
            }else{
                if (cardId == unitArmyId0 && (getHpRateF() < 0.5f || unitGroup0Lv < getUnitGradeLv(0))) {
                    return true;
                }
               int index=  getPotionForCanUpdUnitGrouplv(unitArmyId0);
                if(index>-1){
                    return true;
                }
            }
            return false;
        }
        //如果启用组合部队 则获取其有几个组合部队 结果为1~7,否则为编制 1~groupMax
        public int getUnitGroup() {
            if(isUnitGroup()){//组合部队
                return 1+(unitArmyId1 ==0?0:1)+(unitArmyId2 ==0?0:1)+(unitArmyId3 ==0?0:1)+(unitArmyId4 ==0?0:1)+(unitArmyId5 ==0?0:1)+(unitArmyId6 ==0?0:1);
            }else{
                return getUnitGroup0Lv();
            }
        }

        public int getUnitGroupSum() {
            if(isUnitGroup()){//组合部队
                return ((unitArmyId0 ==0?0:unitGroup0Lv)+(unitArmyId2 ==0?0:unitGroup2Lv)+(unitArmyId3 ==0?0:unitGroup3Lv)+(unitArmyId4 ==0?0:unitGroup4Lv)+(unitArmyId5 ==0?0:unitGroup5Lv)+(unitArmyId1 ==0?0:unitGroup1Lv)+(unitArmyId6 ==0?0:unitGroup6Lv));
            }else{
                return getUnitGroup0Lv();
            }
        }
        //1~10 只用来展示军团的力量,不要应用
        public int getUnitGroupPower() {
            if(isUnitGroup()){//组合部队
                return ComUtil.limitValue(((unitArmyId0 ==0?0:unitGroup0Lv)+(unitArmyId2 ==0?0:unitGroup2Lv)+(unitArmyId3 ==0?0:unitGroup3Lv)+(unitArmyId4 ==0?0:unitGroup4Lv)+(unitArmyId5 ==0?0:unitGroup5Lv)+(unitArmyId1 ==0?0:unitGroup1Lv)+(unitArmyId6 ==0?0:unitGroup6Lv))/getUnitGroup(),1,10);
            }else{
                return ComUtil.limitValue(getUnitGroup0Lv(),1,10);
            }
        }

        public int getFoodCost() {
            /*if(isUnitGroup()){//组合部队
                int ad=0;int hpR=getHpRate();
                if(hpR>70||armyMorale>70){
                    ad=2 ;
                }else if(hpR>40||armyMorale>40){
                    ad=1;
                }else{
                    ad=0;
                }
                return  ad+(unitArmyId0 ==0?0:unitGroup0Lv)+(unitArmyId1 ==0?0:unitGroup1Lv)+(unitArmyId2 ==0?0:unitGroup2Lv)+(unitArmyId3 ==0?0:unitGroup3Lv)+(unitArmyId4 ==0?0:unitGroup4Lv)+(unitArmyId5 ==0?0:unitGroup5Lv)+(unitArmyId6 ==0?0:unitGroup6Lv)+(armyRank<6?0:3)+(generalIndex==0?0:2);
            }else{
                return (unitArmyId0 ==0?0:unitGroup0Lv)+(armyRank<6?0:2)+(generalIndex==0?0:2);
            }*/
            return ComUtil.limitValue( population,1+armyRank,999);
        }

        public int setFogInSearchTIA3(boolean ifCreateActor) {
            int s = 0;
            if (masterData.getIfFog() == 0) {
                return s;
            }
            if (isPlayerAlly()) {
                getHexagonData().setIfFog(1);
            }
            //iffog 0不可见 1可见
            if (ifAllyByLi(legionIndex, masterData.playerLegionIndex)) {
                IntArray tempIntArray3 = game.tempUtil.getTempIntArray();
                int searchRange = getSearchRange();

                if (ifHaveFeature(31)) {
                    int airRange = getRegionAirLv() + 1;
                    if (airRange > searchRange) {
                        searchRange = airRange;
                    }
                    if (searchRange < 5) {
                        searchRange = 5;
                    }
                } else if (ifHaveFeature(30) && searchRange < 3) {
                    int airRange = getRegionAirLv() / 2 + 1;
                    if (airRange > searchRange) {
                        searchRange = airRange;
                    }
                    if (searchRange < 3) {
                        searchRange = 3;
                    }
                }
                getRangePostion(hexagonIndex, 1, searchRange, true, tempIntArray3);
                for (int i = 0; i < tempIntArray3.size; i++) {
                    int id=tempIntArray3.get(i);
                    Fb2Map.MapHexagon hexagon=Fb2Smap.this.getHexagonData(id);
                    if(hexagon!=null){
                        hexagon.setIfFog(1);
                        if(hexagon.armyData!=null&&hexagon.armyData.getArmyHpNow()>0&&hexagon.armyData.armyActor==null){
                            hexagon.armyData.createActor();
                            checkTask(true, legionIndex, 16, 1);
                        }
                    }

                }
                game.tempUtil.disposeTempIntArray(tempIntArray3);
            }
            return s;
        }


        public boolean playerCanCommand() {
            if (roundState != 0&&roundState != 4) {
                return false;
            }
            if(isEditMode(true)){
                return true;
            }
            LegionData l = getLegionData();
            if ((l.getLegionIndex() == masterData.playerLegionIndex)) {
                return true;
            }
            if(roundState==0){
                if ((l.getSuzerainLi() == masterData.playerLegionIndex)) {
                    return true;
                }
                if(getForeignDegree(l.getLegionIndex(), masterData.playerLegionIndex) == 1){
                    //可以指挥关系度不小于{0}且历史关系不为世仇的友方部队
                    if(ifHaveSpirit(4) ){
                        if (ifEffective(4)) {
                            ForeignData f = getForeignData(l.getLegionIndex());
                            if (f != null) {
                                if (f.getFavorValue() > getSpiritValue(4) && f.getDiplomaticAttitude() != 3) {
                                    return true;
                                }
                            }else{
                                return true;
                            }
                        }
                    }
                    //可以指挥实力小于我方且外交态度不为敌对的友方部队
                    if(ifHaveSpirit(10)){
                        if (ifEffective(4)) {
                            ForeignData f = getForeignData(l.getLegionIndex());
                            if (f != null) {
                                if ((getPlayerLegionData().varRegionCount > l.varRegionCount || getPlayerLegionData().incomeMoney > l.incomeMoney) && f.getDiplomaticRecognition() != -1) {
                                    return true;
                                }
                            } else {
                                if (getPlayerLegionData().varRegionCount > l.varRegionCount || getPlayerLegionData().incomeMoney > l.incomeMoney) {
                                    return true;
                                }
                            }
                        } else {
                            if (getPlayerLegionData().varRegionCount > l.varRegionCount || getPlayerLegionData().incomeMoney > l.incomeMoney) {
                                return true;
                            }
                        }
                    }

                }
            }


            return false;
        }

        public int getCountryId() {
            return legionDatas.get(legionIndex).getCountryId();
        }

        /*public String getCountryStr() {
            return legionDatas.get(legionIndex).getCountryStr();
        }*/
        public boolean canCreateRDialogue() {
            return ifEffective(12) && isPlayer() && generalIndex != 0;
        }


        public String getGeneralImageName() {
            return getGeneralData().getGeneralImageName();
        }
        @Override
        public GeneralData getGeneralData() {
            GeneralData g = generalIDatas.get(generalIndex);
            if (g != null) {
                return g;
            }
            Gdx.app.error("no general:" + getHexagonIndex(), getAllAttributes());
            setGeneralIndex(0);
            return generalIDatas.get(0);
        }

        //朝向
        //type 该功能在自由阵型的时候可用 0防御 1进攻
        public void resetArmyForamtion(int type,int ragetHexagon){
            int uc=getUnitGroup();
            int direct=getDirect(ragetHexagon);
            ArmyData tArmy=getArmyDataByHexagon(ragetHexagon);
            int tArmyId=1601;
            int tDirect=DefDAO.getContraryDirect(direct);
            if(tArmy!=null){
                tArmyId=tArmy.getUnitGroupArmyId(tDirect);
                if(tArmyId==0){
                    tArmyId=tArmy.getUnitArmyId0();
                }
            }
            
            if(isUnitGroup()&&uc>1&&masterData.getPlayerMode()!=2){//阵型 0自由阵型 1固定阵型 2顺向阵型
                if((armyType==6&&ifMove==1)||(isPlayer()&&armyType==6)){
                    return;
                }
                if(getArmyFormation()==0||(getArmyFormation()==1&&!playerCanCommand())){
                    if(direct<=0&&type==1){//远程攻击时,不排序
                        return;
                    }
                    //重新设定核心
                    resetCoreArmyId(type,tArmyId);
                    //复制属性
                    tempArmyData.copyAttributes(this,false);
                    //获取周围5格的附近的敌军,并获取其威胁分数
                    IntArray degreeArrays=game.tempUtil.getTempIntArray();
                    int d1=0,d2=0,d3=0,d4=0,d5=0,d6=0;
                    boolean isAttack=type==1;
                    for (int j = 1, jMax = 6; j <= jMax; j++) {
                        if(isAttack){//如果是进攻的
                            switch (j){
                                case 1:d1+=getAttackDegree(1,tArmyId);break;
                                case 2:d2+=getAttackDegree(2,tArmyId);break;
                                case 3:d3+=getAttackDegree(3,tArmyId);break;
                                case 4:d4+=getAttackDegree(4,tArmyId);break;
                                case 5:d5+=getAttackDegree(5,tArmyId);break;
                                case 6:d6+=getAttackDegree(6,tArmyId);break;
                            }
                        }else{//防御侧
                            switch (j){
                                case 1:d1+=getDefenceDegree(1);break;
                                case 2:d2+=getDefenceDegree(2);break;
                                case 3:d3+=getDefenceDegree(3);break;
                                case 4:d4+=getDefenceDegree(4);break;
                                case 5:d5+=getDefenceDegree(5);break;
                                case 6:d6+=getDefenceDegree(6);break;
                            }
                        }
                    }
                    if(d1==0&&d2==0&&d3==0&&d4==0&&d5==0&&d6==0){
                        game.tempUtil.disposeTempIntArray(degreeArrays);
                        return;
                    }
                    degreeArrays.add(d1);
                    IntArray indexArrays=game.tempUtil.getTempIntArray();
                    indexArrays.add(1);
                    degreeArrays.add(d2);
                    indexArrays.add(2);
                    degreeArrays.add(d3);
                    indexArrays.add(3);
                    degreeArrays.add(d4);
                    indexArrays.add(4);
                    degreeArrays.add(d5);
                    indexArrays.add(5);
                    degreeArrays.add(d6);
                    indexArrays.add(6);
                    /*//对其进行排序,威胁最大的排在前面
                    if(isAttack){//如果是进攻状态,则将其
                        GameUtil.sortIntArrays(indexArrays,degreeArrays,true);
                    }else{
                        GameUtil.sortIntArrays(indexArrays,degreeArrays,false);
                    }*/
                    GameUtil.sortIntArrays(indexArrays,degreeArrays,false);

                    IntArray armyIdIndexArrays=game.tempUtil.getTempIntArray();
                    armyIdIndexArrays.add(1);
                    IntArray armyAbailityArrays=game.tempUtil.getTempIntArray();

                    if(isAttack){//获得进攻
                       setAbailityIntArraysInAttack(direct,armyIdIndexArrays,armyAbailityArrays);
                    }else{//获得防御
                        setAbailityIntArraysInDefence(armyIdIndexArrays,armyAbailityArrays);
                    }
                    GameUtil.sortIntArrays(armyIdIndexArrays,armyAbailityArrays,false);

                    //indexArrays   威胁度优先级位置
                    //armyIdIndexArrays 按能力被排序的ids
                    for(int i=0;i<indexArrays.size;i++){
                        int potion=indexArrays.get(i);
                        int potion2=armyIdIndexArrays.get(i);
                        setUnitGroupWealLv(potion,tempArmyData.getUnitGroupWealLv(potion2),false);
                        setUnitGroupGroupLv(potion,tempArmyData.getUnitGroupGroupLv(potion2),false);
                        setUnitGroupArmyId(potion, tempArmyData.getUnitGroupArmyId(potion2));
                        resetXmlE();
                    }

                    game.tempUtil.disposeTempIntArray(degreeArrays);
                    game.tempUtil.disposeTempIntArray(indexArrays);
                    game.tempUtil.disposeTempIntArray(armyAbailityArrays);
                    game.tempUtil.disposeTempIntArray(armyIdIndexArrays);
                    if(armyActor!=null){
                        armyActor.updArmyModel();
                        armyActor.update();
                    }
                }else if(getArmyFormation()>20&&getArmyFormation()<=26){//顺向  1↖ 2↑ 3↗ 4↙ 5↓ 6↘
                     direct=Fb2Smap.this.getDirect(hexagonIndex,ragetHexagon);
                    if(direct>0&&getArmyFormation()-20!=direct){
                        int[] sp= GameUtil.getPotionSortByDirect(getArmyFormation()-20);
                        int[] tp= GameUtil.getPotionSortByDirect(direct);
                        if(sp!=null&&tp!=null&&sp.length==tp.length){
                            tempArmyData.copyAttributes(this,false);
                            for(int i=0;i<sp.length;i++){
                                int potion=tp[i];
                                int potion2=sp[i];
                                setUnitGroupArmyId(potion, tempArmyData.getUnitGroupArmyId(potion2));
                                setUnitGroupWealLv(potion,tempArmyData.getUnitGroupWealLv(potion2),false);
                                setUnitGroupGroupLv(potion,tempArmyData.getUnitGroupGroupLv(potion2),false);
                                resetXmlE();
                            }
                            if(armyActor!=null){
                                armyActor.updArmyModel();
                                armyActor.update();
                            }
                            setArmyFormation(20+direct);
                        }
                    }
                }
            }
        }
        //向进攻方向设置10
        private void setAbailityIntArraysInAttack(int direct, IntArray armyIdIndexArrays, IntArray armyAbailityArrays) {
            armyIdIndexArrays.clear();
            armyAbailityArrays.clear();
            armyIdIndexArrays.add(1);
            if(direct==1||direct==4){armyAbailityArrays.add(10);}else{  armyAbailityArrays.add(0);}
            armyIdIndexArrays.add(2);
            if(direct==1||direct==2){armyAbailityArrays.add(10);}else{  armyAbailityArrays.add(0);}
            armyIdIndexArrays.add(3);
            if(direct==2||direct==3){armyAbailityArrays.add(10);}else{  armyAbailityArrays.add(0);}
            armyIdIndexArrays.add(4);
            if(direct==3||direct==6){armyAbailityArrays.add(10);}else{  armyAbailityArrays.add(0);}
            armyIdIndexArrays.add(5);
            if(direct==4||direct==5){armyAbailityArrays.add(10);}else{  armyAbailityArrays.add(0);}
            armyIdIndexArrays.add(6);
            if(direct==5||direct==6){armyAbailityArrays.add(10);}else{  armyAbailityArrays.add(0);}
        }
        //有敌人的方向设置10
        private void setAbailityIntArraysInDefence(IntArray armyIdIndexArrays, IntArray armyAbailityArrays) {
            armyIdIndexArrays.clear();
            armyAbailityArrays.clear();
            int unitType1= getBorderUnitType(1);
            int unitType2= getBorderUnitType(2);
            int unitType3= getBorderUnitType(3);
            int unitType4= getBorderUnitType(4);
            int unitType5= getBorderUnitType(5);
            int unitType6= getBorderUnitType(6);
            armyIdIndexArrays.add(1);
            if(unitType1==-1){armyAbailityArrays.add(10);}else{  armyAbailityArrays.add(0);}
            armyIdIndexArrays.add(2);
            if(unitType2==-1){armyAbailityArrays.add(10);}else{  armyAbailityArrays.add(0);}
            armyIdIndexArrays.add(3);
            if(unitType3==-1){armyAbailityArrays.add(10);}else{  armyAbailityArrays.add(0);}
            armyIdIndexArrays.add(4);
            if(unitType4==-1){armyAbailityArrays.add(10);}else{  armyAbailityArrays.add(0);}
            armyIdIndexArrays.add(5);
            if(unitType5==-1){armyAbailityArrays.add(10);}else{  armyAbailityArrays.add(0);}
            armyIdIndexArrays.add(6);
            if(unitType6==-1){armyAbailityArrays.add(10);}else{  armyAbailityArrays.add(0);}



        }

        private int getAttackDegree(int direct,int tArmyId) {
            if(isUnitGroup()){
                int  damage=0;
               if(direct>0){//近战
                   int armyId=getUnitGroupArmyId(direct);
                   if(armyId!=0){
                       damage=game.gameMethod.getUnitDamage(getLegionData(),getBuildData(),armyId,0)*game.gameMethod.getWeaponValueByArmyId(armyId,tArmyId,getUnitGroupWealLv(direct)) / 100;
                   }
                }
                return damage;
            }
            return game.gameMethod.getUnitDamage(getLegionData(),getBuildData(),getUnitArmyId0(),0)*game.gameMethod.getWeaponValueByArmyId(getUnitArmyId0(),tArmyId,getUnitGroupWealLv(0)) / 100;
        }

        private int getDefenceDegree(int direct) {
            if(isUnitGroup()){
                return getUnitGroupArmor(direct);
            }

            if (potionIsSea()) {
                if (shipXmlE != null) {
                   return shipXmlE.getInt("armor", 0);
                }
            } else if(isUnitGroup()){
              int armyId=  getUnitGroupArmyId(direct);
              if(armyId>0){
                  XmlReader.Element xmlE=game.gameConfig.getDEF_ARMY().getElementById(armyId);
                  if (xmlE != null) {
                      return  xmlE.getInt("armor", 0);
                  }
              }
            }else{
                XmlReader.Element xmlE=getArmyXmlE(0,false);
                if (xmlE != null) {
                    return  xmlE.getInt("armor", 0);
                }
            }
            return 0;
        }

        private boolean ifBorderIsAllyArmy(int direct) {
            int id=getBorderIdByDirect(hexagonIndex,direct);
            ArmyData a=getArmyDataByHexagon(id);
            if(a!=null&&getForeignDegree(a.getLegionIndex(),legionIndex)==1){
                return true;
            }
            return false;
        }
        //0中立 1友好 2敌对
        private int getBorderUnitType(int direct) {
            int id=getBorderIdByDirect(hexagonIndex,direct);
            ArmyData a=getArmyDataByHexagon(id);
            if(a!=null){
                return getForeignDegree(a.getLegionIndex(),legionIndex);
            }
            return 0;
        }

        //type 0 为防御姿态, 1进攻状态近战
        private void resetCoreArmyId(int type,int tArmyId) {
            if(armyType==6){//要塞的核心应该为最大
                int armyId=getUnitArmyId0();
                int index=0;
                //远程能力
                for(int i=1;i<=6;i++){
                    int ta=getUnitGroupArmyId(i);
                    if(ta>armyId){
                        index=i;
                        armyId=ta;
                    }
                }
                if(index!=0){
                    replaceUnitGroupPotion(0,index);
                    return;
                }
            }else if(type==0){//防御姿态
                if(ifUnitGroupAllDirectIsFormation(false)){//是否周围有完整的战线,如果是,则核心为id最高的单位
                    int armyId=getUnitGroupArmyId(0);
                    int index=0;
                    //远程能力
                    for(int i=1;i<=6;i++){
                        int ta=getUnitGroupArmor(i);
                        if(ta>armyId){
                            index=i;
                            armyId=ta;
                        }
                    }
                    if(index!=0){
                        replaceUnitGroupPotion(0,index);
                        return;
                    }
                }else{//核心为防御力最高的战线
                    int armor=getUnitGroupArmor(0);
                    int index=0;
                    //远程能力
                    for(int i=1;i<=6;i++){
                        int ta=getUnitGroupArmor(i);
                        if(ta>armor){
                            index=i;
                            armor=ta;
                        }
                    }
                    if(index!=0){
                        replaceUnitGroupPotion(0,index);
                        return;
                    }
                }

            }else{//进攻姿态
                if(ifUnitGroupAllDirectIsFormation(true)){//则核心为id最高的单位
                    int armyId=getUnitGroupArmyId(0);
                    int index=0;
                    //远程能力
                    for(int i=1;i<=6;i++){
                        int ta=getUnitGroupArmyId(i);
                        if(ta>armyId){
                            index=i;
                            armyId=ta;
                        }
                    }
                    if(index!=0){
                        replaceUnitGroupPotion(0,index);
                        return;
                    }
                }else  if(getUnitGroup()<3) {//核心为最低攻击的那个
                    int atk=getAttackDegree(0,tArmyId);
                    int index=0;
                    //远程能力
                    for(int i=1;i<=6;i++){
                        int ta=getAttackDegree(i,getUnitGroupArmyId(i));
                        if(ta!=0&&ta<atk){
                            index=i;
                            atk=ta;
                        }
                    }
                    if(index!=0){
                        replaceUnitGroupPotion(0,index);
                        return;
                    }
                }else{//核心为最高攻击的那个
                    int atk=getAttackDegree(0,tArmyId);
                    int index=0;
                    //远程能力
                    for(int i=1;i<=6;i++){
                        int ta=getAttackDegree(i,getUnitGroupArmyId(i));
                        if(ta>atk){
                            index=i;
                            atk=ta;
                        }
                    }
                    if(index!=0){
                        replaceUnitGroupPotion(0,index);
                        return;
                    }
                }
            }
        }

        private boolean ifUnitGroupAllDirectIsFormation(boolean ifAll) {
            if(ifAll){
             if(getUnitGroupArmyId(1)==0){
                 return false;
             }
                if(getUnitGroupArmyId(2)==0){
                    return false;
                }
                if(getUnitGroupArmyId(3)==0){
                    return false;
                }
                if(getUnitGroupArmyId(4)==0){
                    return false;
                }
                if(getUnitGroupArmyId(5)==0){
                    return false;
                }
                if(getUnitGroupArmyId(6)==0){
                    return false;
                }
            }else{
                if(getUnitGroupArmyId(1)==0&&getUnitGroupArmyId(2)==0){
                    return false;
                }
                if(getUnitGroupArmyId(2)==0&&getUnitGroupArmyId(3)==0){
                    return false;
                }
                if(getUnitGroupArmyId(3)==0&&getUnitGroupArmyId(4)==0){
                    return false;
                }
                if(getUnitGroupArmyId(1)==0&&getUnitGroupArmyId(5)==0){
                    return false;
                }
                if(getUnitGroupArmyId(5)==0&&getUnitGroupArmyId(6)==0){
                    return false;
                }
                if(getUnitGroupArmyId(4)==0&&getUnitGroupArmyId(6)==0){
                    return false;
                }
            }
            return true;
        }


        public void reduceArmyRound(int v) {
            setArmyRound(armyRound - v);
        }

        public void reduceArmyGoods(int i) {
            setSkillLv4(skillLv4 - i);
        }

        public void updArmyAbility(ArmyData pArmy) {
            unitGroup0Lv = pArmy.unitGroup0Lv;
            unitWealv0 = pArmy.getUnitWealv0Value();
            unitArmyId0 =pArmy.unitArmyId0;
            unitGroup1Lv = pArmy.unitGroup1Lv;
            unitWealv1 = pArmy.unitWealv1;
            unitArmyId1 =pArmy.unitArmyId1;
            unitGroup2Lv = pArmy.unitGroup2Lv;
            unitWealv2 = pArmy.unitWealv2;
            unitArmyId2 =pArmy.unitArmyId2;
            unitGroup3Lv = pArmy.unitGroup3Lv;
            unitWealv3 = pArmy.unitWealv3;
            unitArmyId3 =pArmy.unitArmyId3;
            unitGroup4Lv = pArmy.unitGroup4Lv;
            unitWealv4 = pArmy.unitWealv4;
            unitArmyId4 =pArmy.unitArmyId4;
            unitGroup5Lv = pArmy.unitGroup5Lv;
            unitWealv5 = pArmy.unitWealv5;
            unitArmyId5 =pArmy.unitArmyId5;
            unitGroup6Lv = pArmy.unitGroup6Lv;
            unitWealv6 = pArmy.unitWealv6;
            unitArmyId6 =pArmy.unitArmyId6;
            setArmyRank(ComUtil.getRandom(armyRank, pArmy.armyRank));
            setArmyKills(ComUtil.getRandom(armyKills, pArmy.armyKills));
            armyUpdForGeneral(this);
        }

        public void armyDeath(Boolean ifTrue) {
            Fb2Smap.this.army_Death(hexagonIndex, ifTrue);
        }

        public void setArmyHpNowFull() {
            armyHpNow = armyHpMax;
        }

        private AirData airData1;
        private AirData airData2;
        private AirData airData3;
        private AirData airData4;

        public int getAirCount() {
            int i = 0;
            if (airData1 != null) {
                i++;
            }
            if (airData2 != null) {
                i++;
            }
            if (airData3 != null) {
                i++;
            }
            if (airData4 != null) {
                i++;
            }
            return i;
        }

        //装载飞机
        public boolean loadAir(AirData a) {
            boolean rs = false;
            if (airData1 == null) {
                airData1 = a;
                a.armyData = this;
                rs = true;
            } else if (airData2 == null) {
                airData2 = a;
                a.armyData = this;
                rs = true;
            } else if (airData3 == null) {
                airData3 = a;
                a.armyData = this;
                rs = true;
            } else if (airData4 == null) {
                airData4 = a;
                a.armyData = this;
                rs = true;
            }
            //Gdx.app.error("loadAir error", a.getAirIndex()+":"+a.getRegionId());
            if (rs && a.getSourceBuildData() != null) {
                a.getSourceBuildData().removeAirIndex(a.getAirIndex());
            }
            if (armyActor != null) {
                armyActor.update();
            }
            return rs;
        }


        public boolean loadNul(NulcleData n) {
            if (nucleIndex == -1) {
                setNucleIndex(n.getNucleIndex());
                /*if (isPlayer()) {
                    effectStage.drawFace(hexagonIndex, 1);
                }*/
                if (armyActor != null) {
                    armyActor.updDrawInfo();
                }
              /*if(n.buildData!=null){
                  //BuildData b=getBuildDataByRegion(n.regionId);
                  n.buildData.removeNulIndex(n.getNucleIndex());
                  //n.buildData=null;
              }*/
                return true;
            }
            return false;
        }

        public AirData getAirData1() {
            return airData1;
        }

        public void setAirData1(AirData airData1) {
            this.airData1 = airData1;
        }

        public AirData getAirData2() {
            return airData2;
        }

        public void setAirData2(AirData airData2) {
            this.airData2 = airData2;
        }

        public AirData getAirData3() {
            return airData3;
        }

        public void setAirData3(AirData airData3) {
            this.airData3 = airData3;
        }

        public AirData getAirData4() {
            return airData4;
        }

        public void setAirData4(AirData airData4) {
            this.airData4 = airData4;
        }

        //装备武器
        public boolean ifCanLoadNul(int nuclearId) {
            if (nucleIndex != -1) {
                return false;
            }
            switch (nuclearId) {
                case 1701:
                    return true;
                case 1702:
                    if (armyType == 2) {
                        return true;
                    }
                    break;
                case 1703:
                    if (ifHaveFeature(1)) {
                        return true;
                    }
                    break;
                case 1704:
                    if (ifHaveFeature(1)) {
                        return true;
                    }
                    break;
                case 1705:
                    if (ifHaveFeature(1)) {
                        return true;
                    }
                    break;
            }
            return false;
        }

        public boolean haveNulCanLoad() {
            if (nucleIndex != -1 || armyType == 6) {
                return false;
            }
            BuildData build = getBuildData();
            if (build != null && build.getNuclearCount() > 0) {
                if (build.nulIndex1 != -1) {
                    NulcleData n = nulcleIDatas.get(build.nulIndex1);
                    if (n != null && ifCanLoadNul(n.getNuclearId())) {
                        return true;
                    }
                }
                if (build.nulIndex2 != -1) {
                    NulcleData n = nulcleIDatas.get(build.nulIndex2);
                    if (n != null && ifCanLoadNul(n.getNuclearId())) {
                        return true;
                    }
                }
                if (build.nulIndex3 != -1) {
                    NulcleData n = nulcleIDatas.get(build.nulIndex3);
                    if (n != null && ifCanLoadNul(n.getNuclearId())) {
                        return true;
                    }
                }
                if (build.nulIndex4 != -1) {
                    NulcleData n = nulcleIDatas.get(build.nulIndex4);
                    if (n != null && ifCanLoadNul(n.getNuclearId())) {
                        return true;
                    }
                }
            }
            return false;
        }

        //构建防御工事
        public boolean canBuildFort() {
            if (masterData.getPlayerMode() == 2) {
                return false;
            }
            if (getArmyRound() == 0 && buildRDatas.containsKey(hexagonIndex)) {//如果位于核心就可以建造工事
                return true;
            }
            if (!ifHaveFeature(4) || getArmyRound() != 0 || ifSea(hexagonIndex) || getLegionIndexByRegion(hexagonIndex) != legionIndex || buildRDatas.containsKey(hexagonIndex) || getFacilityDataByHexagon(hexagonIndex) != null) {
                return false;
            }
            return true;
        }

        public boolean canDeloyTrap() {
            if (!ifHaveSkill(125) || !ifHaveFeature(10) || getIfMove() != 0 || getIfAttack() != 0 || getArmyRound() != 0 || (getLegionIndexByRegion(hexagonIndex) != 0 && getForeignDegree(getLegionIndexByRegion(hexagonIndex), legionIndex) == -1) || buildRDatas.containsKey(hexagonIndex) || getFacilityDataByHexagon(hexagonIndex) != null || getFortDataByHexagon(hexagonIndex) != null || !getLegionData().canPayCard(null, 5005)) {
                return false;
            }
            return true;
        }

        @Override
        public boolean isPlayerAlly() {
            return ifAllyPlayerByLi(legionIndex);
        }

        //获取所在位置的li
        public int getPotionLegionIndex() {
            return getLegionIndexByRegion(hexagonIndex);
        }

        //如果单位转换了归属,则其将军需要转换
        public void transGeneral() {
            if (getGeneralIndex() == 0) {
                return;
            }
            GeneralData g = getGeneralData();
            if (g.getLegionIndex() == legionIndex) {
                return;
            } else {
                g.getLegionData().varGeneralNum--;
                g.setLegionIndex(legionIndex);
                general_Replace(g, false);
                legionDatas.get(legionIndex).varGeneralNum++;
            }


        }


        public int addArmyHpByRate(int v) {
            int hp = armyHpMax * v / 100;
            addArmyHpNow(hp);
            return hp;
        }

        public void armyMove(int id) {
            army_Move(this, id);
        }

        //获得一个地点是否可以瞬移过去
        public boolean ifCanTeleport(int hexagon) {
            if (armyType == 5 || armyType == 7) {
                return false;
            }
            ArmyData a = getArmyDataByHexagon(hexagon);
            if (a != null && a.getArmyHpNow() > 0) {
                return false;
            }
            //建筑不能往 海洋或者区域核心,区域归属不同的地方 移动
            if (armyType == 6 && (ifSea(hexagon) || buildRDatas.containsKey(hexagon) || legionIndex != getLegionIndexByRegion(hexagon))) {
                return false;
            }
            if (ifSea(hexagon) && (armyType != 4 && armyType != 8)) {
                return false;
            }
            if (!ifSea(hexagon) && (armyType == 4 || armyType == 8)) {
                return false;
            }
            return true;
        }
        @Override
        public int getTerrainId() {
            Fb2Map.MapHexagon h = getHexagonData();
            if (h != null) {
                return h.getActualTerrain();
            }
            return 0;
        }

        public void removeAirIndex(int airIndex) {
            if (airData1 != null && airData1.getAirIndex() == airIndex) {
                airData1 = null;
            } else if (airData2 != null && airData2.getAirIndex() == airIndex) {
                airData2 = null;
            } else if (airData3 != null && airData3.getAirIndex() == airIndex) {
                airData3 = null;
            } else if (airData4 != null && airData4.getAirIndex() == airIndex) {
                airData4 = null;
            }
            if (armyActor != null) {
                armyActor.update();
            }
        }

        //判断一个单位能否被运输
        public boolean ifCanTransport() {
            if (getAge() > 1 && armyType == 1) {
                return true;
            }
            if (getAge() > 2 && armyType != 4 && armyType != 6 && armyType != 8) {
                return true;
            }
            return false;
        }
        //不可以复制将军
        public void copyAttributes(ArmyData tArmy,boolean ifCopyG) {
            this.setArmyType(tArmy.getArmyType());
            this.setArmyKills(tArmy.getArmyKills());
            this.setArmyHpMax(tArmy.getArmyHpMax());
            this.setArmyHpNow(tArmy.getArmyHpNow());
            this.setSkillId1(tArmy.getSkillId1());
            this.setSkillId2(tArmy.getSkillId2());
            this.setSkillId3(tArmy.getSkillId3());
            this.setSkillId4(tArmy.getSkillId4());
            if(ifCopyG){
                this.setGeneralIndex(tArmy.getGeneralIndex());
            }else{
                this.setGeneralIndex(0);
            }
            this.setArmyRank(tArmy.getArmyRank());
            this.setArmyMorale(tArmy.getArmyMorale());
            this.setArmyFormation(0);
            this.setHinge(tArmy.getHinge());
            this.setArmyDirectionValue(tArmy.getArmyDirection());
            this.setAirforcePolicy(tArmy.getAirforcePolicy());
            this.setArmyRound(tArmy.getArmyRound());
            this.setUnitWealv0(tArmy.getUnitWealv0Value());
            this.setTransportType(tArmy.getTransportType());
            this.setArmyAi(tArmy.getArmyAi());
            this.setNucleIndex(tArmy.getNucleIndex());
            this.setTargetRegion(tArmy.getTargetRegion());
            this.setStandyRound(tArmy.getStandyRound());
            this.setSkillLv1(tArmy.getSkillLv1());
            this.setSkillLv2(tArmy.getSkillLv2());
            this.setSkillLv3(tArmy.getSkillLv3());
            this.setSkillLv4(tArmy.getSkillLv4());
            this.setIfMove(tArmy.getIfMove());
            this.setIfAttack(tArmy.getIfAttack());
            this.setArmyBuff1(tArmy.getArmyBuff1());
            this.setArmyBuff2(tArmy.getArmyBuff2());
            this.setArmyBuff3(tArmy.getArmyBuff3());
            this.setGameValue(tArmy.getGameValue());
            this.setUnitArmyId0(tArmy.getUnitArmyId0());
            this.setUnitArmyId1(tArmy.getUnitArmyId1());
            this.setUnitArmyId2(tArmy.getUnitArmyId2());
            this.setUnitArmyId3(tArmy.getUnitArmyId3());
            this.setUnitArmyId4(tArmy.getUnitArmyId4());
            this.setUnitArmyId5(tArmy.getUnitArmyId5());
            this.setUnitArmyId6(tArmy.getUnitArmyId6());

            this.setUnitWealv0(tArmy.getUnitWealv0());
            this.setUnitWealv1(tArmy.getUnitWealv1());
            this.setUnitWealv2(tArmy.getUnitWealv2());
            this.setUnitWealv3(tArmy.getUnitWealv3());
            this.setUnitWealv4(tArmy.getUnitWealv4());
            this.setUnitWealv5(tArmy.getUnitWealv5());
            this.setUnitWealv6(tArmy.getUnitWealv6());

            this.setUnitGroup0Lv(tArmy.getUnitGroup0Lv());
            this.setUnitGroup1Lv(tArmy.getUnitGroup1Lv());
            this.setUnitGroup2Lv(tArmy.getUnitGroup2Lv());
            this.setUnitGroup3Lv(tArmy.getUnitGroup3Lv());
            this.setUnitGroup4Lv(tArmy.getUnitGroup4Lv());
            this.setUnitGroup5Lv(tArmy.getUnitGroup5Lv());
            this.setUnitGroup6Lv(tArmy.getUnitGroup6Lv());
        }

        public void removeNulIndex() {
            nucleIndex = -1;
            if (armyActor != null) {
                armyActor.updDrawInfo();
            }
        }

        public void resetState() {
            setArmyRound(0);
            setArmyHpNow(getArmyHpMax());
            setIfMove(0);
            setIfAttack(0);
            setArmyMorale(game.resGameConfig.resetUnitMoraleMax);
        }

        public boolean haveCanAtkEnemy() {
            return getTargetEnemyByRangeTIA1(this) != -1;
        }

        public String getFeatureTriggerStr() {
            StringBuilder str = new StringBuilder();
            String features = getFeature();
            if (!features.equals("0")) {
                String[] strs = features.split(",");
                for (int i = 0; i < strs.length; i++) {
                    if (ComUtil.isNumeric(strs[i])) {
                        int feature = Integer.parseInt(strs[i]);
                        if (ifHaveFeature(feature) && GameMethod.ifUnitFeatureCanUpd(feature)) {
                            str.append("\n").append(game.gameMethod.getStrValue("feature_effect_" + feature, game.gameMethod.getUnitFeatureEffect(feature, getFeatureLv(feature))));
                        } else {
                            continue;
                        }
                    }
                }
            }
            return str.toString();
        }

        public int getWealMaxLv() {
            return getArmyLvByArmyType(unitArmyId0, armyType, legionIndex);
        }

        public int getPopulation() {
           /* XmlReader.Element aE = game.gameConfig.getDEF_ARMY().getElementById(unitArmyId0);
            if (aE != null ) {
                if(isUnitGroup()){
                    return ComUtil.limitValue((unitArmyId0 ==0?0:unitGroup0Lv)+(unitArmyId1 ==0?0:unitGroup1Lv)+(unitArmyId2 ==0?0:unitGroup2Lv)+(unitArmyId3 ==0?0:unitGroup3Lv)+(unitArmyId4 ==0?0:unitGroup4Lv)+(unitArmyId5 ==0?0:unitGroup5Lv)+(unitArmyId6 ==0?0:unitGroup6Lv), 1, 100);
                }else{
                    return aE.getInt("population",1)+unitGroup0Lv;
                }
            }*/
            if(getArmyType()==6||getArmyType()==5){
return 1;
            }
            return population;
        }

        public int getAttackChance() {
            return getHpRate() / 2 + getArmyMorale();
        }

        public int getArmorByDirect() {
            int armor = 0;
            if (potionIsSea()) {
                if (shipXmlE != null) {
                    armor += shipXmlE.getInt("armor", 0);
                }
            } else {
                if (armyXmlE0 != null) {
                    armor += armyXmlE0.getInt("armor", 0);
                }
            }

            armor = armor  + getArmyRank() * game.resGameConfig.addDefEachRank;
            if (getArmyType() == 6 && getUnitArmyId0() != 1606) {
                armor = armor + getLegionData().getFortLvMax();
            }
            if (isPlayer() ) {
                if( controlMode == 1){
                    armor += 1000;
                }else if(game.gameConfig.ifLeisureMode){
                    armor*=2;
                }
            }
            BuildData b = getBuildData();
            if (b != null && b.getLegionIndex() == getLegionIndex()) {
                if (b.getBuildWonder() > 0) {
                    XmlReader.Element xE = game.gameConfig.getDEF_WONDER().getElementById(b.getBuildWonder());
                    if (xE != null) {
                        int function = xE.getInt("fucntion", 0);
                        int effect = xE.getInt("effect", 0);
                        int value = xE.getInt("value", 0);
                        if (function==5&&effect==4) {
                            armor += value;
                        }
                    }
                }
                armor += b.getDefenceLvNow();
                int effect = b.getSkillEffect(106, true);
                if (effect > 0) {
                    armor = armor * (100 + effect) / 100;
                }
                effect = b.getSkillEffect(87, true);
                if (effect > 0 && getHexagonIndex() == b.getRegionId()) {
                    armor = armor * (100 + effect) / 100;
                }
            }
            if (ifHaveSkill(35)) {
                armor = armor * (100 + getSkillEffect(35)) / 100;
                drawSkill(35);
            }
            //陆军在海洋区域防御力削减到80%
            if (armyType != 4 && armyType != 8 && potionIsSea()) {
                if (!ifHaveSkill(89)) {
                    armor = armor * (80) / 100;
                } else {
                    drawSkill(89);
                }
            }
            if(spiritMap!=null&&ifEffective(16)){
                if(spiritMap.containsKey(41)){
                    armor=armor*2;
                }
            }
            if(!isUnitGroup()){
                armor=armor*(100+getUnitWealv4()*game.resGameConfig.addDefForDefLv)/100;
            }
            armor=armor*(100+getUnitGroupPower()*game.resGameConfig.addDefRateForGroupLv)/100;
            return armor;
        }

        @Override
        public int getBorderAttackCrit() {
            int crit;
            crit= armyMorale/2+5;
            BuildData b = getBuildData();
            if (b != null && b.getLegionIndex() == getLegionIndex() && b.getBuildWonder() > 0) {
                XmlReader.Element xE = game.gameConfig.getDEF_WONDER().getElementById(b.getBuildWonder());
                if (xE != null) {
                    int function = xE.getInt("fucntion", 0);
                    int effect = xE.getInt("effect", 0);
                    int value = xE.getInt("value", 0);
                    if (function == 9 && effect == getArmyType()) {
                        crit += value;
                    }
                }
            }
            return crit;
        }

        @Override
        public int getRangeAttackCrit() {
            return rangeCritChance;
        }

        @Override
        public int getUnitRank() {
            return getArmyRank();
        }

        @Override
        public void setUnitMoraleChange(int i) {
            setArmyMoraleChange(i);
        }

        @Override
        public void setUnitMorale(int i) {
            setArmyMorale(i);
        }


        public float getMoraleRate() {
            return armyMorale * 1f / 100;
        }

        public AirData getReadyAir(int airFeature, int targetHexagon) {
            //ifInRange(tArmy.getHexagonIndex(), army.getHexagonIndex(), tArmy.getMinRange(), tArmy.getMaxRange(), tArmy.getIfOnlySeaForTarget());
            if (airData1 != null && airData1.ifOkByAirPolicy(targetHexagon) && (airData1.ifHaveAirFeature(airFeature) || airFeature == -1) && airData1.getAirRound() == 0 && airData1.getAirGoodsNow() > 0 && ifInRange(getHexagonIndex(), targetHexagon, airData1.getMinRange(), airData1.getMaxRange(), false)) {
                return airData1;
            }
            if (airData2 != null && airData2.ifOkByAirPolicy(targetHexagon) && (airData2.ifHaveAirFeature(airFeature) || airFeature == -1) && airData2.getAirRound() == 0 && airData2.getAirGoodsNow() > 0 && ifInRange(getHexagonIndex(), targetHexagon, airData2.getMinRange(), airData2.getMaxRange(), false)) {
                return airData2;
            }
            if (airData3 != null && airData3.ifOkByAirPolicy(targetHexagon) && (airData3.ifHaveAirFeature(airFeature) || airFeature == -1) && airData3.getAirRound() == 0 && airData3.getAirGoodsNow() > 0 && ifInRange(getHexagonIndex(), targetHexagon, airData3.getMinRange(), airData3.getMaxRange(), false)) {
                return airData3;
            }
            if (airData4 != null && airData4.ifOkByAirPolicy(targetHexagon) && (airData4.ifHaveAirFeature(airFeature) || airFeature == -1) && airData4.getAirRound() == 0 && airData4.getAirGoodsNow() > 0 && ifInRange(getHexagonIndex(), targetHexagon, airData4.getMinRange(), airData4.getMaxRange(), false)) {
                return airData4;
            }
            return null;
        }

        //获取range范围内的建筑
        //0全部  1友军 2中立 -1敌军
        public BuildData getBuildDataInRange(int type, int range) {
            IntArray tempIntArray1 = game.tempUtil.getTempIntArray();
            getRangePostion(getHexagonIndex(), 0, range, getIfSeaForMove(), tempIntArray1);
            if (!tempIntArray1.contains(getHexagonIndex())) {
                tempIntArray1.add(getHexagonIndex());
            }
            for (int i = 0; i < tempIntArray1.size; i++) {
                int tempId=tempIntArray1.get(i);
                BuildData b = getBuildDataByRegion(tempId);
                if (b != null) {
                    switch (type) {
                        case 0:
                            game.tempUtil.disposeTempIntArray(tempIntArray1);
                            return b;
                        case 1:
                            if (getForeignDegree(b.getLegionIndex(), getLegionIndex()) == 1) {
                                game.tempUtil.disposeTempIntArray(tempIntArray1);
                                return b;
                            }
                            break;
                        case 2:
                            if (getForeignDegree(b.getLegionIndex(), getLegionIndex()) == 0) {
                                game.tempUtil.disposeTempIntArray(tempIntArray1);
                                return b;
                            }
                            break;
                        case -1:
                            if (getForeignDegree(b.getLegionIndex(), getLegionIndex()) == -1) {
                                game.tempUtil.disposeTempIntArray(tempIntArray1);
                                return b;
                            }
                            break;
                    }
                }
            }
            game.tempUtil.disposeTempIntArray(tempIntArray1);
            return null;
        }

        public boolean canMove(int hexagon) {
            if (!ifGridIsPass(hexagon)) {
                return false;
            }
            if ((armyType == 4 || armyType == 8) && !ifSea(hexagon)) {
                return false;
            }
            if (armyType == 6 && (ifSea(hexagon)||armyActor!=null )) {
                return false;
            }
            BuildData build = getBuildDataByRegion(hexagon);
            if (build != null ) {
                if((build.getCityHpNow() != 0 && build.getLegionIndex() != getLegionIndex())||(armyType == 6)){
                    return false;
                }
            }

            ArmyData army = getArmyDataByHexagon(hexagon);
            if (army != null) {
                return false;
            }
            return true;
        }

        public float getGroupRate() {
            float rs = 1 + (getUnitGroupPower() - 1) * 0.1f;
            if (rs < 1f) {
                rs = 1f;
            }
            return rs;
        }
        public float getGroupRate(int groupLv) {
            float rs = 1 + (groupLv - 1) * 0.1f;
            if (rs < 1f) {
                rs = 1f;
            }
            return rs;
        }


        public float getUnitGroupGroupRate(int index) {
            return getGroupRate(getUnitGroupGroupLv(index));
        }

        public float getGroupRate(float baseRate, float minRate, float maxRate) {
            float rs = ComUtil.limitFValue(1 + (getUnitGroup() - 1) * baseRate, minRate, maxRate);
            return rs;
        }


        //单位可以行动到目标位置  包括攻击和移动
        public boolean canActRegion(int regionId) {
            BuildData b = getBuildDataByRegion(regionId);
            if (b == null) {
                return false;
            }
            //  1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇
            switch (armyType) {
                case 1:
                case 2:
                case 3:
                    if (b.isPlayerAlly()) {
                        if (!b.haveLegionActGrid(0)) {
                            return false;
                        }
                    }
                    break;
                case 4:
                case 8:
                    if (b.isPlayerAlly()) {
                        if (!b.haveLegionActGrid(2)) {
                            return false;
                        }
                    } else {
                        if (!b.ifHaveLegionAllyUnit(true) && b.getCityHpNow() == 0 && !b.haveLegionActGrid(2)) {
                            return false;
                        }
                    }
                    break;
                case 5:
                case 7:
                    if (b.isPlayerAlly()) {
                        if (!b.haveLegionActGrid(0)) {
                            return false;
                        }
                    } else {
                        if (!b.ifHaveLegionAllyUnit(true) && b.getCityHpNow() == 0) {
                            return false;
                        }
                    }
                    break;
            }
            return true;
        }

        public int getRegionDefAirLv() {
            BuildData b = getBuildDataByRegion(regionId);
            if (b != null && b.getLegionIndex() == legionIndex) {
                return b.getMissileLvNow();
            }
            return 0;
        }

        private int getRegionAirLv() {
            BuildData b = getBuildDataByRegion(regionId);
            if (b != null && b.getLegionIndex() == legionIndex) {
                return b.getAirLvNow();
            }
            return 0;
        }

        //是否可以防空
        public boolean ifCanAirDefense() {
            if (ifHaveFeature(5) || ifHaveFeature(19) || ifHaveFeature(28) || ifRegionHaveFeature(getRegionId(), legionIndex, 31)) {
                return true;
            } else {
                return ComUtil.ifGet(getRegionDefAirLv() * 10);
            }
        }

        public boolean canAttack(ArmyData ta) {
            if (ta == null) {
                return false;
            }
            if (ta.getLegionIndex()==legionIndex) {
                return false;
            }
            ForeignData f=getForeignData(getLegionIndex(),getLegionIndex());
            if(f!=null&&f.getForeignType()>0){
                if(isPlayer()&&ifSystemEffective(18)){

                }else{
                    return false;
                }
            }
            float weapBonus = game.gameMethod.getWeaponValue(getArmyXmlE(0,true).getInt("weapon"), ta.getArmyType(), getUnitWealv0Value()) / 100f;
            if (weapBonus > 0) {
                return true;
            }
            return false;
        }


        //目标是否在射程内
        public boolean ifInArmyRange(int targetHexagon) {
            if(isUnitGroup()&&!potionIsSea()){
                int hexagon = getHexagonIndex();
                if (masterData.getPlayerMode() == 2) {
                    hexagon = Fb2Smap.this.getRegionId(hexagon);
                }
                return ifInRange(hexagon, targetHexagon, minRange, maxRange, getIfOnlySeaForTarget());
            }else{
                int hexagon = getHexagonIndex();
                if (masterData.getPlayerMode() == 2) {
                    hexagon = Fb2Smap.this.getRegionId(hexagon);
                }
                return ifInRange(hexagon, targetHexagon, getMinRange(), getMaxRange(), getIfOnlySeaForTarget());
            }

        }

        //是否相邻 相等也为false
        public boolean ifBorderRegion(int regionId, boolean ifCanCommonPotion) {
            return Fb2Smap.this.ifBorderRegion(getHexagonIndex(), regionId, ifCanCommonPotion);
        }

        public int getAge() {
            return Fb2Smap.this.getAge();
        }

        public void clearAllSkill() {
            setSkillLv1(0);
            setSkillLv2(0);
            setSkillLv3(0);
            setSkillLv4(0);
            setSkillId1(0);
            setSkillId2(0);
            setSkillId3(0);
            setSkillId4(0);
        }

        public void removeSkill(int killId){
            int index=getSkillIndex(killId);
            clearSkill(index);
        }

        public void clearSkill(int index) {
            switch (index) {
                case 0:
                    setSkillLv1(0);
                    setSkillId1(0);
                    break;
                case 1:
                    setSkillLv2(0);
                    setSkillId2(0);
                    break;
                case 2:
                    setSkillLv3(0);
                    setSkillId3(0);
                    break;
                case 3:
                    setSkillLv4(0);
                    setSkillId4(0);
                    break;
            }
        }

        //是否有空缺的技能位
        public boolean haveCanLearnSkill() {
            if (getSkillId1() == 0 || getSkillId2() == 0 || getSkillId3() == 0 || getSkillId4() == 0) {
                return true;
            }
            return false;
        }

        public boolean learnSkill(int skillId,int skillLv) {
            if (skillId1 == 0) {
                skillId1 = skillId;
                skillLv1 = skillLv;
                return true;
            } else if (skillId2 == 0) {
                skillId2 = skillId;
                skillLv2 = skillLv;
                return true;
            } else if (skillId3 == 0) {
                skillId3 = skillId;
                skillLv3 = skillLv;
                return true;
            } else if (skillId4 == 0) {
                skillId4 = skillId;
                skillLv4 = skillLv;
                return true;
            } else {
                return false;
            }
        }
        public boolean learnSkill(int skillId) {
            if (skillId1 == 0) {
                skillId1 = skillId;
                skillLv1 = 1;
                return true;
            } else if (skillId2 == 0) {
                skillId2 = skillId;
                skillLv2 = 1;
                return true;
            } else if (skillId3 == 0) {
                skillId3 = skillId;
                skillLv3 = 1;
                return true;
            } else if (skillId4 == 0) {
                skillId4 = skillId;
                skillLv4 = 1;
                return true;
            } else {
                return false;
            }
        }

        public boolean updSkill(int skillId) {
            boolean rs=false;
            if (skillId1 == skillId) {
                if (skillLv1 < game.resGameConfig.skillMaxLv) {
                    skillLv1++;
                    rs=true;
                }
            } else if (skillId2 == skillId) {
                if (skillLv2 < game.resGameConfig.skillMaxLv) {
                    skillLv2++;
                    rs=true;
                }
            } else if (skillId3 == skillId) {
                if (skillLv3 < game.resGameConfig.skillMaxLv) {
                    skillLv3++;
                    rs=true;
                }
            } else if (skillId4 == skillId) {
                if (skillLv4 < game.resGameConfig.skillMaxLv) {
                    skillLv4++;
                    rs=true;
                }
            } else {
                rs= learnSkill(skillId);
            }
            return rs;
        }

        public int getSkillIdByIndex(int index) {
            switch (index) {
                case 0:
                    return skillId1;
                case 1:
                    return skillId2;
                case 2:
                    return skillId3;
                case 3:
                    return skillId4;
            }
            return 0;
        }

        public int getSkillLvByIndex(int index) {
            switch (index) {
                case 0:
                    return skillLv1;
                case 1:
                    return skillLv2;
                case 2:
                    return skillLv3;
                case 3:
                    return skillLv4;
            }
            if (ifHaveSkill(70) && ComUtil.ifGet(1)) {
                drawSkill(70);
                return 1;
            }
            return 0;
        }

        private int getRandomCanUpdSkill() {
            IntArray rs = game.tempUtil.getTempIntArray();
            for (int i = 0; i < 4; i++) {
                int skillId = getSkillIdByIndex(i);
                if (skillId > 0 && getSkillLvByIndex(i) < game.resGameConfig.skillMaxLv) {
                    XmlReader.Element xmlE = game.gameConfig.getDEF_SKILL().getElementById(skillId);
                    if (checkSkillConditions(xmlE)) {
                        rs.add(skillId);
                    }
                }
            }
            if (rs.size > 0) {
                int skill = rs.random();
                game.tempUtil.disposeTempIntArray(rs);
                return skill;
            }
            return 0;
        }

        public boolean ifHaveSkill(int skillId) {
            if (!ifEffective(21)) {
                return false;
            }
            if (skillId1 == skillId || (skillId1 == 70 && ComUtil.ifGet(1))) {
                return true;
            } else if (skillId2 == skillId || (skillId2 == 70 && ComUtil.ifGet(1))) {
                return true;
            } else if (skillId3 == skillId || (skillId3 == 70 && ComUtil.ifGet(1))) {
                return true;
            } else if (skillId4 == skillId || (skillId4 == 70 && ComUtil.ifGet(1))) {
                return true;
            }
            if (ifEffective(19)) {
                BuildData b = getBuildData();
                if (b != null && b.getLegionIndex() == legionIndex && b.getBuildWonder() > 0) {
                    XmlReader.Element xE = game.gameConfig.getDEF_WONDER().getElementById(b.getBuildWonder());
                    if (xE != null) {
                        int function = xE.getInt("fucntion", 0);
                        int effect = xE.getInt("effect", 0);
                        //  int value=xE.getInt("value",0);
                        if (function == 11 && effect == skillId) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        public int getSkillChance(int skillId) {
            if (ifHaveSkill(skillId)) {
                int skillLv = getSkillLv(skillId);
                XmlReader.Element xmlE = game.gameConfig.getDEF_SKILL().getElementById(skillId);
                if (xmlE != null) {
                    return xmlE.getInt("baseChance", 0) + xmlE.getInt("updChance", 0) * skillLv;
                }
            }
            return 0;
        }

        private int getSkillIndex(int skillId) {
            if (skillId1 == skillId) {
                return 0;
            } else if (skillId2 == skillId) {
                return 1;
            } else if (skillId3 == skillId) {
                return 2;
            } else if (skillId4 == skillId) {
                return 3;
            }
            return -1;
        }

        public int getSkillEffect(int skillId) {
            if (ifHaveSkill(skillId)) {
                int skillLv = getSkillLv(skillId);
                XmlReader.Element xmlE = game.gameConfig.getDEF_SKILL().getElementById(skillId);
                if (xmlE != null) {
                    return xmlE.getInt("baseValue", 0) + xmlE.getInt("updValue", 0) * skillLv;
                }
            }
            return 0;
        }

        //升级技能
        public void updSkill() {
            updForSKill();
            int c = checkSkill();
            if (c > 0) {
                for (int i = 0; i < c; i++) {
                    updForSKill();
                }
            }
        }


        private int getSkillSum() {
            int rs = 0;
            if (skillId1 != 0) {
                rs += skillLv1;
            }
            if (skillId2 != 0) {
                rs += skillLv2;
            }
            if (skillId3 != 0) {
                rs += skillLv3;
            }
            if (skillId4 != 0) {
                rs += skillLv4;
            }
            return rs;
        }

        public void updSkillForRank() {
            int sum = getSkillSum();
            if (sum < getArmyRank()) {
                checkSkill();
                for (int i = 0, iMax = getArmyRank() - sum; i < iMax; i++) {
                    updForSKill();
                }
            }
        }
        //替换非法技能
        public void replaceSkill() {
            int iMax = checkSkill();
            if (iMax>0) {
                for (int i = 0; i < iMax; i++) {
                    updForSKill();
                }
            }
        }

        //重置技能
        public void resetSkill() {
            if (getArmyRank() > 0) {
                clearAllSkill();
                for (int i = 0; i < getArmyRank(); i++) {
                    updForSKill();
                }
            }
        }

        //返回移除的技能次数 为0则说明技能正常
        private int checkSkill() {
            for (int i = 0; i < 4; i++) {
                int skillId = getSkillIdByIndex(i);
                if (skillId > 0) {
                    int skillLv = getSkillLvByIndex(i);
                    if (skillLv == 0) {
                        setSkillLv(i, 1);
                    }
                }
            }
            int c = 0;
            if (getGeneralIndex() == 0) {//如果为普通单位,则检查有无内置技能
                for (int i = 0; i < 4; i++) {
                    int skillId = getSkillIdByIndex(i);
                    if (skillId > 0) {
                        XmlReader.Element sE = game.gameConfig.getDEF_SKILL().getElementById(skillId);
                        int unitType = sE.getInt("unitType", 0);
                        if (unitType == 1) {
                            clearSkill(i);
                            c++;
                        }else if(!checkSkillConditions(sE)){
                            clearSkill(i);
                            c++;
                        }
                    }
                }
            } else {//如果为将军,则检查有无限制技能
                for (int i = 0; i < 4; i++) {
                    int skillId = getSkillIdByIndex(i);
                    if (skillId > 0) {
                        XmlReader.Element sE = game.gameConfig.getDEF_SKILL().getElementById(skillId);
                        int unitType = sE.getInt("unitType", 0);
                        if (unitType == 2) {
                            clearSkill(i);
                            c++;
                        }else if(!checkSkillConditions(sE)){
                            clearSkill(i);
                            c++;
                        }
                    }
                }
            }
            return c;
        }

        private void setSkillLv(int index, int value) {
            switch (index) {
                case 0:
                    skillLv1 = value;
                    break;
                case 1:
                    skillLv2 = value;
                    break;
                case 2:
                    skillLv3 = value;
                    break;
                case 3:
                    skillLv4 = value;
                    break;
            }
        }

        private void setSkill(int index, int skillId,int lv) {
            switch (index) {
                case 0:
                    skillId1 = skillId;
                    skillLv1 = lv;
                    break;
                case 1:
                    skillId2 = skillId;
                    skillLv2 = lv;
                    break;
                case 2:
                    skillId3 = skillId;
                    skillLv3 = lv;
                    break;
                case 3:
                    skillId4 = skillId;
                    skillLv4 = lv;
                    break;
            }
        }

        public boolean canUpdSkill(int index){
            int skillId=getSkillIdByIndex(index);
            XmlReader.Element r = game.gameConfig.getDEF_SKILL().getElementById(skillId);
            if (r!=null&& checkSkillConditions(r)) {
              return true;
            }
            return false;
        }

        private void updForSKill() {
            int skillId=-1;
            if (haveCanLearnSkill()) {//有可以学习的新技能
                Array<XmlReader.Element> rs = game.gameConfig.getDEF_SKILL().e.getChildrenByName("skill");
                rs.shuffle();
                for (XmlReader.Element r : rs) {
                    skillId = r.getInt("id");
                    if (!ifHaveSkill(skillId) && checkSkillConditions(r)) {
                        learnSkill(skillId);
                        break;
                    }
                }
            } else {//升级已经有的技能
                skillId = getRandomCanUpdSkill();
                if (skillId > 0) {
                    updSkill(skillId);
                }
            }
            if(skillId>0&&isPlayer()){
                drawSkill(skillId);
            }
        }

        public int getSkillLv(int skillId) {
            int rs = getSkillLvByIndex(getSkillIndex(skillId));
            if (rs == 0 && ifEffective(19)) {
                BuildData b = getBuildData();
                if (b != null && b.getLegionIndex() == legionIndex && b.getBuildWonder() > 0) {
                    XmlReader.Element xE = game.gameConfig.getDEF_WONDER().getElementById(b.getBuildWonder());
                    if (xE != null) {
                        int function = xE.getInt("fucntion", 0);
                        int effect = xE.getInt("effect", 0);
                        int value = xE.getInt("value", 0);
                        if (function == 11 && effect == skillId) {
                            rs = value;
                        }
                    }
                }
            }
            return rs;
        }

        //检查是否满足技能的条件
        private boolean checkSkillConditions(XmlReader.Element sE) {
            int skillId = sE.getInt("id", 0);
            if (getAge() < sE.getInt("age", 0)) {
                return false;
            }
            String useMode = sE.get("useMode", "-1");
            if (!useMode.equals("-1") && !ComUtil.ifHaveValueInStr(useMode, masterData.getPlayerMode())) {
                return false;
            }
            if (ifHaveSkill(skillId)) {
                int skillLv = getSkillLv(skillId);
                if (skillLv >= game.resGameConfig.skillMaxLv || (!sE.getBoolean("ifUpd", true) && skillLv > 0)) {
                    return false;
                }
            }
            //skillType-1非步兵 -2非炮兵 -3非装甲 -4非舰船 -5非飞机 -6非要塞 -7非超武 -8非潜艇  -9仅近战非空军 -10仅远程非空军   -11 非步兵非要塞非空军 -12 非步兵非空军
            // 0无限制 1仅步兵 2仅炮兵 3仅装甲 4仅舰船 5仅飞机 6仅要塞 7仅超武 8仅潜艇 9全部陆军(不包含海军) 10全部海军 11陆军和海军 12陆军和海军且非要塞 13 仅陆军且非要塞
            switch (sE.getInt("type")) {
                case -1:
                    if (getArmyType() == 1) {
                        return false;
                    }
                    break;
                case -2:
                    if (getArmyType() == 2) {
                        return false;
                    }
                    break;
                case -3:
                    if (getArmyType() == 3) {
                        return false;
                    }
                    break;
                case -4:
                    if (getArmyType() == 4) {
                        return false;
                    }
                    break;
                case -5:
                    if (getArmyType() == 5) {
                        return false;
                    }
                    break;
                case -6:
                    if (getArmyType() == 6) {
                        return false;
                    }
                    break;
                case -7:
                    if (getArmyType() == 7) {
                        return false;
                    }
                    break;
                case -8:
                    if (getArmyType() == 8) {
                        return false;
                    }
                    break;
                case -9:
                    if (getArmyType() == 5 || getMaxRange() > 1) {
                        return false;
                    }
                    break;
                case -10:
                    if (getArmyType() == 5 || getMaxRange() < 2) {
                        return false;
                    }
                    break;
                case -11:
                    if (getArmyType() == 1 || getArmyType() == 5 || getArmyType() == 6) {
                        return false;
                    }
                    break;
                case -12:
                    if (getArmyType() == 1 || getArmyType() == 5) {
                        return false;
                    }
                    break;
                case 1:
                    if (getArmyType() != 1) {
                        return false;
                    }
                    break;
                case 2:
                    if (getArmyType() != 2) {
                        return false;
                    }
                    break;
                case 3:
                    if (getArmyType() != 3) {
                        return false;
                    }
                    break;
                case 4:
                    if (getArmyType() != 4) {
                        return false;
                    }
                    break;
                case 5:
                    if (getArmyType() != 5) {
                        return false;
                    }
                    break;
                case 6:
                    if (getArmyType() != 6) {
                        return false;
                    }
                    break;
                case 7:
                    if (getArmyType() != 7) {
                        return false;
                    }
                    break;
                case 8:
                    if (getArmyType() != 8) {
                        return false;
                    }
                    break;
                case 9:
                    if (getArmyType() != 1 && getArmyType() != 2 && getArmyType() != 3 && getArmyType() != 6) {
                        return false;
                    }
                    break;
                case 10:
                    if (getArmyType() != 4 && getArmyType() != 8) {
                        return false;
                    }
                    break;
                case 11:
                    if (getArmyType() == 5 || getArmyType() == 7) {
                        return false;
                    }
                    break;
                case 12:
                    if (getArmyType() == 5 || getArmyType() == 6 || getArmyType() == 7) {
                        return false;
                    }
                    break;
                case 13:
                    if (getArmyType() != 1 && getArmyType() != 2 && getArmyType() != 3) {
                        return false;
                    }
                    break;
            }
            //unitType 0 无限制 1仅将军   2 仅单位
            switch (sE.getInt("unitType")) {
                case 1:
                    if (getGeneralIndex() == 0) {
                        return false;
                    }
                    break;
                case 2:
                    if (getGeneralIndex() != 0) {
                        return false;
                    }
                    break;
            }

            return true;
        }

        public String getArmyTypeStr() {
            if (getUnitArmyId0() == 1606) {
                return game.gameMethod.getStrValue("armyType_6_2");
            }
            return game.gameMethod.getStrValue("armyType_" + getArmyType());
        }

        public String getUnitStr(){
            return  game.gameMethod.getStrValue("card_name_"+ unitArmyId0);
        }

        public boolean isRound() {
            if (playerCanCommand()) {
                return true;
            } else if (legionIndex == roundLegionIndex) {
                return true;
            }
            return false;
        }

        public boolean isPlayerRound() {
            return roundState == 0||roundState==3;
        }

        public int getRoundState(){
            return roundState;
        }

        @Override
        public boolean isEmptyBuild() {
            return false;
        }

        public boolean isPlayerOperaRound() {
            return roundState == 0;
        }

        //是否触发技能
        public boolean triggerSkill(int skillId) {
            return ComUtil.ifGet(getSkillChance(skillId));
        }

        public boolean triggerFeature(int featureId) {
            return ComUtil.ifGet(game.gameMethod.getUnitFeatureEffect(featureId, getFeatureLv(featureId)));
        }

        @Override
        public void randomReduceSkillLv(int count) {
            for (int i = 0; i < count; i++) {
                int index = ComUtil.getRandom(0, 3);
                reduceSkillLvByIndex(index);
            }
        }

        @Override
        public void updUnitModelDirect() {
            if(armyActor!=null){
                armyActor.updArmyModel();
            }
        }

        @Override
        public int getUnitLife() {
            return getArmyLife();
        }

        @Override
        public int getArmor(int direct) {
            return getArmyFormationArmor(direct);
        }

        private boolean reduceSkillLvByIndex(int index) {
            switch (index) {
                case 0:
                    if (skillLv1 > 1) {
                        skillLv1--;
                    } else {
                        clearSkill(index);
                    }
                    return true;
                case 1:
                    if (skillLv2 > 1) {
                        skillLv2--;
                    } else {
                        clearSkill(index);
                    }
                    return true;
                case 2:
                    if (skillLv3 > 1) {
                        skillLv3--;
                    } else {
                        clearSkill(index);
                    }
                    return true;
                case 3:
                    if (skillLv4 > 1) {
                        skillLv4--;
                    } else {
                        clearSkill(index);
                    }
                    return true;
            }
            return false;

        }

        //向目标区域移动
        public void moveForTarget() {
            if (ifGridIsPass(targetRegion)) {
                army_ActToTarget(this, getHpRate() < 50);
            }
        }
        @Override
        public boolean inCity() {
            BuildData b = getBuildData();
            if (b.getRegionId() == hexagonIndex && !b.isSeaArea()) {
                return true;
            }
            return false;
        }


        @Override
        public int getDistance(int hexagonIndex) {
            return getDistanceForMap(hexagonIndex, this.hexagonIndex);
        }
        @Override
        public void drawSkill(int killId) {
            if (effectStage == null||armyActor==null||roundState!=0) {
                return;
            }
            if(roundState==0){
                Gdx.app.log(getHexagonIndex()+"","triggerSkill:"+game.gameMethod.getSkillStr(killId));
            }
            if(roundState==0&&(roundState==4&&isPlayer())){
                effectStage.drawSkill(getHexagonIndex(), killId);
            }
        }
        @Override
        public void drawFeature(int killId) {
            if (effectStage == null||armyActor==null||roundState!=0) {
                return;
            }
            if(roundState==0){
                Gdx.app.log(getHexagonIndex()+"","triggerFeature:"+game.gameMethod.getFeatureStr(killId));
            }
            if(roundState==0||(roundState==4||isPlayer())){
                effectStage.drawFeature(getHexagonIndex(), killId);
            }
        }

        public int getFeatureEffect(int feature) {
            return game.gameMethod.getUnitFeatureEffect(feature, getFeatureLv(feature));
        }

        public int getSafeRegion() {
            ConnectData c = getConnectData(getRegionId());
            BuildData rs = null;
            int enemyUnitCount = getEnemyUnitInRegion();
            if (c != null) {
                Array<BuildData> bs = game.tempUtil.getTempArray();
                for (int j = 1; j <= c.regionConnectCount; j++) {
                    int region = c.getConnectValue(j, 0);
                    BuildData b = getBuildDataByRegion(region);
                    if (b != null && b.getLegionIndex() == legionIndex && b.getAroundEnemyLegionUnitRegionCount() < (enemyUnitCount + 1)) {
                        bs.add(b);
                    }
                }

                if (bs.size > 0) {
                    rs = bs.random();
                    game.tempUtil.disposeTempArray(bs);
                    return rs.getRegionId();
                } else {
                    for (int j = 1; j <= c.regionConnectCount; j++) {
                        int region = c.getConnectValue(j, 0);
                        BuildData b = getBuildDataByRegion(region);
                        if (b != null && (ifAllyByLi(b.getLegionIndex(), legionIndex) || (b.getLegionData().getInternIndex() == 0 && !b.ifHaveLegionAllyUnit(true))) && b.getAroundEnemyLegionUnitRegionCount() < (enemyUnitCount + 1)) {
                            bs.add(b);
                        }
                    }
                    if (bs.size > 0) {
                        rs = bs.random();
                        game.tempUtil.disposeTempArray(bs);
                        return rs.getRegionId();
                    } else {
                        for (int j = 1; j <= c.regionConnectCount; j++) {
                            int region = c.getConnectValue(j, 0);
                            BuildData b = getBuildDataByRegion(region);
                            if (b != null && (ifAllyByLi(b.getLegionIndex(), legionIndex) || (b.getLegionData().getInternIndex() == 0 && !b.ifHaveLegionAllyUnit(true)))) {
                                bs.add(b);
                            }
                        }
                        if (bs.size > 0) {
                            rs = bs.random();
                            game.tempUtil.disposeTempArray(bs);
                            return rs.getRegionId();
                        }
                    }
                }
            }
            if (rs != null) {
                return rs.getRegionId();
            }
            return -1;
        }

        //获得所在区域敌军的数量
        private int getEnemyUnitInRegion() {
            IntArray hs = regionHexagonMap.get(regionId);
            int rs = 0;
            if (hs != null && hs.size > 0) {
                for (int i = 0; i < hs.size; i++) {
                    int id = hs.get(i);
                    ArmyData ta = getArmyDataByHexagon(id);
                    if (ta != null && ta.getArmyHpNow() > 0 && ifCanAtk(getLegionIndex(), ta.getLegionIndex())) {
                        rs++;
                    }
                }
            }

            return rs;
        }
        public boolean isPlayerSuz() {
            LegionData l=getLegionData();
            if(l.getSuzerainLi()>0&&l.getSuzerainLi()==masterData.getPlayerLegionIndex()){
                return true;
            }
            return false;
        }

        public void updActor() {
            if(armyActor==null){
                if(ifNeedCreateActor()){
                    createActor();
                }
            }else{
                armyActor.updHpColor();
                armyActor.update();
            }
        }

        public int getNowYear() {
            return Fb2Smap.this.getNowYear();
        }

        public boolean aiCanRecruitGeneral() {
            LegionData l=getLegionData();
            LegionData pl=getPlayerLegionData();
            if(getGeneralIndex()==0&&getArmyType()!=6&&getHpRate()>50&&getLegionData().ifCanRecruitGeneral()){
                //如果ai的领土比玩家大,则其将领不能超过(玩家+难度)的数量
                if(l.varRegionCount>pl.varRegionCount&&l.getGeneralCardNum()>pl.getGeneralCardNum()+masterData.getGameDifficulty()){
                    return false;
                }
                BuildData b=getBuildData();
                if(b!=null&&getForeignDegree(b.getLegionIndex(),getLegionIndex())==1){
                    return true;
                }
            }
            return false;
        }

        public IntIntMap getSpiritMap() {
            return spiritMap;
        }

        public boolean ifEffective(int i) {
            return Fb2Smap.this.ifSystemEffective(i);
        }


        //获得造成伤害后目标的受击类型
        public String getAttackStrike() {
            if(armyActor!=null){
                return armyActor.getAttackStrike();
            }
            return "generalStrike";
        }

        public void drawStrike(String attackStrike, float damageTime) {
            if(armyActor==null){
                createActor();
            }
            if(armyActor!=null){
                armyActor.drawStrike(attackStrike,damageTime);
            }
        }

        public SMapEffectStage getEffectStage() {
            return effectStage;
        }

        public void drawAttackEffect(int direct,float damageTime) {
            if(armyActor==null){
                createActor();
            }
            if(armyActor!=null){
                armyActor.drawAttack(direct,damageTime);
            }
        }

        public int getGameMode() {
            return masterData.getPlayerMode();
        }

        @Override
        public int getUnitAbility(int index) {
            if(!isUnitGroup()){
                return getUnitGroupWealLv(index,false);
            }
            return 0;
        }

        @Override
        public int getUnitCount() {
            return getUnitGroup();
        }

        @Override
        public int getDefAirLv() {
            if(isUnitGroup()){
                return airDefendBonus/game.resGameConfig.airDefenseForAdfLv;
            }else{
                return getUnitGroupWealLv(2,false);
            }
        }

        @Override
        public int getKillSum() {
            return (1+armyRank)*(1+armyRank)*(1+armyRank);
        }

        @Override
        public int getExp() {
            return Math.max(getUnitGroup(),getArmyRank());
        }

        @Override
        public boolean inScreen() {
            if(armyActor!=null&&armyActor.inScreen()){
                return true;
            }
            return false;
        }

        public int getEmptyGroupPotion() {
            if(isUnitGroup()){//组合部队
                if(unitArmyId1 ==0){
                    return 1;
                }else if(unitArmyId2 ==0){
                    return 2;
                }else if(unitArmyId3 ==0){
                    return 3;
                }else if(unitArmyId4 ==0){
                    return 4;
                }else if(unitArmyId5 ==0){
                    return 5;
                }else if(unitArmyId6 ==0){
                    return 6;
                }else {
                    return -1;
                }
            }else{
                return 0;
            }
        }

        public void setGroupArmyId(int potion,int armyId){
            if(isUnitGroup()){//组合部队
                if(armyId==1105&&getUnitGroup()>1){armyId=1104;}
                switch (potion){
                    case 0:
                        setUnitArmyId0(armyId);break;
                    case 1:
                        setUnitArmyId1(armyId);break;
                    case 2:
                        setUnitArmyId2(armyId);break;
                    case 3:
                        setUnitArmyId3(armyId);break;
                    case 4:
                        setUnitArmyId4(armyId);break;
                    case 5:
                        setUnitArmyId5(armyId);break;
                    case 6:
                        setUnitArmyId6(armyId);break;
                }
            }
        }


        public int getUnitGroupFormationArmyId(int i) {
            if(isUnitGroup()){
                switch (i){
                    case 0:
                        return unitArmyId0;
                    case 1:
                        if(unitArmyId1!=0){
                            return unitArmyId1;
                        }else if(unitArmyId2!=0){
                            return unitArmyId2;
                        }else{
                            return unitArmyId0;
                        }
                    case 2:
                        if(unitArmyId2!=0){
                            return unitArmyId2;
                        }else if(unitArmyId3!=0){
                            return unitArmyId3;
                        }else{
                            return unitArmyId0;
                        }
                    case 3:
                        if(unitArmyId3!=0){
                            return unitArmyId3;
                        }else if(unitArmyId4!=0){
                            return unitArmyId4;
                        }else{
                            return unitArmyId0;
                        }
                    case 4:
                        if(unitArmyId1!=0){
                            return unitArmyId1;
                        }else if(unitArmyId5!=0){
                            return unitArmyId5;
                        }else{
                            return unitArmyId0;
                        }
                    case 5:
                        if(unitArmyId5!=0){
                            return unitArmyId5;
                        }else if(unitArmyId6!=0){
                            return unitArmyId6;
                        }else{
                            return unitArmyId0;
                        }
                    case 6:
                        if(unitArmyId4!=0){
                            return unitArmyId4;
                        }else if(unitArmyId6!=0){
                            return unitArmyId6;
                        }else{
                            return unitArmyId0;
                        }
                }
            }else{
                return getUnitArmyId0();
            }
            return 0;
        }

        public int getUnitGroupArmyId(int i) {
            return getUnitGroupArmyId(i,true);
        }

        public int getUnitGroupArmyId(int i,boolean ifCheck) {
            if(ifCheck){
                if(isUnitGroup()){
                    switch (i){
                        case 0:return unitArmyId0;
                        case 1:return unitArmyId1;
                        case 2:return unitArmyId2;
                        case 3:return unitArmyId3;
                        case 4:return unitArmyId4;
                        case 5:return unitArmyId5;
                        case 6:return unitArmyId6;
                    }
                }else{
                    return getUnitArmyId0();
                }
            }else{
                switch (i){
                    case 0:return unitArmyId0;
                    case 1:return unitArmyId1;
                    case 2:return unitArmyId2;
                    case 3:return unitArmyId3;
                    case 4:return unitArmyId4;
                    case 5:return unitArmyId5;
                    case 6:return unitArmyId6;
                }
                return getUnitArmyId0();
            }
            return 0;
        }

        public int getUnitGroupArmyType(int i) {
            if(isUnitGroup()){
                XmlReader.Element xml=getArmyXmlE(i,true);
                if(xml!=null){
                    return xml.getInt("type",0);
                }
                return 0;
               /* switch (i){
                    case 0:if(unitArmyId0==0){return 0;}
                        XmlReader.Element xml=game.gameConfig.getDEF_ARMY().getElementById(unitArmyId0);
                        if(xml!=null){
                            return xml.getInt("type",0);
                        }
                        break;
                    case 1:if(unitArmyId1==0){return 0;}
                    xml=game.gameConfig.getDEF_ARMY().getElementById(unitArmyId1);
                        if(xml!=null){
                            return xml.getInt("type",0);
                        }
                        break;
                    case 2:if(unitArmyId2==0){return 0;}
                        xml=game.gameConfig.getDEF_ARMY().getElementById(unitArmyId2);
                        if(xml!=null){
                            return xml.getInt("type",0);
                        }
                        break;
                    case 3:if(unitArmyId3==0){return 0;}
                        xml=game.gameConfig.getDEF_ARMY().getElementById(unitArmyId3);
                        if(xml!=null){
                            return xml.getInt("type",0);
                        }
                        break;
                    case 4:if(unitArmyId4==0){return 0;}
                        xml=game.gameConfig.getDEF_ARMY().getElementById(unitArmyId4);
                        if(xml!=null){
                            return xml.getInt("type",0);
                        }
                        break;
                    case 5:if(unitArmyId5==0){return 0;}
                        xml=game.gameConfig.getDEF_ARMY().getElementById(unitArmyId5);
                        if(xml!=null){
                            return xml.getInt("type",0);
                        }
                        break;
                    case 6:if(unitArmyId6==0){return 0;}
                        xml=game.gameConfig.getDEF_ARMY().getElementById(unitArmyId6);
                        if(xml!=null){
                            return xml.getInt("type",0);
                        }
                        break;
                }*/
            }else{
                return getArmyType();
            }
        }
        private void setUnitGroupArmyId(int potion, int unitArmyId) {
            switch (potion){
                case 0: unitArmyId0 =unitArmyId;break;
                case 1: unitArmyId1 =unitArmyId;break;
                case 2: unitArmyId2 =unitArmyId;break;
                case 3: unitArmyId3 =unitArmyId;break;
                case 4: unitArmyId4 =unitArmyId;break;
                case 5: unitArmyId5 =unitArmyId;break;
                case 6: unitArmyId6 =unitArmyId;break;
            }
        }
        public int getUnitGroupWealLv(int index) {
            return getUnitGroupWealLv(index ,true);
        }
        //同类加成
        public int getUnitGroupSameArmyIdCount(int potion){
            int rs=0;
            if(isUnitGroup()&&potion>=0&&potion<=6){
                int armyId=getUnitGroupArmyId(potion);
                if(armyId>0){
                    for(int i=0;i<=6;i++){
                        if(i!=potion&&getUnitGroupArmyId(i)==armyId){
                            rs++;
                        }
                    }
                    return (rs+1)/2;
                }
            }
            return rs;
        }


        public int getUnitGroupWealLv(int index,boolean ifCheck) {
            if(ifCheck){
                if(isUnitGroup()){
                    switch (index){
                        case 0:return getUnitWealv0Value();
                        case 1:return unitWealv1;
                        case 2:return unitWealv2;
                        case 3:return unitWealv3;
                        case 4:return unitWealv4;
                        case 5:return unitWealv5;
                        case 6:return unitWealv6;
                    }
                }else{
                    return getUnitWealv0Value();
                }
            }else{
                switch (index){
                    case 0:return getUnitWealv0Value();
                    case 1:return unitWealv1;
                    case 2:return unitWealv2;
                    case 3:return unitWealv3;
                    case 4:return unitWealv4;
                    case 5:return unitWealv5;
                    case 6:return unitWealv6;
                }
                return getUnitWealv0Value();
            }

            return 0;
        }

        public int getUnitGroupGroupLv(int index) {
            return getUnitGroupGroupLv(index,true);
        }
        public int getUnitGroupGroupLv(int index,boolean check) {
            if(check){
                if(isUnitGroup()){
                    switch (index){
                        case 0:return unitGroup0Lv;
                        case 1:return unitGroup1Lv;
                        case 2:return unitGroup2Lv;
                        case 3:return unitGroup3Lv;
                        case 4:return unitGroup4Lv;
                        case 5:return unitGroup5Lv;
                        case 6:return unitGroup6Lv;
                    }
                }else{
                    return unitGroup0Lv;
                }
            }else{
                switch (index){
                    case 0:return unitGroup0Lv;
                    case 1:return unitGroup1Lv;
                    case 2:return unitGroup2Lv;
                    case 3:return unitGroup3Lv;
                    case 4:return unitGroup4Lv;
                    case 5:return unitGroup5Lv;
                    case 6:return unitGroup6Lv;
                }
                return unitGroup0Lv;
            }

            return 0;
        }
        public void setUnitGroupWealLv(int index,int lv,boolean ifCheckTech) {
            lv=ComUtil.limitValue(lv,0,9);
            if(ifCheckTech) {
                switch (index) {
                    case 0:
                        unitWealv0 = ComUtil.limitValue(lv, 0, getArmyLvByArmyType(getUnitArmyId0(), getUnitGroupArmyType(0), legionIndex));
                        break;
                    case 1:
                        unitWealv1 = ComUtil.limitValue(lv, 0, getArmyLvByArmyType(getUnitArmyId1()==0?getUnitArmyId0():getUnitArmyId1(), getUnitGroupArmyType(1), legionIndex));
                        break;
                    case 2:
                        unitWealv2 = ComUtil.limitValue(lv, 0, getArmyLvByArmyType(getUnitArmyId2()==0?getUnitArmyId0():getUnitArmyId2(), getUnitGroupArmyType(2), legionIndex));
                        break;
                    case 3:
                        unitWealv3 = ComUtil.limitValue(lv, 0, getArmyLvByArmyType(getUnitArmyId3()==0?getUnitArmyId0():getUnitArmyId3(), getUnitGroupArmyType(3), legionIndex));
                        break;
                    case 4:
                        unitWealv4 = ComUtil.limitValue(lv, 0, getArmyLvByArmyType(getUnitArmyId4()==0?getUnitArmyId0():getUnitArmyId4(), getUnitGroupArmyType(4), legionIndex));
                        break;
                    case 5:
                        unitWealv5 = ComUtil.limitValue(lv, 0, getArmyLvByArmyType(getUnitArmyId5()==0?getUnitArmyId0():getUnitArmyId5(), getUnitGroupArmyType(5), legionIndex));
                        break;
                    case 6:
                        unitWealv6 = ComUtil.limitValue(lv, 0, getArmyLvByArmyType(getUnitArmyId6()==0?getUnitArmyId0():getUnitArmyId6(), getUnitGroupArmyType(6), legionIndex));
                        break;
                }
            }else{
                switch (index){
                    case 0: unitWealv0 =lv;break;
                    case 1: unitWealv1 =lv;break;
                    case 2: unitWealv2 =lv;break;
                    case 3: unitWealv3 =lv;break;
                    case 4: unitWealv4 =lv;break;
                    case 5: unitWealv5 =lv;break;
                    case 6: unitWealv6 =lv;break;
                }
            }
        }
        public void setUnitGroupGroupLv(int index,int lv,boolean ifCheckTech) {
            lv=ComUtil.limitValue(lv,0,9);
            if(ifCheckTech){
                switch (index){
                    case 0: unitGroup0Lv =ComUtil.limitValue(lv,0, getArmyGradeLvByArmyType(getUnitArmyId0(), getUnitGroupArmyType(0), legionIndex));break;
                    case 1: unitGroup1Lv =ComUtil.limitValue(lv,0, getArmyGradeLvByArmyType(getUnitArmyId1()==0?getUnitArmyId0():getUnitArmyId1(),getUnitArmyId1()==0?getUnitGroupArmyType(0):getUnitGroupArmyType(1), legionIndex));break;
                    case 2: unitGroup2Lv =ComUtil.limitValue(lv,0, getArmyGradeLvByArmyType(getUnitArmyId2()==0?getUnitArmyId0():getUnitArmyId2(), getUnitArmyId2()==0?getUnitGroupArmyType(0):getUnitGroupArmyType(2), legionIndex));break;
                    case 3: unitGroup3Lv =ComUtil.limitValue(lv,0, getArmyGradeLvByArmyType(getUnitArmyId3()==0?getUnitArmyId0():getUnitArmyId3(), getUnitArmyId3()==0?getUnitGroupArmyType(0):getUnitGroupArmyType(3), legionIndex));break;
                    case 4: unitGroup4Lv =ComUtil.limitValue(lv,0, getArmyGradeLvByArmyType(getUnitArmyId4()==0?getUnitArmyId0():getUnitArmyId4(), getUnitArmyId4()==0?getUnitGroupArmyType(0):getUnitGroupArmyType(4), legionIndex));break;
                    case 5: unitGroup5Lv =ComUtil.limitValue(lv,0, getArmyGradeLvByArmyType(getUnitArmyId5()==0?getUnitArmyId0():getUnitArmyId5(), getUnitArmyId5()==0?getUnitGroupArmyType(0):getUnitGroupArmyType(5), legionIndex));break;
                    case 6: unitGroup6Lv =ComUtil.limitValue(lv,0, getArmyGradeLvByArmyType(getUnitArmyId6()==0?getUnitArmyId0():getUnitArmyId6(), getUnitArmyId6()==0?getUnitGroupArmyType(0):getUnitGroupArmyType(6), legionIndex));break;
                }
            }else{
                switch (index){
                    case 0: unitGroup0Lv =lv;break;
                    case 1: unitGroup1Lv =lv;break;
                    case 2: unitGroup2Lv =lv;break;
                    case 3: unitGroup3Lv =lv;break;
                    case 4: unitGroup4Lv =lv;break;
                    case 5: unitGroup5Lv =lv;break;
                    case 6: unitGroup6Lv =lv;break;
                }
            }

        }


        public boolean canUpdUnitGroupGroupLv(int index) {
            if(!isUnitGroup()){
                return canUpdGroupLv();
            }
            boolean rs = false;
            switch (index) {
                case 0:
                    if (unitArmyId0 == 0 || unitGroup0Lv + 1 > getUnitGradeLv(index)) {
                        return false;
                    }
                    rs = true;
                    break;
                case 1:
                    if (unitArmyId1 == 0 || unitGroup1Lv + 1 > getUnitGradeLv(index)) {
                        return false;
                    }
                    rs = true;
                    break;
                case 2:
                    if (unitArmyId0 == 2 || unitGroup2Lv + 1 > getUnitGradeLv(index)) {
                        return false;
                    }
                    rs = true;
                    break;
                case 3:
                    if (unitArmyId0 == 3 || unitGroup3Lv + 1 > getUnitGradeLv(index)) {
                        return false;
                    }
                    rs = true;
                    break;
                case 4:
                    if (unitArmyId0 == 4 || unitGroup4Lv + 1 > getUnitGradeLv(index)) {
                        return false;
                    }
                    rs = true;
                    break;
                case 5:
                    if (unitArmyId0 == 5 || unitGroup5Lv + 1 > getUnitGradeLv(index)) {
                        return false;
                    }
                    rs = true;
                    break;
                case 6:
                    if (unitArmyId0 == 6 || unitGroup6Lv + 1 > getUnitGradeLv(index)) {
                        return false;
                    }
                    rs = true;
                    break;
            }
            return rs;
        }
        public boolean canUpdUnitGroupWealLv(int index){
            boolean rs=false;
            switch (index) {
                case 0:
                    if (getUnitWealv0Value()+1 >  getUnitTechLv(0)) {
                        return false;
                    }
                    rs=true;
                    break;
                case 1:
                    if ( unitWealv1+1 > (getUnitArmyId1()==0? getUnitTechLv(0): getUnitTechLv(1))) {
                        return false;
                    }
                    rs=true;
                    break;
                case 2:
                    if ( unitWealv2+1 > (getUnitArmyId2()==0? getUnitTechLv(0): getUnitTechLv(2))) {
                        return false;
                    }
                    rs=true;
                    break;
                case 3:
                    if ( unitWealv3+1 > (getUnitArmyId3()==0? getUnitTechLv(0): getUnitTechLv(3))) {
                        return false;
                    }
                    rs=true;
                    break;
                case 4:
                    if ( unitWealv4+1 >  (getUnitArmyId4()==0? getUnitTechLv(0): getUnitTechLv(4))) {
                        return false;
                    }
                    rs=true;
                    break;
                case 5:
                    if (unitWealv5+1 > (getUnitArmyId5()==0? getUnitTechLv(0): getUnitTechLv(5))) {
                        return false;
                    }
                    rs=true;
                    break;
                case 6:
                    if ( unitWealv6+1 > (getUnitArmyId6()==0? getUnitTechLv(0): getUnitTechLv(6))) {
                        return false;
                    }
                    rs=true;
                    break;
            }
            return rs;
        }


        public boolean legionCanUpdUnitGroupGroupLv(){
            for(int i=0;i<=6;i++){
                if(legionCanUpdUnitGroupGroupLv(i)){
                    return true;
                }
            }
            return false;
        }
        public boolean legionCanUpdUnitGroupGroupLv(int index) {
            boolean rs = false;
            BuildData b=getBuildData();
            switch (index) {
                case 0:
                    if (unitArmyId0 == 0 || unitGroup0Lv + 1 > getUnitGradeLv(index)||b==null||b.getLegionIndex()!=legionIndex||b.getBuildRound()!=0||!b.canBuyCard(unitArmyId0)||!canPayCardPrice(getLegionData(),b,unitArmyId0)) {
                        return false;
                    }
                    rs = true;
                    break;
                case 1:
                    if (unitArmyId1 == 0 || unitGroup1Lv + 1 > getUnitGradeLv(index)||b==null||b.getLegionIndex()!=legionIndex||b.getBuildRound()!=0||!b.canBuyCard(unitArmyId1)||!canPayCardPrice(getLegionData(),b,unitArmyId1)) {
                        return false;
                    }
                    rs = true;
                    break;
                case 2:
                    if (unitArmyId2 == 0 || unitGroup2Lv + 1 > getUnitGradeLv(index)||b==null||b.getLegionIndex()!=legionIndex||b.getBuildRound()!=0||!b.canBuyCard(unitArmyId2)||!canPayCardPrice(getLegionData(),b,unitArmyId2)) {
                        return false;
                    }
                    rs = true;
                    break;
                case 3:
                    if (unitArmyId3 == 0 || unitGroup3Lv + 1 > getUnitGradeLv(index)||b==null||b.getLegionIndex()!=legionIndex||b.getBuildRound()!=0||!b.canBuyCard(unitArmyId3)||!canPayCardPrice(getLegionData(),b,unitArmyId3)) {
                        return false;
                    }
                    rs = true;
                    break;
                case 4:
                    if (unitArmyId4 == 0 || unitGroup4Lv + 1 > getUnitGradeLv(index)||b==null||b.getLegionIndex()!=legionIndex||b.getBuildRound()!=0||!b.canBuyCard(unitArmyId4)||!canPayCardPrice(getLegionData(),b,unitArmyId4)) {
                        return false;
                    }
                    rs = true;
                    break;
                case 5:
                    if (unitArmyId5 == 0 || unitGroup5Lv + 1 > getUnitGradeLv(index)||b==null||b.getLegionIndex()!=legionIndex||b.getBuildRound()!=0||b.getBuildRound()==0||!b.canBuyCard(unitArmyId5)||!canPayCardPrice(getLegionData(),b,unitArmyId5)) {
                        return false;
                    }
                    rs = true;
                    break;
                case 6:
                    if (unitArmyId6 == 0 || unitGroup6Lv + 1 > getUnitGradeLv(index)||b==null||b.getLegionIndex()!=legionIndex||b.getBuildRound()!=0||!b.canBuyCard(unitArmyId6)||!canPayCardPrice(getLegionData(),b,unitArmyId6)) {
                        return false;
                    }
                    rs = true;
                    break;
            }
            return rs;
        }
        public boolean legionCanUpdUnitGroupWealLv(){
            for(int i=0;i<=6;i++){
                if(legionCanUpdUnitGroupWealLv(i)){
                    return true;
                }
            }
            return false;
        }
        public boolean legionCanUpdUnitGroupWealLv(int index){
            boolean rs=false;
            BuildData b=getBuildData();
            switch (index) {
                case 0:
                    if (unitArmyId0 == 0 || getUnitWealv0Value()+1 >  getUnitTechLv(index)||b==null||b.getLegionIndex()!=legionIndex||b.getBuildRound()!=0||!canPayRes(index)) {
                        return false;
                    }
                    rs=true;
                    break;
                case 1:
                    if(unitArmyId1 == 0&&!isUnitGroup()){index=0;}
                    if ( unitWealv1+1 >  getUnitTechLv(index)||b==null||b.getLegionIndex()!=legionIndex||b.getBuildRound()!=0||!canPayRes(index)) {
                        return false;
                    }
                    rs=true;
                    break;
                case 2:
                    if(unitArmyId2 == 0&&!isUnitGroup()){index=0;}
                    if ( unitWealv2+1 >  getUnitTechLv(index)||b==null||b.getLegionIndex()!=legionIndex||b.getBuildRound()!=0||!canPayRes(index)) {
                        return false;
                    }
                    rs=true;
                    break;
                case 3:
                    if(unitArmyId3 == 0&&!isUnitGroup()){index=0;}
                    if ( unitWealv3+1 >  getUnitTechLv(index)||b==null||b.getLegionIndex()!=legionIndex||b.getBuildRound()!=0||!canPayRes(index)) {
                        return false;
                    }
                    rs=true;
                    break;
                case 4:
                    if(unitArmyId4 == 0&&!isUnitGroup()){index=0;}
                    if ( unitWealv4+1 >  getUnitTechLv(index)||b==null||b.getLegionIndex()!=legionIndex||b.getBuildRound()!=0||!canPayRes(index)) {
                        return false;
                    }
                    rs=true;
                    break;
                case 5:
                    if(unitArmyId5 == 0&&!isUnitGroup()){index=0;}
                    if ( unitWealv5+1 >  getUnitTechLv(index)||b==null||b.getLegionIndex()!=legionIndex||b.getBuildRound()!=0||!canPayRes(index)) {
                        return false;
                    }
                    rs=true;
                    break;
                case 6:
                    if(unitArmyId6 == 0&&!isUnitGroup()){index=0;}
                    if ( unitWealv6+1 >  getUnitTechLv(index)||b==null||b.getLegionIndex()!=legionIndex||b.getBuildRound()!=0||!canPayRes(index)) {
                        return false;
                    }
                    rs=true;
                    break;
            }
            return rs;
        }

        private boolean canPayRes(int index) {
            int armyId=getUnitGroupArmyId(index);
            if(armyId>0){
                return canPayCardPrice(getLegionData(),getBuildData(),armyId);
            }
            return false;
        }

        public void updUnitGroupWealLv(int index,int lv) {
            /*if(isUnitGroup()){
                switch (index){
                    case 0: unitWealv0 =ComUtil.limitValue(lv+ getUnitWealv0Value(),0, getArmyLvByArmyType(getUnitArmyId0(), getUnitGroupArmyType(0), legionIndex));break;
                    case 1:unitWealv1 =ComUtil.limitValue(lv+unitWealv1,0, getArmyLvByArmyType(getUnitArmyId1()==0?getUnitArmyId0():getUnitArmyId1(), getUnitGroupArmyType(1), legionIndex));break;
                    case 2:unitWealv2 =ComUtil.limitValue(lv+unitWealv2,0, getArmyLvByArmyType(getUnitArmyId2()==0?getUnitArmyId0():getUnitArmyId2(), getUnitGroupArmyType(2), legionIndex));break;
                    case 3: unitWealv3 =ComUtil.limitValue(lv+unitWealv3,0, getArmyLvByArmyType(getUnitArmyId3()==0?getUnitArmyId0():getUnitArmyId3(), getUnitGroupArmyType(3), legionIndex));break;
                    case 4:unitWealv4 =ComUtil.limitValue(lv+unitWealv4,0, getArmyLvByArmyType(getUnitArmyId4()==0?getUnitArmyId0():getUnitArmyId4(), getUnitGroupArmyType(4), legionIndex));break;
                    case 5: unitWealv5 =ComUtil.limitValue(lv+unitWealv5,0, getArmyLvByArmyType(getUnitArmyId5()==0?getUnitArmyId0():getUnitArmyId5(), getUnitGroupArmyType(5), legionIndex));break;
                    case 6: unitWealv6 =ComUtil.limitValue(lv+unitWealv6,0, getArmyLvByArmyType(getUnitArmyId6()==0?getUnitArmyId0():getUnitArmyId6(), getUnitGroupArmyType(6), legionIndex));break;
                }
            }else{
                unitWealv0 =ComUtil.limitValue(lv+ getUnitWealv0Value(),0, getArmyLvByArmyType(getUnitArmyId0(), getUnitGroupArmyType(0), legionIndex));
            }*/
            switch (index){
                case 0: unitWealv0 =ComUtil.limitValue(lv+ getUnitWealv0Value(),0, getArmyLvByArmyType(getUnitArmyId0(), getUnitGroupArmyType(0), legionIndex));break;
                case 1:unitWealv1 =ComUtil.limitValue(lv+unitWealv1,0, getArmyLvByArmyType(getUnitArmyId1()==0?getUnitArmyId0():getUnitArmyId1(), getUnitGroupArmyType(1), legionIndex));break;
                case 2:unitWealv2 =ComUtil.limitValue(lv+unitWealv2,0, getArmyLvByArmyType(getUnitArmyId2()==0?getUnitArmyId0():getUnitArmyId2(), getUnitGroupArmyType(2), legionIndex));break;
                case 3: unitWealv3 =ComUtil.limitValue(lv+unitWealv3,0, getArmyLvByArmyType(getUnitArmyId3()==0?getUnitArmyId0():getUnitArmyId3(), getUnitGroupArmyType(3), legionIndex));break;
                case 4:unitWealv4 =ComUtil.limitValue(lv+unitWealv4,0, getArmyLvByArmyType(getUnitArmyId4()==0?getUnitArmyId0():getUnitArmyId4(), getUnitGroupArmyType(4), legionIndex));break;
                case 5: unitWealv5 =ComUtil.limitValue(lv+unitWealv5,0, getArmyLvByArmyType(getUnitArmyId5()==0?getUnitArmyId0():getUnitArmyId5(), getUnitGroupArmyType(5), legionIndex));break;
                case 6: unitWealv6 =ComUtil.limitValue(lv+unitWealv6,0, getArmyLvByArmyType(getUnitArmyId6()==0?getUnitArmyId0():getUnitArmyId6(), getUnitGroupArmyType(6), legionIndex));break;
            }
            checkTask(true,legionIndex,0,1);
        }

        public void updUnitGroupGroupLv(int index,int lv,boolean ifResetHpMax) {
            if(isUnitGroup()){
                switch (index){
                    case 0: unitGroup0Lv =ComUtil.limitValue(unitGroup0Lv +lv,0,9);break;
                    case 1: unitGroup1Lv =ComUtil.limitValue(unitGroup1Lv +lv,0,9);break;
                    case 2: unitGroup2Lv =ComUtil.limitValue(unitGroup2Lv +lv,0,9);break;
                    case 3: unitGroup3Lv =ComUtil.limitValue(unitGroup3Lv +lv,0,9);break;
                    case 4: unitGroup4Lv =ComUtil.limitValue(unitGroup4Lv +lv,0,9);break;
                    case 5: unitGroup5Lv =ComUtil.limitValue(unitGroup5Lv +lv,0,9);break;
                    case 6: unitGroup6Lv =ComUtil.limitValue(unitGroup6Lv +lv,0,9);break;
                }
            }else{
                unitGroup0Lv =ComUtil.limitValue(unitGroup0Lv +lv,0,9);
            }
            if(ifResetHpMax){
                resetArmyHpMax();
            }
        }

        public int getMovement() {
            if (armyType == 6||armyType==0) {
                return 0;
            }
            LegionData l=getLegionData();
            if(isUnitGroup()){
                    if(potionIsSea()){
                        movment = shipXmlE.getInt("movement", 0)+(l.getCardTechLv(3010,4)+2)/4;
                    }else{
                        int uc=0;
                        int sm=0;
                        for(int i=0;i<7;i++){
                            int armyId=getUnitGroupArmyId(i);
                            if(armyId>0){
                                XmlReader.Element xml=getArmyXmlE(i,false);
                                if(xml!=null){
                                    sm+= xml.getInt("movement",0);
                                    uc++;
                                    if(i==0){//本体额外提供一次移动计算
                                        sm+= xml.getInt("movement",0);
                                        uc++;
                                    }
                                }
                            }
                        }
                        movment =   (sm+1)/(uc+1);
                        if(armyXmlE0 !=null){
                            movment+=  (l.getCardTechLv(armyXmlE0.getInt("id"), armyXmlE0.getInt("type"))+2)/4;
                        }
                    }
                    int wM = getWeatherXmlE().getInt("move", 0) + 1;

                    if (!isWar()) {
                        if (potionIsSea() && ifHaveSkill(20)) {
                            wM += getSkillEffect(20);
                            drawSkill(20);
                        }
                        if (ifHaveSkill(52)) {
                            wM += getSkillEffect(52);
                            drawSkill(52);
                        }
                    }
                    movment+=wM;
                    BuildData b = getBuildData();
                    if (b != null && ifAllyByLi(b.getLegionIndex(), legionIndex) && b.getBuildType() != 2 && b.getCityHpMax() == b.getCityHpNow() && b.getCityHpMax() > 0) {
                        movment +=  b.getTransportLvNow()/ 3 ;
                    }
                    if (isEditMode(true)||(controlMode == 1 && isPlayer()) ||(spiritMap!=null&&ifEffective(16)&&(spiritMap.containsKey(41)||(getGeneralIndex()>0&&spiritMap.containsKey(42)))) ) {
                        movment = movment * 2;
                    }
                return movment+getArmyRank()/3;
            }else{
                if (armyType == 6) {
                    return 0;
                }
                int wM = getWeatherXmlE().getInt("move", 0) + 1;
                int rs = 0;
                if (!isWar()) {
                    if (potionIsSea() && ifHaveSkill(20)) {
                        wM += getSkillEffect(20);
                        drawSkill(20);
                    }
                    if (ifHaveSkill(52)) {
                        wM += getSkillEffect(52);
                        drawSkill(52);
                    }
                }
                if (armyType == 4 || armyType == 8) {
                    rs = armyXmlE0.getInt("movement", 0) + this.getUnitWealv5() / 3 +(l.getCardTechLv(armyXmlE0.getInt("id"), armyXmlE0.getInt("type"))+2)/4;
                } else if (potionIsSea()) {
                    rs = shipXmlE.getInt("movement", 0) + this.getUnitWealv5() / 3 +(l.getCardTechLv(shipXmlE.getInt("id"),shipXmlE.getInt("type"))+2)/4;
                } else {
                    BuildData b = getBuildData();
                    if (b != null && ifAllyByLi(b.getLegionIndex(), legionIndex) && b.getBuildType() != 2 && b.getCityHpMax() == b.getCityHpNow() && b.getCityHpMax() > 0) {
                        rs = (armyXmlE0.getInt("movement", 0) + (this.getUnitWealv5() + b.getTransportLvNow()) / 3) +(l.getCardTechLv(armyXmlE0.getInt("id"), armyXmlE0.getInt("type"))+2)/4;
                    } else {
                        rs = armyXmlE0.getInt("movement", 0) + this.getUnitWealv5() / 3+(l.getCardTechLv(armyXmlE0.getInt("id"), armyXmlE0.getInt("type"))+2)/4 ;
                    }
                /*if(isPlayer()){
                    rs=rs+100;
                }*/
                }
                if (isEditMode(true)||(controlMode == 1 && isPlayer()) ||(spiritMap!=null&&ifEffective(16)&&(spiritMap.containsKey(41)||(getGeneralIndex()>0&&spiritMap.containsKey(42)))) ) {
                    rs = rs * 2;
                }
                movment=rs+getArmyRank()/3+ wM;
                return movment;
            }
        }

        //该方法只用来展示使用
        public int getMinAttack() {
            if(potionIsSea()&&transportType>0){
                XmlReader.Element xml=shipXmlE;
                if(xml!=null){
                    return (int) ((xml.getInt("minAtk",0)+addTechDamage(xml.getInt("id"),xml.getInt("type")))*getUnitGroupGroupRate(0));
                }
            }else if(isUnitGroup()){
                int minAttack=9999;
                for(int i=0;i<7;i++){
                    int armyId=getUnitGroupArmyId(i);
                    if(armyId>0){
                        XmlReader.Element xml=getArmyXmlE(i,false);
                        if(xml!=null){
                            int v= (int) ((xml.getInt("minAtk",0)+addTechDamage(xml.getInt("id"),xml.getInt("type")))*getUnitGroupGroupRate(i));
                            if(v<minAttack){
                                minAttack=v;
                            }
                        }
                    }
                }
                return minAttack;
            }else{
                XmlReader.Element xml=armyXmlE0;
                if(xml!=null){
                    return (int) ((xml.getInt("minAtk",0)+addTechDamage(xml.getInt("id"),xml.getInt("type")))*getUnitGroupGroupRate(0));
                }
            }
            return  0;
        }

        private int addTechDamage(int armyId,int armyType) {
            BuildData buildData=getBuildData();
            LegionData legionData=getLegionData();
            int addDamage=0;
            if(buildData!=null&&buildData.getLegionIndex()==legionData.getLegionIndex()&&buildData.getBuildWonder()!=0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(buildData.getBuildWonder());
                if(xE!=null){
                    int function=xE.getInt("fucntion",0);
                    int effect=xE.getInt("effect",0);
                    int value=xE.getInt("value",0);
                    if(function==5&&effect==3){
                        addDamage=value;
                    }
                }
            }

            switch (armyType){
                case 1://步兵
                    addDamage=addDamage+game.gameMethod.getCardLv(legionData,null,3006);
                    break;
                case 2://炮兵
                    addDamage=addDamage+game.gameMethod.getCardLv(legionData,null,3007);
                    break;
                case 3://装甲
                    addDamage=addDamage+game.gameMethod.getCardLv(legionData,null,3008);
                    break;
                case 4://舰船
                    addDamage=addDamage+game.gameMethod.getCardLv(legionData,null,3010);
                    break;
                case 5://空军
                    addDamage=addDamage+game.gameMethod.getCardLv(legionData,null,3011);
                    break;
                case 6://要塞
                    if(armyId==1606){
                        addDamage=addDamage+game.gameMethod.getCardLv(legionData,null,3014);
                    }else{
                        addDamage=addDamage+game.gameMethod.getCardLv(legionData,null,3009);
                    }
                    break;
                case 7://弹头
                    addDamage=addDamage+game.gameMethod.getCardLv(legionData,null,3015)*2;
                    break;
                case 8://潜艇
                    return  addDamage=addDamage+game.gameMethod.getCardLv(legionData,null,3010);
            }

            return addDamage;
        }

        public int getMaxAttack() {
            if(potionIsSea()&&transportType>0){
                XmlReader.Element xml=shipXmlE;
                if(xml!=null){
                    return (int) ((xml.getInt("maxAtk",0)+addTechDamage(xml.getInt("id"),xml.getInt("type")))*getUnitGroupGroupRate(0));
                }
            }else if(isUnitGroup()){
                int maxAttack=0;
                for(int i=0;i<7;i++){
                    int armyId=getUnitGroupArmyId(i);
                    if(armyId>0){
                        XmlReader.Element xml=getArmyXmlE(i,false);
                        if(xml!=null){
                            int v= (int) ((xml.getInt("maxAtk",0)+addTechDamage(xml.getInt("id"),xml.getInt("type")))*getUnitGroupGroupRate(i));
                            if(v>maxAttack){
                                maxAttack=v;
                            }
                        }
                    }
                }
                return maxAttack;
            }else{
                XmlReader.Element xml=armyXmlE0;
                if(xml!=null){
                    return (int) ((xml.getInt("maxAtk",0)+addTechDamage(xml.getInt("id"),xml.getInt("type")))*getUnitGroupGroupRate(0));
                }
            }
            return  0;
        }
        public int getUnitGroupMinAttack(int index){
             XmlReader.Element xml=null;
            if(getArmyType()!=4&&getArmyType()!=8&&potionIsSea()){
                xml=shipXmlE;
            }else if(isUnitGroup()){
                xml=getArmyXmlE(index,false);
            }else{
                xml=armyXmlE0;
            }
            if(xml!=null){
                return (int) ((xml.getInt("minAtk",0)+addTechDamage(xml.getInt("id"),xml.getInt("type")))*getUnitGroupGroupRate(0));
            }
            return 0;
        }
        public int getUnitGroupMaxAttack(int index){
            XmlReader.Element xml=null;
            if(getArmyType()!=4&&getArmyType()!=8&&potionIsSea()){
                xml=shipXmlE;
            }else if(isUnitGroup()){
                xml=getArmyXmlE(index,false);
            }else{
                xml=armyXmlE0;
            }
            if(xml!=null){
                return (int) ((xml.getInt("maxAtk",0)+addTechDamage(xml.getInt("id"),xml.getInt("type")))*getUnitGroupGroupRate(0));
            }
            return 0;
        }
        public int getUnitGroupAvgAttack(int index){
            return (getUnitGroupMaxAttack(index)+getUnitGroupMinAttack(index))/2;
        }
        /*public int getAvgAttack(int armyId,int group){
            XmlReader.Element xml=game.gameConfig.getDEF_ARMY().getElementById(armyId);
            if(xml!=null){
                return (int) (((xml.getInt("maxAtk",0)+xml.getInt("minAtk",0))/2+addTechDamage(xml.getInt("id"),xml.getInt("type")))*getGroupRate(group));
            }
            return 0;
        }*/

        public int getArmorByDirect(int index){
            int armor = 0;
            if (potionIsSea()) {
                if (shipXmlE != null) {
                    armor += shipXmlE.getInt("armor", 0);
                }
            } else {
                XmlReader.Element xmlE=getArmyXmlE(index,true);
                if (xmlE != null) {
                    armor += xmlE.getInt("armor", 0);
                }else{
                    return 0;
                }
            }

            armor = armor  + getArmyRank() * game.resGameConfig.addDefEachRank;
            if (getArmyType() == 6 && getUnitArmyId0() != 1606) {
                armor = armor + getLegionData().getFortLvMax();
            }
            if (isPlayer() ) {
                if(controlMode == 1){
                    armor += 1000;
                }else if(game.gameConfig.ifLeisureMode){
                    armor*=2;
                }
            }
            BuildData b = getBuildData();
            if (b != null && b.getLegionIndex() == getLegionIndex()) {
                if (b.getBuildWonder() > 0) {
                    XmlReader.Element xE = game.gameConfig.getDEF_WONDER().getElementById(b.getBuildWonder());
                    if (xE != null) {
                        int function = xE.getInt("fucntion", 0);
                        int effect = xE.getInt("effect", 0);
                        int value = xE.getInt("value", 0);
                        if (function==5&&effect==4) {
                            armor += value;
                        }
                    }
                }
                armor += b.getDefenceLvNow();
                int effect = b.getSkillEffect(106, true);
                if (effect > 0) {
                    armor = armor * (100 + effect) / 100;
                }
                effect = b.getSkillEffect(87, true);
                if (effect > 0 && getHexagonIndex() == b.getRegionId()) {
                    armor = armor * (100 + effect) / 100;
                }
            }
            if (ifHaveSkill(35)) {
                armor = armor * (100 + getSkillEffect(35)) / 100;
                drawSkill(35);
            }
            //陆军在海洋区域防御力削减到80%
            if (armyType != 4 && armyType != 8 && potionIsSea()) {
                if (!ifHaveSkill(89)) {
                    armor = armor * (80) / 100;
                } else {
                    drawSkill(89);
                }
            }
            if(spiritMap!=null&&ifEffective(16)){
                if(spiritMap.containsKey(41)){
                    armor=armor*2;
                }
            }
            if(!isUnitGroup()){
                armor=armor*(100+getUnitWealv4()*game.resGameConfig.addDefForDefLv)/100;
            }
            armor=armor*(100+getUnitGroupPower()*game.resGameConfig.addDefRateForGroupLv)/100;
            return armor;
        }
        public int getUnitGroupMDB(int index){
            if(isUnitGroup()){
                XmlReader.Element xml=getArmyXmlE(index,false);
                if(xml!=null){
                    return xml.getInt("MDB",0);
                }
                return 0;
            }else{
                XmlReader.Element xml=armyXmlE0;
                if(xml!=null){
                    return xml.getInt("MDB",0);
                }
                return 0;
            }
        }
        public int getUnitGroupFDB(int index){
            if(isUnitGroup()){
                XmlReader.Element xml=getArmyXmlE(index,false);
                if(xml!=null){
                    return xml.getInt("FDB",0);
                }
                return 0;
            }else{
                XmlReader.Element xml=armyXmlE0;
                if(xml!=null){
                    return xml.getInt("FDB",0);
                }
                return 0;
            }
        }
        public int getUnitGroupRandomAttack(int index){
            if(isUnitGroup()){
                XmlReader.Element xml=getArmyXmlE(index,false);
                if(xml!=null){
                    return (int) ((ComUtil.getRandom(xml.getInt("minAtk",0),xml.getInt("maxAtk",0))+addTechDamage(xml.getInt("id"),xml.getInt("type")))*getUnitGroupGroupRate(index));
                }
                return 0;
            }else{
                XmlReader.Element xml=armyXmlE0;
                if(xml!=null){
                    return (int) ((ComUtil.getRandom(xml.getInt("minAtk",0),xml.getInt("maxAtk",0))+addTechDamage(xml.getInt("id"),xml.getInt("type")))*getUnitGroupGroupRate(0));
                }
            }
            return 0;
        }
        public int getUnitGroupArmor(int index){
            if(isUnitGroup()){
                return getArmorByDirect(index);
            }else{
                return getArmorByDirect(0);
            }
        }

        public int getUnitGroupMinRange() {
            if(isUnitGroup()){
                int minAttack=9999;
                for(int i=0;i<7;i++){
                    XmlReader.Element xml=getArmyXmlE(i,false);
                    if(xml!=null){
                        int v= xml.getInt("minAtkrange",1);
                        if(v<minAttack){
                            minAttack=v;
                        }
                    }
                }
                return minAttack;
            }else{
                return getMinRange();
            }
        }

        public int getUnitGroupMaxRange() {
            if(isUnitGroup()){
                int maxAttack=1;
                for(int i=0;i<7;i++){
                    XmlReader.Element xml=getArmyXmlE(i,false);
                    if(xml!=null){
                        int v= xml.getInt("maxAtkrange",1);
                        if(v>maxAttack){
                            maxAttack=v;
                        }
                    }
                }
                return maxAttack;
            }else{
                return getMaxRange();
            }
        }

        public int getUnitGroupMaxRange(int index) {
            if(isUnitGroup()){
                int maxAttack=1;
                XmlReader.Element xml=getArmyXmlE(index,false);
                if(xml!=null){
                    int v= xml.getInt("maxAtkrange",1);
                    if(v>maxAttack){
                        maxAttack=v;
                    }
                }
                return maxAttack;
            }else{
                return getMaxRange();
            }
        }
        //获得某个战线的攻击力
        //战线  1↖ 2上 3↗ 4↙ 5↓ 6↘  位置 1← 2↖ 3↗ 4→ 5↙ 6↘ 绘制顺序 2,3,1,0,4,5,6
        //type 0随机 1最大攻击 -1最小攻击
        public int getArmyFormationRandomAttack(int direct) {
            //direct :1↖ 2↑ 3↗ 4↙ 5↓ 6↘
            switch (direct){
                case 1:if(getUnitGroupArmyId(1)!=0&&getUnitGroupArmyId(2)!=0){
                    return (getUnitGroupRandomAttack(1)+getUnitGroupRandomAttack(2))*(100+getUnitGroupMDB(1)+getUnitGroupMDB(2))/100;
                }else  if(getUnitGroupArmyId(1)!=0||getUnitGroupArmyId(2)!=0){
                    return getUnitGroupRandomAttack(1)+getUnitGroupRandomAttack(2);
                }else{
                    return getUnitGroupRandomAttack(0);
                }
                case 2:
                    if(getUnitGroupArmyId(2)!=0&&getUnitGroupArmyId(3)!=0){
                        return (getUnitGroupRandomAttack(2)+getUnitGroupRandomAttack(3))*(100+getUnitGroupMDB(2)+getUnitGroupMDB(3))/100;
                    }else  if(getUnitGroupArmyId(2)!=0||getUnitGroupArmyId(3)!=0){
                        return getUnitGroupRandomAttack(2)+getUnitGroupRandomAttack(3);
                    }else{
                        return getUnitGroupRandomAttack(0);
                    }
                case 3:
                    if(getUnitGroupArmyId(3)!=0&&getUnitGroupArmyId(4)!=0){
                        return (getUnitGroupRandomAttack(3)+getUnitGroupRandomAttack(4))*(100+getUnitGroupMDB(3)+getUnitGroupMDB(4))/100;
                    }else  if(getUnitGroupArmyId(3)!=0||getUnitGroupArmyId(4)!=0){
                        return getUnitGroupRandomAttack(3)+getUnitGroupRandomAttack(4);
                    }else{
                        return getUnitGroupRandomAttack(0);
                    }
                case 4:
                    if(getUnitGroupArmyId(1)!=0&&getUnitGroupArmyId(5)!=0){
                        return (getUnitGroupRandomAttack(1)+getUnitGroupRandomAttack(5))*(100+getUnitGroupMDB(1)+getUnitGroupMDB(5))/100;
                    }else  if(getUnitGroupArmyId(1)!=0||getUnitGroupArmyId(5)!=0){
                        return getUnitGroupRandomAttack(1)+getUnitGroupRandomAttack(5);
                    }else{
                        return getUnitGroupRandomAttack(0);
                    }
                case 5:
                    if(getUnitGroupArmyId(5)!=0&&getUnitGroupArmyId(6)!=0){
                        return (getUnitGroupRandomAttack(5)+getUnitGroupRandomAttack(6))*(100+getUnitGroupMDB(5)+getUnitGroupMDB(6))/100;
                    }else  if(getUnitGroupArmyId(5)!=0||getUnitGroupArmyId(6)!=0){
                        return getUnitGroupRandomAttack(5)+getUnitGroupRandomAttack(6);
                    }else{
                        return getUnitGroupRandomAttack(0);
                    }
                case 6:
                    if(getUnitGroupArmyId(6)!=0&&getUnitGroupArmyId(4)!=0){
                        return (getUnitGroupRandomAttack(6)+getUnitGroupRandomAttack(4))*(100+getUnitGroupMDB(6)+getUnitGroupMDB(4))/100;
                    }else if(getUnitGroupArmyId(6)!=0||getUnitGroupArmyId(4)!=0){
                        return getUnitGroupRandomAttack(6)+getUnitGroupRandomAttack(4);
                    }else{
                        return getUnitGroupRandomAttack(0);
                    }
            }
            return getUnitGroupRandomAttack(0);
        }

        public int getArmyFormationMaxAttack(int direct) {
            //direct :1↖ 2↑ 3↗ 4↙ 5↓ 6↘
            switch (direct){
                case 1:if(getUnitGroupArmyId(1)!=0&&getUnitGroupArmyId(2)!=0){
                    return (getUnitGroupMaxAttack(1)+getUnitGroupMaxAttack(2))*(100+getUnitGroupMDB(1)+getUnitGroupMDB(2))/100;
                }else  if(getUnitGroupArmyId(1)!=0||getUnitGroupArmyId(2)!=0){
                    return getUnitGroupMaxAttack(1)+getUnitGroupMaxAttack(2);
                }else{
                    return getUnitGroupMaxAttack(0);
                }
                case 2:
                    if(getUnitGroupArmyId(2)!=0&&getUnitGroupArmyId(3)!=0){
                        return (getUnitGroupMaxAttack(2)+getUnitGroupMaxAttack(3))*(100+getUnitGroupMDB(2)+getUnitGroupMDB(3))/100;
                    }else  if(getUnitGroupArmyId(2)!=0||getUnitGroupArmyId(3)!=0){
                        return getUnitGroupMaxAttack(2)+getUnitGroupMaxAttack(3);
                    }else{
                        return getUnitGroupMaxAttack(0);
                    }
                case 3:
                    if(getUnitGroupArmyId(3)!=0&&getUnitGroupArmyId(4)!=0){
                        return (getUnitGroupMaxAttack(3)+getUnitGroupMaxAttack(4))*(100+getUnitGroupMDB(3)+getUnitGroupMDB(4))/100;
                    }else  if(getUnitGroupArmyId(3)!=0||getUnitGroupArmyId(4)!=0){
                        return getUnitGroupMaxAttack(3)+getUnitGroupMaxAttack(4);
                    }else{
                        return getUnitGroupMaxAttack(0);
                    }
                case 4:
                    if(getUnitGroupArmyId(1)!=0&&getUnitGroupArmyId(5)!=0){
                        return (getUnitGroupMaxAttack(1)+getUnitGroupMaxAttack(5))*(100+getUnitGroupMDB(1)+getUnitGroupMDB(5))/100;
                    }else  if(getUnitGroupArmyId(1)!=0||getUnitGroupArmyId(5)!=0){
                        return getUnitGroupMaxAttack(1)+getUnitGroupMaxAttack(5);
                    }else{
                        return getUnitGroupMaxAttack(0);
                    }
                case 5:
                    if(getUnitGroupArmyId(5)!=0&&getUnitGroupArmyId(6)!=0){
                        return (getUnitGroupMaxAttack(5)+getUnitGroupMaxAttack(6))*(100+getUnitGroupMDB(5)+getUnitGroupMDB(6))/100;
                    }else  if(getUnitGroupArmyId(5)!=0||getUnitGroupArmyId(6)!=0){
                        return getUnitGroupMaxAttack(5)+getUnitGroupMaxAttack(6);
                    }else{
                        return getUnitGroupMaxAttack(0);
                    }
                case 6:
                    if(getUnitGroupArmyId(6)!=0&&getUnitGroupArmyId(4)!=0){
                        return (getUnitGroupMaxAttack(6)+getUnitGroupMaxAttack(4))*(100+getUnitGroupMDB(6)+getUnitGroupMDB(4))/100;
                    }else if(getUnitGroupArmyId(6)!=0||getUnitGroupArmyId(4)!=0){
                        return getUnitGroupMaxAttack(6)+getUnitGroupMaxAttack(4);
                    }else{
                        return getUnitGroupMaxAttack(0);
                    }
            }
            return getUnitGroupMaxAttack(0);
        }
        public int getArmyFormationMinAttack(int direct) {
            //direct :1↖ 2↑ 3↗ 4↙ 5↓ 6↘
            switch (direct){
                case 1:if(getUnitGroupArmyId(1)!=0&&getUnitGroupArmyId(2)!=0){
                    return (getUnitGroupMinAttack(1)+getUnitGroupMinAttack(2))*(100+getUnitGroupMDB(1)+getUnitGroupMDB(2))/100;
                }else  if(getUnitGroupArmyId(1)!=0||getUnitGroupArmyId(2)!=0){
                    return getUnitGroupMinAttack(1)+getUnitGroupMinAttack(2);
                }else{
                    return getUnitGroupMinAttack(0);
                }
                case 2:
                    if(getUnitGroupArmyId(2)!=0&&getUnitGroupArmyId(3)!=0){
                        return (getUnitGroupMinAttack(2)+getUnitGroupMinAttack(3))*(100+getUnitGroupMDB(2)+getUnitGroupMDB(3))/100;
                    }else  if(getUnitGroupArmyId(2)!=0||getUnitGroupArmyId(3)!=0){
                        return getUnitGroupMinAttack(2)+getUnitGroupMinAttack(3);
                    }else{
                        return getUnitGroupMinAttack(0);
                    }
                case 3:
                    if(getUnitGroupArmyId(3)!=0&&getUnitGroupArmyId(4)!=0){
                        return (getUnitGroupMinAttack(3)+getUnitGroupMinAttack(4))*(100+getUnitGroupMDB(3)+getUnitGroupMDB(4))/100;
                    }else  if(getUnitGroupArmyId(3)!=0||getUnitGroupArmyId(4)!=0){
                        return getUnitGroupMinAttack(3)+getUnitGroupMinAttack(4);
                    }else{
                        return getUnitGroupMinAttack(0);
                    }
                case 4:
                    if(getUnitGroupArmyId(1)!=0&&getUnitGroupArmyId(5)!=0){
                        return (getUnitGroupMinAttack(1)+getUnitGroupMinAttack(5))*(100+getUnitGroupMDB(1)+getUnitGroupMDB(5))/100;
                    }else  if(getUnitGroupArmyId(1)!=0||getUnitGroupArmyId(5)!=0){
                        return getUnitGroupMinAttack(1)+getUnitGroupMinAttack(5);
                    }else{
                        return getUnitGroupMinAttack(0);
                    }
                case 5:
                    if(getUnitGroupArmyId(5)!=0&&getUnitGroupArmyId(6)!=0){
                        return (getUnitGroupMinAttack(5)+getUnitGroupMinAttack(6))*(100+getUnitGroupMDB(5)+getUnitGroupMDB(6))/100;
                    }else  if(getUnitGroupArmyId(5)!=0||getUnitGroupArmyId(6)!=0){
                        return getUnitGroupMinAttack(5)+getUnitGroupMinAttack(6);
                    }else{
                        return getUnitGroupMinAttack(0);
                    }
                case 6:
                    if(getUnitGroupArmyId(6)!=0&&getUnitGroupArmyId(4)!=0){
                        return (getUnitGroupMinAttack(6)+getUnitGroupMinAttack(4))*(100+getUnitGroupMDB(6)+getUnitGroupMDB(4))/100;
                    }else if(getUnitGroupArmyId(6)!=0||getUnitGroupArmyId(4)!=0){
                        return getUnitGroupMinAttack(6)+getUnitGroupMinAttack(4);
                    }else{
                        return getUnitGroupMinAttack(0);
                    }
            }
            return getUnitGroupMinAttack(0);
        }



        //获得某个战线的攻击力
        //战线  1↖ 2上 3↗ 4↙ 5↓ 6↘  位置 1← 2↖ 3↗ 4→ 5↙ 6↘ 绘制顺序 2,3,1,0,4,5,6
        public int getArmyFormationAvgAttack(int direct) {
            //direct :1↖ 2↑ 3↗ 4↙ 5↓ 6↘
            switch (direct){
                case 1:if(getUnitGroupArmyId(1)!=0&&getUnitGroupArmyId(2)!=0){
                    return (getUnitGroupAvgAttack(1)+getUnitGroupAvgAttack(2))*(100+getUnitGroupMDB(1)+getUnitGroupMDB(2))/100;
                }else  if(getUnitGroupArmyId(1)!=0||getUnitGroupArmyId(2)!=0){
                    return getUnitGroupAvgAttack(1)+getUnitGroupAvgAttack(2);
                }else{
                    return getUnitGroupAvgAttack(0);
                }
                case 2:
                    if(getUnitGroupArmyId(2)!=0&&getUnitGroupArmyId(3)!=0){
                        return (getUnitGroupAvgAttack(2)+getUnitGroupAvgAttack(3))*(100+getUnitGroupMDB(2)+getUnitGroupMDB(3))/100;
                    }else  if(getUnitGroupArmyId(2)!=0||getUnitGroupArmyId(3)!=0){
                        return getUnitGroupAvgAttack(2)+getUnitGroupAvgAttack(3);
                    }else{
                        return getUnitGroupAvgAttack(0);
                    }
                case 3:
                    if(getUnitGroupArmyId(3)!=0&&getUnitGroupArmyId(4)!=0){
                        return (getUnitGroupAvgAttack(3)+getUnitGroupAvgAttack(4))*(100+getUnitGroupMDB(3)+getUnitGroupMDB(4))/100;
                    }else  if(getUnitGroupArmyId(3)!=0||getUnitGroupArmyId(4)!=0){
                        return getUnitGroupAvgAttack(3)+getUnitGroupAvgAttack(4);
                    }else{
                        return getUnitGroupAvgAttack(0);
                    }
                case 4:
                    if(getUnitGroupArmyId(1)!=0&&getUnitGroupArmyId(5)!=0){
                        return (getUnitGroupAvgAttack(1)+getUnitGroupAvgAttack(5))*(100+getUnitGroupMDB(1)+getUnitGroupMDB(5))/100;
                    }else  if(getUnitGroupArmyId(1)!=0||getUnitGroupArmyId(5)!=0){
                        return getUnitGroupAvgAttack(1)+getUnitGroupAvgAttack(5);
                    }else{
                        return getUnitGroupAvgAttack(0);
                    }
                case 5:
                    if(getUnitGroupArmyId(5)!=0&&getUnitGroupArmyId(6)!=0){
                        return (getUnitGroupAvgAttack(5)+getUnitGroupAvgAttack(6))*(100+getUnitGroupMDB(5)+getUnitGroupMDB(6))/100;
                    }else  if(getUnitGroupArmyId(5)!=0||getUnitGroupArmyId(6)!=0){
                        return getUnitGroupAvgAttack(5)+getUnitGroupAvgAttack(6);
                    }else{
                        return getUnitGroupAvgAttack(0);
                    }
                case 6:
                    if(getUnitGroupArmyId(6)!=0&&getUnitGroupArmyId(4)!=0){
                        return (getUnitGroupAvgAttack(6)+getUnitGroupAvgAttack(4))*(100+getUnitGroupMDB(6)+getUnitGroupMDB(4))/100;
                    }else if(getUnitGroupArmyId(6)!=0||getUnitGroupArmyId(4)!=0){
                        return getUnitGroupAvgAttack(6)+getUnitGroupAvgAttack(4);
                    }else{
                        return getUnitGroupAvgAttack(0);
                    }
            }
            return getUnitGroupAvgAttack(0);
        }
        //获得某个战线的防御力
        //战线  1↖ 2上 3↗ 4↙ 5↓ 6↘  位置 1← 2↖ 3↗ 4→ 5↙ 6↘ 绘制顺序 2,3,1,0,4,5,6
        public int getArmyFormationArmor(int direct) {
            //direct :1↖ 2↑ 3↗ 4↙ 5↓ 6↘
            switch (direct){
                case 1:
                    if(getUnitGroupArmyId(1)!=0&&getUnitGroupArmyId(2)!=0){
                        return (getUnitGroupArmor(1)+getUnitGroupArmor(2))*(100+getUnitGroupFDB(1)+getUnitGroupFDB(2))/100;
                    }else if(getUnitGroupArmyId(1)!=0||getUnitGroupArmyId(2)!=0){
                        return getUnitGroupArmor(1)+getUnitGroupArmor(2);
                    }  else{
                        return getUnitGroupArmor(0);
                    }
                case 2:
                    if(getUnitGroupArmyId(2)!=0&&getUnitGroupArmyId(3)!=0){
                        return  (getUnitGroupArmor(2)+getUnitGroupArmor(3))*(100+getUnitGroupFDB(2)+getUnitGroupFDB(3))/100;
                    }else if(getUnitGroupArmyId(2)!=0||getUnitGroupArmyId(3)!=0){
                        return getUnitGroupArmor(2)+getUnitGroupArmor(3);
                    }else{
                        return getUnitGroupArmor(0);
                    }
                case 3:
                    if(getUnitGroupArmyId(3)!=0&&getUnitGroupArmyId(4)!=0){
                        return  (getUnitGroupArmor(3)+getUnitGroupArmor(4))*(100+getUnitGroupFDB(3)+getUnitGroupFDB(4))/100;
                    }else if(getUnitGroupArmyId(3)!=0||getUnitGroupArmyId(4)!=0){
                        return getUnitGroupArmor(3)+getUnitGroupArmor(4);
                    }else{
                        return getUnitGroupArmor(0);
                    }
                case 4:
                    if(getUnitGroupArmyId(1)!=0&&getUnitGroupArmyId(5)!=0){
                        return  (getUnitGroupArmor(1)+getUnitGroupArmor(5))*(100+getUnitGroupFDB(1)+getUnitGroupFDB(5))/100;
                    }else if(getUnitGroupArmyId(1)!=0||getUnitGroupArmyId(5)!=0){
                        return getUnitGroupArmor(1)+getUnitGroupArmor(5);
                    }else{
                        return getUnitGroupArmor(0);
                    }
                case 5:
                    if(getUnitGroupArmyId(5)!=0&&getUnitGroupArmyId(6)!=0){
                        return  (getUnitGroupArmor(5)+getUnitGroupArmor(6))*(100+getUnitGroupFDB(5)+getUnitGroupFDB(6))/100;
                    }else if(getUnitGroupArmyId(5)!=0||getUnitGroupArmyId(6)!=0){
                        return getUnitGroupArmor(5)+getUnitGroupArmor(6);
                    }else{
                        return getUnitGroupArmor(0);
                    }
                case 6:
                    if(getUnitGroupArmyId(6)!=0&&getUnitGroupArmyId(4)!=0){
                        return  (getUnitGroupArmor(6)+getUnitGroupArmor(4))*(100+getUnitGroupFDB(6)+getUnitGroupFDB(4))/100;
                    }else if(getUnitGroupArmyId(6)!=0||getUnitGroupArmyId(4)!=0){
                        return getUnitGroupArmor(6)+getUnitGroupArmor(4);
                    }else{
                        return getUnitGroupArmor(0);
                    }
            }
            return getUnitGroupArmor(0);
        }

        //-1未知  自身0  1左上 2上 3左下 4左下 5下 6右下
        //判断某一个方向的战线是否还存在
        //ifAll 判断阵线上必须两个都有,否则只要有一个
        @Override
        public boolean ifUnitGroupIsFormation(int direct,boolean ifAll){
            if(ifAll){
                switch (direct){
                    case 1:
                        if(getUnitGroupArmyId(1)!=0&&getUnitGroupArmyId(2)!=0){
                            return true;
                        }else{
                            return false;
                        }
                    case 2:
                        if(getUnitGroupArmyId(2)!=0&&getUnitGroupArmyId(3)!=0){
                            return true;
                        }else{
                            return false;
                        }
                    case 3:
                        if(getUnitGroupArmyId(3)!=0&&getUnitGroupArmyId(4)!=0){
                            return true;
                        }else{
                            return false;
                        }
                    case 4:
                        if(getUnitGroupArmyId(1)!=0&&getUnitGroupArmyId(5)!=0){
                            return true;
                        }else{
                            return false;
                        }
                    case 5:
                        if(getUnitGroupArmyId(5)!=0&&getUnitGroupArmyId(6)!=0){
                            return true;
                        }else{
                            return false;
                        }
                    case 6:
                        if(getUnitGroupArmyId(6)!=0&&getUnitGroupArmyId(4)!=0){
                            return true;
                        }else{
                            return false;
                        }
                }
            }else{
                switch (direct){
                    case 1:
                        if(getUnitGroupArmyId(1)!=0||getUnitGroupArmyId(2)!=0){
                            return true;
                        }else{
                            return false;
                        }
                    case 2:
                        if(getUnitGroupArmyId(2)!=0||getUnitGroupArmyId(3)!=0){
                            return true;
                        }else{
                            return false;
                        }
                    case 3:
                        if(getUnitGroupArmyId(3)!=0||getUnitGroupArmyId(4)!=0){
                            return true;
                        }else{
                            return false;
                        }
                    case 4:
                        if(getUnitGroupArmyId(1)!=0||getUnitGroupArmyId(5)!=0){
                            return true;
                        }else{
                            return false;
                        }
                    case 5:
                        if(getUnitGroupArmyId(5)!=0||getUnitGroupArmyId(6)!=0){
                            return true;
                        }else{
                            return false;
                        }
                    case 6:
                        if(getUnitGroupArmyId(6)!=0||getUnitGroupArmyId(4)!=0){
                            return true;
                        }else{
                            return false;
                        }
                }
            }
            return false;
        }

        @Override
        public int getUnitType(int direct) {
            int armyId=getUnitId(direct);
            XmlReader.Element xml=game.gameConfig.getDEF_ARMY().getElementById(armyId);
            if(xml!=null){
                return xml.getInt("type",1);
            }
            return 1;
        }


        public boolean replaceUnitGroupPotion(int potion1, int potion2) {
            if(potion1==potion2||potion1<0||potion1>6||potion2<0||potion2>6){
                return false;
            }
            int armyId= getUnitGroupArmyId(potion1);
            int ta= getUnitGroupArmyId(potion2);
            if((potion1==0||potion2==0)&&(armyId==0||ta==0 )){
                return false;
            }
            if(getArmyType()==6&&getIfMove()==1){
                return false;
            }
            int wealLv=getUnitGroupWealLv(potion1);
            int groupLv=getUnitGroupGroupLv(potion1);
            setUnitGroupArmyId(potion1, getUnitGroupArmyId(potion2));
            setUnitGroupWealLv(potion1,getUnitGroupWealLv(potion2),false);
            setUnitGroupGroupLv(potion1,getUnitGroupGroupLv(potion2),false);
            setUnitGroupArmyId(potion2,armyId);
            setUnitGroupWealLv(potion2,wealLv,false);
            setUnitGroupGroupLv(potion2,groupLv,false);
            initVirAttribute();
            if(armyActor!=null){
                armyActor.updArmyModel();
                armyActor.update();
            }
            return true;
        }
        /**
         * @result direct {@link #getDirectByBorderId}
         */
        public int getDirect(int targetHexagonIndex) {
            return Fb2Smap.this.getDirect(hexagonIndex,targetHexagonIndex);
        }
        public int getDirectByBorderId(int targetHexagonIndex) {
            return Fb2Smap.this.getDirectByBorderId(hexagonIndex,targetHexagonIndex);
        }

        public int getMapW() {
            return masterData.getWidth();
        }

        @Override
        public int getUnitDirection() {
            return getArmyDirection();
        }

        @Override
        public int getWeaponValue(int direct, int targetType) {
            LegionData l=getLegionData();
            if(isUnitGroup()){
                int potion1= game.gameMethod.getArmyFomationPotion(this,direct,0);
                int potion2= game.gameMethod.getArmyFomationPotion(this,direct,1);
                //int armyId1=getUnitGroupArmyId(potion1,false);
                //int armyId2=getUnitGroupArmyId(potion2,false);

                int rs=0;int i=0;
                XmlReader.Element xmlE1=getArmyXmlE(potion1,false);
                if(xmlE1!=null){
                    rs= game.gameMethod.getWeaponValue(xmlE1.getInt("weapon",101),targetType,ComUtil.min(getUnitGroupWealLv(potion1)+getUnitGroupSameArmyIdCount(potion1),l.getCardTechLv(xmlE1.getInt("id"),xmlE1.getInt("type"))));
                    i++;
                }
                XmlReader.Element xmlE2=getArmyXmlE(potion1,false);
                if (xmlE2 != null) {
                    rs += game.gameMethod.getWeaponValue(xmlE2.getInt("weapon", 101), targetType, ComUtil.min(getUnitGroupWealLv(potion2) + getUnitGroupSameArmyIdCount(potion2), l.getCardTechLv(xmlE2.getInt("id"),xmlE2.getInt("type"))));
                    i++;
                }
               /* if(armyId1>0){
                    XmlReader.Element xmlE1=game.gameConfig.getDEF_ARMY().getElementById(armyId1);
                    if(xmlE1!=null){
                        rs= game.gameMethod.getWeaponValue(xmlE1.getInt("weapon",101),targetType,ComUtil.min(getUnitGroupWealLv(potion1)+getUnitGroupSameArmyIdCount(potion1),9));
                        i++;
                    }
                }
                if(armyId2>0) {
                    XmlReader.Element xmlE2=game.gameConfig.getDEF_ARMY().getElementById(armyId2);
                    if (xmlE2 != null) {
                        rs += game.gameMethod.getWeaponValue(xmlE2.getInt("weapon", 101), targetType, ComUtil.min(getUnitGroupWealLv(potion2) + getUnitGroupSameArmyIdCount(potion2), 9));
                        i++;
                    }
                }*/
                if(i==0){
                    XmlReader.Element xmlE=armyXmlE0;
                    if(xmlE!=null){
                        return game.gameMethod.getWeaponValue(xmlE.getInt("weapon",101),targetType,ComUtil.min(getUnitWealv0()+getUnitGroupSameArmyIdCount(0),l.getCardTechLv(xmlE.getInt("id"),xmlE.getInt("type"))));
                    }
                    return 0;
                }else {
                    if(i>0){
                        return rs/i;
                    }else{
                        return 0;
                    }
                }
            }else{
                XmlReader.Element xmlE=armyXmlE0;
                if(xmlE!=null){
                    return game.gameMethod.getWeaponValue(xmlE.getInt("weapon",101),targetType,getUnitWealv0());
                }
                return 0;
            }
        }


        //重置编队和武器等级
        public void resetAbility() {
            for(int i=0;i<7;i++){
                if(isUnitGroup()){
                    if(getUnitGroupArmyId(i)==0){
                        setUnitGroupGroupLv(i,0,false);
                        setUnitGroupWealLv(i,0,false);
                    }else{
                        setUnitGroupGroupLv(i,ComUtil.getRandom(0,ComUtil.min(armyRank,9)),true);
                        if(generalIndex==0){
                            setUnitGroupWealLv(i,ComUtil.getRandom(0,ComUtil.min(armyRank,6)),true);
                        }else{
                            GeneralData g=getGeneralData();
                            if(g!=null){
                                setUnitGroupWealLv(i,ComUtil.getRandom(0,ComUtil.min(armyRank,g.getRank())),true);
                            }else{
                                setUnitGroupWealLv(i,ComUtil.getRandom(0,ComUtil.min(armyRank,6)),true);
                            }
                        }
                    }
                }else{
                    if(i>0){
                        setUnitGroupGroupLv(i,0,false);
                      //  setUnitGroupWealLv(i,0,false);
                       setUnitGroupWealLv(i,ComUtil.getRandom(0,ComUtil.min(armyRank,6)),false);
                    }
                }
            }
        }

        //该方法会升级编制并扣钱
        public void updUnitGroupAndPayRes(int index) {
            int armyId=getUnitGroupArmyId(index);
            if(armyId!=0&&canUpdUnitGroupGroupLv(index)){
                updUnitGroupGroupLv(index,1,true);
                payCardPrice(getLegionData(),getBuildData(),armyId,true);
                if(armyActor!=null){
                    armyActor.updArmyModel();
                    armyActor.update();
                }
            }
        }

        public void updUnitGroupLv(int index) {
            int armyId=getUnitGroupArmyId(index);
            if(armyId!=0&&canUpdUnitGroupGroupLv(index)){
                updUnitGroupGroupLv(index,1,true);
                if(armyActor!=null){
                    armyActor.updArmyModel();
                    armyActor.update();
                }
            }
        }
        //该方法会升级武器等级并扣钱
        public void updUnitWealvAndPayRes(int index) {
            int armyId=getUnitGroupArmyId(index);
            if(armyId==0&&index!=0){
                armyId=getUnitGroupArmyId(0);
            }
            if(armyId!=0&&canUpdUnitGroupWealLv(index)){
                updUnitGroupWealLv(index,1);
                payCardPrice(getLegionData(),getBuildData(),armyId,true);
            }
        }

        public boolean dissolveUnitGroupAndRestoreState(){
            return  dissolveUnitGroupAndRestoreState(getMaxHpGroupIndexNotSource());
        }

        private int getMaxHpGroupIndexNotSource() {
            if(isUnitGroup()){//组合部队
                int hp=0,potion=0;
                for(int i=1;i<7;i++){
                    XmlReader.Element xml=getArmyXmlE(i,false);
                    if(xml!=null){
                        int strength=xml.getInt("strength",0);
                        if(strength>hp){
                            hp=strength;
                            potion=i;
                        }
                    }
                }
                return potion;
            }else{
                return 0;
            }
        }

        public boolean dissolveUnitGroupAndRestoreState(int index) {
            int armyId=getUnitGroupArmyId(index);
            int groupLv=getUnitGroupGroupLv(index);
            if(groupLv==0||armyId==0||(!isPlayer()&&getHpRate()>80)){
                return false;
            }
            XmlReader.Element xml=getArmyXmlE(index,false);
            if(xml!=null&&getUnitGroupGroupLv(index)>0){
                int hp=xml.getInt("strength",0);
                armyHpNow+=hp /2;
                setUnitGroupGroupLv(index,getUnitGroupGroupLv(index)-1,false);
                if(getUnitGroupGroupLv(index)==0){
                    setUnitGroupArmyId(index,0);
                    setUnitGroupWealLv(index,0,true);
                    resetXmlE();
                }
                resetArmyHpMax();
                setArmyMoraleChange(20,game.resGameConfig.resetUnitMoraleMax);
                if(armyActor!=null){
                    armyActor.updArmyModel();
                    armyActor.update();
                }
                return true;
            }
            return false;
        }


        //返回合并的位置
        public int mergeUnitGroup(int armyId) {
            XmlReader.Element armyE = game.gameConfig.getDEF_ARMY().getElementById(armyId);
            int potion=getEmptyGroupPotion();
            if(armyE!=null&&potion>0){
                setUnitGroupArmyId(potion,armyId);
                setUnitGroupGroupLv(potion,1,false);
                setUnitGroupWealLv(potion,1,false);
                resetArmyHpMax();
                addArmyHpNow(armyE.getInt("strength",0));
                initVirAttribute();
                if(armyActor!=null){
                    armyActor.updArmyModel();
                    armyActor.update();
                }
                return potion;
            }else{
                return -1;
            }
        }
        @Override
        public boolean isUnitGroup() {//兵种类型  1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇  是组合兵种
            return Fb2Smap.this.isUnitGroup(getArmyType());
        }

        public boolean isEditMode(boolean b) {
            return Fb2Smap.this.isEditMode(b);
        }

        public boolean isEmptyBuildRound() {
            BuildData b=getBuildData();
            if(b!=null&&b.getLegionIndex()==legionIndex&&b.getBuildRound()==0){
                return true;
            }
            return false;
        }

        public void clearAllMergeData() {
            for(int i=1;i<=6;i++){
                setUnitGroupGroupLv(i,0,false);
                setUnitGroupWealLv(i,0,false);
                setUnitGroupArmyId(i,0);
            }
        }

        public int getRandomCanRecruitMergeUnitId() {
            if(!isUnitGroup()||getUnitGroup()>6){
                return -1;
            }
            IntArray ia=game.tempUtil.getTempIntArray();
            int rs=-1;
            LegionData l=getLegionData();
            Array<XmlReader.Element> cardEs=  game.gameConfig.getDEF_CARD().e.getChildrenByName("card");
            for(int i=0;i<cardEs.size;i++){
                XmlReader.Element cardE=cardEs.get(i);
                int cardType=cardE.getInt("type");
                int age=cardE.getInt("age");
                int armyId=cardE.getInt("id",1101);
                if(getAge()>=age&&armyId!=1105&&canMerge(cardType,armyId)){
                    ia.add(armyId);
                }
            }
            if(ia.size>0){
                rs=ia.random();
            }
            game.tempUtil.disposeTempIntArray(ia);
            return rs;
        }

        public boolean ifInBuild() {
            if(getBuildDataByRegion(hexagonIndex)!=null){
                return true;
            }
            return false;
        }
        @Override
        public void drawMorale(int v,float damageTime) {
            if (roundState == 0 && v != 0&&armyActor!=null) {
                effectStage.drawMorale(getHexagonIndex(),v,damageTime);
            }
        }

        public boolean canRecruitGeneral() {
            BuildData build=getBuildData();
            if(build!=null&&getArmyType()!=6&&build.getLegionIndex()==getLegionIndex()&&build.getBuildRound()==0&&getGeneralIndex()==0&&getLegionData().ifCanRecruitGeneral()){
                return true;
            }
            return false;
        }

        public void resetCoreArmyIdForHighestMove() {
            if(isUnitGroup()&&getArmyFormation()==0&&!potionIsSea()){
                int move=getUnitGroupMove(0);
                int index=0;
                //远程能力
                for(int i=1;i<=6;i++){
                    int ta=getUnitGroupMove(i);
                    if(ta>move){
                        index=i;
                        move=ta;
                    }
                }
                if(index!=0){
                    replaceUnitGroupPotion(0,index);
                    return;
                }
            }
        }

        private int getUnitGroupMove(int i) {
            if(potionIsSea()){
                return  shipXmlE.getInt("movement", 0);
            }
            XmlReader.Element xmlE=getArmyXmlE(i,false);
            if(xmlE!=null){
                return xmlE.getInt("movement", 0);
            }
            return 0;
        }

        public boolean legionCanUpdLv() {
            if(getGameMode()<2&&isEmptyBuildRound()){
                if(isUnitGroup()){
                    if(this.legionCanUpdUnitGroupWealLv()||this.legionCanUpdUnitGroupGroupLv()){
                        return true;
                    }
                }else{
                    if(legionCanUpdUnitGroupWealLv(0)){
                        return true;
                    }
                    if((getUnitWealv1()<=getUnitWealv0Value())||(getUnitWealv2()<=getUnitWealv0Value())||(getUnitWealv3()<=getUnitWealv0Value())||(getUnitWealv4()<=getUnitWealv0Value())||(getUnitWealv5()<=getUnitWealv0Value())||(getUnitWealv6()<=getUnitWealv0Value())){
                        return true;
                    }
                }
            }
            return false;
        }
        //type 0随机 1最大攻击 -1最小攻击 2平均攻击
        public int getUnitGroupAttackForRange(int targetHexagon,int type) {
            int rs=0;
            for(int i=0;i<7;i++){
                XmlReader.Element xml=getArmyXmlE(i,false);
                if(xml!=null){
                    if(ifInRange(getHexagonIndex(), targetHexagon,  xml.getInt("minAtkrange",0), xml.getInt("maxAtkrange",0), getIfOnlySeaForTarget())){
                        int addD=addTechDamage(xml.getInt("id"),xml.getInt("type"));
                        switch (type){
                            case 0:
                                rs+=(ComUtil.getRandom(xml.getInt("minAtk",0),xml.getInt("maxAtk",0))+addD)*getUnitGroupGroupRate(i);
                                break;
                            case 1:
                                rs+=(xml.getInt("maxAtk",0)+addD)*getUnitGroupGroupRate(i);
                                break;
                            case -1:
                                rs+=(xml.getInt("maxAtk",0)+addD)*getUnitGroupGroupRate(i);
                                break;
                            case 2:
                                rs+=((xml.getInt("minAtk",0)+xml.getInt("maxAtk",0))/2+addD)*getUnitGroupGroupRate(i);
                                break;
                        }
                    }
                }
            }
            return rs;
        }

        public void randomUpdArmyAbility(int count) {
            if(count<=0){return;};
            for(int i=0;i<count;i++){
                randomUpdArmyWealv();
            }
        }

        public int getPower() {
            if(isUnitGroup()){
                return 1+getPopulation()+getArmyRank();
            }else{
                return 1+getPopulation()+getArmyRank();
            }
        }

        public boolean needUpd() {
            if(armyActor!=null&&getArmyKills()>=getKillSum()){
                GeneralData g=getGeneralData();
                if(g!=null&&getArmyRank()<g.getRank()){
                    return true;
                }
            }
            return false;
        }

        public boolean isFacility(int facilityId) {
           FacilityData f= getFacilityDataByHexagon(getHexagonIndex());
            if(f!=null&&f.getFacilityId()==facilityId){
                return true;
            }
            return false;
        }

        public boolean inMountain() {
            Fb2Map.MapHexagon h=getHexagonData();
            if(h!=null&&h.getBackTile()==5){
                return true;
            }
            return false;
        }
        //是否是精英 当编队或等级>该值时
        public boolean isElite(int value) {
            if(getGeneralIndex()>0||getUnitGroup()>=value||getArmyRank()>=value){
                return true;
            }
            return false;
        }


        public int getSkillCount() {
            int rs = 0;
            if (skillId1 != 0&&skillLv1>0) {
                rs ++;
            }
            if (skillId2 != 0&&skillLv2>0) {
                rs ++;
            }
            if (skillId3 != 0&&skillLv3>0) {
                rs ++;
            }
            if (skillId4 != 0&&skillLv4>0) {
                rs ++;
            }
            return rs;
        }

        public int getNotSameSkillForIndex(ArmyData tArmy) {
            IntArray rs=game.tempUtil.getTempIntArray();
            for(int i=0;i<4;i++){
                int skillId=tArmy.getSkillIdByIndex(i);
                if(skillId>0){
                    rs.add(skillId);
                }
            }
            if(rs.size>0){
                for(int j=0;j<4;j++) {
                    int skillId=getSkillIdByIndex(j);
                    if ( skillId>0&&!rs.contains(skillId)) {
                        game.tempUtil.disposeTempIntArray(rs);
                        return j;
                    }
                }
            }
            game.tempUtil.disposeTempIntArray(rs);
            return -1;
        }

    }
    public int getGameElite(){
        if(masterData.gameEliteLv >0){
            return masterData.gameEliteLv;
        }
        return game.resGameConfig.aiEliteLvLimit;
    }

   /* private boolean canPayCardPrice(LegionData legionData, BuildData buildData, int cardId) {
        if(legionData!=null){
            if(legionData.isPlayer()){
                return playerCanBuyCard(buildData,cardId);
            }else {
                return  ai_canPayCardPrice(legionData,buildData,cardId);
            }
        }
        return false;
    }*/

    //获得最低的士气下限
    private int getMinMorale(int regionId, int legionIndex) {
        int rs=0;
        if(!ifSystemEffective(0)){
            return rs;
        }
        BuildData b=getBuildDataByRegion(regionId);
        if(b!=null){
            int v=getChiefSpecialEffect(9);
            if(b.isPlayer()&&v>=0){
                b=b.getLegionData().getCapital();
                if(b==null){
                    return rs;
                }
            }
            if(!b.ifSea()&&ifAllyByLi(b.getLegionIndex(),legionIndex)){
                rs= b.getCityStability()/2;
            }
            if(b.haveSkill(41)&&rs<game.resGameConfig.unitMoraleMinLimit){
                b.drawSkill(41);
                rs=game.resGameConfig.unitMoraleMinLimit;
            }
        }
        return rs;
    }
    private int getMaxMorale( int legionIndex){
        int rs=100;
        if(masterData.getPlayerMode()!=0||getChiefSpecialEffect(12)>=0){
            return 100;
        }
        return 75+getLegionDataByLi(legionIndex).getStability()/4;
    }




    //如果某区域的某个单位是否有某个特性
    private boolean ifRegionHaveFeature(int hexagon,int li,int feature) {
        BuildData b=getBuildDataByRegion(getRegionId(hexagon));
        if(b!=null&&ifAllyByLi(b.getLegionIndex(),li)){
            if(b.haveFeature(feature)){
                return true;
            }
        }
        return false;
    }



    //防御工事数据
    public class FortData {



        public FortActor fortActor;


        private int fortLv;//陷阱序号

        public FortData(int fortId,int hexagon,int li,int buildLv) {
            init(fortId,hexagon,li,buildLv);
        }
        public void init(int fortId,int hexagon,int li,int buildLv) {
            this.fortLv=buildLv;
            this.setHexagonIndex(hexagon);
            this.legionIndex=li;
            this.fortId=fortId;
            int fortRound=5+buildLv;

            if(fortId==5005){
                fortRound=getLegionData().getDrapRound();
            }
            this.fortRound =fortRound;
            if(fortActor==null){
                if(ifAllyPlayerByLi(li)){
                    gameStage.createFortActor(this);
                }
            }else {
                fortActor.update();
            }

        }

        private LegionData getLegionData() {
            LegionData l=getLegionDataByLi(legionIndex);
            if(l==null){
                l=getLegionDataByLi(0);
            }
            return l;
        }


        public FortData() {}
        public int getFortLv() {
            return fortLv;
        }

        public void setFortLv(int fortLv) {
            this.fortLv = ComUtil.limitValue(fortLv,0,15);
        }

        private int hexagonIndex;//陷阱坐标

        public int getHexagonIndex() {
            return hexagonIndex;
        }

        public void setHexagonIndex(int hexagonIndex) {
            this.hexagonIndex = hexagonIndex;
        }

        private int legionIndex;//军团归属

        public int getLegionIndex() {
            return legionIndex;
        }

        public void setLegionIndex(int legionIndex) {
            this.legionIndex = legionIndex;
        }

        private int fortId;//陷阱id

        public int getFortId() {
            return fortId;
        }

        public void setFortId(int fortId) {
            this.fortId = fortId;
        }

        private int fortRound;//陷阱hp

        public int getFortRound() {
            return fortRound;
        }

        public void setFortRound(int fortRound) {
            this.fortRound = fortRound;
        }

        public void removeActor() {
            if(fortActor!=null){
                game.sMapScreen.smapGameStage.fortActorClear(fortActor);
                fortActor=null;
            }
        }


        public void setActor(FortActor fortActor) {
            this.fortActor=fortActor;
        }

        //绘制
        public int getDrawState() {
            if(fortId==5001||fortId==5007||getArmyDataByHexagon(hexagonIndex)==null){
                return 0;
            }else {
                return 1;
            }

        }

        /*public void fortActorToDrawFort() {
            FortData f=getFortDataByHexagon(hexagonIndex);
            if(f==null||f.fortActor==null){
                return;
            }
            f.fortActor.setDrawState(getDrawState(),false);
        }*/
        public Fb2Map.MapHexagon getHexagonData() {
            return hexagonDatas.get(hexagonIndex);
        }

        public String getAllAttribute() {
            return "fortLv:"+fortLv+
                    "hexagonIndex:"+hexagonIndex+
                    "legionIndex:"+legionIndex+
                    "fortId:"+fortId+
                    "fortHp:"+ fortRound;
        }

        public ArmyData getArmyData() {
            return getArmyDataByHexagon(hexagonIndex);
        }

        public void death() {
            fortDataDeath(hexagonIndex);
        }
    }


    //外交数据
    public class ForeignData {
        private int sourceLegionIndex;//主军团

        public int getSourceLegionIndex() {
            return sourceLegionIndex;
        }

        public void setSourceLegionIndex(int sourceLegionIndex) {
            this.sourceLegionIndex = sourceLegionIndex;
        }

        private int targetLegionIndex;//副军团

        public int getTargetLegionIndex() {
            return targetLegionIndex;
        }

        public void setTargetLegionIndex(int targetLegionIndex) {
            this.targetLegionIndex = targetLegionIndex;
        }

        //如果是宗属关系
        public boolean isSuzerain(){
            LegionData l=getLegionDataByLi(sourceLegionIndex);
            if(l!=null&&l.getSuzerainLi()==targetLegionIndex){
                return true;
            }
            l=getLegionDataByLi(targetLegionIndex);
            if(l!=null&&l.getSuzerainLi()==sourceLegionIndex){
                return true;
            }

            return false;
        }


        public boolean isPlayer(){
            if(targetLegionIndex==masterData.playerLegionIndex||sourceLegionIndex==masterData.playerLegionIndex){
                return true;
            }
            return false;
        }

        private int favorValue;//好感度

        public int getFavorValue() {
            return favorValue;
        }

        public int getDiplomaticRecognition(){ //获得外交认可  0未知 1友好 -1敌视
            return Fb2Smap.this.getRealDiplomaticRecognition(sourceLegionIndex,targetLegionIndex);
        }

        public int getMergeChance(){
            return getLegionMergeChance(sourceLegionIndex,targetLegionIndex);
        }

        //增加了根据外交惯性与文化度的修正 会与favor产生 -14~14的误差
        public int getRealFavor(){
            return favorValue +getCivilSpecFavor()+getDiplomaticRecognition()*5;
        }
        //获得文化对于关系度的修正 -9~9
        public int getCivilSpecFavor(){
            if(masterData.getPlayerMode()==0&&roundState==2&&isPlayer()){
                if(masterData.ifChief==1&&chiefData!=null){
                    return  getLegionCivilSpecFavor(getSourceLegionData().getCivilSpec(),getTargetLegionData().getCivilSpec())+chiefData.varBorderCountryFavor;
                }
            }
            return getLegionCivilSpecFavor(getSourceLegionData().getCivilSpec(),getTargetLegionData().getCivilSpec());
        }
        //1~10
        public int getABSCivilSpecFavor(){
            return Math.abs(getLegionCivilSpecFavor(getSourceLegionData().getCivilSpec(),getTargetLegionData().getCivilSpec()))+1;
        }


        public void setFavorValue(int favorValue) {
            if(isPlayer()&&isSelf()){
                int s=0;
            }
            if(isPlayer()&&!isSelf()&&!ifNeedDrawViewMap&&(roundState==0||(roundState==4&&isPlayer()))){
                int oldC=-1;
                //Gdx.app.log("playerFavorChange1",sourceLegionIndex+":"+targetLegionIndex+":"+favor);
                if(targetLegionIndex==masterData.playerLegionIndex){
                    oldC=getCampForPlayer(sourceLegionIndex);
                }else{
                    oldC=getCampForPlayer(targetLegionIndex);
                }
                this.favorValue = ComUtil.limitValue(favorValue, 0, 100);
                if(targetLegionIndex==masterData.playerLegionIndex){
                    if(oldC!=getCampForPlayer(sourceLegionIndex)){
                        ifNeedDrawViewMap=true;
                    }
                }else{
                    if(oldC!=getCampForPlayer(targetLegionIndex)){
                        ifNeedDrawViewMap=true;
                    }
                }
            }else{
                this.favorValue = ComUtil.limitValue(favorValue, 0, 100);
            }
        }

        public void addFavor(int i) {
           /* if(i<0){
                reduceFavor(-i);
                return;
            }*/
            if(ifHaveSpirit(45)&&i>0){
                return;
            }
            setFavorValue(favorValue + i);
        }

        public void reduceFavor(int i) {

            if(ifHaveSpirit(45)&&i<0){
                return;
            }


/*
            if(i<0){
                addFavor(-i);
                return;
            }*/
            setFavorValue(favorValue - i);
        }

        private int foreignValue;//结盟回合

        public int getForeignValue() {
            return foreignValue;
        }

        public void setForeignValue(int foreignValue) {
           /* if(foreignValue>255){
                int s=0;
            }*/
            this.foreignValue = ComUtil.limitValue(foreignValue,-1,255);
        }
        public void addLeagueLeftRound(int leagueLeftRound) {
            this.foreignValue = leagueLeftRound+ this.foreignValue;
        }

        private int foreignType;//外交类型 0无 1互不侵犯 2友好合作 3军事同盟  -1敌对

        public int getForeignType() {
            return foreignType;
        }
        public void setForeignType(int foreignType) {
           if(isPlayer()&& this.foreignType==-1&&foreignType>=0){
               int s=0;
           }
            if(foreignType==-1&&getFavorValue()>50){
                setFavorValue(50);
            }
            this.foreignType = foreignType;

        }

        public int getRForgeinType(){
            return    getRealForgeinType(sourceLegionIndex,targetLegionIndex);
        }



   /*
        0.变通（依据好感度决定外交态度）
        1 多变（随机）
        2.世交(双方互为友好)
        3.世仇(双方互相仇视)
        4.周旋(强的对弱的是友好,弱的对强的是中立)
        5.觊觎(强的对弱的是敌视,弱的对强的是中立)
        6.尊重
        */


        private int diplomaticAttitude;//外交态度

        public int getDiplomaticAttitude() {
            return diplomaticAttitude;
        }

        public void setDiplomaticAttitude(int diplomaticAttitude) {
            this.diplomaticAttitude = ComUtil.limitValue(diplomaticAttitude, 0, 255);
        }

        public void initForeignData() {
            this.sourceLegionIndex = 0;
            this.targetLegionIndex = 0;
            this.favorValue = 0;
            this.foreignValue = 0;
            this.foreignType = 0;
            this.diplomaticAttitude = 0;
        }

        public boolean isSelf() {
            if(targetLegionIndex==sourceLegionIndex){
                return true;
            }else{
                return false;
            }
        }

        public boolean isAlly() {
            return ifAllyByLi(targetLegionIndex,sourceLegionIndex);
        }



        public LegionData getSourceLegionData() {
            return getLegionDataByLi(sourceLegionIndex);
        }
        public LegionData getTargetLegionData() {
            return getLegionDataByLi(targetLegionIndex);
        }

        //根据外交态度和关系来重置好感度
        public void initFavorByDiplomaticAttitude() {
            int favor;
            if(isSelf()){
                favor=ComUtil.getRandom(70,90);
                if(isSuzerain()){
                    favor+=-20;
                }
                setFavorValue(favor);
                return;
            }


            int cf=getCivilSpecFavor();
            favor=ComUtil.getRandom(40,60);
            if(isAlly()){
                favor+=10;
            }
            if(isSuzerain()){
                favor+=10;
            }


            favor+=cf;
            //0.变通（依据好感度决定外交态度）
            //1 多变（随机）
            //2.世交(双方互为友好)
            //3.世仇(双方互相仇视)
            //4.周旋(强的对弱的是友好,弱的对强的是中立)
            //5.觊觎(强的对弱的是敌视,弱的对强的是中立)
            //6.尊重

            switch (getDiplomaticAttitude()){
                case 1:favor+=ComUtil.getRandom(-10,10);break;
                case 2:favor+=10;break;
                case 3:favor+=-20;break;
                case 4:favor+=ComUtil.getRandom(-5,5);break;
                case 5:favor+=ComUtil.getRandom(-10,0);break;
                case 6:favor+=ComUtil.getRandom(0,10);break;
            }
            setFavorValue(favor);
        }

        public int getForeignDegree() {
            return Fb2Smap.this.getForeignDegree(sourceLegionIndex,targetLegionIndex);
        }

        public boolean isSameCamp() {
            LegionData sl= getSourceLegionData();
            LegionData tl= getTargetLegionData();
            if(sl!=null&&tl!=null&&sl.getInternIndex()==tl.getInternIndex()){
                return true;
            }
            return false;
        }

        public boolean haveNeutral() {
            LegionData sl= getSourceLegionData();
            LegionData tl= getTargetLegionData();
            if(sl!=null&&tl!=null&&sl.getInternIndex()==0||tl.getInternIndex()==0||sl.getLegionIndex()==0||tl.getLegionIndex()==0){
                return true;
            }
            return false;
        }

        public String log() {
            return  "sourceLegionIndex:"+ this.sourceLegionIndex+
                    " targetLegionIndex:"+ this.targetLegionIndex+
            " favorValue:"+ this.favorValue+
            " foreignValue:"+ this.foreignValue+
            " foreignType:"+ this.foreignType+
            " diplomaticAttitude:"+ this.diplomaticAttitude;
        }
    }


    //国际组织
    public class InternData {
        private int internIndex;//国际组织id

        public int getInternIndex() {
            return internIndex;
        }

        public void setInternIndex(int internIndex) {
            this.internIndex = internIndex;
        }

        private int legionIndex;//主导国

        public int getLegionIndex() {
            return legionIndex;
        }

        public void setLegionIndex(int legionIndex) {
            this.legionIndex = legionIndex;
        }

        private int campPhase;//阵营相性

        public int getCampPhase() {
            return campPhase;
        }

        public void setCampPhase(int campPhase) {
            this.campPhase = campPhase;
        }

        private int influence;//影响力

        public int getInfluence() {
            return influence;
        }

        public void setInfluence(int influence) {
            this.influence = influence;
        }

        private int tension;//紧张度

        public int getTension() {
            return tension;
        }

        public void setTension(int tension) {
            this.tension = tension;
        }

        public void initInternData() {
            this.internIndex = 0;
            this.legionIndex = 0;
            this.campPhase = 0;
            this.influence = 0;
            this.tension = 0;
        }
    }


    //外贸数据
    public class TradeData {
        private int tradeIndex;//外贸主id

        public int getTradeIndex() {
            return ComUtil.limitValue(tradeIndex, 0, 65525);
        }

        public void setTradeIndex(int tradeIndex) {
            this.tradeIndex = ComUtil.limitValue(tradeIndex, 0, 65525);
        }

        private int legionIndex;//出售国

        public int getLegionIndex() {
            return ComUtil.limitValue(legionIndex, 0, 65525);
        }

        public void setLegionIndex(int legionIndex) {
            this.legionIndex = ComUtil.limitValue(legionIndex, 0, 65525);
        }

        private int goodsType;//类型

        public int getGoodsType() {
            return ComUtil.limitValue(goodsType, 0, 255);
        }

        public void setGoodsType(int type) {
            this.goodsType = ComUtil.limitValue(type, 0, 255);
        }

        private int goodsValue;//值

        public int getGoodsValue() {
            return ComUtil.limitValue(goodsValue, 0, 65525);
        }

        public void setGoodsValue(int value) {
            this.goodsValue = ComUtil.limitValue(value, 0, 65525);
        }

        private int priceType;//类型

        public int getPriceType() {
            return ComUtil.limitValue(priceType, 0, 255);
        }

        public void setPriceType(int value) {
            this.priceType = ComUtil.limitValue(value, 0, 255);
        }

        private int priceValue;//值

        public int getPriceValue() {
            return ComUtil.limitValue(priceValue, 0, 65525);
        }

        public void setPriceValue(int value) {
            this.priceValue = ComUtil.limitValue(value, 0, 65525);
        }

        private int tradeChance;

        public int getTradeChance() {
            return ComUtil.limitValue(tradeChance, 0, 100);
        }

        public void setTradeChance(int tradeChance) {
            this.tradeChance = ComUtil.limitValue(tradeChance, 0, 100);
        }

        public void initTradeData() {
            this.tradeIndex = 0;
            this.legionIndex = 0;
            this.goodsType = 0;
            this.goodsValue = 0;
            this.priceType = 0;
            this.priceValue = 0;
            this.tradeChance = 0;
        }

        public boolean playerCanTrade() {
            if(priceValue==0||goodsValue==0){
                return false;
            }
            LegionData pl=getPlayerLegionData();
            switch (this.priceType){
                case 0:
                    if(pl.getMoney()<priceValue){
                        return false;
                    }
                    break;
                case 1:
                    if(pl.getIndustry()<priceValue){
                        return false;
                    }
                    break;
                case 2:
                    if(pl.getTech()<priceValue){
                        return false;
                    }
                    break;
                case 3:
                    if(pl.getFood()<priceValue){
                        return false;
                    }
                    break;
            }


            return true;
        }

        public boolean isPlayer() {
            if(legionIndex==masterData.getPlayerLegionIndex()){
                return true;
            }
            return false;
        }
    }


    //条约数据
    public class TaskData {
        private int taskIndex;//条约主id

        public int getTaskIndex() {
            return taskIndex;
        }

        public void setTaskIndex(int taskIndex) {
            this.taskIndex = taskIndex;
        }

        private int taskLv;//签订年月

        public int getTaskLv() {
            return taskLv;
        }

        public void setTaskLv(int taskLv) {
            this.taskLv = taskLv;
        }

        private int countNow;//签订地

        public int getCountNow() {
            return countNow;
        }

        public void setCountNow(int countNow) {
            if(countMax!=0){
                this.countNow = ComUtil.limitValue(countNow,0,countMax);
            }else{
                this.countNow =countNow;
            }
        }
        public void setCountNowValue(int countNow) {
            this.countNow =countNow;
        }

        //如果更新这个,必须更新方法checkPolicyXml
        private void resetTaskDataByPolicy( XmlReader.Element lpXmlE) {
            if(lpXmlE==null){
                return;
            }
            this.setTaskIndex(lpXmlE.getInt("id"));
            this.setTaskLv(lpXmlE.getInt("lv",1));
            this.setTaskType(2);
            this.setTaskRound(lpXmlE.getInt("verifyType",0));
            // 根据lpXmlE 的 verifyType赋予一些用于辅助计算的值
            switch (this.getTaskRound()){
                case 15://存在随机非敌对邻国  4  要签署和约
                    IntArray rs=game.tempUtil.getTempIntArray();
                    for(int i=0;i<getPlayerLegionData().borderLegionIndexs.size;i++){
                        LegionData l=getLegionDataByLi(getPlayerLegionData().borderLegionIndexs.get(i));
                        int fd=getForeignDegree(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                        if(l!=null&&!l.isPlayer()&&l.getInternIndex()!=0&&fd!=-1){
                            rs.add(l.getLegionIndex());
                        }
                    }
                    if(rs.size>0){
                        this.setBontyValue(rs.random());
                        this.setCountMax(ComUtil.getRandom(5,10));
                    }else{
                        this.setBontyValue(-1);
                        this.setCountMax(0);
                    }
                    game.tempUtil.disposeTempIntArray(rs);
                    break;
                case 16: // 存在非友善邻国 4
                    rs=game.tempUtil.getTempIntArray();
                    for(int i=0;i<getPlayerLegionData().borderLegionIndexs.size;i++){
                        LegionData l=getLegionDataByLi(getPlayerLegionData().borderLegionIndexs.get(i));
                        int fd=getForeignDegree(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                        if(l!=null&&!l.isPlayer()&&l.getInternIndex()!=0&&fd!=1){
                            rs.add(l.getLegionIndex());
                        }
                    }
                    if(rs.size>0){
                        this.setBontyValue(rs.random());
                    }else{
                        this.setBontyValue(-1);
                    }
                    game.tempUtil.disposeTempIntArray(rs);
                    break;
                case 17:// 存在敌对国家 4
                    rs=game.tempUtil.getTempIntArray();
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        int fd=getForeignDegree(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                        if(l.getInternIndex()!=0&&!l.isPlayer()&&fd==-1){
                            rs.add(l.getLegionIndex());
                        }
                    }
                    if(rs.size>0){
                        this.setBontyValue(rs.random());
                    }else{
                        this.setBontyValue(-1);
                    }
                    game.tempUtil.disposeTempIntArray(rs);
                    break;
                case 18:// 存在随机非敌对国家 4
                    rs=game.tempUtil.getTempIntArray();
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        int fd=getForeignDegree(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                        if(l.getInternIndex()!=0&&!l.isPlayer()&&fd!=-1){
                            rs.add(l.getLegionIndex());
                        }
                    }
                    if(rs.size>0){
                        this.setBontyValue(rs.random());
                    }else{
                        this.setBontyValue(-1);
                    }
                    game.tempUtil.disposeTempIntArray(rs);
                    break;
                case 19:// 存在非敌对盟主类国家 4
                    rs=game.tempUtil.getTempIntArray();
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        int fd=getForeignDegree(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                        if(fd!=-1&&!l.isPlayer()&&l.isFreeSovereignCountry()&&l.varAllyCount>0&&l.varRegionCount>getPlayerLegionData().varRegionCount){
                            rs.add(l.getLegionIndex());
                        }
                    }
                    if(rs.size>0){
                        this.setBontyValue(rs.random());
                    }else{
                        this.setBontyValue(-1);
                    }
                    game.tempUtil.disposeTempIntArray(rs);
                    break;
                case 20://存在非敌对且非盟主的自由国 4
                    rs=game.tempUtil.getTempIntArray();
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        int fd=getForeignDegree(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                        if(fd!=-1&&l.getLegionIndex()!=0&&!l.isPlayer()&&l.isFreeSovereignCountry()&&l.varRegionCount>0&&l.varAllyCount==0){
                            rs.add(l.getLegionIndex());
                        }
                    }
                    if(rs.size>0){
                        this.setBontyValue(rs.random());
                    }else{
                        this.setBontyValue(-1);
                    }
                    game.tempUtil.disposeTempIntArray(rs);
                    break;
                case 21: // 自身有未收回的核心领土或主要领土 因为没有长度8的值,所以用x,y来记录 与目标区域所属国{0}进行一次实力判定,如果成功将会获得区域{1},此操作将导致与该国家的关系度下降
                    rs=game.tempUtil.getTempIntArray();
                    int id=0;
                    if(getPlayerLegionData().coreAreaRegions!=null){
                        for (int i = 0; i < getPlayerLegionData().coreAreaRegions.size; i++) {
                            {
                                int cr=getPlayerLegionData().coreAreaRegions.get(i);
                                BuildData b=getBuildDataByRegion(cr);
                                if(b!=null&&b.getLegionIndex()!=getPlayerLegionData().getLegionIndex()&&!rs.contains(b.getRegionId())){
                                    rs.add(b.getRegionId());
                                }
                            }
                        }
                    }
                    if(rs.size==0){
                        if(getPlayerLegionData().majorAreaRegions!=null){

                            for (int i = 0; i < getPlayerLegionData().majorAreaRegions.size; i++) {
                                {
                                    int cr=getPlayerLegionData().majorAreaRegions.get(i);
                                    BuildData b=getBuildDataByRegion(cr);
                                    if(b!=null&&b.getLegionIndex()!=0&&b.getLegionIndex()!=getPlayerLegionData().getLegionIndex()&&!rs.contains(b.getRegionId())){
                                        rs.add(b.getRegionId());
                                    }
                                }
                            }
                        }
                    }
                    if(rs.size>0){
                        id=rs.random();
                        int li=getLegionIndexByRegion(id);
                        this.setCountNowValue(GameMap.getHX(id,masterData.getWidth()));//该领土的x坐标
                        this.setCountMax(GameMap.getHY(id,masterData.getWidth()));//该领土的y坐标
                        //  int oId=GameMap.getId(countNow,countMax,masterData.getWidth());
                        this.setBontyValue(li);//交涉国
                    }else{
                        this.setCountNowValue(0);//该领土的x坐标
                        this.setCountMax(0);//该领土的y坐标
                        this.setBontyValue(-1);//交涉国
                    }
                    game.tempUtil.disposeTempIntArray(rs);
                    break;
                case 22:// 存在随机非敌对  的可以贸易的国家
                    rs=game.tempUtil.getTempIntArray();
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        int fd=getForeignDegree(l.getLegionIndex(),masterData.playerLegionIndex);
                        if(fd!=-1&&!l.isPlayer()&&(l.incomeMoney>0||l.incomeFood>0||l.incomeIndustry>0||l.incomeTech>0)){
                            rs.add(l.getLegionIndex());
                        }
                    }
                    if(rs.size>0){
                        int li=getLegionIndexByRegion(rs.random());
                        LegionData l=getLegionDataByLi(li);
                        if(l!=null){   //0金钱 1工业 2科技 3食物 4矿物 5石油
                            rs.clear();
                            if(l.incomeMoney>0){ rs.add(0);}
                            if(l.incomeIndustry>0){ rs.add(1);}
                            if(l.incomeTech>0){ rs.add(2);}
                            if(l.incomeFood>0){ rs.add(3);}
                            if(l.incomeMineral>0&& ifSystemEffective(1)){ rs.add(4);}
                            if(l.incomeOil>0&& ifSystemEffective(2)){ rs.add(5);}



                            this.setCountMax(l.getLegionIndex());//4 交换国
                            this.setStar(rs.random());//2 交换国类型
                            this.setCountNowValue(l.getIncome(this.getStar())/10+1);//4 交换国价值

                            rs.clear();
                            if(l.incomeMoney>0&&this.getStar()!=0){ rs.add(0);}
                            if(l.incomeIndustry>0&&this.getStar()!=1){ rs.add(1);}
                            if(l.incomeTech>0&&this.getStar()!=2){ rs.add(2);}
                            if(l.incomeFood>0&&this.getStar()!=3){ rs.add(3);}
                            if(l.incomeMineral>0&&this.getStar()!=4&& ifSystemEffective(1)){ rs.add(4);}
                            if(l.incomeOil>0&&this.getStar()!=5&& ifSystemEffective(2)){ rs.add(5);}

                            this.setBontyType(rs.random());//2 玩家交换类型
                            this.setBontyValue(getPlayerLegionData().getTradeValue(this.getStar(),this.getCountNow(),this.getBontyType()));//4  玩家交换价值
                        }else{
                            this.setCountMax(0);//4 交换国
                            this.setStar(0);//2 交换国类型
                            this.setCountNowValue(0);//4 交换国价值
                            this.setBontyType(0);//2 玩家交换类型
                            this.setBontyValue(-1);//4  玩家交换价值
                        }


                    }else{
                        this.setCountMax(0);//4 交换国
                        this.setStar(0);//2 交换国类型
                        this.setCountNowValue(0);//4 交换国价值
                        this.setBontyType(0);//2 玩家交换类型
                        this.setBontyValue(-1);//4  玩家交换价值
                    }
                    game.tempUtil.disposeTempIntArray(rs);
                    break;
                case 23:
                case 24:
                    this.setBontyValue(lpXmlE.getInt("country",0));
                    this.setCountMax(getPlayerLegionData().getLegionChance(bontyValue));
                    break;
                default:
                    this.setStar(0);//2
                    this.setBontyType(0);//2
                    this.setBontyValue(0);//4
                    this.setCountNowValue(0);//4
                    this.setCountMax(0);//4
                    this.setTaskRound(0);
                    break;
            }
        }


        private int countMax;//主军团

        public int getCountMax() {
            return countMax;
        }

        public void setCountMax(int countMax) {
            this.countMax = countMax;
        }

        private int star;//副军团

        public int getStar() {
            return star;
        }

        public void setStar(int star) {
            this.star = star;
        }


        private int taskType;//类型 0随机任务 1 剧情任务 2国策

        public int getTaskType() {
            return taskType;
        }

        public void setTaskType(int taskType) {
            this.taskType = taskType;
        }

        private int bontyType;//奖励类型 0金钱 1工业 2科技 3食物 4矿物 5石油

        public int getBontyType() {
            return bontyType;
        }

        public void setBontyType(int bontyType) {
            this.bontyType = bontyType;
        }

        private int bontyValue;//值

        public int getBontyValue() {
            return bontyValue;
        }

        public void setBontyValue(int bontyValue) {
            this.bontyValue = bontyValue;
        }

        private int taskRound;

        public int getTaskRound() {
            return taskRound;
        }

        public void setTaskRound(int taskRound) {
            this.taskRound = taskRound;
        }

        private String taskNameStr;
        private String taskInfoStr;
        private String bontyStr;




        public void initTaskData() {
            this.taskIndex = 0;
            this.taskLv = 0;
            this.countNow = 0;
            this.countMax = 0;
            this.star = 0;
            this.bontyType = 0;
            this.bontyValue = 0;
            this.taskRound=0;
        }

       /* public String getTaskNameStr() {
            if(getTaskType()==2){
                return new StringBuilder("legionpolicy_name_").append(taskIndex).toString();
            }else{
                return new StringBuilder("task_name_").append(taskIndex).toString();
            }
        }*/


        public void addTaskCount(int i) {
            setCountNow(countNow+i);
        }

        public String getTaskInfoStr() {
            return taskInfoStr;
        }

        public void resetTaskInfoStr() {
            if(taskType==2){
                this.taskInfoStr = getLegionPolicyStr();
            }else{
                this.taskInfoStr =game.gameMethod.getStrValueT("task_info_"+getTaskIndex(),getCountNow(),getCountMax(),getTaskRound(),getBontyStr());
            }
        }

        private String getLegionPolicyStr( ) {
            XmlReader.Element lpXmlE=  game.gameConfig.getDEF_LEGIONPOLICY().getElementById(getTaskIndex());

            if(lpXmlE==null){
                return "";
            }
            int round=lpXmlE.getInt("round",1);
            if(taskRound==23||taskRound==24){// 卡牌类计算概率
               /* if(ComUtil.isNumeric(countryStr)&&GameMethod.getCardLv(pl,null,Integer.parseInt(countryStr))>5){
                    return true;
                }*/
                return game.gameMethod.getStrValueT("legionpolicy_info_"+taskIndex,countMax,round);
            }


            switch (taskIndex){

                case 82:
                    LegionData  l=getLegionDataByLi(getBontyValue());
                    if(l!=null){
                        return game.gameMethod.getStrValueT("legionpolicy_info_"+taskIndex,l.legionName,countMax,round);
                    }
                    break;
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                    l=getLegionDataByLi(getBontyValue());
                    if(l!=null){
                        return game.gameMethod.getStrValueT("legionpolicy_info_"+taskIndex,l.legionName,round);
                    }
                    break;
                case 88://与目标区域所属国{0}进行一次实力判定,如果成功将会获得区域{1},此操作将导致与该国家的关系度下降
                    BuildData b=getBuildDataByRegion(GameMap.getId(countNow,countMax,masterData.getWidth()));
                    l=getLegionDataByLi(getBontyValue());
                    if(l!=null&&b!=null){
                        return game.gameMethod.getStrValueT("legionpolicy_info_88",l.legionName,b.srName,round);
                    }
                    break;
                case 89://{0}以{1}交换我们{2},持续xx回合
                case 90:
                case 91:
                    l=getLegionDataByLi(getCountMax());
                    if(l!=null){
                        return game.gameMethod.getStrValue("legionpolicy_info_"+taskIndex,l.legionName,game.gameMethod.getStrValueForResource(star,countNow),game.gameMethod.getStrValueForResource(bontyType,bontyValue),round);
                    }
                    break;
            }

            String country=lpXmlE.get("country","-1");
            if(country.equals("-1")){
                country="";
            }else {
                country=   getLegionNameStrByCountry(country,false);
            }
            return  game.gameMethod.getStrValueT("legionpolicy_info_"+getTaskIndex(),getCountNow(),getCountMax(),country,round);
        }


        public void resetTaskNameStr() {
            if(getTaskType()==2){
                switch (taskIndex){
                    case 82:
                    case 83:
                    case 84:
                    case 85:
                    case 86:
                    case 87:
                        this.taskNameStr= game.gameMethod.getStrValue( new StringBuilder("legionpolicy_name_").append(taskIndex).toString(),getLegionNameStrByLi(getBontyValue()));
                        break;
                    case 89:
                    case 90:
                    case 91:
                        this.taskNameStr= game.gameMethod.getStrValue( new StringBuilder("legionpolicy_name_").append(taskIndex).toString(),getLegionNameStrByLi(getCountMax()));
                        break;
                    case 88:
                        this.taskNameStr= game.gameMethod.getStrValue( new StringBuilder("legionpolicy_name_").append(taskIndex).toString(),getSRNameByRegion(GameMap.getId(countNow,countMax,masterData.getWidth())));
                        break;
                    default:
                        this.taskNameStr= game.gameMethod.getStrValue( new StringBuilder("legionpolicy_name_").append(taskIndex).toString());
                }

            }else{
                this.taskNameStr= game.gameMethod.getStrValue(new StringBuilder("task_name_").append(getTaskIndex()).toString(),ComUtil.converNumToRoman(getTaskLv()));
            }
        }

        public String getTaskNameStr(){
            return taskNameStr;
        }

        public String getBontyStr() {
            return bontyStr;
        }

        public void initVirAttribute() {
            resetBontyStr();
            resetTaskInfoStr();
            resetTaskNameStr();
        }

        private void resetBontyStr() {
            bontyStr=game.gameMethod.getStrValueForResource(getBontyType(),getBontyValue());
        }
    }

    private String getSRNameByRegion(int regionId) {
        BuildData b=getBuildDataByRegion(getRegionId(regionId));
        if(b!=null){
            return b.srName;
        }
        return "";
    }

    private String getLegionNameStrByLi(int li) {
        LegionData l=getLegionDataByLi(li);
        if(l!=null){
            return l.legionName;
        }
        return "";
    }


    //延迟区域中数据
    public class RoundData {
        /**
         * @param  type {@link #excuteRoundeDatas}
         */
        private int type;//
        public int getType() {
            return type;
        }
        public void setType(int type) {
            this.type = type;
        }

        private int sourceLi;//资源类型 1交换领土

        public int getSourceLi() {
            return sourceLi;
        }

        public void setSourceLi(int sourceLi) {
            this.sourceLi = sourceLi;
        }

        private int targetLi;//延迟的值或id

        public int getTargetLi() {
            return targetLi;
        }

        public void setTargetLi(int targetLi) {
            this.targetLi = targetLi;
        }

        private int value1;//主军团

        public int getValue1() {
            return value1;
        }

        public void setValue1(int value1) {
            this.value1 = value1;
        }

        private int value2;//副军团

        public int getValue2() {
            return value2;
        }

        public void setValue2(int value2) {
            this.value2 = value2;
        }

        private int round;//回合

        public int getRound() {
            return round;
        }

        public void setRound(int round) {
            this.round = round;
        }

        private int type1;//价制度

        public int getType1() {
            return type1;
        }

        public void setType1(int type1) {
            this.type1 = ComUtil.limitValue(type1, -1, 255);
        }
        private int type2;//价制度

        public int getType2() {
            return type2;
        }

        public void setType2(int type2) {
            this.type2 = ComUtil.limitValue(type2, -1, 255);
        }

        private int hexagon;//价制度

        public int getHexagon() {
            return hexagon;
        }

        public void setHexagon(int hexagon) {
            this.hexagon = hexagon;
        }

        private int triggerType;//触发类型 0 回合到达触发 1 重复触发

        public int getTriggerType() {
            return triggerType;
        }

        public void setTriggerType(int triggerType) {
            this.triggerType = ComUtil.limitValue(triggerType, -1, 255);
        }


        public void initRoundData() {
            this.type = 0;
            this.sourceLi = 0;
            this.targetLi = 0;
            this.value1 = 0;
            this.value2 = 0;
            this.round = 0;
            this.type1 = 0;
            this.type2 = 0;
            this.hexagon =-1;
        }
        public RoundData (int triggerType,int type,int sourceLegionId,int targetLegionId,int value1,int value2 ,int round,int type1,int type2,int hexagon){
            this.triggerType=triggerType;
            this.type = type;
            this.sourceLi = sourceLegionId;
            this.targetLi = targetLegionId;
            this.value1 = value1;
            this.value2 = value2;
            this.round = round;
            this.type1 = type1;
            this.type2 = type2;
            this.hexagon = hexagon ;
        }
        public RoundData(){

        }
    }





    private boolean haveEnemyInRegion(int region) {
        if(regionHexagonMap.containsKey(region)){
            IntArray hs=regionHexagonMap.get(region);
            for(int i=0;i<hs.size;i++){
                if(getForeignDegree(getLegionIndexByHexagon(hs.get(i)),getLegionIndexByHexagon(region))==-1&&getArmyDataByHexagon(hs.get(i))!=null){
                    return true;
                }
            }
        }
        return false;
    }

    /*public void setConnectData(Array<BtlModule18> bm18s) {
        if (connectDatas == null) {
            connectDatas = new Array<ConnectData>();
        } else {
            this.connectDatas.clear();
        }
        if (bm18s == null) {
            return;
        }
        for (BtlModule18 bm18 : bm18s) {
            ConnectData connectData = new ConnectData();
            connectData.setRegionMainIndex(bm18.getBm18_1());
            connectData.setRegionConnectCount(bm18.getBm18_2());
            connectData.setRegionMinorIndex1(bm18.getBm18_3());
            connectData.setRegionMinorIndex2(bm18.getBm18_4());
            connectData.setRegionMinorIndex3(bm18.getBm18_5());
            connectData.setRegionMinorIndex4(bm18.getBm18_6());
            connectData.setRegionMinorIndex5(bm18.getBm18_7());
            connectData.setRegionMinorIndex6(bm18.getBm18_8());
            connectData.setRegionMinorIndex7(bm18.getBm18_9());
            connectData.setRegionMinorIndex8(bm18.getBm18_10());
            connectData.setRegionMinorIndex9(bm18.getBm18_11());
            connectData.setRegionMinorIndex10(bm18.getBm18_12());
            connectData.setRegionMinorIndex11(bm18.getBm18_13());
            connectData.setRegionMinorIndex12(bm18.getBm18_14());
            connectData.setRegionMinorIndex13(bm18.getBm18_15());
            connectData.setRegionMinorIndex14(bm18.getBm18_16());
            connectData.setRegionMinorIndex15(bm18.getBm18_17());
            connectData.setRegionMinorIndex16(bm18.getBm18_18());
            this.connectDatas.add(connectData);
        }
    }*/

    //li1为主国家,判断他能否去进攻另一个国家
    public boolean ifCanAtk(int li1, int li2){
        if((li1==0||li2==0)&&li1!=li2){
            return true;
        }
        if(ifAllyByLi(li1,li2)){
            return false;
        }
        ForeignData f=getForeignData(li1,li2);
        if(f!=null&&(roundState==3||roundState==2)){
            f=getForeignData(li1,li2);
            if(f!=null&&f.getForeignType()>0){
                if(li1==masterData.getPlayerLegionIndex()&&ifSystemEffective(18)){

                }else{
                    return false;
                }
            }
        }
        if(f!=null&&f.getForeignType()<1&&f.getDiplomaticAttitude()==3){
            return true;
        }
        //获得两国关系 0相对中立 1友好 -1敌对(绝对中立国算在敌对中)
        int fd=getForeignDegree(li1,li2);

       /* if((li1==masterData.playerLegionIndex||li2==masterData.playerLegionIndex)&&fd==0){
            LegionData l1=getLegionDataByLi(li1);
            LegionData l2=getLegionDataByLi(li2);
            Gdx.app.log("ifCanAtk test",l1.legionName+":"+l2.legionName);
            int s=0;
        }*/


        if(fd==-1){
            /*if(ifAllyByLi(li1,li2)){
                Gdx.app.error("army_Attack", "盟友互相进攻");
                int s=0;
            }*/
            return true;
        }else if(fd==1){
            return false;
        }else {//中立
            if(ifSystemEffective(18)){
                if((li1==masterData.playerLegionIndex||li2==masterData.playerLegionIndex)&&roundState==0){//ai中立时不会主动进攻势力比他大的国家
                    return true;
                }else{
                    LegionData l1=getLegionDataByLi(li1);
                    LegionData l2=getLegionDataByLi(li2);
                    if(l1.varRegionCount>l2.varRegionCount||l1.incomeMoney>l2.incomeMoney){
                        return true;
                    }
                }
            }else{
                return false;
            }
        }
        return false;
    }

    public void addPromptData(String title,String content,String effect,int li1,int li2,boolean ifBounced){
        PromptData p=new PromptData(title,content,effect,li1,li2);
        Gdx.app.log("addPromptData",title+":"+content+":"+effect);
        if(promptDatas.size==0){
            promptDatas.add(p);
        }else {
            promptDatas.insert(0,p);
        }
        if( ((roundState==0)||(ifBounced&&roundState==4))&&game.sMapScreen!=null){
            game.sMapScreen.showGeneralDialogueGroupAndPromptGroup();
        }
    }

    public void addSelectPromptDataByScript(XmlReader.Element xml){
        addPromptData(game.gameMethod.getPromptStrT(65,0,game.gameMethod.getStrValueT("scriptevent_title_"+xml.getInt("title",-1))),game.gameMethod.getStrValueT("scriptevent_content_"+xml.getInt("content",-1)),"",15,-1,-1,xml.getInt("scriptId1",-1),xml.getInt("scriptId2",-1),xml.getBoolean("ifBounced",false));
    }

    //ifBounced 是否弹框在非玩家回合
    public void addPromptData(String title,String content,String effect,int type,int li,int li2,int value,int value2,boolean ifBounced){
        PromptData p=new PromptData( title, content, effect, type, li, li2, value, value2);
        Gdx.app.log("addPromptData",title+":"+content+":"+effect);
        if(promptDatas.size==0){
            promptDatas.add(p);
        }else {
            for(PromptData p1:promptDatas){
                if(p1!=null&&p1.getType()==type&&(p1.getType()==13&&p1.getType()==14&&p1.getType()==16)){
                    return;
                }
                //查看是否有重复
                if(p1.getType()==type&&p1.li==li&&p1.li2==li2&&p1.value==value&&p1.value2==value2){
                    return;
                }
            }
            promptDatas.insert(0,p);
        }
        if( ((roundState==0)||(ifBounced&&roundState==4))&&game.sMapScreen!=null){
            game.sMapScreen.showGeneralDialogueGroupAndPromptGroup();
        }
    }
    //发出提出领土
    public void addSRRegionExChangePromptDataByScript(XmlReader.Element xml) {
        int srRegion = xml.getInt("srRegion", -1);
        int sC = xml.getInt("sourceCountry", -1);
        int tC = xml.getInt("targetCountry", -1);
        if ( srRegion == -1) {
            return;
        }
        int sLi = -1, tLi = -1;
        LegionData sL=null;
        if(sC==-1){
            sLi=xml.getInt("sourceLegionIndex", -1);
        }else{
            sL = getLegionByCountry(sC,true);
            if(sL==null){
                return;
            }
            sLi=sL.getLegionIndex();
        }
        LegionData tL=null;
        if(tC==-1){
            tLi=xml.getInt("targetLegionIndex", -1);
        }else{
            tL = getLegionByCountry(sC,true);
            if(tL==null){
                return;
            }
            tLi=tL.getLegionIndex();
        }
        if(sLi==-1||tLi==-1){
            return;
        }
        if(sL==null){
            sL=getLegionDataByLi(sLi);
        }
        if(tL==null){
            tL=getLegionDataByLi(tLi);
        }
        int fd=getForeignDegree(sLi,tLi);
        String regionNameStr=game.gameMethod.getStrValueT("strategicRegion_"+srRegion);
        if (tLi==masterData.playerLegionIndex) {//该国家向玩家提出领土要求 74
            if(tL.isCoreAreaSR(srRegion)&&fd!=1&&(tL.getAllArmySumNum()>sL.getAllArmySumNum())){
                addPromptData(game.gameMethod.getPromptStr(110, 0, regionNameStr), game.gameMethod.getPromptStr(110, 1, sL.legionName, regionNameStr), "", 35, tL.getLegionIndex(), sL.getLegionIndex(), fd, srRegion,false);//String title,String content,String effect,int type,int li,int li2,int value,int value2
            }else{
                addPromptData(game.gameMethod.getPromptStr(74, 0, regionNameStr), game.gameMethod.getPromptStr(74, 1, sL.legionName, regionNameStr), "", 21, tL.getLegionIndex(), sL.getLegionIndex(), fd, srRegion,false);//String title,String content,String effect,int type,int li,int li2,int value,int value2
            }
        } else if (sLi==masterData.playerLegionIndex) {//玩家向xx提出领土要求 75
            if(sL.isCoreAreaSR(srRegion)&&fd!=1&&(sL.getAllArmySumNum()>tL.getAllArmySumNum())){
                addPromptData(game.gameMethod.getPromptStr(111, 0, regionNameStr), game.gameMethod.getPromptStr(111, 1, tL.legionName, regionNameStr), "", 34, tL.getLegionIndex(), sL.getLegionIndex(), fd, srRegion,false);//String title,String content,String effect,int type,int li,int li2,int value,int value2
            }else{
                addPromptData(game.gameMethod.getPromptStr(75, 0, regionNameStr), game.gameMethod.getPromptStr(75, 1, tL.legionName, regionNameStr), "", 20, tL.getLegionIndex(), sL.getLegionIndex(), fd, srRegion,false);//String title,String content,String effect,int type,int li,int li2,int value,int value2
            }
        }
    }

    public class PromptData {
        private String title;
        private String content;
        private String effect;

        /**
         * @param  type {@link #executeDiplomacySelected}
         */
        private int type;//
        private int li;
        private int li2;
        private int value;
        private int value2;

        public PromptData(){}
        public PromptData(String title,String content,String effect,int type,int li,int li2,int value,int value2){
            this.title=title;
            this.content=content;
            this.effect=effect;
            this.type=type;
            this.li=li;
            this.li2=li2;
            this.value=value;
            this.value2=value2;
        }
        public PromptData(String title,String content,String effect,int li,int li2){
            this.title=title;
            this.content=content;
            this.effect=effect;
            this.li=li;
            this.li2=li2;
        }


        public String getTitle() {
            return title;
        }

        public void setTitle(String title) {
            this.title = title;
        }

        public String getContent() {
            return content;
        }

        public void setContent(String content) {
            this.content = content;
        }

        public String getEffect() {
            return effect;
        }

        public void setEffect(String effect) {
            this.effect = effect;
        }

        public int getType() {
            return type;
        }

        public void setType(int type) {
            this.type = type;
        }

        public int getLi() {
            return li;
        }

        public String toString(){
            return "title:"+title+
                    " content:"+content+
                    " effect:"+effect+
                    " type:"+type+
                    " li:"+li+
                    " li2:"+li2+
                    " value:"+value+
                    " value2:"+value2;
        }

        public void setLi(int li) {
            this.li = li;
        }

        public int getLi2() {
            return li2;
        }

        public void setLi2(int li2) {
            this.li2 = li2;
        }

        public int getValue() {
            return value;
        }

        public void setValue(int value) {
            this.value = value;
        }

        public int getValue2() {
            return value2;
        }

        public void setValue2(int value2) {
            this.value2 = value2;
        }
    }






    //保存的时候 如果是-1,则ff到长度
    //加载的时候如果是ff的满长度,则处理为-1
    public Fb2Smap(MainGame game, byte[] bt, int stageId) {
        this.game = game;
        this.stageId = stageId;
        roundState=1;
        initFb2Smap();
        int line = 0;
        StringBuilder buf = new StringBuilder();
        for (byte d : bt) {
            if (line % 1 == 0) {
                buf.append(String.format("%02x", d));
                line++;
            }
        }
        int sum = 0;
        int h = 0;
        int w = 0;
        int tag = 0;
        int c = 0;
        this.masterData.playerRebirth= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.gameStatu= GameUtil.getCoverStr(buf,tag,2); tag+=2;
        this.masterData.btlType = GameUtil.getCoverStr(buf,tag,2); tag+=2;
        this.masterData.mapLandBase= GameUtil.getCoverStr(buf,tag,2); tag+=2;
        this.masterData.mapSeaBase= GameUtil.getCoverStr(buf,tag,2); tag+=2;
        this.masterData.ifColor= GameUtil.getCoverStr(buf,tag,2); tag+=2;
        this.masterData.ifFog= GameUtil.getCoverStr(buf,tag,2); tag+=2;
        this.masterData.ifChief = GameUtil.getCoverStr(buf,tag,2); tag+=2;
        this.masterData.ifWeather = GameUtil.getCoverStr(buf,tag,2); tag+=2;
        this.masterData.mapId= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.startX= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.startY= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.width= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        w=masterData.width;
        this.masterData.height= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        h=masterData.height;
        this.masterData.bf19 = GameUtil.getCoverStr(buf,tag,2); tag+=2;
        this.masterData.bf20 = GameUtil.getCoverStr(buf,tag,2); tag+=2;
        this.masterData.roundMax= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.roundNow= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.roundForYear= GameUtil.getCoverStr(buf,tag,2); tag+=2;
        this.masterData.beginYear= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.victoryType= GameUtil.getCoverStr(buf,tag,2); tag+=2;
        this.masterData.incomeRate= GameUtil.getCoverStr(buf,tag,2); tag+=2;
        this.masterData.airAddRange= GameUtil.getCoverStr(buf,tag,2); tag+=2;
        this.masterData.unitAddMove = GameUtil.getCoverStr(buf,tag,2); tag+=2;
        this.masterData.ifHaveAutoBuild = GameUtil.getCoverStr(buf,tag,2); tag+=2;
        this.masterData.historyId= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.gameEpisode = GameUtil.getCoverStr(buf,tag,2); tag+=2;
        this.masterData.bf16 = GameUtil.getCoverStr(buf,tag,2); tag+=2;
        this.masterData.bf17 = GameUtil.getCoverStr(buf,tag,2); tag+=2;
        this.masterData.gameDifficulty = GameUtil.getCoverStr(buf,tag,2); tag+=2;
        this.masterData.bf18 = GameUtil.getCoverStr(buf,tag,2); tag+=2;
        this.masterData.legionsCount= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.strategysCount= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.generalsCount= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.buildsCount= GameUtil.getCoverStr(buf,tag,8); tag+=8;
        this.masterData.facilitysCount= GameUtil.getCoverStr(buf,tag,8); tag+=8;
        this.masterData.nuclearsCount= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.airforcesCount= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.armysCount= GameUtil.getCoverStr(buf,tag,8); tag+=8;
        this.masterData.trapsCount= GameUtil.getCoverStr(buf,tag,8); tag+=8;
        this.masterData.diplomacysCount= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.internsCount= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.tradesCount= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.tasksCount = GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.delaysCount= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.hexagonsCount = GameUtil.getCoverStr(buf,tag,8); tag+=8;
        this.masterData.eventsCount= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.remarkCount2 = GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.remarkCount3= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.remarkCount4= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.victoryTarget = GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.gameEndYear= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.nextStageId= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.warId = GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.playerMode= GameUtil.getCoverStr(buf,tag,2); tag+=2;
        this.masterData.playerLegionIndex= GameUtil.getCoverStr(buf,tag,4); tag+=4;
        this.masterData.ifCheat = GameUtil.getCoverStr(buf, tag, 2);tag += 2;
        this.masterData.lastReportType = GameUtil.getCoverStr(buf, tag, 2);tag += 2;
        this.masterData.lastReportValue = GameUtil.getCoverStr(buf, tag, 2);tag += 2;
        this.masterData.gameEliteLv = GameUtil.getCoverStr(buf, tag, 2);tag += 2;
        this.masterData.portLimitBorderSea = GameUtil.getCoverStr(buf, tag, 2);tag += 2;
        this.masterData.bf6 = GameUtil.getCoverStr(buf, tag, 2);tag += 2;
        this.masterData.bf7 = GameUtil.getCoverStr(buf, tag, 2);tag += 2;
        this.masterData.bf8 = GameUtil.getCoverStr(buf, tag, 2);tag += 2;
        this.masterData.bf9 = GameUtil.getCoverStr(buf, tag, 2);tag += 2;
        this.masterData.bf10 = GameUtil.getCoverStr(buf, tag, 2);tag += 2;
        this.masterData.bf11 = GameUtil.getCoverStr(buf, tag, 2);tag += 2;
        this.masterData.bf12 = GameUtil.getCoverStr(buf, tag, 2);tag += 2;
        this.masterData.bf13 = GameUtil.getCoverStr(buf, tag, 2);tag += 2;
        this.masterData.playerResearchingCardId = GameUtil.getCoverStr(buf, tag, 4);tag += 4;
        this.masterData.preLoadhexagonsCount = GameUtil.getCoverStr(buf, tag, 8);tag += 8;






        sum=w*h;
        {
            WorldData worldData=new WorldData();
            worldData.setWorldAge(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            worldData.setWorldState(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            worldData.setWorldRound(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            worldData.setWorldTension(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            worldData.setWorldMoney(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            worldData.setWorldIndustry(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            worldData.setWorldFood(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            worldData.setWorldMineral(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            worldData.setWorldTech(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            worldData.setWorldOil(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            this.worldData=worldData;
        }
        c=masterData.legionsCount;for(int i=0;i<c;i++){
            LegionData legionData=new LegionData();
            legionData.setLegionIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setInternIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setSuzerainLi(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setCountryIdValue(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setTargetAreaZone(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setMoney(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setIndustry(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setFood(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setMineral(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setOil(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            //     Gdx.app.log("legionres",legionData.getLegionIndex()+":"+legionData.getOil());
            legionData.setTradeCount(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setTech(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setLevel(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setPower(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setLifeBonus(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setTaxBonus(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setRGeneralId(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setCapitalIdValue(GameUtil.getCoverStr(buf,tag,8)); tag+=8;
            legionData.setCityLvMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setIndustLvMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setTechLvMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setEnergyLvMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setTransportLvMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setInfantryLvMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setCannonLvMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setTankLvMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setFortLvMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setNavyLvMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setAirLvMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setSupplyLvMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setDefenceLvMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setMissileLvMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setNuclearLvMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setFinancialLvMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setTradeLvMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setCultureLvMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setMiracleNow(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setMilitaryAcademyLv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setInfantryCardMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setArmorCardMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setArtilleryCardMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setNavyCardMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setAirCardMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setNuclearCardMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setMissileCardMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setSubmarineCardMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setDefenceCardMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setGeneralCardMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setLegionRound(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setCivilSpec(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setRed(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setGreen(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setBlue(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setAlpha(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setLegionFeature1(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setLegionFeatureLv1(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setLegionFeature2(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setLegionFeatureLv2(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setLegionFeature3(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setLegionFeatureLv3(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setLegionFeature4(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setLegionFeatureLv4(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setLegionFeature5(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setLegionFeatureLv5(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setLegionBuff1(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setLegionBuff1Round(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setLegionBuff2(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setLegionBuff2Round(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            legionData.setLegionBuff3(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setLegionBuff3Round(GameUtil.getCoverStr(buf,tag,2)); tag+=2;


            legionData.setExtraMoney(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setExtraIndustry(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setExtraTech(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setExtraFood(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setExtraMineral(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setExtraOil(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            legionData.setExtraPopulation(GameUtil.getCoverStr(buf,tag,4)); tag+=4;



            this.legionDatas.add(legionData);
        }
        c=masterData.strategysCount;for(int i=0;i<c;i++){
            StrategicData strategicData=new StrategicData();
            strategicData.setLegionIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            strategicData.setNationLv(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            strategicData.setNationState(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setLeaderId(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            strategicData.setMilitary(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            strategicData.setInfluence(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setReputation(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setTension(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setDiscontent(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setLoss(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setKia(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            strategicData.setCorruption(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setPowerful(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setPolariz(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setDemocracy(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setPerceive(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setCurrency(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setTrust(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setPurges(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setPolitSpec(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setForeignTendency(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setFertilityNp(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setCultureNp(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setDevelopNp(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setWarNp(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setNationNp(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setOrganizNp(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setForeignNp(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setColonialNp(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setCohesion(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setParty(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            strategicData.setLandId(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            strategicData.setTargetRegion1(GameUtil.getCoverStr(buf,tag,8)); tag+=8;
            strategicData.setTargetRegion2(GameUtil.getCoverStr(buf,tag,8)); tag+=8;
            strategicData.setTargetRegion3(GameUtil.getCoverStr(buf,tag,8)); tag+=8;
            strategicData.setTargetRegion4(GameUtil.getCoverStr(buf,tag,8)); tag+=8;
            strategicData.setTargetRegion5(GameUtil.getCoverStr(buf,tag,8)); tag+=8;
            strategicData.setTargetTrade1(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            strategicData.setTargetTrade2(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            strategicData.setTargetTrade3(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            strategicData.setTargetTrade4(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            strategicData.setTargetTrade5(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            strategicData.setStrategyBuff1(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            strategicData.setStrategyBuff2(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            strategicData.setStrategyBuff3(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            this.strategicDatas.add(strategicData);
        }
        c=masterData.generalsCount;for(int i=0;i<c;i++){
            GeneralData generalData=new GeneralData();
            generalData.setGeneralIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            generalData.setPolitical(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            generalData.setGeneralId(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            generalData.setRank(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            generalData.setLegionIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            generalData.setAbility(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            generalData.setType(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            generalData.setState(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            generalData.setRestLife(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            this.generalIDatas.put(generalData.getGeneralIndex(),generalData);
        }
        c=masterData.buildsCount;for(int i=0;i<c;i++){
            BuildData buildData=new BuildData();
            buildData.setBuildIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            buildData.setRegionId(GameUtil.getCoverStr(buf,tag,8)); tag+=8;
            buildData.setBuildType(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setMineralLv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setBuildLegionIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            buildData.setBuildName(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            buildData.setBuildWonder(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            buildData.setBuildStatus(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setAirforcePolicy(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setCityHpMax(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            buildData.setCityHpNow(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            buildData.setCityStability(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setOilLv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setDevelopLv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setCityTax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setCityLvNowValue(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setIndustryLvNow(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setFoodLvNow(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setTechLvNow(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setEnergyLvNow(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setTransportLvNow(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setArmyLvNow(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setAirLvNow(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setSupplyLvNow(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setDefenceLvNow(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setMissileLvNow(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setNuclearLvNow(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setCultureLvNow(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setTradeLvNow(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setAreaZone(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setWeatherId(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setBuildRound(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setHinge(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setClimateZone(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            buildData.setStrategicRegion(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            buildData.setInfluenceLi(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            buildData.setBuildBuff2(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            buildData.setBuildBuff3(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            buildData.setEventIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            buildData.setBuildPolicy(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            buildData.setAirIndex1(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            buildData.setAirIndex2(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            buildData.setAirIndex3(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            buildData.setAirIndex4(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            buildData.setNulIndex1(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            buildData.setNulIndex2(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            buildData.setNulIndex3(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            buildData.setNulIndex4(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            this.buildRDatas.put(buildData.getRegionId(),buildData);
        }
        c=masterData.facilitysCount;for(int i=0;i<c;i++){
            FacilityData facilityData=new FacilityData();
            facilityData.setFacilityIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            facilityData.setHexagonIndex(GameUtil.getCoverStr(buf,tag,8)); tag+=8;
            facilityData.setBuildIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            facilityData.setFacilityId(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            facilityData.setFacilityLv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            facilityData.setFacilityTarget(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            facilityData.setFacilityRound(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            facilityData.setFacilityStatus(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            facilityData.setFacilityBuff1(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            facilityData.setFacilityBuff2(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            facilityData.setFacilityBuff3(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            facilityData.setGameValue(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            this.facilityHDatas.put(facilityData.getHexagonIndex(),facilityData);
        }
        c=masterData.nuclearsCount;for(int i=0;i<c;i++){
            NulcleData nulcleData=new NulcleData();
            nulcleData.setNucleIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            nulcleData.setRegionId(GameUtil.getCoverStr(buf,tag,8)); tag+=8;
            nulcleData.setNuclearId(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            nulcleData.setNucleRound(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            nulcleData.setGameValue(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            nulcleData.setLegionIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            this.nulcleIDatas.put(nulcleData.getNucleIndex(),nulcleData);
        }
        c=masterData.airforcesCount;for(int i=0;i<c;i++){
            AirData airData=new AirData();
            airData.setAirIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            airData.setRegionId(GameUtil.getCoverStr(buf,tag,8)); tag+=8;

            airData.setArmyHexagon(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            airData.setLegionIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            airData.setAirId(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            airData.setAirType(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setEngLv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setAirKills(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            airData.setAirHpMax(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            airData.setAirHpNow(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            airData.setAckLv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setDefLv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setSpyLv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setSupLv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setActLv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setWeaLv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setSkillId1(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            airData.setSkillId2(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            airData.setSkillId3(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            airData.setSkillId4(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            airData.setGeneralIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            airData.setAirRank(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setAirMoraleValue(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setSkillLv1(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setSkillLv2(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setSkillLv3(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setSkillLv4(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setAirRound(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setAirAi(GameUtil.getCoverStr(buf,tag,2)); tag+=2;



            airData.setTargetRegion(GameUtil.getCoverStr(buf,tag,8)); tag+=8;
            airData.setNucleIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            airData.setAirGoodsMax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setAirGoodsNow(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setIfMove(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setIfAttack(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setAirBuff1(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            airData.setAirBuff2(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            airData.setAirBuff3(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            airData.setGameValue(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setAirEquip1(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            airData.setAirEquip2(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            airData.setAirEquip3(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            airData.setAirEquip4(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            airData.setAirSpecialType(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            airData.setAirEquip1Lv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setAirEquip2Lv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setAirEquip3Lv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setAirEquip4Lv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            airData.setAirSpecialTypeLv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            this.airIDatas.put(airData.getAirIndex(),airData);
        }
        c=masterData.armysCount;for(int i=0;i<c;i++){
            ArmyData armyData=new ArmyData();
            armyData.setArmyIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setRegionId(GameUtil.getCoverStr(buf,tag,8)); tag+=8;
            armyData.setLegionIndexValue(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setUnitArmyId0(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setArmyType(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setUnitGroup0Lv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setArmyKills(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setUnitArmyId1(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setUnitWealv1(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setArmyHpMax(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setArmyHpNow(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setUnitGroup1Lv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setUnitGroup2Lv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setUnitGroup3Lv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setUnitGroup4Lv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setUnitGroup5Lv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setUnitGroup6Lv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setSkillId1(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setSkillId2(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setSkillId3(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setSkillId4(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setGeneralIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setArmyRank(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setArmyMoraleValue(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setArmyFormation(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setHinge(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setArmyDirectionValue(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setAirforcePolicy(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setArmyRound(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setUnitWealv0(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setTransportType(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setArmyAi(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setNucleIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setTargetRegion(GameUtil.getCoverStr(buf,tag,8)); tag+=8;
            armyData.setStandyRound(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setSkillLv1(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setSkillLv2(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setSkillLv3(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setSkillLv4(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setIfMove(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setIfAttack(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setArmyBuff1(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setArmyBuff2(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setArmyBuff3(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setEventIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setGameValue(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setHexagonIndexValue(GameUtil.getCoverStr(buf,tag,8)); tag+=8;
            armyData.setUnitArmyId2(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setUnitArmyId3(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setUnitArmyId4(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setUnitArmyId5(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setUnitArmyId6(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            armyData.setUnitWealv2(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setUnitWealv3(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setUnitWealv4(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setUnitWealv5(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            armyData.setUnitWealv6(GameUtil.getCoverStr(buf,tag,2)); tag+=2;


            this.armyHDatas.put(armyData.getHexagonIndex(),armyData);
        }
        c=masterData.trapsCount;for(int i=0;i<c;i++){
            FortData fortData =new FortData();
            fortData.setFortLv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            fortData.setHexagonIndex(GameUtil.getCoverStr(buf,tag,8)); tag+=8;
            fortData.setLegionIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            fortData.setFortId(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            fortData.setFortRound(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            this.fortHDatas.put(fortData.getHexagonIndex(), fortData);
        }
        c=masterData.diplomacysCount;for(int i=0;i<c;i++){
            ForeignData foreignData=new ForeignData();
            foreignData.setSourceLegionIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            foreignData.setTargetLegionIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            foreignData.setFavorValue(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            foreignData.setForeignValue(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            foreignData.setForeignType(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            foreignData.setDiplomaticAttitude(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            this.foreignDatas.add(foreignData);
        }
        // Gdx.app.log("diplomacysCount",masterData.diplomacysCount+"");
        c=masterData.internsCount;for(int i=0;i<c;i++){
            InternData internData=new InternData();
            internData.setInternIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            internData.setLegionIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            internData.setCampPhase(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            internData.setInfluence(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            internData.setTension(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            this.internIDatas.put(internData.getInternIndex(),internData);
        }
        c=masterData.tradesCount;for(int i=0;i<c;i++){
            TradeData tradeData=new TradeData();
            tradeData.setTradeIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            tradeData.setLegionIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            tradeData.setGoodsType(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            tradeData.setGoodsValue(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            tradeData.setPriceType(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            tradeData.setPriceValue(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            tradeData.setTradeChance(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            this.tradeDatas.add(tradeData);
        }
        c=masterData.tasksCount;for(int i = 0; i<c; i++){
            TaskData taskData =new TaskData();
            taskData.setTaskIndex(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            taskData.setTaskLv(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            taskData.setCountNowValue(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            taskData.setCountMax(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            taskData.setStar(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            taskData.setTaskType(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            taskData.setBontyType(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            taskData.setBontyValue(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            taskData.setTaskRound(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            this.taskDatas.add(taskData);
        }
        c=masterData.delaysCount;for(int i=0;i<c;i++){
            RoundData roundData=new RoundData();
            roundData.setType(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            roundData.setSourceLi(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            roundData.setTargetLi(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            roundData.setValue1(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            roundData.setValue2(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            roundData.setRound(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            roundData.setType1(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            roundData.setType2(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            roundData.setHexagon(GameUtil.getCoverStr(buf,tag,8)); tag+=8;
            roundData.setTriggerType(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            this.roundDatas.add(roundData);
        }
        c=masterData.hexagonsCount;
        boolean ifLoadMap=true;
        if(game.defaultMapBinDAO==null){
            mapbin=new Fb2Map();
        }else{
            mapbin=game.defaultMapBinDAO;
            mapbin.btl=this;
        }




        if(game.resGameConfig.defaultMapBinId==masterData.mapId&&masterData.hexagonsCount==0&&masterData.preLoadhexagonsCount !=0){
           /* for(int y=masterData.getStartY();y<masterData.getHeight();y++){//预加载地图
                for(int x=masterData.getStartX();x<masterData.getWidth();x++){
                    int id=y*w+x;
                    MapBinDAO.MapHexagon m=game.defaultMapBinDAO.mapHexagons.get(id);
                    if(m!=null){
                        MapBinDAO.MapHexagon hexagonData=new  MapBinDAO.MapHexagon();
                        hexagonData.setBlockType(m.getBlockType());
                        hexagonData.setBackTile(m.getBackTile());
                        hexagonData.setBackIdx(m.getBackIdx());
                        hexagonData.setBackRefX(m.getBackRefX());
                        hexagonData.setBackRefY(m.getBackRefY());
                        hexagonData.setForeTile(m.getForeTile());
                        hexagonData.setForeIdx(m.getForeIdx());
                        hexagonData.setForeRefX(m.getForeRefX());
                        hexagonData.setForeRefY(m.getForeRefY());
                        hexagonData.setTilePass(m.getTilePass());
                        hexagonData.setIfCoast(m.getIfCoast());
                        hexagonData.setRegionId(m.getRegionId());
                        this.hexagonDatas.add(hexagonData);
                    }
                }
            }*/
            this.hexagonDatas=game.defaultMapBinDAO.mapHexagons;
            ifLoadMap=false;
        }else{

            for(int i = 0; i<c; i++){
                Fb2Map.MapHexagon hexagonData=mapbin.getNewMapHexagon();
                hexagonData.setBlockType(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
                hexagonData.setBackTile(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
                hexagonData.setBackIdx(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
                hexagonData.setBackRefX(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
                hexagonData.setBackRefY(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
                hexagonData.setForeTile(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
                hexagonData.setForeIdx(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
                hexagonData.setForeRefX(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
                hexagonData.setForeRefY(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
                hexagonData.setPresetRailway(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
                hexagonData.setIfCoast(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
                hexagonData.setRegionId(GameUtil.getCoverStr(buf,tag,8)); tag+=8;
                hexagonData.setOtherTile(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
                hexagonData.setHexagonIndex(GameUtil.getCoverStr(buf,tag,8)); tag+=8;
                hexagonData.setLegionIndexValue(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
                hexagonData.setIfFog(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
                hexagonData.setIfClimateZone(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
                this.hexagonDatas.add(hexagonData);
            }
        }
        if(scriptIDatas ==null){
            scriptIDatas =new IntArray();
        }else{
            scriptIDatas.clear();
        }
        if(wonderIDatas==null){
            wonderIDatas=new IntArray();
        }else{
            wonderIDatas.clear();
        }
        if(policyIDatas==null){
            policyIDatas=new IntArray();
        }else{
            policyIDatas.clear();
        }
        if(hEventIDatas==null){
            hEventIDatas=new IntArray();
        }else{
            hEventIDatas.clear();
        }


        c=masterData.eventsCount;for(int i=0;i<c;i++){
            //   this.eventIDatas.add(GameUtil.getCoverStr(buf,tag,8));
            int eventIndex=GameUtil.getCoverStr(buf,tag,8); tag+=8;
            int triggerType=GameUtil.getCoverStr(buf,tag,2);tag+=2;


            switch (triggerType){
                case 0:
                    scriptIDatas.add(eventIndex);
                    break;
                case 1:
                    wonderIDatas.add(eventIndex);
                    break;
                case 2:
                    policyIDatas.add(eventIndex);
                    break;
                case 3:
                    addSpiritMap(eventIndex);
                    break;
                case 4:
                    hEventIDatas.add(eventIndex);
                    break;
            }
        }
        if(!ifLoadMap){
            c=masterData.preLoadhexagonsCount;
            for(int i = 0; i<c; i++){
                Fb2Map.MapHexagon hexagonData=hexagonDatas.get(i);
                hexagonData.setRegionId(GameUtil.getCoverStr(buf,tag,8)); tag+=8;
                hexagonData.setOtherTile(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
                hexagonData.setHexagonIndex(GameUtil.getCoverStr(buf,tag,8)); tag+=8;
                hexagonData.setLegionIndexValue(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
                hexagonData.setIfFog(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
                hexagonData.setIfClimateZone(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            }
        }

        if(masterData.ifChief==1){//开启统帅模式
            if(chiefData==null){
                chiefData=new ChiefData();
            }
            chiefData.setPlayerAmbition(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setPlayerHarmony(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setPowerStrategy(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setNationalIdeas(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setPlayerTax(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setMilitaryBudget(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setForeignPolicy(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setForeignBudget(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setTrainingSystem(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setTheDraft(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setBuildLaw(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setIndustrialControl(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setTradeBills(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setForeignInvestment(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setNewsSystem(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setStabilisationPolicy(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setLaborLaw(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setSafetyRegulations(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setEducationPolicy(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setSecuritySpend(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setOfficialSalary(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setOfficialSlavery(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setLiteracy(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setReputation(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setWarSupport(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setLiteracyProgress(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setMassesDemandType(GameUtil.getCoverStr(buf,tag,4)); tag+=4;
            chiefData.setNone7(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setNone8(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setNone9(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setNone10(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setNone11(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setNone12(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
            chiefData.setNone13(GameUtil.getCoverStr(buf,tag,2)); tag+=2;
        }

        //  Gdx.app.log("logbuf", buf.length+"");
        bt=null;buf=null;
        if(game.defaultMapBinDAO==null){
            mapbin.init(this);
        }
        initBtl();
    }


    //ifPreloadSave 是否启用预加载
    public FileHandle  save(String path,boolean ifPreloadSave){
        clearAllDeath();
        FileHandle file=null;

        if(ifPreloadSave&& (masterData.getMapId()!=game.resGameConfig.defaultMapBinId||game.gameConfig.getDEF_MAP().getElementById(masterData.getMapId())==null)){
            ifPreloadSave=false;
        }


        this.masterData.tasksCount = taskDatas.size;
        this.masterData.diplomacysCount=foreignDatas.size;
        if(ifSystemEffective(4)&&this.masterData.diplomacysCount>0&&this.masterData.diplomacysCount!=getForeignCounts()){
            resetForeignDatas(true);
        }


        this.masterData.airforcesCount=airIDatas.size;
        this.masterData.nuclearsCount=nulcleIDatas.size;
        this.masterData.trapsCount= fortHDatas.size;
        this.masterData.delaysCount=roundDatas.size;
        this.masterData.legionsCount=legionDatas.size;
        // this.masterData.remarkCount2 =connectDatas.size;


        this.masterData.tradesCount=tradeDatas.size;
        this.masterData.facilitysCount=facilityHDatas.size;
        this.masterData.internsCount=internIDatas.size;
        this.masterData.buildsCount=buildRDatas.size();
        this.masterData.strategysCount=strategicDatas.size;
        this.masterData.armysCount=getArmyDataCounts();

        if(ifPreloadSave){
            this.masterData.hexagonsCount=0;
            this.masterData.preLoadhexagonsCount =hexagonDatas.size;
        }else{
            this.masterData.hexagonsCount=hexagonDatas.size;
            this.masterData.preLoadhexagonsCount =0;
        }

        if(scriptIDatas !=null){
            this.masterData.eventsCount= scriptIDatas.size;
        }else{
            this.masterData.eventsCount=0;
        }
        if(wonderIDatas!=null){
            this.masterData.eventsCount=masterData.eventsCount+wonderIDatas.size;
        }
        if(policyIDatas!=null){
            this.masterData.eventsCount=masterData.eventsCount+policyIDatas.size;
        }
        if(spiritMap!=null){
            this.masterData.eventsCount=masterData.eventsCount+spiritMap.size;
        }
        if(hEventIDatas!=null){
            this.masterData.eventsCount=masterData.eventsCount+hEventIDatas.size;
        }
        this.masterData.generalsCount=generalIDatas.size;
        if(chiefData==null){
            masterData.ifChief=0;
        }else {
            masterData.ifChief=1;
        }

        try {  FileByte out = new FileByte();
            out.write(masterData.playerRebirth,4);
            out.write(masterData.gameStatu,2);
            out.write(masterData.btlType,2);
            out.write(masterData.mapLandBase,2);
            out.write(masterData.mapSeaBase,2);
            out.write(masterData.ifColor,2);
            out.write(masterData.ifFog,2);
            out.write(masterData.ifChief,2);
            out.write(masterData.ifWeather,2);
            out.write(masterData.mapId,4);
            out.write(masterData.startX,4);
            out.write(masterData.startY,4);
            out.write(masterData.width,4);
            out.write(masterData.height,4);
            out.write(masterData.bf19,2);
            out.write(masterData.bf20,2);
            out.write(masterData.roundMax,4);
            out.write(masterData.roundNow,4);
            out.write(masterData.roundForYear,2);
            out.write(masterData.beginYear,4);
            out.write(masterData.victoryType,2);
            out.write(masterData.incomeRate,2);
            out.write(masterData.airAddRange,2);
            out.write(masterData.unitAddMove,2);
            out.write(masterData.ifHaveAutoBuild,2);
            out.write(masterData.historyId,4);
            out.write(masterData.gameEpisode,2);
            out.write(masterData.bf16,2);
            out.write(masterData.bf17,2);
            out.write(masterData.gameDifficulty,2);
            out.write(masterData.bf18,2);
            out.write(masterData.legionsCount,4);
            out.write(masterData.strategysCount,4);
            out.write(masterData.generalsCount,4);
            out.write(masterData.buildsCount,8);
            out.write(masterData.facilitysCount,8);
            out.write(masterData.nuclearsCount,4);
            out.write(masterData.airforcesCount,4);
            out.write(masterData.armysCount,8);
            out.write(masterData.trapsCount,8);
            out.write(masterData.diplomacysCount,4);
            out.write(masterData.internsCount,4);
            out.write(masterData.tradesCount,4);
            out.write(masterData.tasksCount,4);
            out.write(masterData.delaysCount,4);
            out.write(masterData.hexagonsCount,8);
            out.write(masterData.eventsCount,4);
            out.write(masterData.remarkCount2,4);
            out.write(masterData.remarkCount3,4);
            out.write(masterData.remarkCount4,4);
            out.write(masterData.victoryTarget,4);
            out.write(masterData.gameEndYear,4);
            out.write(masterData.nextStageId,4);
            out.write(masterData.warId,4);
            out.write(masterData.playerMode,2);
            out.write(masterData.playerLegionIndex,4);
            out.write(masterData.ifCheat,2);
            out.write(masterData.lastReportType,2);
            out.write(masterData.lastReportValue,2);
            out.write(masterData.gameEliteLv,2);
            out.write(masterData.portLimitBorderSea,2);
            out.write(masterData.bf6,2);
            out.write(masterData.bf7,2);
            out.write(masterData.bf8,2);
            out.write(masterData.bf9,2);
            out.write(masterData.bf10,2);
            out.write(masterData.bf11,2);
            out.write(masterData.bf12,2);
            out.write(masterData.bf13,2);
            out.write(masterData.playerResearchingCardId,4);
            out.write(masterData.preLoadhexagonsCount,8);



            {
                out.write(worldData.getWorldAge(),2);
                out.write(worldData.getWorldState(),2);
                out.write(worldData.getWorldRound(),2);
                out.write(worldData.getWorldTension(),2);
                out.write(worldData.getWorldMoney(),4);
                out.write(worldData.getWorldIndustry(),4);
                out.write(worldData.getWorldFood(),4);
                out.write(worldData.getWorldMineral(),4);
                out.write(worldData.getWorldTech(),4);
                out.write(worldData.getWorldOil(),4);
            }for(int i=0,iMax=legionDatas.size;i<iMax;i++){
                out.write(legionDatas.get(i).getLegionIndex(),4);
                out.write(legionDatas.get(i).getInternIndex(),4);
                out.write(legionDatas.get(i).getSuzerainLi(),4);
                out.write(legionDatas.get(i).getCountryId(),4);
                out.write(legionDatas.get(i).getTargetAreaZone(),2);
                out.write(legionDatas.get(i).getMoney(),4);
                out.write(legionDatas.get(i).getIndustry(),4);
                out.write(legionDatas.get(i).getFood(),4);
                out.write(legionDatas.get(i).getMineral(),4);
                out.write(legionDatas.get(i).getOil(),4);
                out.write(legionDatas.get(i).getTradeCount(),2);
                out.write(legionDatas.get(i).getTech(),4);
                out.write(legionDatas.get(i).getLevel(),2);
                out.write(legionDatas.get(i).getPower(),2);
                out.write(legionDatas.get(i).getLifeBonus(),4);
                out.write(legionDatas.get(i).getTaxBonus(),4);
                out.write(legionDatas.get(i).getRGeneralId(),2);
                out.write(legionDatas.get(i).getCapitalId(),8);
                out.write(legionDatas.get(i).getCityLvMax(),2);
                out.write(legionDatas.get(i).getIndustLvMax(),2);
                out.write(legionDatas.get(i).getTechLvMax(),2);
                out.write(legionDatas.get(i).getEnergyLvMax(),2);
                out.write(legionDatas.get(i).getTransportLvMax(),2);
                out.write(legionDatas.get(i).getInfantryLvMax(),2);
                out.write(legionDatas.get(i).getCannonLvMax(),2);
                out.write(legionDatas.get(i).getTankLvMax(),2);
                out.write(legionDatas.get(i).getFortLvMax(),2);
                out.write(legionDatas.get(i).getNavyLvMax(),2);
                out.write(legionDatas.get(i).getAirLvMax(),2);
                out.write(legionDatas.get(i).getSupplyLvMax(),2);
                out.write(legionDatas.get(i).getDefenceLvMax(),2);
                out.write(legionDatas.get(i).getMissileLvMax(),2);
                out.write(legionDatas.get(i).getNuclearLvMax(),2);
                out.write(legionDatas.get(i).getFinancialLvMax(),2);
                out.write(legionDatas.get(i).getTradeLvMax(),2);
                out.write(legionDatas.get(i).getCultureLvMax(),2);
                out.write(legionDatas.get(i).getMiracleNow(),2);
                out.write(legionDatas.get(i).getMilitaryAcademyLv(),2);
                out.write(legionDatas.get(i).getInfantryCardMax(),2);
                out.write(legionDatas.get(i).getArmorCardMax(),2);
                out.write(legionDatas.get(i).getArtilleryCardMax(),2);
                out.write(legionDatas.get(i).getNavyCardMax(),2);
                out.write(legionDatas.get(i).getAirCardMax(),2);
                out.write(legionDatas.get(i).getNuclearCardMax(),2);
                out.write(legionDatas.get(i).getMissileCardMax(),2);
                out.write(legionDatas.get(i).getSubmarineCardMax(),2);
                out.write(legionDatas.get(i).getDefenceCardMax(),2);
                out.write(legionDatas.get(i).getGeneralCardMax(),2);
                out.write(legionDatas.get(i).getLegionRound(),2);
                out.write(legionDatas.get(i).getCivilSpec(),2);
                out.write(legionDatas.get(i).getRed(),2);
                out.write(legionDatas.get(i).getGreen(),2);
                out.write(legionDatas.get(i).getBlue(),2);
                out.write(legionDatas.get(i).getAlpha(),2);
                out.write(legionDatas.get(i).getLegionFeature1(),4);
                out.write(legionDatas.get(i).getLegionFeatureLv1(),2);
                out.write(legionDatas.get(i).getLegionFeature2(),4);
                out.write(legionDatas.get(i).getLegionFeatureLv2(),2);
                out.write(legionDatas.get(i).getLegionFeature3(),4);
                out.write(legionDatas.get(i).getLegionFeatureLv3(),2);
                out.write(legionDatas.get(i).getLegionFeature4(),4);
                out.write(legionDatas.get(i).getLegionFeatureLv4(),2);
                out.write(legionDatas.get(i).getLegionFeature5(),4);
                out.write(legionDatas.get(i).getLegionFeatureLv5(),2);
                out.write(legionDatas.get(i).getLegionBuff1(),4);
                out.write(legionDatas.get(i).getLegionBuff1Round(),2);
                out.write(legionDatas.get(i).getLegionBuff2(),4);
                out.write(legionDatas.get(i).getLegionBuff2Round(),2);
                out.write(legionDatas.get(i).getLegionBuff3(),4);
                out.write(legionDatas.get(i).getLegionBuff3Round(),2);

                out.write(legionDatas.get(i).getExtraMoney(),4);
                out.write(legionDatas.get(i).getExtraIndustry(),4);
                out.write(legionDatas.get(i).getExtraTech(),4);
                out.write(legionDatas.get(i).getExtraFood(),4);
                out.write(legionDatas.get(i).getExtraMineral(),4);
                out.write(legionDatas.get(i).getExtraOil(),4);
                out.write(legionDatas.get(i).getExtraPopulation(),4);
            }for(int i=0,iMax=strategicDatas.size;i<iMax;i++){
                out.write(strategicDatas.get(i).getLegionIndex(),4);
                out.write(strategicDatas.get(i).getNationLv(),4);
                out.write(strategicDatas.get(i).getNationState(),2);
                out.write(strategicDatas.get(i).getLeaderId(),4);
                out.write(strategicDatas.get(i).getMilitary(),4);
                out.write(strategicDatas.get(i).getInfluence(),2);
                out.write(strategicDatas.get(i).getReputation(),2);
                out.write(strategicDatas.get(i).getTension(),2);
                out.write(strategicDatas.get(i).getDiscontent(),2);
                out.write(strategicDatas.get(i).getLoss(),2);
                out.write(strategicDatas.get(i).getKia(),4);
                out.write(strategicDatas.get(i).getCorruption(),2);
                out.write(strategicDatas.get(i).getPowerful(),2);
                out.write(strategicDatas.get(i).getPolariz(),2);
                out.write(strategicDatas.get(i).getDemocracy(),2);
                out.write(strategicDatas.get(i).getPerceive(),2);
                out.write(strategicDatas.get(i).getCurrency(),2);
                out.write(strategicDatas.get(i).getTrust(),2);
                out.write(strategicDatas.get(i).getPurges(),2);
                out.write(strategicDatas.get(i).getPolitSpec(),2);
                out.write(strategicDatas.get(i).getForeignTendency(),2);
                out.write(strategicDatas.get(i).getFertilityNp(),2);
                out.write(strategicDatas.get(i).getCultureNp(),2);
                out.write(strategicDatas.get(i).getDevelopNp(),2);
                out.write(strategicDatas.get(i).getWarNp(),2);
                out.write(strategicDatas.get(i).getNationNp(),2);
                out.write(strategicDatas.get(i).getOrganizNp(),2);
                out.write(strategicDatas.get(i).getForeignNp(),2);
                out.write(strategicDatas.get(i).getColonialNp(),2);
                out.write(strategicDatas.get(i).getCohesion(),2);
                out.write(strategicDatas.get(i).getParty(),2);
                out.write(strategicDatas.get(i).getLandId(),4);
                out.write(strategicDatas.get(i).getTargetRegion1(),8);
                out.write(strategicDatas.get(i).getTargetRegion2(),8);
                out.write(strategicDatas.get(i).getTargetRegion3(),8);
                out.write(strategicDatas.get(i).getTargetRegion4(),8);
                out.write(strategicDatas.get(i).getTargetRegion5(),8);
                out.write(strategicDatas.get(i).getTargetTrade1(),4);
                out.write(strategicDatas.get(i).getTargetTrade2(),4);
                out.write(strategicDatas.get(i).getTargetTrade3(),4);
                out.write(strategicDatas.get(i).getTargetTrade4(),4);
                out.write(strategicDatas.get(i).getTargetTrade5(),4);
                out.write(strategicDatas.get(i).getStrategyBuff1(),4);
                out.write(strategicDatas.get(i).getStrategyBuff2(),4);
                out.write(strategicDatas.get(i).getStrategyBuff3(),4);
            }

            Iterator<IntMap.Entry<GeneralData>> itG = generalIDatas.iterator();
            int s=0;
            while (itG.hasNext()) {
                GeneralData c = itG.next().value;
                out.write(c.getGeneralIndex(),4);
                out.write(c.getPolitical(),4);
                out.write(c.getGeneralId(),4);
                out.write(c.getRank(),2);
                out.write(c.getLegionIndex(),4);
                out.write(c.getAbilityValue(),4);
                out.write(c.getType(),2);
                out.write(c.getState(),2);
                out.write(c.getRestLife(),2);
                s++;
            }
            if (s!=  this.masterData.generalsCount) {
                Gdx.app.log("err size","generalIDatas");
              GameUtil.recordLog("save generalIDatas err size ");
            }
            s=0;
            //  for(BuildData c:buildRDatas.values()){
            for(int bi=0;bi<buildRDatas.size();bi++) {
                BuildData c=buildRDatas.getByIndex(bi);
                out.write(c.getBuildIndex(),4);
                out.write(c.getRegionId(),8);
                out.write(c.getBuildType(),2);
                out.write(c.getMineralLv(),2);
                out.write(c.getLegionIndex(),4);
                out.write(c.getBuildName(),4);
                out.write(c.getBuildWonder(),4);
                out.write(c.getBuildStatus(),2);
                out.write(c.getAirforcePolicy(),2);
                out.write(c.getCityHpMax(),4);
                out.write(c.getCityHpNow(),4);
                out.write(c.getCityStability(),2);
                out.write(c.getOilLv(),2);
                out.write(c.getDevelopLv(),2);
                out.write(c.getCityTax(),2);
                out.write(c.getCityLvNow(),2);
                out.write(c.getIndustryLvNow(),2);
                out.write(c.getFoodLvNow(),2);
                out.write(c.getTechLvNow(),2);
                out.write(c.getEnergyLvNow(),2);
                out.write(c.getTransportLvNow(),2);
                out.write(c.getArmyLvNow(),2);
                out.write(c.getAirLvNow(),2);
                out.write(c.getSupplyLvNow(),2);
                out.write(c.getDefenceLvNow(),2);
                out.write(c.getMissileLvNow(),2);
                out.write(c.getNuclearLvNow(),2);
                out.write(c.getCultureLvNow(),2);
                out.write(c.getTradeLvNow(),2);
                out.write(c.getAreaZone(),2);
                out.write(c.getWeatherId(),2);
                out.write(c.getBuildRound(),2);
                out.write(c.getHinge(),2);
                out.write(c.getClimateZone(),4);
                out.write(c.getStrategicRegion(),4);
                out.write(c.getInfluenceLi(),4);
                out.write(c.getBuildBuff2(),4);
                out.write(c.getBuildBuff3(),4);
                out.write(c.getEventIndex(),4);
                out.write(c.getBuildPolicy(),2);
                out.write(c.getAirIndex1(),4);
                out.write(c.getAirIndex2(),4);
                out.write(c.getAirIndex3(),4);
                out.write(c.getAirIndex4(),4);
                out.write(c.getNulIndex1(),4);
                out.write(c.getNulIndex2(),4);
                out.write(c.getNulIndex3(),4);
                out.write(c.getNulIndex4(),4);
                s++;
            }
            if (s!=  this.masterData.buildsCount) {
                Gdx.app.log("err size","buildRDatas");
                GameUtil.recordLog("save buildRDatas err size ");
            }
            s=0;
            Iterator<IntMap.Entry<FacilityData>> itF = facilityHDatas.iterator();
            while (itF.hasNext()) {
                FacilityData c = itF.next().value;
                out.write(c.getFacilityIndex(),4);
                out.write(c.getHexagonIndex(),8);
                out.write(c.getBuildIndex(),4);
                out.write(c.getFacilityId(),2);
                out.write(c.getFacilityLv(),2);
                out.write(c.getFacilityTarget(),4);
                out.write(c.getFacilityRound(),2);
                out.write(c.getFacilityStatus(),2);
                out.write(c.getFacilityBuff1(),4);
                out.write(c.getFacilityBuff2(),4);
                out.write(c.getFacilityBuff3(),4);
                out.write(c.getGameValue(),2);
                s++;
            }
            if (s!=facilityHDatas.size) {
                Gdx.app.log("err size","facilityHDatas");
                GameUtil.recordLog("save facilityHDatas err size ");
            }
            s=0;
            Iterator<IntMap.Entry<NulcleData>> itN = nulcleIDatas.iterator();
            while (itN.hasNext()) {
                NulcleData c = itN.next().value;
                out.write(c.getNucleIndex(),4);
                out.write(c.getRegionId(),8);
                out.write(c.getNuclearId(),4);
                out.write(c.getNucleRound(),2);
                out.write(c.getGameValue(),2);
                out.write(c.getLegionIndex(),4);
                s++;
            }
            if (s!=  this.masterData.nuclearsCount) {
                Gdx.app.log("err size","nulcleIDatas");
                GameUtil.recordLog("save nulcleIDatas err size ");
            }
            s=0;


            Iterator<IntMap.Entry<AirData>> itAir = airIDatas.iterator();
            while (itAir.hasNext()) {
                AirData c = itAir.next().value;
                out.write(c.getAirIndex(),4);
                out.write(c.getRegionId(),8);
                out.write(c.getArmyHexagon(),4);
                out.write(c.getLegionIndex(),4);
                out.write(c.getAirId(),4);
                out.write(c.getAirType(),2);
                out.write(c.getEngLv(),2);
                out.write(c.getAirKills(),4);
                out.write(c.getAirHpMax(),4);
                out.write(c.getAirHpNow(),4);
                out.write(c.getAckLv(),2);
                out.write(c.getDefLv(),2);
                out.write(c.getSpyLv(),2);
                out.write(c.getSupLv(),2);
                out.write(c.getActLv(),2);
                out.write(c.getWeaLv(),2);
                out.write(c.getSkillId1(),4);
                out.write(c.getSkillId2(),4);
                out.write(c.getSkillId3(),4);
                out.write(c.getSkillId4(),4);
                out.write(c.getGeneralIndex(),4);
                out.write(c.getAirRank(),2);
                out.write(c.getAirMorale(),2);
                out.write(c.getSkillLv1(),2);
                out.write(c.getSkillLv2(),2);
                out.write(c.getSkillLv3(),2);
                out.write(c.getSkillLv4(),2);
                out.write(c.getAirRound(),2);
                out.write(c.getAirAi(),2);
                out.write(c.getTargetRegion(),8);
                out.write(c.getNucleIndex(),4);
                out.write(c.getAirGoodsMax(),2);
                out.write(c.getAirGoodsNow(),2);
                out.write(c.getIfMove(),2);
                out.write(c.getIfAttack(),2);
                out.write(c.getAirBuff1(),4);
                out.write(c.getAirBuff2(),4);
                out.write(c.getAirBuff3(),4);
                out.write(c.getGameValue(),2);
                out.write(c.getAirEquip1(),4);
                out.write(c.getAirEquip2(),4);
                out.write(c.getAirEquip3(),4);
                out.write(c.getAirEquip4(),4);
                out.write(c.getAirSpecialType(),4);
                out.write(c.getAirEquip1Lv(),2);
                out.write(c.getAirEquip2Lv(),2);
                out.write(c.getAirEquip3Lv(),2);
                out.write(c.getAirEquip4Lv(),2);
                out.write(c.getAirSpecialTypeLv(),2);
                s++;
            }
            if (s!=  this.masterData.airforcesCount) {
                Gdx.app.log("err size","airIDatas");
                GameUtil.recordLog("save airIDatas err size ");
            }
            s=0;


      //      Iterator<IntMap.Entry<ArmyData>> itArmy = armyHDatas.iterator();

         //   while (itArmy.hasNext()) {
            for(int i=0;i<hexagonDatas.size;i++){
                ArmyData c = hexagonDatas.get(i).armyData;
                if(c!=null&&c.getArmyHpNow()>0){
                out.write(c.getArmyIndex(),4);
                out.write(c.getRegionId(),8);
                out.write(c.getLegionIndex(),4);
                out.write(c.getUnitArmyId0(),4);
                out.write(c.getArmyType(),2);
                out.write(c.getUnitGroup0Lv(),2);
                out.write(c.getArmyKills(),4);
                out.write(c.getUnitArmyId1(),4);
                out.write(c.getUnitWealv1(),2);
                out.write(c.getArmyHpMax(),4);
                out.write(c.getArmyHpNow(),4);
                out.write(c.getUnitGroup1Lv(),2);
                out.write(c.getUnitGroup2Lv(),2);
                out.write(c.getUnitGroup3Lv(),2);
                out.write(c.getUnitGroup4Lv(),2);
                out.write(c.getUnitGroup5Lv(),2);
                out.write(c.getUnitGroup6Lv(),2);
                out.write(c.getSkillId1(),4);
                out.write(c.getSkillId2(),4);
                out.write(c.getSkillId3(),4);
                out.write(c.getSkillId4(),4);
                out.write(c.getGeneralIndex(),4);
                out.write(c.getArmyRank(),2);
                out.write(c.getArmyMorale(),2);
                out.write(c.getArmyFormation(),2);
                out.write(c.getHinge(),2);
                out.write(c.getArmyDirectionValue(),2);
                out.write(c.getAirforcePolicy(),2);
                out.write(c.getArmyRound(),2);
                out.write(c.getUnitWealv0(),2);
                out.write(c.getTransportType(),2);
                out.write(c.getArmyAi(),2);
                out.write(c.getNucleIndex(),4);
                out.write(c.getTargetRegion(),8);
                out.write(c.getStandyRound(),4);
                out.write(c.getSkillLv1(),2);
                out.write(c.getSkillLv2(),2);
                out.write(c.getSkillLv3(),2);
                out.write(c.getSkillLv4(),2);
                out.write(c.getIfMove(),2);
                out.write(c.getIfAttack(),2);
                out.write(c.getArmyBuff1(),4);
                out.write(c.getArmyBuff2(),4);
                out.write(c.getArmyBuff3(),4);
                out.write(c.getEventIndex(),4);
                out.write(c.getGameValue(),2);
                out.write(c.getHexagonIndex(),8);
                out.write(c.getUnitArmyId2(),4);
                out.write(c.getUnitArmyId3(),4);
                out.write(c.getUnitArmyId4(),4);
                out.write(c.getUnitArmyId5(),4);
                out.write(c.getUnitArmyId6(),4);
                out.write(c.getUnitWealv2(),2);
                out.write(c.getUnitWealv3(),2);
                out.write(c.getUnitWealv4(),2);
                out.write(c.getUnitWealv5(),2);
                out.write(c.getUnitWealv6(),2);
                s++;
            }
            }
            if (s!=  this.masterData.armysCount) {
                Gdx.app.log("err size","armyHDatas");
                GameUtil.recordLog("save armyHDatas err size ");
            }
            s=0;

            Iterator<IntMap.Entry<FortData>> itTrap = fortHDatas.iterator();
            while (itTrap.hasNext()) {
                FortData c = itTrap.next().value;
                out.write(c.getFortLv(),2);
                out.write(c.getHexagonIndex(),8);
                out.write(c.getLegionIndex(),4);
                out.write(c.getFortId(),4);
                out.write(c.getFortRound(),4);
                s++;
            }
            if (s!=   this.masterData.trapsCount) {
                Gdx.app.log("err size","fortHDatas");
                GameUtil.recordLog("save fortHDatas err size ");
            }
            s=0;

            for(int i=0,iMax=foreignDatas.size;i<iMax;i++){
                ForeignData f=foreignDatas.get(i);
                out.write(f.getSourceLegionIndex(),4);
                out.write(f.getTargetLegionIndex(),4);
                out.write(f.getFavorValue(),2);
                out.write(f.getForeignValue(),2);
                out.write(f.getForeignType(),2);
                out.write(f.getDiplomaticAttitude(),2);
            }
            Iterator<IntMap.Entry<InternData>> itI = internIDatas.iterator();
            while (itI.hasNext()) {
                InternData c = itI.next().value;
                out.write(c.getInternIndex(),4);
                out.write(c.getLegionIndex(),4);
                out.write(c.getCampPhase(),2);
                out.write(c.getInfluence(),2);
                out.write(c.getTension(),2);
                s++;
            }
            if (s!=  this.masterData.internsCount) {
                Gdx.app.log("err size","internIDatas");
                GameUtil.recordLog("save internIDatas err size ");
            }
            s=0;



            for(int i=0,iMax=tradeDatas.size;i<iMax;i++){
                out.write(tradeDatas.get(i).getTradeIndex(),4);
                out.write(tradeDatas.get(i).getLegionIndex(),4);
                out.write(tradeDatas.get(i).getGoodsType(),2);
                out.write(tradeDatas.get(i).getGoodsValue(),4);
                out.write(tradeDatas.get(i).getPriceType(),2);
                out.write(tradeDatas.get(i).getPriceValue(),4);
                out.write(tradeDatas.get(i).getTradeChance(),2);
            }for(int i = 0, iMax = taskDatas.size; i<iMax; i++){
                TaskData t=taskDatas.get(i);
                out.write(t.getTaskIndex(),4);
                out.write(t.getTaskLv(),2);
                out.write(t.getCountNow(),4);
                out.write(t.getCountMax(),4);
                out.write(t.getStar(),2);
                out.write(t.getTaskType(),2);
                out.write(t.getBontyType(),2);
                out.write(t.getBontyValue(),4);
                out.write(t.getTaskRound(),4);
            }for(int i=0,iMax=roundDatas.size;i<iMax;i++){
                out.write(roundDatas.get(i).getType(),2);
                out.write(roundDatas.get(i).getSourceLi(),4);
                out.write(roundDatas.get(i).getTargetLi(),4);
                out.write(roundDatas.get(i).getValue1(),4);
                out.write(roundDatas.get(i).getValue2(),4);
                out.write(roundDatas.get(i).getRound(),4);
                out.write(roundDatas.get(i).getType1(),2);
                out.write(roundDatas.get(i).getType2(),2);
                out.write(roundDatas.get(i).getHexagon(),8);
                out.write(roundDatas.get(i).getTriggerType(),2);
            }
            if(!ifPreloadSave){//不预加载
                for(int i=0,iMax=hexagonDatas.size;i<iMax;i++){
                    out.write(hexagonDatas.get(i).getBlockType(),2);
                    out.write(hexagonDatas.get(i).getBackTile(),2);
                    out.write(hexagonDatas.get(i).getBackIdx(),2);
                    out.write(hexagonDatas.get(i).getBackRefXValue(),2);
                    out.write(hexagonDatas.get(i).getBackRefYValue(),2);
                    out.write(hexagonDatas.get(i).getForeTile(),2);
                    out.write(hexagonDatas.get(i).getForeIdx(),2);
                    out.write(hexagonDatas.get(i).getForeRefXValue(),2);
                    out.write(hexagonDatas.get(i).getForeRefYValue(),2);
                    out.write(hexagonDatas.get(i).getPresetRailway(),2);
                    out.write(hexagonDatas.get(i).getIfCoast(),2);
                    out.write(hexagonDatas.get(i).getRegionId(),8);
                    out.write(hexagonDatas.get(i).getOtherTile(),2);
                    out.write(hexagonDatas.get(i).getHexagonIndex(),8);
                    out.write(hexagonDatas.get(i).getLegionIndex(),4);
                    out.write(hexagonDatas.get(i).getIfFog(),2);
                    out.write(hexagonDatas.get(i).getIfClimateZone(),2);
                }
            }



            /*Iterator<IntMap.Entry<EventData>> itE = eventIDatas.iterator();
            while (itE.hasNext()) {
                EventData c = itE.next().value;
                out.write(c.getEventIndex(),4);
                out.write(c.getCondition(),2);
                out.write(c.getEventYears(),4);
                out.write(c.getSourceLegionIndex(),4);
                out.write(c.getTargetLegionIndex(),4);
                out.write(c.getEventType(),2);
                out.write(c.getChangeValue(),4);
                out.write(c.getIfRepeat(),2);
                out.write(c.getEventTitleTextId(),4);
                out.write(c.getEventImageId(),4);
                out.write(c.getOption1EventId(),4);
                out.write(c.getOption1EventTextId(),4);
                out.write(c.getOption2EventId(),4);
                out.write(c.getOption2EventTextId(),4);
                s++;
            }*/
            if(scriptIDatas !=null){
                for(int i = 0; i< scriptIDatas.size; i++){
                    int v= scriptIDatas.get(i);
                    //  Gdx.app.log("save eventId",i+":"+v);
                    out.write(scriptIDatas.get(i),8);
                    out.write(0,2);
                }
            }
            if(wonderIDatas!=null){
                for(int i=0;i<wonderIDatas.size;i++){
                    out.write(wonderIDatas.get(i),8);
                    out.write(1,2);
                }
            }
            if(policyIDatas!=null){
                for(int i=0;i<policyIDatas.size;i++){
                    out.write(policyIDatas.get(i),8);
                    out.write(2,2);
                }
            }
            if(spiritMap!=null){
                Iterator<IntIntMap.Entry> itS = spiritMap.iterator();
                while (itS.hasNext()) {
                    int  v = itS.next().key;
                    out.write(v,8);
                    out.write(3,2);
                }
            }
            if(hEventIDatas!=null){
                for(int i=0;i<hEventIDatas.size;i++){
                    int v=hEventIDatas.get(i);
                    //  Gdx.app.log("save eventId",i+":"+v);
                    out.write(hEventIDatas.get(i),8);
                    out.write(4,2);
                }
            }
            if(ifPreloadSave){//不预加载
                for(int i=0,iMax=hexagonDatas.size;i<iMax;i++){
                    out.write(hexagonDatas.get(i).getRegionId(),8);
                    out.write(hexagonDatas.get(i).getOtherTile(),2);
                    out.write(hexagonDatas.get(i).getHexagonIndex(),8);
                    out.write(hexagonDatas.get(i).getLegionIndex(),4);
                    out.write(hexagonDatas.get(i).getIfFog(),2);
                    out.write(hexagonDatas.get(i).getIfClimateZone(),2);
                }
            }

            if(masterData.ifChief==1){
                out.write(chiefData.getPlayerAmbition(),2);
                out.write(chiefData.getPlayerHarmony(),2);
                out.write(chiefData.getPowerStrategy(),2);
                out.write(chiefData.getNationalIdeas(),2);
                out.write(chiefData.getPlayerTax(),2);
                out.write(chiefData.getMilitaryBudget(),2);
                out.write(chiefData.getForeignPolicy(),2);
                out.write(chiefData.getForeignBudget(),2);
                out.write(chiefData.getTrainingSystem(),2);
                out.write(chiefData.getTheDraft(),2);
                out.write(chiefData.getBuildLaw(),2);
                out.write(chiefData.getIndustrialControl(),2);
                out.write(chiefData.getTradeBills(),2);
                out.write(chiefData.getForeignInvestment(),2);
                out.write(chiefData.getNewsSystem(),2);
                out.write(chiefData.getStabilisationPolicy(),2);
                out.write(chiefData.getLaborLaw(),2);
                out.write(chiefData.getSafetyRegulations(),2);
                out.write(chiefData.getEducationPolicy(),2);
                out.write(chiefData.getSecuritySpend(),2);
                out.write(chiefData.getOfficialSalary(),2);
                out.write(chiefData.getOfficialSlavery(),2);
                out.write(chiefData.getLiteracy(),2);
                out.write(chiefData.getReputation(),2);
                out.write(chiefData.getWarSupport(),2);
                out.write(chiefData.getLiteracyProgress(),2);
                out.write(chiefData.getMassesDemandType(),4);
                out.write(chiefData.getNone7(),2);
                out.write(chiefData.getNone8(),2);
                out.write(chiefData.getNone9(),2);
                out.write(chiefData.getNone10(),2);
                out.write(chiefData.getNone11(),2);
                out.write(chiefData.getNone12(),2);
                out.write(chiefData.getNone13(),2);
            }
            file = Gdx.files.local(path);
            file.writeBytes(out.getByte(), false);
        } catch (Exception e) {
            if(ResDefaultConfig.ifDebug){
                e.printStackTrace();
            }else if(!game.gameConfig.ifIgnoreBug){
                getGame().remindBugFeedBack();
            }
            getGame().recordLog("Fb2Smap save ",e);
            return null;
            //System.err.println("saveError:" + e);
        }
        return file;
        //System.out.println("Ok");
    }

    private int getArmyDataCounts() {
        int rs=0;
        for(int i=0;i<hexagonDatas.size;i++){
            Fb2Map.MapHexagon h=hexagonDatas.get(i);
            if(h.armyData!=null&&h.armyData.getArmyHpNow()>0){
                rs++;
            }
        }
        return rs;
    }


    public class DialogueData{

        public DialogueData(){ }

        private int countryId;
        private String generalImageName;
        private String dialogueContent;
        private int generalState;
        private int generalId;
        public int getGeneralState() {
            return generalState;
        }
        public void setGeneralState(int generalState) {
            this.generalState = generalState;
        }
        public int getCountryId() {
            return countryId;
        }

        public int getGeneralId() {
            return generalId;
        }

        public void setGeneralId(int generalId) {
            this.generalId = generalId;
        }

        public void setCountryId(int countryId) {
            this.countryId = countryId;
        }

        public String getGeneralImageName() {
            return generalImageName;
        }

        public void setGeneralImageName(String generalImageName) {
            this.generalImageName = generalImageName;
        }

        public String getDialogueContent() {
            return dialogueContent;
        }

        public void setDialogueContent(String dialogueContent) {
            this.dialogueContent = dialogueContent;
        }
    }




    public class PlayerInfo{
        private int incomeRank;
        private int regionRank;
        private int militaryRank;
        private IntArray allyCountrys;
        private IntArray dependency;
        public int worldProgress;
        public Array<ArmyData> borderPlayerRegionUnits;
        public Array<BuildData> borderPlayerRegionBuilds;

        public PlayerInfo (){
            this.incomeRank=1;
            this.regionRank=1;
            this.militaryRank=1;
            this.allyCountrys=new IntArray();
            this.dependency=new IntArray();
            this.borderPlayerRegionUnits =new Array();
            this.borderPlayerRegionBuilds=new Array();
        }

        public void clear() {
            playerInfo.incomeRank=1;
            playerInfo.regionRank=1;
            playerInfo.militaryRank=1;
            playerInfo.allyCountrys.clear();
            playerInfo.dependency.clear();
            playerInfo.borderPlayerRegionUnits.clear();
            playerInfo.borderPlayerRegionBuilds.clear();
        }
    }




    //-------------------------------自定义新增方法-----------------------------------
    //所有的init方法都放到这里
    public void initBtl() {
        /*if(masterData.getGameType()!=2){
            ifConquest =true;
        }else {
            ifConquest =false;
        }*/

        //markRegionList=new IntArray();
        checkPlayerLegion();
        ifLoop =isLoop();
        buildNameMap=new IntIntMap();
        if(connectDatas==null||connectDatas.size==0){
            initConnectDatas();
        }
        initLegionColor();
        initRegionHexagonMapTIA1();
        initSRRegionMapTIA1();
        initVirAttribute();
        initCapitalList();
        initCardNumAndCost();
        GameMethod.initPublicLegionCardE(game,this, publicLegionCardEs);
        game.gameMethod.getCanUpdTech(publicLegionCardEs, worldData.worldAge, publicLegionCanUpdTechId);
        updInfoByBuild();
        //initHBuffEs();
        initHEventEs();
        initGeneralInfo();
        initPlayerMode();
        if(tempArmyDataArray ==null){
            tempArmyDataArray =new Array<ArmyData>();
        }else{
            tempArmyDataArray.clear();
        }
        tempArmyData=new ArmyData();//用来存储数据和记录
        promptDatas=new Array<>();
        dialogueDatas=new Array<>();
        dialogueGenerals=new IntArray();
        /*auxiliaryArmyMergeArrays =new Array<>();
        auxiliaryArmyMergeArrays2 =new Array<>();
        for(int i=0;i<7;i++){
            AuxiliaryArmyMerge auxiliaryArmyMerge=new AuxiliaryArmyMerge();
            auxiliaryArmyMergeArrays.add(auxiliaryArmyMerge);
            AuxiliaryArmyMerge auxiliaryArmyMerge2=new AuxiliaryArmyMerge();
            auxiliaryArmyMergeArrays2.add(auxiliaryArmyMerge2);
        }*/
        playerLegionData=legionDatas.get(masterData.playerLegionIndex);
        updIncome(false);
        updWorldInfo();
        roundState=0;
        lastUnitHexagon=-1;
        //logAllCountryBorder();
        if(masterData.getPlayerMode()==0){
            checkBuildWonder();
        }
        masterData.lastReportType=-1;
        masterData.lastReportValue=-1;
        //logAllGeneralInfo();
        resetPLegionRank();
        roundLegionIndex=masterData.getPlayerLegionIndex();
        roundCountryIndex=getPlayerLegionData().getCountryId();
        initCountryInfo();
        initAllLegionRectangularRange();
            if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }
        if(ResDefaultConfig.ifDebug){
             masterData.setIfCheat(0);
        }
        if(spiritMap!=null&&spiritMap.size>0){
            updSpirtMap();
        }
        if(mapbin!=null&&masterData.mapId!=0){
            mapbin.initOtherMapTile();
        }
        ifBanAiCheat=ifBanAiCheat();
        resetShieldCountry();
    }

    private void initPlayerMode() {
        XmlReader.Element defStage =game. gameConfig.getDEF_STAGE().getElementById(stageId);
        gameModeSort=ComUtil.strTransIntArray(defStage.get("gameMode"));
        if(gameModeSort==null){
            gameModeSort=game.resGameConfig.defaultConquestModeSort;
        }
    }

    private boolean ifBanAiCheat() {
        if(masterData.getIfCheat()==0){
            if(masterData.getRoundNow()<game.resGameConfig.playerProtectRound||getRoundProgress()<game.resGameConfig.playerProtectRoundPress||(masterData.getVictoryType()!=5&&getRoundProgress()*10>getPlayerLegionData().getWorldPress()*(10+(masterData.getGameDifficulty()-1)))){
                return true;
            }
        }
        return false;
    }

    private void resetShieldCountry() {
        if(game.gameConfig.ifShield){
        //设置屏蔽国中立
            if(!ComUtil.isEmpty(game.gameConfig.shieldCountrys)){
                for(int i=0;i<legionDatas.size;i++){
                    LegionData l=getLegionDataByLi(i);
                    if(l!=null&&l.varRegionCount>0){
                        if(l.getSuzerainLi()!=0&&game.gameConfig.isShieldCountry(l.getSuzerainLegionData().getCountryId())){
                            l.setSuzerainLi(0);
                        }
                        if(game.gameConfig.isShieldCountry(l.getCountryId())){
                            l.setInternIndex(0);
                        }
                    }
                }
            }
            //设置无敌国中立,全部的领土重置
            if(!ComUtil.isEmpty(game.gameConfig.invincibleCountrys)){
                for(int i=0;i<legionDatas.size;i++){
                    LegionData l=getLegionDataByLi(i);
                    if(l!=null&&l.varRegionCount>0){
                        if(l.getSuzerainLi()!=0&&game.gameConfig.isInvincibleCountrys(l.getSuzerainLegionData().getCountryId())){
                            l.setSuzerainLi(0);
                        }
                        if(game.gameConfig.isInvincibleCountrys(l.getCountryId())){
                            l.setInternIndex(0);
                            legion_resetArea(l,0);
                        }
                    }
                }
            }
        }
    }

    //type 0全部领土 1核心领土 2主要领土
    private void legion_resetArea(LegionData l,int type) {
        if((type==0||type==1)&&l.coreAreaRegions!=null){
            for (int i = 0; i < l.coreAreaRegions.size; i++) {
                    int cr=l.coreAreaRegions.get(i);
                    setRegionAllLegionIndex(cr,l.getLegionIndex(),true);
            }
        }
        if((type==0||type==2)&&l.majorAreaRegions!=null){

            for (int i = 0; i < l.majorAreaRegions.size; i++) {

                int cr = l.majorAreaRegions.get(i);
                setRegionAllLegionIndex(cr, l.getLegionIndex(), true);

            }
        }
    }

    //玩家至少应该有1个地块
    private void checkPlayerLegion() {
        if(masterData.getPlayerLegionIndex()!=0){
            boolean ifOk=false;
            for(int bi=0;bi<buildRDatas.size();bi++){
                BuildData b=buildRDatas.getByIndex(bi);
                if(b.getLegionIndex()==masterData.getPlayerLegionIndex()){
                    ifOk=true;
                    break;
                }
            }
            if(!ifOk){
                masterData.setPlayerLegionIndex(0);
            }
        }
    }


    /*private void initLat() {
      XmlReader.Element xE=  game.gameConfig.getDEF_MAP().getElementById(masterData.getMapId());
        if(xE!=null){
            masterData.ifLat=xE.getInt("ifLat",0);
            masterData.lat60N=xE.getInt("lat60N",0);
            masterData.lat40N=xE.getInt("lat40N",0);
            masterData.lat20N=xE.getInt("lat20N",0);
            masterData.lat0=xE.getInt("lat0",0);
            masterData.lat20S=xE.getInt("lat20S",0);
            masterData.lat40S=xE.getInt("lat40S",0);
            masterData.lat60S=xE.getInt("lat60S",0);
            masterData.topLat=xE.getInt("topLat",0);
            masterData.footLat=xE.getInt("footLat",0);
        }
    }*/

    private void checkBuildWonder() {
        if(wonderIDatas==null){
            wonderIDatas=new IntArray();
        }else{
            wonderIDatas.clear();
        }
        // Iterator<IntMap.Entry<Fb2Smap.BuildData>> itb =buildRDatas.iterator();
        //while (itb.hasNext()) {
        //  Fb2Smap.BuildData build = itb.next().value;
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData build=buildRDatas.getByIndex(bi);
            if(build!=null&&build.getBuildWonder()>0){
                XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(build.getBuildWonder());
                if(xE!=null&&xE.getInt("state",0)==1){
                    wonderIDatas.add(build.getBuildWonder());
                }
            }
        }
    }

    private void logAllGeneralInfo() {

        Iterator<IntMap.Entry<GeneralData>> itb = generalIDatas.iterator();
        while (itb.hasNext()) {
            IntMap.Entry<GeneralData> it=itb.next();

            GeneralData g = it.value;
            if(g!=null){
                Gdx.app.log("logAllGeneralInfo:",it.key+":"+g.getGeneralIndex() );
            }
        }
    }


    public void updAllRTask(){
        if(!ifSystemEffective(15)){
            return;
        }


        if(taskDatas==null){
            taskDatas=new Array<>();
        }else {
            taskDatas.clear();
        }
        for(int i=0;i<5;i++){
            TaskData t=null;
            t=updRTask(t);
            taskDatas.add(t);
        }
        if(ifSystemEffective(10)){
            for(int i=0;i<5;i++){
                TaskData t=null;
                t=updRTask(t);
                t.setTaskType(2);
                taskDatas.add(t);
            }
            initLegionPolicy();
        }

    }


    //过滤事件保留条件
    // (未超时或year,month都为0 )和(玩家||国际新闻)
    public void initHEventEs() {
        if (!ifSystemEffective(13)) {
            return;
        }else if(hEventEs.size>0){
            hEventEs.clear();
        }
        Array<XmlReader.Element> es = game.gameConfig.getDEF_HEVENT().e.getChildrenByName("event");
        if (es != null && es.size > 0) {

            int playerCountry=getCountry(masterData.getPlayerLegionIndex());
            if(playerCountry==0){
                return;
            }
            // hBuffEs.clear();
            for (XmlReader.Element event : es) {
                String triggerCountrys=event.get("triggerCountrys","0");
                int eventId=event.getInt("id", 0);
                if((eventId==0||!scriptIDatas.contains(eventId))&& (triggerCountrys.equals("0")||ComUtil.ifHaveValueInStr(triggerCountrys,playerCountry))){
                    // 如果想要屏蔽时间检查条件,将year和month都改为0
                    boolean ifInTime=(compareGameTime(true,event.getInt("year", 0), event.getInt("month", 0))||(event.getInt("year", 0)==0&&event.getInt("month", 0)==0) );
                   String triggerType=event.get("triggerType","banAutoTrigger");
                    if (ifInTime&&!triggerType.equals("banAutoTrigger")&&!triggerType.equals("none")) {
                        hEventEs.add(event);
                    }
                }
            }
        }
    }

    private void checkEventEForegion(XmlReader.Element event) {
        //Gdx.app.log("eventE check",event.toString());
        String[] foregions = event.get("effectForegion").split(",");
        int liA,liB,favor;
        //根据影响关系国判断筛选
        if(Integer.parseInt(foregions[0])!=0) {
            int count= foregions.length/3;
            for(int i=0;i<count;i++){
                if(i*3>foregions.length||i*3+1>foregions.length||i*3+2>foregions.length){
                    break;
                }
                liA=Integer.parseInt(foregions[i*3]);
                liB=Integer.parseInt(foregions[i*3+1]);
                favor=Integer.parseInt(foregions[i*3+2]);
            }
        }
    }

    private void removeGeneralE(int generalIds){
        for (XmlReader.Element gE : generalEs) {
            if (gE.getInt("id")==generalIds) {
                generalEs.removeValue(gE, false);
                return;
            }
        }
    }

    private void legionAddVarGeneralNum(int li){
        LegionData l=legionDatas.get(li);
        l.varGeneralNum+=1;
    }

    private void initAllHexagonVirAttribute(){
        for(int i=0,iMax=hexagonDatas.size;i<iMax;i++){
            Fb2Map.MapHexagon h=hexagonDatas.get(i);
            h.initVirAttribute();
        }
        //因为要初始化的条件中有判断领边的信息,所以要运行两次
        for(int i=0,iMax=hexagonDatas.size;i<iMax;i++){
            Fb2Map.MapHexagon h=hexagonDatas.get(i);
            h.updHexagonBorderAttribute();
        }
    }

    private void initVirAttribute() {
        if(buildNameMap!=null){
            buildNameMap.clear();
        }else {
            buildNameMap=new IntIntMap();
        }

        for(int i=0,iMax=legionDatas.size;i<iMax;i++){
            LegionData l=legionDatas.get(i);
            l.initVirAttribute();
            l.varBattleRegions = new IntArray();
            l.armyArrays = new Array<>();
            l.buildArrays = new Array();
        }



        // Iterator<IntMap.Entry<BuildData>> itb = buildRDatas.iterator();
        // while (itb.hasNext()) {
        //   BuildData b = itb.next().value;
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            b.resetEnergyCost();
            b.initVirAttribute();
            /*if(b.getBuildPolicy()==1){
                markRegionList.add(b.getRegionId());
            }*/
            Fb2Map.MapHexagon h=b.getHexagonData();
            h.setLegionIndexValue(b.getLegionIndex());
            if(h.getRegionId()!=b.getRegionId()){
                Gdx.app.error("build region is error",b.getAllAttributes());
            }
            if(b.getBuildName()>0){
                buildNameMap.put(b.getBuildName(),b.getRegionId());
            }
        }
        Iterator<IntMap.Entry<ArmyData>> it = armyHDatas.iterator();
        while (it.hasNext()) {
            ArmyData armyData = it.next().value;
            if (armyData == null||armyData.getArmyHpNow()<=0) {
                continue;
            }
            armyData.initVirAttribute();
        }
        Iterator<IntMap.Entry<AirData>> it1 = airIDatas.iterator();
        while (it1.hasNext()) {
            IntMap.Entry<AirData> c = it1.next();
            c.value.initVirAttribute();
        }
        Iterator<IntMap.Entry<NulcleData>> itn = nulcleIDatas.iterator();
        while (itn.hasNext()) {
            IntMap.Entry<NulcleData> c = itn.next();
            c.value.initVirAttribute();
        }

        Iterator<IntMap.Entry<GeneralData>> itG = generalIDatas.iterator();
        while (itG.hasNext()) {
            IntMap.Entry<GeneralData> c = itG.next();
            c.value.initVirAttribute();
        }

        Iterator<IntMap.Entry<FacilityData>> itF = facilityHDatas.iterator();
        while (itF.hasNext()) {
            FacilityData facilityData = itF.next().value;
            if (facilityData != null) {
                facilityData.initVirAttribute();
            }
        }

        // TextureRegionDAO tt;int sx,sy;
        // int  mapH_px=GameMap.getH_px(masterData.getWidth(), masterData.getHeight(), 1);
        // float mapTile_refX= ResDefaultConfig.Map.MAPTILE_REFX* ResDefaultConfig.Map.MAP_SCALE;
        // float mapTile_refY= ResDefaultConfig.Map.MAPTILE_REFY* ResDefaultConfig.Map.MAP_SCALE;/**/

        initAllHexagonVirAttribute();
        //initHexagonDataVirAttribute();
        /*Iterator<LegionData> itL = legionDatas.iterator();
        while (itL.hasNext()) {
            LegionData c = itL.next();
            c.initVirAttribute();
        }*/
        for(int i=0;i<taskDatas.size;i++){
            TaskData t=taskDatas.get(i);
            if(t!=null){
                t.initVirAttribute();
            }
        }
    }

    //把没有到时间的hbuff记录
  /*    private void initHBuffEs() {
      if (masterData.getIfHBuff() != 1||hBuffEs.size>0) {
            return;
        }
        Array<XmlReader.Element> hs = game.gameConfig.getDEF_HBUFF().getElementsById(masterData.getHistoryId()+"","buff");
        if (hs != null && hs.size > 0) {
            // hBuffEs.clear();
            for (XmlReader.Element hBuff : hs) {
                if ( compareGameTime(true,hBuff.getInt("year", 0), hBuff.getInt("month", 0))) {
                    hBuffEs.add(hBuff);
                }
            }
        }
    }*/
    private  void initGeneralInfo(){
        Array<XmlReader.Element> gs = game.gameConfig.getDEF_GENERAL().e.getChildrenByName("general");
        if (gs != null && gs.size > 0) {
            for (XmlReader.Element g : gs) {
                if(!game.gameConfig.ifCanUseInLanguage(g.get("useLanguage","-1"))){
                    continue;
                }
                if(compareGameTime(false,g.getInt("death", 0), 0)){

                }else{
                    if(!generalIds.contains(g.getInt("id",0))){
                        generalEs.add(g);
                    }
                }
            }
        }
    }

    public void initAllArmyDataVirAttribute(){
        Iterator<IntMap.Entry<ArmyData>> it = armyHDatas.iterator();
        while (it.hasNext()) {
            ArmyData armyData = it.next().value;
            if (armyData == null||armyData.getArmyHpNow()<=0) {
                continue;
            }
            armyData.initVirAttribute();
            armyData.resetArmyHpMax(false);
        }
    }

    //判断输入的时间是否大于游戏中的时间
    private boolean ifIsGameTime(int year, int month) {
        float st1=year + (month * 1f / 12);
        float st2=getNowYearF();
        float st3=getNextYearF();
        //Gdx.app.log("compareGameTime",st1+":"+st2);
        if ( st1>st2 &&st1<=st3) {
            return true;
        }
        return false;
    }

    //判断输入的时间是否大于游戏中的时间
    //例子 判断service和death之间的值 sMapDAO.compareGameTime(false,g.getInt("service", 0), 0)&&sMapDAO.compareGameTime(true,g.getInt("death", 0), 0)
    public boolean compareGameTime(boolean ifThan,int year, int month) {
        float thanY=year + (month * 1f / 12);
        float nowY=getNowYearF();
        //Gdx.app.log("compareGameTime",st1+":"+st2);
        if(ifThan){
            if ( thanY>nowY ) {
                return true;
            }else {
                return false;
            }
        }else {
            if ( thanY<=nowY ) {
                return true;
            }else {
                return false;
            }
        }
    }

    private void initCapitalList() {
        if (capitalLegionsMap == null) {
            capitalLegionsMap = new IntMap<>();
        } else {
            capitalLegionsMap.clear();
        }
        for (int i=0;i<legionDatas.size;i++) {
            LegionData l=legionDatas.get(i);
            if (l.getCapitalId() >=0) {
                capitalLegionsMap.put(l.getCapitalId(),l);
            }
        }
    }







    public void initRegionHexagonMapTIA1() {
        /*for(int i = 0, iMax = hexagonDatas.size; i < iMax; i++){
            if(i!=hexagonDatas.get(i).getHexagonIndex()){
                Gdx.app.error("hexagonDatas is error",i+":"+hexagonDatas.get(i).getHexagonIndex());
            }
        }*/
        if (regionHexagonMap == null) {
            regionHexagonMap = new IntMap<>();
        } else {
            regionHexagonMap.clear();
        }
        for (int i = 0, iMax = hexagonDatas.size; i < iMax; i++) {
            if (regionHexagonMap.containsKey(hexagonDatas.get(i).getRegionId())) {
                regionHexagonMap.get(hexagonDatas.get(i).getRegionId()).add(hexagonDatas.get(i).getHexagonIndex());
            } else {
                IntArray tempIntArray = new IntArray();
                tempIntArray.add(hexagonDatas.get(i).getHexagonIndex());
                regionHexagonMap.put(hexagonDatas.get(i).getRegionId(), tempIntArray);
            }
        }

        Iterator<IntMap.Entry<IntArray>> it = regionHexagonMap.iterator();
        while (it.hasNext()) {
            IntMap.Entry<IntArray> c = it.next();
            int regionId=c.key;
            IntArray hs=c.value;
            if(hs.size>0){
                boolean exchange = false;
                int lastV;
                for (int i = 0; i < hs.size; i++) {
                    for (int j = hs.size - 2; j >= i; j--) {
                        if (getDistanceForMap(hs.get(j + 1),regionId) < getDistanceForMap(hs.get(j),regionId)) {
                            lastV = hs.get(j + 1);
                            hs.set(j + 1, hs.get(j));
                            hs.set(j, lastV);
                            exchange = true;
                        }
                    }
                    if (!exchange)
                        break;
                }
               /* for (int i = 0; i < hs.size; i++) {
                    int id=hs.get(i);
                    Gdx.app.log("sort List",id+":"+regionId+":"+getDistanceForMap(id,regionId));
                }*/
            }
            // c.value.shuffle();
        }
    }

    public void initSRRegionMapTIA1(){
        if (srRegionMap == null) {
            srRegionMap = new IntMap<>();
        } else {
            srRegionMap.clear();
        }
        for (int bi = 0, iMax = buildRDatas.size(); bi < iMax; bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if(b==null||b.getStrategicRegion()==0){continue;}
            if (srRegionMap.containsKey(b.getStrategicRegion())) {
                srRegionMap.get(b.getStrategicRegion()).add(b.getRegionId());
            } else {
                IntArray tempIntArray = new IntArray();
                tempIntArray.add(b.getRegionId());
                srRegionMap.put(b.getStrategicRegion(), tempIntArray);
            }
        }
    }





    public IntArray initPlayerFogGrid(IntArray updIds) {
        //添加玩家控制的地块以及玩家同盟国
        int rli=0;
        for (int i = 0, iMax = hexagonDatas.size; i < iMax; i++) {
            rli=getLegionIndexByRegion(hexagonDatas.get(i).getRegionId());
            if (hexagonDatas.get(i).getRegionId() != -1 &&
                    ( rli== masterData.playerLegionIndex
                            || (ifAllyByLi(rli, getPlayerLegionData().legionIndex))
                    )
            ) {
                hexagonDatas.get(i).setIfFog(1);
                /*if(hexagonDatas.get(i).getBlockType() != 1){
                    addUpdColorRegion(i);
                }*/
            } else {
                hexagonDatas.get(i).setIfFog(0);
            }
        }
        return updIds;
    }

    /*public IntArray getUpdColorRegion(IntArray updIds) {
        updIds.clear();
        for (int i = 0, iMax = hexagonDatas.size; i < iMax; i++) {
            if (updColorRegions.contains(hexagonDatas.get(i).getRegionId())) {
                updIds.add(hexagonDatas.get(i).getHexagonIndex());
               *//*if(ifAllyByLi(hexagonDatas.get(i).getBuildPolicy(),masterData.getPlayerLegionIndex()  )){
                   hexagonDatas.get(i).setIfFog(1);
               }else{
                   hexagonDatas.get(i).setIfFog(0);
               }*//*
            }
        }
        updColorRegions.clear();
        return updIds;
    }*/

    public Fb2Smap (){  initFb2Smap();}
    // (this,historyDao, mapBinDAO, stageId,defStage,defHistory)
    public void createBtlForFreeConquest(MainGame game, Fb2History historyDAO, Fb2Map mapBinDAO, int stageId, XmlReader.Element defStage, XmlReader.Element defHistory, int year) {
        this.game = game;
        mapBinDAO.btl=this;
        this.mapbin=mapBinDAO;
        this.roundState=1;
        if(stageId==0){
            this.masterData.setPlayerMode(1);
            this.masterData.setVictoryType(2);
        }else{
            this.masterData.setPlayerMode(1);
        }
        IntIntMap buildNameMap = new IntIntMap();//存储地名 用来设置首都  name:region
        IntIntMap legionLargestCityMap = new IntIntMap(); //存储最大城市,用来给没有固定首都的国家设置首都
        initFb2Smap();
        // Gdx.app.log("defHistory",defHistory.toString());
        this.masterData.setMapId(defHistory.getInt("mapId"));
        this.masterData.setMapLandBase(game.resGameConfig.defaultLandBase);
        this.masterData.setStartX(0);
        this.masterData.setStartY(0);
        this.masterData.setIfColor(1);
        this.masterData.setIfFog(1);
        this.masterData.setIfChief(0);
        this.masterData.setWidth(mapBinDAO.mapWidth);
        this.masterData.setHeight(mapBinDAO.mapHeight);
        this.masterData.setBeginYear(year);

        this.masterData.setRoundForYear(game.resGameConfig.freeConquestRoundForYear*(1+getAge()));
        /*if(stageId==0){
            this.masterData.setGameEndYear(0);
        }else {
            this.masterData.setGameEndYear(defStage.getInt("nextYear"));
        }*/
        this.masterData.setGameEndYear(0);
        this.masterData.setNextStageId(0);//defStage.getInt("nextStageId")
        this.masterData.setHistoryId(defHistory.getInt("id"));


        this.masterData.setBtlType(defStage.getInt("btlType"));
        this.masterData.setGameDifficulty(game.resGameConfig.freeConquestDifficulty+getAge());
        this.masterData.setRoundMax(defHistory.getInt("roundMax")*masterData.getGameDifficulty());



        if(defStage.getBoolean("ifHBuff",false)){
            this.masterData.setIfWeather(1);
        }




        this.stageId = stageId;

        this.worldData=new WorldData();

        this.worldData.worldAge = game.gameMethod.getAgeByYear(year);


        //获取country转换map,中立国是0  存在的国家:id序列  country:li
        HashMap<Integer, Integer> transCountryMap = historyDAO.getCountryTransMap(year);
        int regionCount = historyDAO.masterData.getRegionCount();
        Array<XmlReader.Element> countrys = game.gameConfig.getDEF_COUNTRY().e.getChildrenByName("country");
        for (Integer k : transCountryMap.keySet()) {
            XmlReader.Element country = countrys.get(k);
            LegionData l = new LegionData();
            l.setLegionIndex(transCountryMap.get(k));
            l.setCountryId(country.getInt("id"));
            int internIndex = l.getLegionIndex();
            if (country.getInt("suzerainId") == 0) {
                internIndex = l.getLegionIndex();
            } else if (transCountryMap.containsKey(country.getInt("suzerainId"))) {
                internIndex = transCountryMap.get(country.getInt("suzerainId"));
                l.setSuzerainLi(internIndex);
            } else {
                internIndex = 0;
            }
            l.setInternIndex(internIndex);


            l.setTargetAreaZone(country.getInt("targetArea",0));

            l.setMedal(country.getInt("medal",0));
            l.setLifeBonus(100);
            l.setTaxBonus(100);
            l.setRGeneralId(country.getInt("randomGeneralId",0));
            int capital = 0;
            l.setCivilSpec(country.getInt("civilSpec"));
            if (country.getInt("capital") > 0) {
                capital = country.getInt("capital");
            }
            l.setCapitalId(capital);
            l.setRed(country.getInt("r"));
            l.setGreen(country.getInt("g"));
            l.setBlue(country.getInt("b"));
            l.setAlpha(country.getInt("a"));
            if(ifSystemEffective(10)){
                l.setLegionFeature1(0);
                l.setLegionFeatureLv1(0);
                l.setLegionFeature2(0);
                l.setLegionFeatureLv2(0);
                l.setLegionFeature3(0);
                l.setLegionFeatureLv3(0);
            }else{
                l.setLegionFeature1(country.getInt("feature1"));
                l.setLegionFeatureLv1(country.getInt("featureLv1"));
                l.setLegionFeature2(country.getInt("feature2"));
                l.setLegionFeatureLv2(country.getInt("featureLv2"));
                l.setLegionFeature3(country.getInt("feature3"));
                l.setLegionFeatureLv3(country.getInt("featureLv3"));
            }
            l.setLevel(country.getInt("level"));
            legionDatas.add(l);
        }
        //对legion进行排序
        legionDatas.sort();
        hexagonDatas=mapBinDAO.mapHexagons;
        initRegionHexagonMapTIA1();
        initSRRegionMapTIA1();
        IntArray tempIds = new IntArray();

        if(ifSystemEffective(4)){
            createForeignData();
        }


        //地块连接
        initConnectDatas();

        IntIntMap tempIntIntMap=game.tempUtil.getTempIntIntMap();

        //生成建筑数据  建筑数据按照地块连接顺序和数量生成



        // for (int i = 0, iMax = connectDatas.size; i < iMax; i++) {

        // Iterator<IntMap.Entry<int[]>> it = connectDatas.iterator();
        // while (it.hasNext()) {
        Iterator<IntMap.Entry<ConnectData>> it = connectDatas.iterator();
        while (it.hasNext()) {

            BuildData b = new BuildData();
            b.initBuildData();
            b.setBuildIndex(buildRDatas.size());
            int c =it.next().key;
            //  int c=connectDatas.get(i).getRegionMainIndex();
            int index = historyDAO.getHistoryIndexBySort(year, c);
            if(index!=-1){
                b.setRegionId(historyDAO.historyDatas.get(index).getRegionIndex());
            }else {
                b.setRegionId(c);
            }
           /* if(b.getRegionId()==7928){
                Gdx.app.log("test",b.getRegionId()+":"+mapBin.ifCoastCity(b.getRegionId()));
            }*/
            Fb2Map.MapHexagon m=mapBinDAO.getMapbin().get(b.getRegionId());
            //判断城市类型 0城市 1海港 2海洋 3沿海城市
            b.resetBuildType();
            b.setStrategicRegion(m.getRegionStrategicRegion());
            b.setClimateZone(m.getRegionClimatZone());
            XmlReader.Element xE= game.gameConfig.getDEF_STRATEGICREGION().getElementById(b.getStrategicRegion());
            if(xE!=null){
                b.setAreaZone(xE.getInt("zone",0));
            }
            Gdx.app.log("createBtlForFreeConquest test",b.getRegionId()+":"+b.getBuildType());


            int depLv=m.getRegionDepLv();
            int mineralLv=m.getRegionMineralLv();
            int oilLv=m.getRegionOilLv();
            int foodLv=m.getRegionFoodLv();

           /*   xE=game.gameConfig.getDEF_AREA().getElementById(m.getregionAreaId());
            if(xE!=null){
                int v=xE.getInt("depLv",0);
                if(v>depLv){
                    depLv=v;
                }
                v=xE.getInt("mineralLv",1);
                if(v>mineralLv){
                    mineralLv=v;
                }
                v=xE.getInt("oilLv",0);
                if(v>oilLv){
                    oilLv=v;
                }
            }*/


            if (index != -1&&b.getBuildType()!=2) {
                b.setLegionIndex(transCountryMap.get(historyDAO.historyDatas.get(index).getNowCountryIndex()));
                b.setCityLvNow(depLv);

            } else {
                b.setLegionIndex(0);
                b.setCityLvNow(0);
                b.setCityHpMax(0);
                b.setCityHpNow(0);
            }

            if(m.getregionAreaId()!=0){//为带名字的城市
                b.setBuildName(m.getregionAreaId());
            }

            b.setFoodLvNow(foodLv);
            b.setDevelopLv(depLv);
            b.setMineralLv(mineralLv);
            b.setOilLv(oilLv);


            //存储地名以设置首都
            if (b.getBuildName() > 0) {
                buildNameMap.put(b.getBuildName(), b.getRegionId());
            }

            if (b.buildType == 2) {
                b.setBuildWonder(0);
            }else if (b.buildType == 1) {
                b.setBuildWonder(3);//1金2木3水4火5土
            } else {
                int buildV = mapBinDAO.getMapbin().get(b.getRegionId()).getRegionMineralLv();
                if (buildV == 2 || buildV == 5) {
                    if (ComUtil.ifGet(70)) {
                        b.setBuildWonder(4);
                    } else {
                        b.setBuildWonder(5);
                    }
                } else if (buildV == 1 || buildV == 4) {
                    if (ComUtil.ifGet(80)) {
                        b.setBuildWonder(1);
                    } else {
                        b.setBuildWonder(2);
                    }
                } else if (buildV == 3) {
                    b.setBuildWonder(3);
                } else if (buildV == 0) {
                    buildV = mapBinDAO.getMapbin().get(b.getRegionId()).getRegionDepLv();
                    if (buildV > 4) {
                        b.setBuildWonder(1);
                    } else if (buildV > 2 || (b.buildName != 0)) {
                        if (ComUtil.ifGet(70)) {
                            b.setBuildWonder(4);
                        } else {
                            b.setBuildWonder(5);
                        }
                    } else {
                        b.setBuildWonder(2);
                    }
                }
            }
            b.setCityStability(60);
            b.setNulIndex1(-1);
            b.setNulIndex2(-1);
            b.setNulIndex3(-1);
            b.setNulIndex4(-1);
            b.setAirIndex1(-1);
            b.setAirIndex2(-1);
            b.setAirIndex3(-1);
            b.setAirIndex4(-1);
            //归属全部放入terrainData里
            hexagonDatas.get(b.getRegionId()).setLegionIndexValue(b.legionIndex);
            buildRDatas.put(b.getRegionId(),b);
            tempIntIntMap.put(b.regionId, b.getCityLvNow());
            //存储首都以用来选取首都
            if (b.legionIndex > 0) {
                if (legionLargestCityMap.containsKey(b.legionIndex)) {
                    if (b.getBuildType()!=2&&b.cityLvNow > tempIntIntMap.get(legionLargestCityMap.get(b.legionIndex, 0), 0)) {
                        legionLargestCityMap.put(b.legionIndex, b.getRegionId());
                    }
                } else {
                    legionLargestCityMap.put(b.legionIndex, b.getRegionId());
                }
            }
        }
        game.tempUtil.disposeTempIntIntMap(tempIntIntMap);
        //initBuildIndexMap();
        // 随机生成首都
        int cregion=0;
        for (int i=0;i<legionDatas.size;i++) {
            LegionData l=legionDatas.get(i);
            /*if(l.getBuildPolicy()==30){
                int c111=0;
            }*/
            cregion=buildNameMap.get(l.getCapitalId(), -1);
            if (l.getCapitalId() >=0 && cregion!=-1 && l.getLegionIndex() == getLegionIndexByRegion(cregion)) {
                l.setCapitalId(cregion);
            } else if (legionLargestCityMap.containsKey(l.getLegionIndex())) {
                l.setCapitalId(legionLargestCityMap.get(l.getLegionIndex(), -1));
            }
        }
        buildNameMap = null;
        legionLargestCityMap = null;


        if(ifSystemEffective(17)){
            initTradeDatas();
        }



        //处理过去的历史buff
      /*  Array<XmlReader.Element>   historyBuffEs = game.gameConfig.getDEF_HBUFF().getElementsById(masterData.getHistoryId()+"","buff");
        if (historyBuffEs != null && historyBuffEs.size > 0) {
            for (XmlReader.Element hBuff : historyBuffEs) {
                if (historyBuffEs != null && !compareGameTime(true,hBuff.getInt("year", 0), hBuff.getInt("month", 0))) {
                    if(hBuff.getBoolean("ifExecute")){
                        takeHBuffTIA1(hBuff.get("country","-1"),hBuff.getBoolean("ifPlayer",false),hBuff.getInt("eventId",0) ,hBuff.getInt("function", 0), hBuff.getInt("count", 0), hBuff.getInt("chance", 0), hBuff.get("value", "0"),false);
                    }
                }else{
                    //XmlReader.Element hBuff
                    hBuffEs.add(hBuff);
                }
            }
        }*/
        //添加默认将军
        int generalIndex=0;
        GeneralData g=new GeneralData();
        //设置为情报官
        g.setGeneralId(0);g.setState(0);
        generalIDatas.put(g.getGeneralIndex(),g);

        if(ifSystemEffective(15)){
            updAllRTask();
        }
        if(ifSystemEffective(17)){
            refreshTrade();
        }


        checkCapital();
        initBtl();
        if(/*defStage.getBoolean("ifCreateArmy",false)*/true) {
            //创建默认单位
            createInitUnit(3+getAge());
            for (LegionData l : legionDatas) {
                createGeneralUnit(l.getLegionIndex(), 0);
            }
        }
        checkResrource();
        initCardNumAndCost();
        if(/*defStage.getBoolean("ifAutoTech",false)*/true){
            initAllBuildData(getAge());
            setAutoTech();
        }
        if(ifSystemEffective(4)){
            initDiplomaticAttitude();
        }

    }

    private void createForeignData() {
        //生成外交数据
        for (int i1=0;i1<legionDatas.size;i1++) {
            LegionData l=legionDatas.get(i1);
            for (int i = l.getLegionIndex(); i < legionDatas.size; i++) {
                ForeignData f = new ForeignData();
                f.setSourceLegionIndex(l.legionIndex);
                f.setTargetLegionIndex(legionDatas.get(i).legionIndex);
                f.setFavorValue(initToGetFavorByLi(f.sourceLegionIndex, f.targetLegionIndex));
                foreignDatas.add(f);
            }
        }
        for (int i1=0;i1<legionDatas.size;i1++) {
            LegionData l=legionDatas.get(i1);
            if(l.getSuzerainLi()>=0){
                l.setStability(ComUtil.getRandom(10,60));
            }
        }
    }


    public void createBtlForEmpire(MainGame game, Fb2History historyDAO, Fb2Map mapBinDAO, int stageId, XmlReader.Element defStage, XmlReader.Element defHistory) {
        this.game = game;
        mapBinDAO.btl=this;
        this.mapbin=mapBinDAO;
        this.roundState=1;
        int year=0;
        //boolean ifBattle=defStage.getBoolean("ifBattle");
        boolean ifLoop=isLoop();
        XmlReader.Element empireE= game.gameConfig.getEmpireXmlE(stageId,0);
        if(empireE==null){
            return;
        }

        initFb2Smap();
        this.masterData.setPlayerLegionIndex(empireE.getInt("playerCountry"));
        year=empireE.getInt("year");
        IntIntMap buildNameMap = new IntIntMap();//存储地名 用来设置首都  name:region
        IntIntMap legionLargestCityMap = new IntIntMap(); //存储最大城市,用来给没有固定首都的国家设置首都
        //mapBin.checkName(defHistory.getInt("mapId"));
        // Gdx.app.log("defHistory",defHistory.toString());
        this.masterData.setMapId(defHistory.getInt("mapId"));
        this.masterData.setMapLandBase(game.resGameConfig.defaultLandBase);
        this.masterData.setStartX(0);
        this.masterData.setStartY(0);
        this.masterData.setIfColor(1);
        this.masterData.setIfFog(1);
        this.masterData.setIfChief(0);
        this.masterData.setWidth(mapBinDAO.mapWidth);
        this.masterData.setHeight(mapBinDAO.mapHeight);
        this.masterData.setBeginYear(year);
        this.masterData.setRoundForYear(game.resGameConfig.freeConquestRoundForYear*(1+getAge()));
        this.masterData.setGameEndYear(0);
        this.masterData.setNextStageId(0);
        this.masterData.setHistoryId(defHistory.getInt("id"));
        //  this.masterData.setPlayerMode(defStage.getInt("mode"));
        this.masterData.setRoundMax(0);

        this.masterData.setGameEpisode(0);
        this.masterData.setBtlType(defStage.getInt("btlType"));
        this.masterData.setGameDifficulty(empireE.getInt("difficulty",game.resGameConfig.freeConquestDifficulty+getAge()));


        this.masterData.setPlayerMode(1);
        this.stageId = stageId;


        if(defStage.getBoolean("ifHBuff",false)){
            this.masterData.setIfWeather(1);
        }

        this.worldData=new WorldData();
        this.worldData.worldAge = game.gameMethod.getAgeByYear(year);


        //获取country转换map,中立国是0  存在的国家:id序列  country:li
        int regionCount = historyDAO.masterData.getRegionCount();
        Array<XmlReader.Element> countrys = game.gameConfig.getDEF_COUNTRY().e.getChildrenByName("country");
        for (int i=0,iMax=countrys.size;i<iMax;i++) {
            XmlReader.Element country = countrys.get(i);
            LegionData l = new LegionData();
            l.setLegionIndex(i);
            l.setCountryId(country.getInt("id"));
            int internIndex = l.getLegionIndex();
            l.setSuzerainLi(0);
            l.setInternIndex(0);


            l.setMedal(country.getInt("medal",0));
            l.setLifeBonus(100);
            l.setTaxBonus(100);
            l.setRGeneralId(country.getInt("randomGeneralId",0));
            int capital = 0;
            l.setCivilSpec(country.getInt("civilSpec"));
            if (country.getInt("capital") > 0) {
                capital = country.getInt("capital");
            }
            l.setCapitalId(capital);
            l.setRed(country.getInt("r"));
            l.setGreen(country.getInt("g"));
            l.setBlue(country.getInt("b"));
            l.setAlpha(country.getInt("a"));
            l.setLegionFeature1(0);
            l.setLegionFeatureLv1(0);
            l.setLegionFeature2(0);
            l.setLegionFeatureLv2(0);
            l.setLegionFeature3(0);
            l.setLegionFeatureLv3(0);
            l.setLevel(country.getInt("level"));
            legionDatas.add(l);
        }
        //对legion进行排序
        legionDatas.sort();

        hexagonDatas=mapBinDAO.mapHexagons;
        initRegionHexagonMapTIA1();
        initSRRegionMapTIA1();
        IntArray tempIds = new IntArray();

        //地块连接
        initConnectDatas();
        IntIntMap tempIntIntMap=game.tempUtil.getTempIntIntMap();

        //生成建筑数据  建筑数据按照地块连接顺序和数量生成
        Iterator<IntMap.Entry<ConnectData>> it = connectDatas.iterator();
        while (it.hasNext()) {

            BuildData b = new BuildData();
            b.initBuildData();
            b.setBuildIndex(buildRDatas.size());
            int c =it.next().key;
            // int c =connectDatas.get(i).getRegionMainIndex();
            int index = historyDAO.getHistoryIndexBySort(year, c);
            if(index!=-1){
                b.setRegionId(historyDAO.historyDatas.get(index).getRegionIndex());
            }else {
                b.setRegionId(c);
            }
           /* if(b.getRegionId()==7928){
                Gdx.app.log("test",b.getRegionId()+":"+mapBin.ifCoastCity(b.getRegionId()));
            }*/
            Fb2Map.MapHexagon m=mapBinDAO.getMapbin().get(b.getRegionId());
            //判断城市类型 0城市 1海港 2海洋 3沿海城市
            b.resetBuildType();

            b.setStrategicRegion(m.getRegionStrategicRegion());
            b.setClimateZone(m.getRegionClimatZone());
            XmlReader.Element xE= game.gameConfig.getDEF_STRATEGICREGION().getElementById(b.getStrategicRegion());
            if(xE!=null){
                b.setAreaZone(xE.getInt("zone",0));
            }
            // Gdx.app.log("test",b.getRegionId()+":"+b.getBuildType());
            int depLv=m.getRegionDepLv();
            int mineralLv=m.getRegionMineralLv();
            int oilLv=m.getRegionOilLv();
            int foodLv=m.getRegionFoodLv();
            if (index != -1&&b.getBuildType()!=2) {
                b.setLegionIndex(historyDAO.historyDatas.get(index).getNowCountryIndex());
                b.setCityLvNow(depLv);

            } else {

                b.setLegionIndex(0);
                b.setCityLvNow(0);
                b.setCityHpMax(0);
                b.setCityHpNow(0);
            }
            if(m.getregionAreaId()!=0){//为带名字的城市
                b.setBuildName(m.getregionAreaId());
            }

            b.setFoodLvNow(foodLv);
            b.setDevelopLv(depLv);
            b.setMineralLv(mineralLv);
            b.setOilLv(oilLv);
            //存储地名以设置首都
            if (b.getBuildName() > 0) {
                buildNameMap.put(b.getBuildName(), b.getRegionId());
            }
            if (b.buildType == 2) {
                b.setBuildWonder(0);
            }else if (b.buildType == 1) {
                b.setBuildWonder(3);//1金2木3水4火5土
            } else {
                int buildV = mapBinDAO.getMapbin().get(b.getRegionId()).getRegionMineralLv();
                if (buildV == 2 || buildV == 5) {
                    if (ComUtil.ifGet(70)) {
                        b.setBuildWonder(4);
                    } else {
                        b.setBuildWonder(5);
                    }
                } else if (buildV == 1 || buildV == 4) {
                    if (ComUtil.ifGet(80)) {
                        b.setBuildWonder(1);
                    } else {
                        b.setBuildWonder(2);
                    }
                } else if (buildV == 3) {
                    b.setBuildWonder(3);
                } else if (buildV == 0) {
                    buildV = mapBinDAO.getMapbin().get(b.getRegionId()).getRegionDepLv();
                    if (buildV > 4) {
                        b.setBuildWonder(1);
                    } else if (buildV > 2 || (b.buildName != 0)) {
                        if (ComUtil.ifGet(70)) {
                            b.setBuildWonder(4);
                        } else {
                            b.setBuildWonder(5);
                        }
                    } else {
                        b.setBuildWonder(2);
                    }
                }
            }
            b.setCityStability(60);
            b.setNulIndex1(-1);
            b.setNulIndex2(-1);
            b.setNulIndex3(-1);
            b.setNulIndex4(-1);
            b.setAirIndex1(-1);
            b.setAirIndex2(-1);
            b.setAirIndex3(-1);
            b.setAirIndex4(-1);
            //归属全部放入terrainData里
            hexagonDatas.get(b.getRegionId()).setLegionIndexValue(b.legionIndex);
            buildRDatas.put(b.getRegionId(),b);
            tempIntIntMap.put(b.regionId, b.getCityLvNow());
            //存储首都以用来选取首都
            if (b.legionIndex > 0) {
                if (legionLargestCityMap.containsKey(b.legionIndex)) {
                    if (b.getBuildType()!=2&&b.cityLvNow > tempIntIntMap.get(legionLargestCityMap.get(b.legionIndex, 0), 0)) {
                        legionLargestCityMap.put(b.legionIndex, b.getRegionId());
                    }
                } else {
                    legionLargestCityMap.put(b.legionIndex, b.getRegionId());
                }
            }
        }

        game.tempUtil.disposeTempIntIntMap(tempIntIntMap);
        //initBuildIndexMap();
        // 随机生成首都
        int cregion=0;
        for (int i=0;i<legionDatas.size;i++) {
            LegionData l=legionDatas.get(i);
            /*if(l.getBuildPolicy()==30){
                int c111=0;
            }*/
            cregion=buildNameMap.get(l.getCapitalId(), -1);
            if (l.getCapitalId() >=0 && cregion!=-1 && l.getLegionIndex() == getLegionIndexByRegion(cregion)) {
                l.setCapitalId(cregion);
            } else if (legionLargestCityMap.containsKey(l.getLegionIndex())) {
                l.setCapitalId(legionLargestCityMap.get(l.getLegionIndex(), -1));
            }
        }
        buildNameMap = null;
        legionLargestCityMap = null;

        //添加默认将军
        int generalIndex=0;
        GeneralData g=new GeneralData();
        //设置为情报官
        g.setGeneralId(0);g.setState(0);

        generalIDatas.put(g.getGeneralIndex(),g);
        this.historyData=historyDAO;
        if(/*defStage.getBoolean("ifAutoTech",false)*/masterData.getPlayerLegionIndex()!=0){
            initAllBuildData(getAge());
            setAutoTech();
        }


        initLegionColor();
        g.setLegionIndex(masterData.playerLegionIndex);
        checkCapital();
        initBtl();
        if(/*defStage.getBoolean("ifCreateArmy",false)*/true) {
            //创建默认单位
            createInitUnit(3+getAge());
            for(LegionData l:legionDatas){
                createGeneralUnit(l.getLegionIndex(),0);
            }
        }
        btlInitForEmpire(empireE);
        checkResrource();
        initCardNumAndCost();
        //第一次加载帝国时保存
        //saveSmapBin(game.getStageId(),true);

        game.save(1);
        game.gameConfig.playerConfig.putBoolean(stageId + "_ifSave", true);
        game.gameConfig.playerConfig.flush();

    }

    //incomeCount 轮回次数 ifCreateGeneralUnit 是否创建将军单位
    public void createUnit(int incomeCount,boolean ifCreateGeneralUnit){
        boolean ifInPlayerRound=game.sMapScreen!=null&&roundState==0;
        createInitUnit(incomeCount);
        if(ifCreateGeneralUnit){
            for(LegionData l:legionDatas){
                createGeneralUnit(l.getLegionIndex(),0);
            }
        }
        roundCountryIndex=-1;
        if(ifInPlayerRound){
            if(masterData.getPlayerMode()==2){
                initAllFogByRegion();
            }else{
                initAllFog();
            }
            initAllHexagonVirAttribute();
            game.sMapScreen.resetPlayerStar();
        }
    }



    public void createBtlForBlankConquest(MainGame game, Fb2History historyDAO, Fb2Map mapBinDAO, int stageId, XmlReader.Element defStage, XmlReader.Element defHistory, int year) {
        this.game = game;
        mapBinDAO.btl=this;
        this.roundState=1;
        //int year=defStage.getInt("year");
        //boolean ifBattle=defStage.getBoolean("ifBattle");
        boolean ifLoop=isLoop();
        IntIntMap buildNameMap = new IntIntMap();//存储地名 用来设置首都  name:region
        IntIntMap legionLargestCityMap = new IntIntMap(); //存储最大城市,用来给没有固定首都的国家设置首都
        //mapBin.checkName(defHistory.getInt("mapId"));
        initFb2Smap();
        // Gdx.app.log("defHistory",defHistory.toString());
        this.masterData.setMapId(defHistory.getInt("mapId"));
        this.masterData.setMapLandBase(game.resGameConfig.defaultLandBase);
        this.masterData.setStartX(0);
        this.masterData.setStartY(0);
        this.masterData.setIfColor(1);
        this.masterData.setIfFog(1);
        this.masterData.setIfChief(0);
        this.masterData.setWidth(mapBinDAO.mapWidth);
        this.masterData.setHeight(mapBinDAO.mapHeight);
        this.masterData.setBeginYear(year);
        this.masterData.setRoundForYear(game.resGameConfig.freeConquestRoundForYear*(1+getAge()));//defStage.getInt("roundForYear");
        this.masterData.setGameEndYear(0);//defStage.getInt("nextYear")
        this.masterData.setNextStageId(0);
        this.masterData.setHistoryId(defHistory.getInt("id"));
        this.masterData.setPlayerMode(1);
        if(this.masterData.getNextStageId()==0){
            this.masterData.setRoundMax(defHistory.getInt("roundMax"));
        }else {
            this.masterData.setRoundMax((this.masterData.gameEndYear-year)*this.masterData.getRoundForYear());
        }


        this.masterData.setBtlType(defStage.getInt("btlType"));
        this.masterData.setGameDifficulty(1);




        if(defStage.getBoolean("ifHBuff",false)){
            this.masterData.setIfWeather(1);
        }




        this.stageId = stageId;

        this.worldData=new WorldData();

        this.worldData.worldAge = game.gameMethod.getAgeByYear(year);


        //获取country转换map,中立国是0  存在的国家:id序列  country:li
        HashMap<Integer, Integer> transCountryMap = historyDAO.getCountryTransMap(year);
        int regionCount = historyDAO.masterData.getRegionCount();
        Array<XmlReader.Element> countrys = game.gameConfig.getDEF_COUNTRY().e.getChildrenByName("country");
        for (Integer k : transCountryMap.keySet()) {
            XmlReader.Element country = countrys.get(k);
            LegionData l = new LegionData();
            l.setLegionIndex(transCountryMap.get(k));
            l.setCountryId(country.getInt("id"));
            int internIndex = l.getLegionIndex();
            if (country.getInt("suzerainId") == 0) {
                internIndex = l.getLegionIndex();
            } else if (transCountryMap.containsKey(country.getInt("suzerainId"))) {
                internIndex = transCountryMap.get(country.getInt("suzerainId"));
                l.setSuzerainLi(internIndex);
            } else {
                internIndex = 0;
            }
            l.setInternIndex(internIndex);


            l.setTargetAreaZone(country.getInt("targetArea",0));

            l.setMedal(country.getInt("medal",0));
            l.setLifeBonus(100);
            l.setTaxBonus(100);
            l.setRGeneralId(country.getInt("randomGeneralId",0));
            int capital = 0;
            l.setCivilSpec(country.getInt("civilSpec"));
            if (country.getInt("capital") > 0) {
                capital = country.getInt("capital");
            }
            l.setCapitalId(capital);
            l.setRed(country.getInt("r"));
            l.setGreen(country.getInt("g"));
            l.setBlue(country.getInt("b"));
            l.setAlpha(country.getInt("a"));
            l.setLegionFeature1(country.getInt("feature1"));
            l.setLegionFeatureLv1(country.getInt("featureLv1"));
            l.setLegionFeature2(country.getInt("feature2"));
            l.setLegionFeatureLv2(country.getInt("featureLv2"));
            l.setLegionFeature3(country.getInt("feature3"));
            l.setLegionFeatureLv3(country.getInt("featureLv3"));
            l.setLevel(country.getInt("level"));
            legionDatas.add(l);
        }
        //对legion进行排序
        legionDatas.sort();

        /*if(masterData.getPlayerMode()==0){
            String[] stageCountrys=defStage.get("country").split(",");
            String[] stageCamps=defStage.get("camp").split(",");
            int countryId,camp;
            for(int i=0,iMax=stageCountrys.length;i<iMax;i++){
                countryId=Integer.parseInt(stageCountrys[i]);
                camp=Integer.parseInt(stageCamps[i]);
                *//*if(countryId==33){
                    Gdx.app.log("createBtlForBlankConquest","test");
                }*//*
                LegionData l=legionDatas.get(transCountryMap.get(countryId));
                LegionData ml;
                if(camp==0){
                    l.setInternIndex(l.getLegionIndex());
                    l.setSuzerainLi(0);
                }else {
                    ml=legionDatas.get(transCountryMap.get(camp));
                    if(ml.internIndex!=0){
                        l.setInternIndex(ml.getInternIndex());
                        if(l.getSuzerainLi()>=0){
                            LegionData sl=l.getSuzerainLegionData();
                            if(sl.getInternIndex()!=ml.getInternIndex()){
                                l.setSuzerainLi(0);
                            }
                        }
                    }
                }
            }
        }*/

        //mapBin.initCoastBorderByRegion();
        //地块坐标
        /*for (MapBinDAO.MapHexagon m : mapBin.mapHexagons) {
            HexagonData hexagonData = new HexagonData();
            hexagonData.setBlockType(m.getBlockType());
            hexagonData.setBackTile(m.getBackTile());
            hexagonData.setBackIdx(m.getBackIdx());
            hexagonData.setBackRefX(m.getBackRefX());
            hexagonData.setBackRefY(m.getBackRefY());
            hexagonData.setForeTile(m.getForeTile());
            hexagonData.setForeIdx(m.getForeIdx());
            hexagonData.setForeRefX(m.getForeRefX());
            hexagonData.setForeRefY(m.getForeRefY());
            hexagonData.setTilePass(m.getTilePass());
            hexagonData.setfClimateZone(0);
            hexagonData.setRegionId(m.getRegionId());
            hexagonData.setfClimateId(0);//m.getTempClimateId()
            hexagonData.setHexagonIndex(hexagonDatas.size);
            hexagonData.setLegionIndex(0);
            hexagonData.setIfFog(0);
            //TODO
           *//*if (mapBin.getCoastGrid().contains(hexagonData.getHexagonIndex())) {
                hexagonData.setIfCoast(MapBinDAO.getFBorderIdByString(m.getBorder()));
            }*//*
            hexagonData.setIfCoast(m.ifCoast);
            hexagonDatas.add(hexagonData);
        }*/
        hexagonDatas=mapBinDAO.mapHexagons;
        initRegionHexagonMapTIA1();
        initSRRegionMapTIA1();
        IntArray tempIds = new IntArray();


        //生成外交数据
        for (int i1=0;i1<legionDatas.size;i1++) {
            LegionData l=legionDatas.get(i1);
            for (int i = l.getLegionIndex(); i < legionDatas.size; i++) {
                ForeignData f = new ForeignData();
                f.setSourceLegionIndex(l.legionIndex);
                f.setTargetLegionIndex(legionDatas.get(i).legionIndex);
                f.setFavorValue(initToGetFavorByLi(f.sourceLegionIndex, f.targetLegionIndex));
                foreignDatas.add(f);
            }
        }
        for (int i1=0;i1<legionDatas.size;i1++) {
            LegionData l=legionDatas.get(i1);
            if(l.getSuzerainLi()>=0){
                l.setStability(ComUtil.getRandom(10,60));
            }
        }

        //地块连接
        initConnectDatas();

        IntIntMap tempIntIntMap=game.tempUtil.getTempIntIntMap();

        //生成建筑数据  建筑数据按照地块连接顺序和数量生成
        //for (int i = 0, iMax = connectDatas.size; i < iMax; i++) {
        //Iterator<IntMap.Entry<int[]>> it = connectDatas.iterator();
        // while (it.hasNext()) {
        Iterator<IntMap.Entry<ConnectData>> it = connectDatas.iterator();
        while (it.hasNext()) {
            BuildData b = new BuildData();
            b.initBuildData();
            b.setBuildIndex(buildRDatas.size());
            int c = it.next().key;
            // int c =connectDatas.get(i).getRegionMainIndex();
            int index = historyDAO.getHistoryIndexBySort(year, c);
            if(index!=-1){
                b.setRegionId(historyDAO.historyDatas.get(index).getRegionIndex());
            }else {
                b.setRegionId(c);
            }
           /* if(b.getRegionId()==7928){
                Gdx.app.log("test",b.getRegionId()+":"+mapBin.ifCoastCity(b.getRegionId()));
            }*/

            //判断城市类型 0城市 1海港 2海洋 3沿海城市
            b.resetBuildType();
            //  Gdx.app.log("test",b.getRegionId()+":"+b.getBuildType());



            if (index != -1&&b.getBuildType()!=2) {
                b.setLegionIndex(transCountryMap.get(historyDAO.historyDatas.get(index).getNowCountryIndex()));
                b.setCityLvNow(mapBinDAO.getMapbin().get(b.getRegionId()).getRegionDepLv());
            } else {
                b.setLegionIndex(0);
                b.setCityLvNow(0);
                b.setCityHpMax(0);
                b.setCityHpNow(0);
            }
            b.setFoodLvNow(ComUtil.getRandom(0,5-b.getCityLvNow()));
            b.setDevelopLv(ComUtil.limitValue(b.getCityLvNow()*2-ComUtil.getRandom(0,1),1,10));
            b.setBuildName(mapBinDAO.getMapbin().get(b.getRegionId()).getregionAreaId());
            b.setStrategicRegion(mapBinDAO.getMapbin().get(b.getRegionId()).getRegionStrategicRegion());
            b.setClimateZone(mapBinDAO.getMapbin().get(b.getRegionId()).getRegionClimatZone());
            //存储地名以设置首都
            if (b.getBuildName() > 0) {
                buildNameMap.put(b.getBuildName(), b.getRegionId());
            }

            if (b.buildType == 2) {
                b.setBuildWonder(0);
            }else if (b.buildType == 1) {
                b.setBuildWonder(3);//1金2木3水4火5土
            } else {
                int buildV = mapBinDAO.getMapbin().get(b.getRegionId()).getRegionMineralLv();
                if (buildV == 2 || buildV == 5) {
                    if (ComUtil.ifGet(70)) {
                        b.setBuildWonder(4);
                    } else {
                        b.setBuildWonder(5);
                    }
                } else if (buildV == 1 || buildV == 4) {
                    if (ComUtil.ifGet(80)) {
                        b.setBuildWonder(1);
                    } else {
                        b.setBuildWonder(2);
                    }
                } else if (buildV == 3) {
                    b.setBuildWonder(3);
                } else if (buildV == 0) {
                    buildV = mapBinDAO.getMapbin().get(b.getRegionId()).getRegionDepLv();
                    if (buildV > 4) {
                        b.setBuildWonder(1);
                    } else if (buildV > 2 || (b.buildName != 0)) {
                        if (ComUtil.ifGet(70)) {
                            b.setBuildWonder(4);
                        } else {
                            b.setBuildWonder(5);
                        }
                    } else {
                        b.setBuildWonder(2);
                    }
                }
            }

            b.setNulIndex1(-1);
            b.setNulIndex2(-1);
            b.setNulIndex3(-1);
            b.setNulIndex4(-1);
            b.setAirIndex1(-1);
            b.setAirIndex2(-1);
            b.setAirIndex3(-1);
            b.setAirIndex4(-1);
            //归属全部放入terrainData里
            hexagonDatas.get(b.getRegionId()).setLegionIndexValue(b.legionIndex);
            buildRDatas.put(b.getRegionId(),b);
            tempIntIntMap.put(b.regionId, b.getCityLvNow());
            //存储首都以用来选取首都
            if (b.legionIndex > 0) {
                if (legionLargestCityMap.containsKey(b.legionIndex)) {
                    if (b.getBuildType()!=2&&b.cityLvNow > tempIntIntMap.get(legionLargestCityMap.get(b.legionIndex, 0), 0)) {
                        legionLargestCityMap.put(b.legionIndex, b.getRegionId());
                    }
                } else {
                    legionLargestCityMap.put(b.legionIndex, b.getRegionId());
                }
            }
        }

        game.tempUtil.disposeTempIntIntMap(tempIntIntMap);
        //initBuildIndexMap();
        // 随机生成首都
        int cregion=0;
        for (int i=0;i<legionDatas.size;i++) {
            LegionData l=legionDatas.get(i);
            /*if(l.getBuildPolicy()==30){
                int c111=0;
            }*/
            cregion=buildNameMap.get(l.getCapitalId(), -1);
            if (l.getCapitalId() >=0 && cregion!=-1 && l.getLegionIndex() == getLegionIndexByRegion(cregion)) {
                l.setCapitalId(cregion);
            } else if (legionLargestCityMap.containsKey(l.getLegionIndex())) {
                l.setCapitalId(legionLargestCityMap.get(l.getLegionIndex(), -1));
            }
        }
        buildNameMap = null;
        legionLargestCityMap = null;

        initBtl();
        initTradeDatas();
        updAllRTask();
        refreshTrade();
        resetZone();
    }

    private boolean isLoop() {
        if(mapbin!=null){
            if(mapbin.isLoop()&&masterData.getWidth()==mapbin.getMapWidth()){
                return true;
            }
        }else {
            XmlReader.Element mapE=game.gameConfig.getDEF_MAP().getElementById(masterData.getMapId());
            if(mapE!=null&&mapE.getBoolean("ifLoop",false)&&masterData.getWidth()==mapE.getInt("width",0)){
                return true;
            }
        }
        return false;
    }

    private void initTradeDatas() {
        tradeDatas.clear();
        //初始化贸易数据
        for (int i1=0;i1<legionDatas.size;i1++) {
            LegionData l=legionDatas.get(i1);
            if (tradeDatas == null) {
                tradeDatas = new Array<>();
            }
            TradeData t = new TradeData();
            t.initTradeData();
            t.setTradeIndex(i1);
            t.setLegionIndex(l.getLegionIndex());
            tradeDatas.add(t);
        }
    }


    //初始化帝国的游戏设定  使用该方法前应将 gameEpisode+1;
    private boolean btlInitForEmpire(XmlReader.Element e) {
        if(e==null){
            e= game.gameConfig.getEmpireXmlE(stageId,masterData.getGameEpisode());
        }
        if(e!=null){
            // taskDatas.clear();
            masterData.setBeginYear(e.getInt("year"));
            masterData.setRoundMax(e.getInt("round"));
            masterData.setRoundNow(0);
            masterData.setGameDifficulty(e.getInt("difficulty"));
            // masterData.setGameDifficulty(e.getInt("difficulty"));
            XmlReader.Element oldCountryE=game.gameConfig.getDEF_COUNTRY().getElementById(masterData.getPlayerLegionIndex());
            int nextYear=oldCountryE.getInt("nextTime");
            int nextLi=oldCountryE.getInt("nextId");
            String resetCountryUnityPotion=e.get("resetCountryUnityPotion","-1");
            if(!resetCountryUnityPotion.equals("-1")){
                String[] countryIds =resetCountryUnityPotion.split(",");
                int c;
                for (int i = 0; i < countryIds.length; i++) {
                    if (ComUtil.isNumeric(countryIds[i])) {
                        c = Integer.parseInt(countryIds[i]);
                      LegionData l=getLegionByCountry(c,true);
                      if(l!=null){
                          /**
                           * @result armyPotionType {@link #getLegionArmyData} 获取单位的类型 0仅领土 1核心领土(包括首都) 2主要领土 3仅首都 4除领土,首都以外的陆地区域 5除核心领土以外的区域
                           * @result hexagonType {@link #getLegionLandCanMoveHexagons} 获取空地的类型 0仅领土 1核心领土(包括首都) 2主要领土 3仅首都 4除领土,首都以外的陆地区域 5除核心领土以外的区域
                           */
                          ai_teleportLegionUnitForLandSRRegion(l,4,1,0,false);
                      }
                    }
                }
            }
            if(nextLi!=-1&&nextYear!=-1&&nextYear<=masterData.getBeginYear()){
                //   Iterator<IntMap.Entry<BuildData>> itB = buildRDatas.iterator();
                // while (itB.hasNext()) {
                //   BuildData b = itB.next().value;
                for(int bi=0;bi<buildRDatas.size();bi++) {
                    BuildData b=buildRDatas.getByIndex(bi);
                    if(b.getLegionIndex()==masterData.getPlayerLegionIndex()){
                        setRegionAllLegionIndex(b.getRegionId(),nextLi,true);
                    }
                }
            }
            int pc=e.getInt("playerCountry");
            if(pc!=0){
                LegionData pl=getLegionByCountry(pc,true);
                if(pl!=null){
                    int li=pl.getLegionIndex();
                    masterData.setPlayerLegionIndex(li);
                }
            }
            LegionData pl=getLegionByCountry(pc,false);

            int enemyIntern=0;
            String enemyCountrys=e.get("enemyCountry");
            int rate=DefDAO.getRateByDifficut(masterData.getGameDifficulty());

            for(int i=1,iMax=legionDatas.size;i<iMax;i++){
                LegionData l=legionDatas.get(i);
                if(l.getLegionIndex()==masterData.getPlayerLegionIndex()){
                    int tax=e.getInt("tax",0);
                    if(tax!=0){
                        pl.setTaxBonus(tax);
                    }else {
                        l.setTaxBonus(100);
                    }
                    l.setInternIndex(masterData.getPlayerLegionIndex());
                }else if(ComUtil.ifHaveValueInStr(enemyCountrys,l.getCountryId())){
                    if(enemyIntern<=0){
                        enemyIntern=l.getLegionIndex();
                        enemyIntern=enemyIntern==0?1:enemyIntern;
                    }
                    l.setInternIndex(enemyIntern);
                    l.setSuzerainLi(0);
                    l.setTaxBonus(rate);
                }else if(ComUtil.ifHaveValueInStr(e.get("freeCountry"),l.getCountryId())){
                    l.setInternIndex(l.getLegionIndex());
                    l.setSuzerainLi(0);
                    l.setTaxBonus(rate);
                }else if(ComUtil.ifHaveValueInStr(e.get("dependency"),l.getCountryId())){
                    l.setInternIndex(masterData.playerLegionIndex);
                    l.setSuzerainLi(masterData.playerLegionIndex);
                    l.setTaxBonus(rate/2);
                }else if(ComUtil.ifHaveValueInStr(e.get("allyCountry"),l.getCountryId())){
                    l.setInternIndex(masterData.playerLegionIndex);
                    l.setSuzerainLi(0);
                    l.setTaxBonus(rate/2);
                }else{
                    l.setInternIndex(0);
                }
            }
            setAllLegionTechByPlayerTech(masterData.getGameDifficulty()<3);

            String resetCountrys=e.get("resetCountry");
            allArmyDataResetUnitGroup(false,masterData.getGameDifficulty());

            //重置世界
            if(masterData.getGameEpisode()!=0){
                if( historyData==null){
                    //    XmlReader.Element defHistory =game.gameConfig.getDEF_HISTORY().getElementById(masterData.getHistoryId());
                    // historyData = new Fb2History(game.getGameFramework().getBtByName(defHistory.get("name")));
                    historyData = game.getGameFramework().getHistory(masterData.getHistoryId(),getNowYear());
                }
                Array rs=new Array();
                for(int bi=0;bi<buildRDatas.size();bi++) {
                    BuildData b=buildRDatas.getByIndex(bi);
                    Fb2History.HistoryData h=historyData.getHistoryData(getNowYear(),b.getRegionId());
                    if(h.getNowCountryIndex()!=0&&(b.getLegionIndex()!=masterData.getPlayerLegionIndex()|| ComUtil.ifHaveValueInStr(resetCountrys,h.getNowCountryIndex()))){
                        setRegionAllLegionIndex(b.getRegionId(),h.getNowCountryIndex(),true);
                    }
                }
                rs.clear();
                rs=null;
            }/**/
            if( historyData==null){
                XmlReader.Element defHistory =game.gameConfig.getDEF_HISTORY().getElementById(masterData.getHistoryId());
                // historyData = new Fb2History(game.getGameFramework().getBtByName(defHistory.get("name")));
                historyData = game.getGameFramework().getHistory(masterData.getHistoryId(),getNowYear());
            }
            boolean ifH=!resetCountrys.equals("0");
            // Iterator<IntMap.Entry<BuildData>> itB = buildRDatas.iterator();
            //while (itB.hasNext()) {
            //  BuildData b = itB.next().value;
            for(int bi=0;bi<buildRDatas.size();bi++) {
                BuildData b=buildRDatas.getByIndex(bi);
                Fb2History.HistoryData h=historyData.getHistoryData(masterData.getBeginYear(),b.getRegionId());
                if(h!=null){
                    if(ifH&&ComUtil.ifHaveValueInStr(resetCountrys,h.getNowCountryIndex())){
                        setRegionAllLegionIndex(b.getRegionId(),h.getNowCountryIndex(),true);
                    }else if(!b.isPlayer()){
                        setRegionAllLegionIndex(b.getRegionId(),h.getNowCountryIndex(),true);
                    }
                }
            }
            int createArmyCount=e.getInt("createArmyCount",0);
            if(createArmyCount>0){
                createInitUnit(createArmyCount);
            }
            createArmyCount=e.getInt("createGeneralCount",0);
            if(createArmyCount>0){
                for(LegionData l:legionDatas){
                    if(l.varRegionCount==0||l.getInternIndex()==0){continue;}
                    createGeneralUnit(l.getLegionIndex(),createArmyCount);
                }
            }
            //检测更新将军
            checkGeneral();
            historyData=null;
            //城市设计

            //重置所有的据点
            for(int bi=0;bi<buildRDatas.size();bi++) {
                BuildData b=buildRDatas.getByIndex(bi);
                b.setHinge(0);
            }
            String victoryTarget=e.get("victoryTarget","-1");
            int victoryType=e.getInt("victoryType");
            masterData.setVictoryType(victoryType);
            if(ComUtil.isNumeric(victoryTarget)&&victoryType!=1&&victoryType!=5){
                masterData.setVictoryTarget(Integer.parseInt(victoryTarget));
            }else if(victoryType==1||victoryType==5){
                int hc=0;
                //   Iterator<IntMap.Entry<BuildData>> itB2 = buildRDatas.iterator();
                // while (itB2.hasNext()) {
                //   BuildData b = itB2.next().value;
                for(int bi=0;bi<buildRDatas.size();bi++) {
                    BuildData b=buildRDatas.getByIndex(bi);
                    if(ComUtil.ifHaveValueInStr(victoryTarget,b.getBuildName())){
                        b.setHinge(1);hc++;
                    }else{
                        b.setHinge(0);
                    }
                    if( b.buildActor!=null){
                        b.buildActor.updPoint();
                    }
                }
                if(hc==0){
                    masterData.setVictoryType(0);
                }
            }
            return true;
        }else{
            return false;
        }
    }

    //设定所有国家的科技以玩家科技为准
    private void setAllLegionTechByPlayerTech(Boolean ifRandom) {
        LegionData pl=getPlayerLegionData();

        for(int i=0;i<legionDatas.size;i++){
            LegionData l=legionDatas.get(i);
            if(!ifAllyByLi(l.getLegionIndex(),pl.getLegionIndex())){
                if(ifRandom){
                    l.setTechByLegionData(pl,true,masterData.getGameDifficulty());
                }else{
                    l.setTechByLegionData(pl,false,masterData.getGameDifficulty());
                }
            }
        }

    }




    //生成剧情任务
    private void addPlotTask(int taskIndex, int value) {
        if(taskDatas==null){
            taskDatas=new Array<>();
        }
        TaskData t=new TaskData();
        switch (taskIndex){

            case 1000:
                t.setTaskIndex(taskIndex);
                t.setCountNow(value);
                t.setCountMax(value);
                t.setTaskType(1);
                t.setTaskRound(masterData.roundMax);
                break;
            case 1001:
                t.setTaskIndex(taskIndex);
                t.setCountNow(value);
                t.setCountMax(value);
                t.setTaskType(1);
                t.setTaskRound(masterData.roundMax);
                break;
            case 1002:
                t.setTaskIndex(taskIndex);
                t.setCountNow(0);
                t.setCountMax(value);
                t.setTaskType(1);
                t.setTaskRound(masterData.roundMax);
                break;
        }
        taskDatas.add(t);
    }
    //checkCountry 检查region的所属是不是checkCountry中的一个
    public void setRegionAllLegionIndexByCMD(int region,String checkCountry,int country,boolean mustHaveRegion,boolean ifChangeAll){
        if(region==-1||country==-1){
            Gdx.app.error("setRegionAllLegionIndexByCMD 1",region+":"+country);
            return;
        }
        LegionData l=getLegionByCountry(country,mustHaveRegion);
        if(l==null){
            Gdx.app.error("setRegionAllLegionIndexByCMD 2",region+":"+country);
            return;
        }
        BuildData b=getBuildDataByRegion(region);
        if(b!=null&&(checkCountry.equals("-1")||(ComUtil.ifHaveValueInStr(checkCountry,b.getCountryId())))){
            setRegionAllLegionIndex(region,l.getLegionIndex(),ifChangeAll);
        }
    }


    public void setSRRegionAllLegionIndexByCMD(int srRegion,String checkCountry,int country,boolean mustHaveRegion,boolean ifChangeAll){
        if(srRegion==-1||country==-1){
            Gdx.app.error("setRegionAllLegionIndexByCMD 1",srRegion+":"+country);
            return;
        }
        LegionData l=getLegionByCountry(country,mustHaveRegion);
        if(l==null){
            Gdx.app.error("setRegionAllLegionIndexByCMD 2",srRegion+":"+country);
            return;
        }
        IntArray rs=srRegionMap.get(srRegion);
        if(rs!=null&&rs.size>0){
            for(int i=0;i<rs.size;i++){
                int region=rs.get(i);
                BuildData b=getBuildDataByRegion(region);
                if(b!=null&&(checkCountry.equals("-1")||(ComUtil.ifHaveValueInStr(checkCountry,b.getCountryId())))){
                    setRegionAllLegionIndex(region,l.getLegionIndex(),ifChangeAll);
                }
            }
        }
    }



    //完全修改地区归属
    public void setRegionAllLegionIndex(int region, int li,boolean ifChangeAll) {
        IntArray hexagons= regionHexagonMap.get(region);
        ArmyData a;
        FortData f;
        BuildData b=getBuildDataByRegion(region);
        int h;
        for(int i=0;i<hexagons.size;i++){
            h=hexagons.get(i);
            a=getArmyDataByHexagon(h);
            if(a!=null){
                if(ifChangeAll){
                    a.setLegionIndex(li);
                }else if(a.getLegionIndex()==b.getLegionIndex()){
                    a.setLegionIndex(li);
                }
                if(a.getGeneralIndex()>0){
                    a.transGeneral();
                    if(ifSystemEffective(21)){
                        a.resetSkill();
                    }
                }
                if(a.armyActor!=null){
                    a.armyActor.updHpColor();
                }else  if(a.ifNeedCreateActor()){
                    a.createActor();
                }
            }
            f=getFortDataByHexagon(h);
            if(f!=null){
                if(f.getLegionIndex()!=li&&f.getFortId()!=5005&&ComUtil.ifGet(game.resGameConfig.obtainFortChance)){
                    f.setLegionIndex(li);
                }else {
                    fort_remove(h);
                }
            }
        }
        b.setLegionIndex(li);
        if( b.buildActor!=null&&(roundState==0||(roundState==4&&b.isPlayer()))){
            b.buildActor.update();
        }
        setFogByRegionTIA3(b.getRegionId());
    }


    //设置某一个区域的叛军全部给与li
    public void setRegionAllRebellLegionIndex(int region, int li) {
        IntArray hexagons= regionHexagonMap.get(region);
        ArmyData a;
        FortData f;
        BuildData b=getBuildDataByRegion(region);
        int h;
        for(int i=0;i<hexagons.size;i++){
            h=hexagons.get(i);
            a=getArmyDataByHexagon(h);
            if(a!=null){
                if(a.getLegionIndex()==0){
                    a.setLegionIndex(li);
                }
                if(a.getGeneralIndex()>0){
                    a.transGeneral();
                    if(ifSystemEffective(21)){
                        a.resetSkill();
                    }
                }
                if(a.ifNeedCreateActor()){
                    a.createActor();
                }
            }
            f=getFortDataByHexagon(h);
            if(f!=null){
                if(f.getLegionIndex()!=li&&f.getFortId()!=5005&&ComUtil.ifGet(game.resGameConfig.obtainFortChance)){
                    f.setLegionIndex(li);
                }else {
                    fort_remove(h);
                }
            }
        }
        b.setLegionIndex(li);
        if( b.buildActor!=null&&(roundState==0||(roundState==4&&b.isPlayer()))){
            b.buildActor.update();
        }
        setFogByRegionTIA3(b.getRegionId());
    }

    //判断是否是水坑(水道,即周围2范围内水的范围)
    private boolean ifPuddle(int hexagon){
        // IntArray getIdsInRange(int hexagon,int legionIndex,int minRange,  int maxRange, boolean ifOnlyRegion,int targetRegionType,boolean ifAllyLimit,int targetType,boolean ifSelfBuildSeaLimit,boolean ifArmyCanCarryAir,boolean ifHaveSelf, IntArray rsIntArray) ;
        IntArray tempIntArray=game.tempUtil.getTempIntArray();
        tempIntArray=getIdsInRange(hexagon,-1,1,2,false,1,false,0,false,false,false,false,tempIntArray);
        int gc=getAroundGridCountIA1(hexagon,6);
        if(tempIntArray.size>3&&gc>1){
            game.tempUtil.disposeTempIntArray(tempIntArray);
            return false;
        }else{
            game.tempUtil.disposeTempIntArray(tempIntArray);
            return true;
        }

    }

    private boolean ifCoastCity(int regionId) {
        IntArray rs= regionHexagonMap.get(regionId);
        /*for(int i:rs.items){
            if(hexagonDatas.get(i).getIfCoast()>0){
                return true;
            }
        }*/
        for(int i=0;i<rs.size;i++){
            if(hexagonDatas.get(rs.get(i)).getBlockType()==1&&!ifPuddle(rs.get(i))){
                return true;
            }
        }
        return false;
    }


    public void takeHBuffTIA1(String countryStr,boolean  ifPlayer, int eventId, int fucntion,int count,int chance,String value, boolean checkPlayer) {//XmlReader.Element hBuff hBuff.get("country") hBuff.getBoolean("ifPlayer",false); hBuff.getInt("eventId",0) hBuff.getInt("function", 0), hBuff.getInt("count", 0), hBuff.getInt("chance", 0), hBuff.get("value", "0")
       /* if(fucntion==3001){
            int s=0;
        }*/

        String[] countryIds =countryStr.split(",");
        // boolean ifPlayer=
        //tempIntArray1.clear();
        IntArray rs=game.tempUtil.getTempIntArray();
        int c, li;
        for (int i = 0; i < countryIds.length; i++) {
            if (ComUtil.isNumeric(countryIds[i])) {
                c = Integer.parseInt(countryIds[i]);
                rs.add(c);
            }
        }
        //XmlReader.Element buff = game.gameConfig.getDEF_CZONE().getElementById(hBuff.get("buffId"));
        boolean anyC = false;
        boolean ifEvent=eventId!=0;

        if ((countryIds.length > 0 && countryIds[0].equals("-1"))||countryStr.equals("-1")) {
            anyC = true;
        }
        for (int i=0;i<legionDatas.size;i++) {
            LegionData l=legionDatas.get(i);
            if (anyC || rs.contains(l.getCountryId())) {
                //  Gdx.app.log("takeHBuffTIA1",l.getBuildPolicy()+":"+buff.toString());
                if(checkPlayer) {
                    if (l.getLegionIndex() == masterData.getPlayerLegionIndex()) {
                        if (ifPlayer) {
                            buff(l.getLegionIndex(),fucntion,count,chance,value );
                        }
                    } else {
                        buff(l.getLegionIndex(),fucntion,count,chance,value );
                    }
                }else {
                    buff(l.getLegionIndex(),fucntion,count,chance,value );
                }
                if(ifEvent){
                    takeHEvent(eventId,101,true);
                }
            }
        }
        game.tempUtil.disposeTempIntArray(rs);
        //int buildPolicy,int functionIndex,int count,int chance


    }

    // 根据文化与政治相性得到好感度 普通(40-60) 盟友为70以上 死敌为30以下
    private int initToGetFavorByLi(int a, int b) {
        if(a==0||b==0){
            return 0;
        }else if (a == b) {
            return 100;
        } else if (legionDatas.get(a).getInternIndex() == legionDatas.get(b).getInternIndex()
                ||legionDatas.get(a).suzerainLi == b  ||legionDatas.get(b).suzerainLi == a
        ) {
            return  ComUtil.getRandom(70, 90);
        }
        return ComUtil.getRandom(40, 60);
    }


    private void initLegionColor() {
        if (masterData.ifColor == 1) {
            if (legionColors == null) {
                legionColors = new Array<>();
            } else {
                legionColors.clear();
            }
            if (legionDatas.size <= 0) {
                Gdx.app.error("initLegionColor", "无军团数据");
                try {
                    throw new Exception("无军团数据");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            for (int i=0;i<legionDatas.size;i++) {
                LegionData l=legionDatas.get(i);
                Color c = new Color(l.red / 255f, l.green / 255f, l.blue / 255f, l.alpha / 255f);
                //Gdx.app.log("legionColor","li:"+l.getBuildPolicy()+" c:"+l.getCountryId()+" r:"+l.red+" g:"+l.green+" b:"+l.blue+" a:"+l.alpha);
                legionColors.add(c);
            }
        }
        if (masterData.ifFog == 1) {
            if (legionFogColors == null) {
                legionFogColors = new Array<>();
                //legionInverseColors =new Array<>();
            } else {
                legionFogColors.clear();
                //legionInverseColors .clear();
            }
            for (int i=0;i<legionDatas.size;i++) {
                LegionData l=legionDatas.get(i);
                Color c = new Color(l.red / 255f, l.green / 255f, l.blue / 255f, l.alpha / 255f);
                GameUtil.changeBright(c, 0.5f);
                legionFogColors.add(c);
            }
        }
    }


    public int getRegionId(int hexagon) {
        if (hexagon < 0 || hexagon >= hexagonDatas.size) {
            return -1;
        }
        return hexagonDatas.get(hexagon).getRegionId();
    }


    public int getLegionIndexByHexagon(int hexagon) {
        if (hexagon < 0 || hexagon >= hexagonDatas.size) {
            return -1;
        } else {
            Fb2Map.MapHexagon h=hexagonDatas.get(hexagon);
            if(h.armyData!=null){
                return h.armyData.getLegionIndex();
            }
            if(h.buildData!=null){
                return h.buildData.getLegionIndex();
            }
            if(h.facilityData!=null){
                return h.getRegionHexagonData().getLegionIndex();
            }
            int rs=h.getLegionIndex();
            if (rs < 0 || rs >= legionDatas.size) {
                return -1;
            }
            return rs;
        }
    }

    public LegionData getPlayerLegionData() {
        if(playerLegionData!=null){
            return playerLegionData;
        }else if(playerLegionData==null){
            if(legionDatas==null||legionDatas.size==0){
                return null;
            }else if(masterData.playerLegionIndex<legionDatas.size){
                playerLegionData=legionDatas.get(masterData.playerLegionIndex);
            }else{
                masterData.playerLegionIndex=0;
                playerLegionData=legionDatas.get(0);
            }
        }
        return playerLegionData;
    }

    public BuildData getBuildDataByRegion(int region) {
        if (buildRDatas.containsKey(region)) {
            return buildRDatas.getByKey(region);
        }
        return null;
    }

    public ArmyData getArmyDataByHexagon(int hexagon) {
        if (armyHDatas.containsKey(hexagon)) {
            ArmyData a = armyHDatas.get(hexagon);
            if(a!=null&&a.getArmyHpNow()>0){
                return a;
            }else{
                return null;
            }
        }
        return null;
    }

    public ArmyData getRandomArmyDataByRegion(int region) {
        IntArray h=regionHexagonMap.get(region);
        ArmyData rs;
        IntArray tempIntArray1=game.tempUtil.getTempIntArray();
        for(int i=0,iMax=h.size;i<iMax;i++){
            if(ifHArmyDatasContainsKey(h.get(i))){
                tempIntArray1.add(h.get(i));
            }
        }
        rs=getArmyDataByHexagon(tempIntArray1.random());
        game.tempUtil.disposeTempIntArray(tempIntArray1);
        return rs;
    }


    public boolean buildIfDrawWarLine(int region) {
        BuildData build = getBuildDataByRegion(region);
        if (build != null&&build.getBuildStatus() >0 ) {
            if(masterData.ifFog==1){ //因为会有绘制残留,所以暂时取消
                return false;
              /* if(build.getBuildStatus() ==2){
                   return true;
               }else {
                   return false;
               }*/
            }else {
                return true;
            }
        } else {
            return false;
        }
    }

    public int getCountryByRegion(int hexagon) {

        int li = getLegionIndexByHexagon(getRegionId(hexagon));
        if (li >= 0 && li < legionDatas.size) {
            return legionDatas.get(li).getCountryId();
        }
        return -1;
    }

    public int getCountry(int li) {
        if (li >= 0 && li < legionDatas.size) {
            return legionDatas.get(li).countryId;
        }
        return legionDatas.get(0).countryId;
    }


    public int getLegionIndexByRegion(int hexagon) {
        int li = getLegionIndexByHexagon(getRegionId(hexagon));
        if (li >= 0 && li < legionDatas.size) {
            return li;
        }
        return 0;
    }

    public boolean ifAllyPlayerByLi(int liA) {
        return ifAllyByLi(liA,masterData.playerLegionIndex);
    }

    public boolean ifAllyByLi(int liA, int liB) {
        if(liA==liB){
            return true;
        }
        if(liA <= 0 || liB <= 0||liA>=legionDatas.size||liB>=legionDatas.size){
            return false;
        }
        /*if(masterData.getPlayerMode()==0){
            ForeignData f=getForeignData(liA,liB);
            if ( (legionDatas.get(liA).getInternIndex() == legionDatas.get(liB).getInternIndex()||f.getFavor()>70)) {
                return true;
            }
        }else {//如果非征服模式下,只有阵营不同,和绝对中立的 为可进攻目标,普通中立不可为目标
            LegionData lA=legionDatas.get(liA);
            LegionData lB=legionDatas.get(liB);
            if ( (lA.getInternIndex() == lB.getInternIndex())) {
                return true;
            }else if(lA.getLegionIndex()==0||lB.getLegionIndex()==0){
                return false;
            }else if((lA.getInternIndex()==0||lB.getInternIndex()==0)&&!(lA.isPlayerCommand()||lB.isPlayerCommand())){
                return true;
            }
        }*/

        return  getForeignDegree(liA,liB)==1;
    }


    //征服模式: 两者阵营不同,好感度低于30 则true
    //军团模式: 两者阵营不同,则true
    /*public boolean ifEnemyByLi(int lia,int lib){
        if(lia < 0 || lib < 0){
            return false;
        }
        if(masterData.getPlayerMode()==0){
            ForeignData f=getForeignData(lia,lib);
            if ( (legionDatas.get(lia).getInternIndex() != legionDatas.get(lib).getInternIndex()&&f.getFavor()<30)) {
                return true;
            }
            return false;
        }else{
            if  (legionDatas.get(lia).getInternIndex() != legionDatas.get(lib).getInternIndex()) {
                return true;
            }
            return false;
        }


    }*/


    public boolean ifAllyByHexagon(int hexagonA, int hexagonB) {
        return ifAllyByLi(getLegionIndexByHexagon(hexagonA),getLegionIndexByHexagon(hexagonB));
    }
    public boolean ifAllyPlayerByRegion(int hexagonA) {
        return ifAllyByLi(getLegionIndexByRegion(hexagonA),masterData.getPlayerLegionIndex());
    }

    public boolean ifAllyByRegion(int hexagonA, int hexagonB) {
        return ifAllyByLi(getLegionIndexByHexagon(getRegionId(hexagonA)),getLegionIndexByHexagon(getRegionId(hexagonB)));
    }


    //ExtraType 0无备份 1直接备份 2保留旧存档到备份
    //帝国模式是在生成游戏的时候备份一次备用存档 其他模式都是任意保存的时候都把旧存档备份
    public void saveSmapBin(int stageId,int backupType) {
        String stageName = game.gameConfig.getDEF_STAGE().getElementById(stageId).get("name");
        if (!ComUtil.isEmpty(stageName)) {
           /* if(!ifExtra){//如果不保存,则把前一个存档改名成_e
             FileHandle ef=   Gdx.files.local(ResDefaultConfig.Path.SaveFolderPath + stageName+"_e.btl");
                FileHandle f= Gdx.files.local(ResDefaultConfig.Path.SaveFolderPath + stageName + ".btl");
                if(f.exists()){
                    f.moveTo(ef);
                }
            }*/
            String path=ResDefaultConfig.Path.SaveFolderPath + stageName + ".btl";
            String extraPaht=ResDefaultConfig.Path.SaveFolderPath + stageName+"_e.btl";

            if(backupType==2){//保留旧存档到备份
                FileHandle f=Gdx.files.local(path);
                if(f.exists()){
                    f.copyTo(Gdx.files.local(extraPaht));
                }
            }
            FileHandle f= save(path,true);
            if(f!=null){
                if(backupType==1){
                    f.copyTo(Gdx.files.local(extraPaht));
                }
            }else{
                Gdx.app.error("saveSmapBin is error:",stageId+":"+stageName);
            }
            Gdx.app.log("saveSmapBin ",stageId+":"+stageName+":"+backupType);
        }
    }

   /* public void save() {
        saveSmapBin(game.getStageId(),false);
        game.saveConfig();
    }*/

    public void saveNewWorldBin() {
        String stageName = game.gameConfig.getDEF_STAGE().getElementById(masterData.nextStageId).get("name");
        if (!ComUtil.isEmpty(stageName)) {
            /*try {
               BTLTooL.saveBtl(getBTL(), ResConfig.Rules.RULE_FB2_SMAP, ResConfig.Path.SavFolderPath + stageName + ".bin"); //BTLDAO btl,StringName rulePath,  StringName filePath

            } catch (IOException e) {
                e.printStackTrace();
                Gdx.app.error("history", "保存失败:" + stageName);
            }*/
            createNewWorld();
            FileHandle f=  save(ResDefaultConfig.Path.SaveFolderPath + stageName  + "_n.btl",true);
            if(f!=null){
                //save(ResConfig.Path.SavFolderPath+ stageName+"_" +masterData.gameEpisode+ ".btl");
                f.copyTo(Gdx.files.local(ResDefaultConfig.Path.SaveFolderPath + stageName+"_n_" +masterData.gameEpisode+ ".btl"));
            }
        }
    }

    //生成新的世界bin
    private void createNewWorld() {
        int stageId=masterData.getNextStageId();
        XmlReader.Element defStage=game.gameConfig.getDEF_STAGE().getElementById(stageId);

        int oldYear=masterData.getGameEndYear();
        int oldPlayerCountry=masterData.getPlayerLegionIndex();
        //1.年代信息更改
        masterData.setBtlType(0);
        masterData.setGameEpisode(99);
        masterData.setBeginYear(this.masterData.gameEndYear);
        masterData.setRoundForYear(this.masterData.roundForYear);
        masterData.setGameEndYear(0);//defStage.getInt("nextYear")
        masterData.setNextStageId(0);
        if(masterData.getNextStageId()==0){
            XmlReader.Element defHistory=game.gameConfig.getDEF_HISTORY().getElementById(masterData.historyId);
            masterData.setRoundMax(defHistory.getInt("roundMax"));
        }else {
            masterData.setRoundMax((this.masterData.gameEndYear-oldYear)*this.masterData.getRoundForYear());
        }
        masterData.setRoundNow(0);
        masterData.setPlayerLegionIndex(0);

        //2.兵种除将领外全部清除,资源清空
        Iterator<IntMap.Entry<ArmyData>> it = armyHDatas.iterator();
        while (it.hasNext()) {
            IntMap.Entry<ArmyData> c = it.next();
            ArmyData a=c.value;
            if(a!=null&&a.getArmyHpNow()>=0&&a.getGeneralIndex()==0){
                a.armyDeath(false);
            }
        }
        clearArmyDeath();
        //3.平衡盟友
        for(LegionData l:legionDatas){
            l.setMoney(0);
            l.setIndustry(0);
            l.setTech(0);
            l.setFood(0);
            l.setSuzerainLi(0);
            float rate=l.incomeMoney/ worldData.getWorldMoney();
            if(oldPlayerCountry==l.getLegionIndex()){
                if(l.incomeMoney/ worldData.getWorldMoney()>1.0f){
                    l.setTaxBonus(30);
                }
            }else if(rate>1.0f){
                l.setTaxBonus((int) (1/rate)  *100);
            }else {
                l.setTaxBonus((int) (rate*100));
            }
            if(l.getInternIndex()!=0&&l.getInternIndex()!=l.getLegionIndex()){
                ForeignData f=getForeignData(l.getInternIndex(),l.getLegionIndex());
                if(l.getInternIndex()==oldPlayerCountry&&l.getLegionIndex()!=oldPlayerCountry){
                    l.setTaxBonus(l.taxBonus/2);
                    if(f.getFavorValue()<95){
                        l.setInternIndex(l.getLegionIndex());
                        f.setFavorValue(f.getFavorValue()-ComUtil.getRandom(40,70));
                    }else {
                        f.setFavorValue(f.getFavorValue()-ComUtil.getRandom(20,50));
                    }
                }else  {
                    if(f.getFavorValue()<90){
                        l.setInternIndex(l.getLegionIndex());
                        f.setFavorValue(f.getFavorValue()-ComUtil.getRandom(10,70));
                    }else {
                        f.setFavorValue(f.getFavorValue()-ComUtil.getRandom(10,30));
                    }
                }
            }
        }




    }



    public int getNowYear() {
        if(masterData.roundForYear==0||!ifSystemEffective(14)){
            return masterData.beginYear;
        }
        int rs=(masterData.beginYear + (masterData.roundNow / masterData.roundForYear));
        return rs;
    }


    public float getNextYearF() {
        if(masterData.roundForYear==0||!ifSystemEffective(14)){
            return masterData.beginYear;
        }
        return (masterData.beginYear + ((masterData.roundNow+1) * 1f / masterData.roundForYear));
    }
    public float getNowYearF() {
        if(masterData.roundForYear==0||!ifSystemEffective(14)){
            return masterData.beginYear;
        }
        return (masterData.beginYear + (masterData.roundNow * 1f / masterData.roundForYear));
    }

    public Color getColorByHexagon(int hexagon) {
        int li = getLegionIndexByHexagon(getRegionId(hexagon));
        if (li < 0) {
            return Color.WHITE;
        } else {
            return legionColors.get(li);
        }
    }

    private void initAllFogByRegion() {
        if(masterData.getIfFog()==0||isEditMode(false)){
            return;
        }
        if(masterData.getPlayerLegionIndex()==0){
            for(int i=0;i<hexagonDatas.size;i++){
                Fb2Map.MapHexagon h=hexagonDatas.get(i);
                h.setIfFog(0);
            }
        }else {
            for(int bi=0;bi<buildRDatas.size();bi++){
                BuildData b=buildRDatas.getByIndex(bi);
                if(b.isPlayerAroundRegion()){
                    IntArray hr=regionHexagonMap.get(b.getRegionId());
                    for(int i=0;i<hr.size;i++){
                        Fb2Map.MapHexagon hexagon=hexagonDatas.get(hr.get(i));
                        if(hexagon!=null){
                            hexagon.setIfFog(1);
                        }
                    }
                    if(roundState==2){
                        b.resetLegionUnitPotion();
                    }
                }else{
                    IntArray hr=regionHexagonMap.get(b.getRegionId());
                    for(int i=0;i<hr.size;i++){
                        Fb2Map.MapHexagon hexagon=hexagonDatas.get(hr.get(i));
                        if(hexagon!=null){
                            hexagon.setIfFog(0);
                        }
                    }
                }
            }
        }
    }


    public void initAllFog(){
        if(masterData.getIfFog()==0||isEditMode(false)){
            return;
        }
        if(masterData.getPlayerLegionIndex()==0){
            for(int i=0;i<hexagonDatas.size;i++){
                Fb2Map.MapHexagon h=hexagonDatas.get(i);
                h.setIfFog(0);
            }
        }else {
            for(int i=0;i<hexagonDatas.size;i++){
                Fb2Map.MapHexagon h=hexagonDatas.get(i);
                h.setIfFog(0);
            }
            for(int i=0;i<hexagonDatas.size;i++){
                Fb2Map.MapHexagon h=hexagonDatas.get(i);
                boolean ifAlly= h.ifAlly();
                ArmyData a=h.armyData;
                if(a!=null&&a.getArmyHpNow()>0&&ifAlly){
                    a.setFogInSearchTIA3(false);
                }
                BuildData b = h.buildData;
                if(b!=null&&ifAlly){
                    setFogByRegion(b.getRegionId(),1);
                    int sR=1;
                    if (b.haveAirFeature(31)) {//int hexagonIndex,int li,int searchRange,boolean ifCreateActor
                        sR+=b.getAirLvNow();
                        if(sR<5){
                            sR=5;
                        }
                    } else if (b.haveAirFeature(30)) {
                        sR+=b.getAirLvNow()/2;
                        if(sR<3){
                            sR=3;
                        }
                    }
                    setFogInSearchTIA3(b.getRegionId(), b.getLegionIndex(), sR, true,false);
                }
            }
        }
    }





    public Color getFogColorByHexagon(int hexagon) {
        int li = getLegionIndexByHexagon(getRegionId(hexagon));
        LegionData l=getLegionDataByLi(li);
        if (li < 0) {
            return Color.WHITE;
        } else {
            return l.getFogColor();
        }
    }

   /* public Color getInverseColorByHexagon(int hexagon) {
        int li = getLegionIndexByHexagon(getPolitical(hexagon));
        if (li < 0) {
            return Color.WHITE;
        } else {
            return legionInverseColors.get(li);
        }
    }*/


    /*//通过多个region获取ids
    public Array<Integer> getIdsByRegionIds(IntArray regionIds){
        Array<Integer> rs= new Array<Integer>();
        int c=0;
        for (HexagonData t: hexagonDatas) {
            if (regionIds.contains(t.getPolitical())) {
                rs.add(c);
            }
            c++;
        }
        return rs;
    }*/

    //通过多个region获取ids
    public IntArray getIdsByRegionIds(IntArray regionIds, IntArray rsIntArray) {
        /*if (rsIntArray == null) {
            rsIntArray = new IntArray();
        } else {
            rsIntArray.clear();
        }*/
        int c = 0;
        for (Fb2Map.MapHexagon t : hexagonDatas) {
            if (regionIds.contains(t.getRegionId())) {
                rsIntArray.add(c);
            }
            c++;
        }
        return rsIntArray;
    }


    public boolean costPlayerMoney(int money) {
        if (getPlayerLegionData().getMoney() >= money) {
            getPlayerLegionData().costMoney(money);
            return true;
        } else {
            return false;
        }
    }


    public boolean costPlayerIndustry(int industry) {
        if (getPlayerLegionData().getIndustry() >= industry) {
            getPlayerLegionData().costIndustry(industry);
            return true;
        } else {
            return false;
        }
    }

    public boolean costPlayerFood(int food) {
        if (getPlayerLegionData().getFood() >= food) {
            getPlayerLegionData().costFood(food);
            return true;
        } else {
            return false;
        }
    }

    public boolean costPlayerTech(int tech) {
        if (getPlayerLegionData().getTech() >= tech) {
            getPlayerLegionData().costTech(tech);
            return true;
        } else {
            return false;
        }
    }

    // -1不可通过的地方,0平地,1海洋,2海岸,3桥梁,4丘陵,5山地,6森林,7人为装饰,8自然装饰,9海洋装饰,10道路,11河流
    public int getTerrainType(int hexagon) {
        if(ifGridIsPass(hexagon)){
            return hexagonDatas.get(hexagon).getBlockType();
        }
        return -1;
    }



    public boolean ai_RecruitUnit(LegionData legion, BuildData build, int cardId,int targetRegion) {
        //Gdx.app.error("","a:"+armyId);
        if (!game.gameConfig.getDEF_CARD().contain(cardId)||build==null||build.getCityHpNow()==0) {
            return false;
        }

        if(!build.canBuyCard(cardId)){
            if(legion.ifPlayerEnemy()&&legion.borderLegionIndexs.contains(masterData.getPlayerLegionIndex())){//如果不能招募,则替换为可招募的单位
                updLegionTechToRecruitArmy(legion,build,cardId);
            }else{
                if(updLegionTechToRecruitArmy(legion,build,cardId)){
                    if(!legion.ifPlayerAlly()&&legion.ifAiCheatChance()){
                        Gdx.app.log("ai_ForceRecruitUnit",build.getRegionId()+":"+cardId);
                    }else{
                        return true;
                    }
                }else{
                    cardId=build.getRandomCanRecruitUnitId();
                }
            }
        }

        XmlReader.Element xmlE=game.gameConfig.getDEF_ARMY().getElementById(cardId);
        int armyType=1;
        if(xmlE!=null){
            armyType=xmlE.getInt("type");
        }
        /*if(armyType==4||armyType==8||armyType==15){
            int s=0;
        }*/

        int hexagon = build.getHexagonToRecruitCardTIA1( armyType,cardId);
        if(hexagon==-1&&(armyType==4||armyType==8||armyType==15)&&build.getFacilityHexagon(1)==-1&&build.canBuildNavy()){
            legion_UpdTech(legion,build,6001);
            if(roundState!=1){
                return true;
            }else{
                hexagon = build.getHexagonToRecruitCardTIA1( armyType,cardId);
            }
        }

        if (hexagon != -1 && cardId > 0&&game.gameConfig.getDEF_CARD().contain(cardId)) {
            if (!GameMethod.cardIfMax(game,legion, null, cardId)) {
                if(masterData.getPlayerMode()==0||masterData.getPlayerMode()==2){//如果是征服则是正常的建造
                    recruit(hexagon, cardId,targetRegion);
                }else{
                    if(ifAllyPlayerByLi(legion.getLegionIndex())||legion.getInternIndex()==0|| getRoundProgress()>80){
                        recruit(hexagon, cardId,targetRegion);
                    }else if(roundState!=1&&armyType!=6){//只对敌人生效
                        int multiple=legion.getRecruitMultiple(armyType);
                        if(multiple==1&&getForeignDegree(legion.getLegionIndex(),masterData.getPlayerLegionIndex())==1){
                            recruit(hexagon, cardId,targetRegion);
                        }else{
                            recruitMost(hexagon,armyType,cardId,multiple,targetRegion);
                        }
                    }else{
                        recruit(hexagon, cardId,targetRegion);
                    }
                }

                int round=getRound(cardId,armyType);
                build.addBuildRound(round);
                ArmyData a=getArmyDataByHexagon(hexagon);
                if(a!=null&&a.ifNeedCreateActor()){
                    a.createActor();
                }
                return true;
            } else {
                if(legion.getLegionRound()==0&&!ifAllyPlayerByLi(legion.getLegionIndex())){
                    int techId= GameMethod.getTechNumIdByArmyId(game, cardId);
                    if(legion_UpdTech(legion, null, techId)){
                        payCardPrice(legion,null,techId,true);
                    }
                }else{
                    legion.varNeedTech = GameMethod.getTechNumIdByArmyId(game, cardId);
                }
            }
        }
        return false;
    }
    //判断并建造
    private boolean updLegionTechToRecruitArmy(LegionData legion, BuildData build, int cardId) {
        XmlReader.Element cardE=game.gameConfig.getDEF_CARD().getElementById(cardId);
        if(cardE==null){
            return false;
        }
        int armyType=cardE.getInt("type");
        if(armyType==0||armyType>8){
            return false;
        }
        int age=cardE.getInt("age");
        if(getAge()<age){
            return false;
        }
        int techId=0;
        int reqCityLv=cardE.getInt("reqCityLv");
        int reqIndLv=cardE.getInt("reqIndLv");
        int reqTechLv=cardE.getInt("reqTechLv");
        int reqAirLv=cardE.getInt("reqAirLv");

        if(build.cityLvNow<reqCityLv){
            techId=2007;
            if(!GameMethod.buildCardIfLock(game,legion,build,techId)){
                if(legion_UpdTech(legion,build,techId)){
                    return  payCardPrice(legion, build, techId,true);
                }else {
                    return false;
                }
            }else{
                techId=3001;
                if(!GameMethod.cardIfMax(game,legion,build,techId)){
                    if(legion_UpdTech(legion,build,techId)){
                        return  payCardPrice(legion, build, techId,true);
                    }else {
                        return false;
                    }
                }
            }
        }
        if(build.industryLvNow<reqIndLv){
            techId=2008;
            if(!GameMethod.buildCardIfLock(game,legion,build,techId)){
                if(legion_UpdTech(legion,build,techId)){
                    return  payCardPrice(legion, build, techId,true);
                }else {
                    return false;
                }
            }else{
                techId=3002;
                if(!GameMethod.cardIfMax(game,legion,build,techId)){
                    if(legion_UpdTech(legion,build,techId)){
                        return  payCardPrice(legion, build, techId,true);
                    }else {
                        return false;
                    }
                }
            }
        }
        if(build.techLvNow<reqTechLv){
            techId=2004;
            if(!GameMethod.buildCardIfLock(game,legion,build,techId)){
                if(legion_UpdTech(legion,build,techId)){
                    return  payCardPrice(legion, build, techId,true);
                }else {
                    return false;
                }
            }else{
                techId=3003;
                if(!GameMethod.cardIfMax(game,legion,build,techId)){
                    if(legion_UpdTech(legion,build,techId)){
                        return  payCardPrice(legion, build, techId,true);
                    }else {
                        return false;
                    }
                }
            }
        }
        if(build.airLvNow<reqAirLv){
            techId=2011;
            if(!GameMethod.buildCardIfLock(game,legion,build,techId)){
                if(legion_UpdTech(legion,build,techId)){
                    return  payCardPrice(legion, build, techId,true);
                }else {
                    return false;
                }
            }else{
                techId=3011;
                if(!GameMethod.cardIfMax(game,legion,build,techId)){
                    if(legion_UpdTech(legion,build,techId)){
                        return  payCardPrice(legion, build, techId,true);
                    }else {
                        return false;
                    }
                }
            }
        }
        //人口检测
        if(GameMethod.cardIfMax(game,legion,build,cardId)){
            techId= getBuildTechForUpdPotion(legion,build,cardId,armyType);
            if(legion_UpdTech(legion,build,techId)){
                return  payCardPrice(legion, build, techId,true);
            }else {
                return false;
            }
        }
        return false;
    }

    // 1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇
    private int getBuildTechForUpdPotion(LegionData legion,BuildData build,int cardId, int armyType) {
        int techId=-1;
        switch (armyType){
            case 1:
            case 2:
            case 3:
            case 4:
            case 8:
                if(!GameMethod.buildCardIfLock(game,legion,build,2007)){
                    techId=2007;
                }else if(!GameMethod.buildCardIfLock(game,legion,build,2002)){
                    techId=2002;
                }else if(!GameMethod.cardIfMax(game,legion,build,3001)){
                    techId=3001;
                }else if(!GameMethod.cardIfMax(game,legion,build,3018)){
                    techId=3018;
                }
                break;
            case 5:
                if(!GameMethod.cardIfMax(game,legion,build,3024)){
                    techId=3024;
                }
                break;
            case 6:
                if(cardId==1606){
                    if(!GameMethod.cardIfMax(game,legion,build,3026)){
                        techId=3026;
                    }
                }else{
                    if(!GameMethod.cardIfMax(game,legion,build,3028)){
                        techId=3028;
                    }
                }
                break;
            case 7:
                if(!GameMethod.cardIfMax(game,legion,build,3025)){
                    techId=3025;
                }
                break;
        }
        return techId;
    }

    //数倍召唤
    private void recruitMost(int hexagon, int armyType, int cardId, int multiple,int targetRegion) {
        recruit(hexagon, cardId,targetRegion);
        if (multiple <= 1 || armyType == 6 || armyType == 5 || armyType == 7) {// 1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇
            return;
        } else if (multiple > 6) {
            multiple = 6;
        }
        int cardId1 =cardId/100*100;
        int cardId2 =cardId-cardId1;
        int hexagonN;
        for (int i = 1; i < multiple; i++) {
            int recruitId = ComUtil.getRandom(1, cardId2) + cardId1;
            hexagonN = getBorderIdByDirect(hexagon, i);
            if (ifGridIsPass(hexagonN)&&getLegionIndexByRegion(hexagonN)==getLegionIndexByHexagon(hexagon)) {
                if (hexagonDatas.get(hexagonN).canRecruit(armyType, cardId)) {
                    recruit(hexagonN, recruitId,targetRegion);
                } else {
                    multiple++;
                }
            }
            if (i > 5) {
                break;
            }
        }
    }

    //招募
    //targetRegion  初始的战斗目标,只对陆军建造有效
    public int recruit(int hexagon, int armyId,int targetRegion) {
        if(targetRegion!=-1){
            if(!buildRDatas.containsKey(targetRegion)){
                targetRegion=-1;
            }
        }
        LegionData l=getLegionDataByRegion(hexagon);
        if(l==null||!game.gameConfig.getDEF_ARMY().contain(armyId)){
            Gdx.app.error("check recuit hexagon error",hexagon+":"+armyId);
            return -1;
        }
        checkTask(true,l.getLegionIndex(),1,1);

        XmlReader.Element armyE = game.gameConfig.getDEF_ARMY().getElementById(armyId);
        XmlReader.Element cardE = game.gameConfig.getDEF_CARD().getElementById(armyId);

        //buildPolicy 用来计算维护费和重要度
        int gameValue = ComUtil.limitValue(cardE.getInt("money") / 10, 1, 250);
        int armyType = armyE.getInt("type");

        ArmyData sa=getArmyDataByHexagon(hexagon);
        if(sa!=null&&sa.canMerge(armyType,armyId)&& sa.mergeUnitGroup(armyId)!=-1){
            return hexagon;
        }
        if(armyType>8||armyType<=0){
            return -1;
        }
        if(armyType==6&&buildRDatas.containsKey(hexagon)){
            int s=0;
            Gdx.app.error("region can,t recruit fort",hexagon+":"+armyId);
        }
        int armyAbility=0;
        int armyLv=0;
        if(masterData.getPlayerMode()==0){ //1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇
            armyAbility=game.gameMethod.getLegionEffectValueForUnitAbility(l,armyType,armyId);
            gameValue=game.gameMethod.getLegionEffectValueForUnitGameValue(l,armyType,armyId,gameValue);
            armyLv=game.gameMethod.getLegionEffectValueForUnitLv(l,armyType,armyId);
        }

        int region = getRegionId(hexagon);
        BuildData b = getBuildDataByRegion(region);
        int stability= armyE.getInt("population",0)+b.getCultureLvNow();
        if(ifSystemEffective(0)){
            b.addCityStability(stability,game.resGameConfig.cityStabilityChangeValueMax);
        }


        //LegionData l=legionDatas.get(getLegionIndexByHexagon(region));
        int unitTechLv = getArmyLvByArmyType(armyId,armyType, l.getLegionIndex());
        // int unitGradeLv=getArmyGradeLvByArmyType(armyId,armyType, l.getLegionIndex());
        //Gdx.app.log("recruit",hexagon+" a:"+ armyId+" li:"+ l.getBuildPolicy());


        if(masterData.getPlayerMode()==2||(isEditMode(true)&&getArmyDataByHexagon(hexagon)!=null)){ //1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇
            hexagon=b.getHexagonToRecruitCardTIA1(armyType,-1);
            if(hexagon==-1){
                return -1;
            }
        }else{
            if(armyType==5&&!b.canRecruitAir()){
                Gdx.app.error("check recuit air error",hexagon+":"+armyId);
                return -1;
            }else if(armyType==7&&!b.canRecruitNul()){
                Gdx.app.error("check recuit nul error",hexagon+":"+armyId);
                return -1;
            }
        }

        int addMorale=l.getExtraMoraleByLegionFeature(armyId,armyType);
        int addHp=0;
        int addGroup=0;
        int addRank=0;
        int recrutRound=0;
        int addWeaLv=b.getArmyLvNow();

        if(b!=null&&b.getBuildWonder()>0){
            XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(b.getBuildWonder());
            if(xE!=null){
                int function=xE.getInt("fucntion",0);
                int effect=xE.getInt("effect",0);
                int value=xE.getInt("value",0);
                if(function==7){
                    switch (effect){
                        case 1:
                            addMorale+=value;
                            break;
                        case 2:
                            addWeaLv+=value;
                            break;
                        case 3:
                            addGroup+=value;
                            break;
                        case 4:
                            addRank+=value;
                            break;
                    }
                }else
                if(function==8){
                    if(effect==armyType){
                        recrutRound=value;
                    }
                }
            }
        }
        int rank=addRank+armyLv;
        if(!b.isCapital()&&!b.isWonderFunction(4,14)&&rank>b.getArmyLvNow()){
            rank=b.getArmyLvNow();
        }
        addWeaLv=ComUtil.min(addWeaLv,unitTechLv);
        int rs=-1;

        if(masterData.getPlayerMode()!=2&&(armyType==5||armyType==7)){
            if(armyType==5) {
                AirData a = new AirData();
                a.airIndex = getNewAirIndex();
                a.regionId = region;
                a.armyHexagon = -1;
                a.legionIndex = l.getLegionIndex();
                a.airId = armyId;
                a.airType = armyType;
                a.engLv = 0;
                a.airKills = 0;
                a.airRank =rank;
                a.airHpMax = addHp + (int) ((game.resGameConfig.addHpEachRank * a.airRank + 1f) * armyE.getInt("strength"));
                a.airHpNow = a.airHpMax;
                a.ackLv = ComUtil.getRandom(0, b.getArmyLvNow());
                a.defLv = ComUtil.getRandom(0, b.getDefenceLvNow());
                a.spyLv = ComUtil.getRandom(0, b.getCityLvNow());
                a.supLv = ComUtil.getRandom(0, b.getSupplyLvNow());
                a.actLv = ComUtil.getRandom(0, b.getAirLvNow());
                a.weaLv = ComUtil.getRandom(0, unitTechLv+addWeaLv);
                a.skillId1 = 0;
                a.skillId2 = 0;
                a.skillId3 = 0;
                a.skillId4 = 0;
                a.generalIndex = 0;
                a.airMorale = addMorale + (int) (game.resGameConfig.recruitUnitBaseMorale + l.getStability() * game.resGameConfig.recruitUnitLegionStabilityMoraleRate + ComUtil.max(b.getCultureLvNow() * game.resGameConfig.recruitUnitCultureLvMoraleRate, b.getCityStability() * game.resGameConfig.recruitUnitBuildStabilityMoraleRate));
                a.skillLv1 = 0;
                a.skillLv2 = 0;
                a.airRound = ComUtil.limitValue(armyE.getInt("round", 1) - recrutRound, 0, 100);
                a.airAi = 0;


                a.skillLv3 = 0;
                a.skillLv4 = 0;
                a.targetRegion = -1;
                a.nucleIndex = -1;
                a.goodsMax = ComUtil.getRandom(2, unitTechLv / 3);
                if (a.goodsMax < 1) {
                    a.goodsMax = 1;
                }
                a.goodsNow = a.goodsMax;
                a.ifMove = 0;
                a.ifAttack = 0;
                a.airBuff1 = 0;
                a.airBuff2 = 0;
                a.airBuff3 = 0;
                a.randomUpdAirAbility(armyAbility);

                airIDatas.put(a.getAirIndex(), a);
                // Gdx.app.log("recruit air",a.getAirIndex()+":"+region);
                b.setAirIndex(a.airIndex);
                a.initVirAttribute();
                if (b.buildActor != null) {
                    b.buildActor.updDrawInfo();
                }

                if(ifSystemEffective(21)){
                    a.updSkillForRank();
                }
                if(isEditMode(true)){
                    a.setAirRound(0);
                }
                if(a.isPlayer()&& recruitSkills !=null&& recruitSkills.size>0){
                    for(int i=0;i<recruitSkills.size;i++){
                        int spiritId=recruitSkills.get(i);
                        XmlReader.Element spiritE=game.gameConfig.getDEF_SPIRIT().getElementById(spiritId);
                        if(spiritE!=null&&checkRecruitSkill(5,spiritE.getInt("effect",100))){
                            int skillId=spiritE.getInt("rule",0);
                            XmlReader.Element skillE=game.gameConfig.getDEF_SKILL().getElementById(skillId);
                            if(skillId>0&&skillE!=null&&a.checkSkillConditions(skillE)){//验证技能是否适合这个类
                                if(!a.learnSkill(skillId)){
                                    break;
                                }
                            }
                        }
                    }
                }
                l.varAirNum += a.getPopulation();
                l.varAirCost += a.getFoodCost() *getMilitaryCostRate();
                if (a.getGeneralIndex() != 0) {
                    l.varGeneralNum += 1;
                    l.varGeneralCost += ComUtil.limitValue(a.getFoodCost()/2 ,10,255) *getMilitaryCostRate();
                }
                rs=region;
            }else if(armyType==7){
                NulcleData n = new NulcleData();
                n.setNucleIndex(getNewNulcleIndex());
                n.setRegionId(region);
                n.setNuclearId(armyId);
                n.setNucleRound(armyE.getInt("round", 1) - recrutRound);
                n.setGameValue(gameValue);
                n.setLegionIndex(l.getLegionIndex());
                nulcleIDatas.put(n.getNucleIndex(), n);
                b.setNulIndex(n.nucleIndex);
                n.initVirAttribute();
                if (b.buildActor != null) {
                    b.buildActor.updDrawInfo();
                }
                if(isEditMode(true)){
                    n.setNucleRound(0);
                }
                l.varNuclearNum += 1;
                l.varNuclearCost += n.getGameValue() *getMilitaryCostRate();
                rs=region;
            }
        }else{

            ArmyData a = getArmyDataByHexagon(hexagon);
            if (a != null) {
                if (a.updArmyGroup()) {
                    a.resetArmyHpMax();
                    // a.setArmyHpNowFull();
                    // a.setGameValue((int) (a.gameValue *1.5f));
                    // Gdx.app.log("213",a.getHpRateF()+"");
                }
                a.setArmyHpNow(a.getArmyHpNow() + a.getArmyLife());
            } else {
                a = new ArmyData();
                a.setArmyIndex(armyHDatas.size);
                a.setRegionId(region);
                a.setLegionIndex(l.getLegionIndex());
                a.setUnitArmyId0(armyId);
                a.setArmyType(armyType);
                a.setArmyKills(0);
                a.armyRank = rank;
                a.unitArmyId1 =0;
                a.armyFormation =0;// ComUtil.limitValue(armyE.getInt("grade", 1) + (a.getUnitGradeLv() + 2) / 3 + addGroup, 1, 9);
                a.armyHpMax = (int) ((game.resGameConfig.addHpEachRank * a.armyRank + 1f) *armyE.getInt("strength", 1)) * a.unitWealv1;
                a.armyHpNow = a.armyHpMax;

                a.setUnitGroup0Lv(1+addGroup);
                a.unitGroup1Lv =1;
                a.unitGroup2Lv =0;
                a.unitGroup3Lv = 0;
                a.unitGroup4Lv =0;
                a.unitGroup5Lv = 0;
                a.unitGroup6Lv = 0;
                a.setUnitWealv0( ComUtil.getRandom(0, b.getArmyLvNow()));
                a.skillId1 = 0;
                a.skillId2 = 0;
                a.skillId3 = 0;
                a.skillId4 = 0;
                a.generalIndex = 0;
                a.armyMorale = addMorale + (int) (game.resGameConfig.recruitUnitBaseMorale + l.getStability() * game.resGameConfig.recruitUnitLegionStabilityMoraleRate + ComUtil.max(b.getCultureLvNow() * game.resGameConfig.recruitUnitCultureLvMoraleRate, b.getCityStability() * game.resGameConfig.recruitUnitBuildStabilityMoraleRate));
                a.hinge = 0;
                a.armyDirectionValue = 0;
                a.airforcePolicy = 0;
                a.armyRound = ComUtil.limitValue(armyE.getInt("round", 1) - recrutRound, 0, 100);
                a.unitWealv0 = addWeaLv;
                if (l.isPlayer() || ComUtil.ifGet(50 - getAge() * 10)) {
                    a.transportType = 0;
                } else {
                    a.setTransportType(ComUtil.getRandom(0, l.getNavyLvMax() / 2 + getAge()));
                }

                a.armyAi = 0;
                a.nucleIndex = -1;
                a.targetRegion = targetRegion;
                a.skillLv1 = 0;
                a.standyRound = 0;
                //a.goodsMax = ComUtil.limitValue(ComUtil.getRandom(1, 3) + unitTechLv, 3, 10);
                a.skillLv3 = 0;
                a.skillLv4 = 0;
                a.ifMove = 0;
                a.ifAttack = 0;
                a.armyBuff1 = 0;
                a.armyBuff2 = 0;
                a.armyBuff3 = 0;
                a.eventIndex = 0;
                a.gameValue = gameValue;
                a.setHexagonIndex(hexagon);
                a.randomUpdArmyWealv(armyAbility);
                a.resetArmyHpMax();
                a.initVirAttribute();
                armyHDatas.put(hexagon, a);
                hexagonDatas.get(hexagon).setLegionIndexValue(l.legionIndex);

                //  Gdx.app.log("recruit",hexagon+" a:"+ armyId+" li:"+ l.getBuildPolicy()+" ai:"+a.armyHexagon);
                /*if(l.getBuildPolicy()==1){
                    Gdx.app.log("",l.getAllAttributes());
                }*/

                //招募陆军部队时,有{0}%几率将其编队提高1级"/>
                if(a.isPlayer()&&ifHaveSpirit(8)&&ifTriggerSpirit(8)){
                    if( a.updArmyGroup()){
                        a.resetArmyHpMax();
                    }
                }
                if (a.ifNeedCreateActor()) {
                    a.createActor();
                }
                if(ifSystemEffective(21)){
                    a.updSkillForRank();
                }
                if(isEditMode(true)){
                    a.setArmyRound(0);
                }
                // 1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇
                switch (a.armyType) {
                    case 1:
                        l.varInfantryNum +=a.getPopulation();
                        l.varInfantryCost += a.getFoodCost() *getMilitaryCostRate();
                        break;
                    case 2:
                        l.varArtilleryNum += a.getPopulation();
                        l.varArtilleryCost += a.getFoodCost()  *getMilitaryCostRate();
                        break;
                    case 3:
                        l.varArmorNum += a.getPopulation();;
                        l.varArmorCost += a.getFoodCost()  *getMilitaryCostRate();
                        break;
                    case 4:
                        l.varNavyNum += a.getPopulation();
                        l.varNavyCost += a.getFoodCost()  *getMilitaryCostRate();
                        break;
                    case 5:
                        l.varAirNum += 1;
                        l.varAirCost += a.getFoodCost() *getMilitaryCostRate();
                        break;
                    case 6:
                        if(a.ifHaveFeature(5)){
                            l.varMissileNum += 1;
                            l.varMissileCost += a.getFoodCost()  *getMilitaryCostRate();
                        }else {
                            l.varDefenceNum +=1;
                            l.varDefenceCost += a.getFoodCost()  *getMilitaryCostRate();
                        }
                        break;
                    case 7:
                        l.varNuclearNum += 1;
                        l.varNuclearCost +=a.getFoodCost()  *getMilitaryCostRate();
                        break;
                    case 8:
                        l.varSubmarineNum += a.getPopulation();
                        l.varSubmarineCost += a.getFoodCost() *getMilitaryCostRate();
                        break;
                    default:
                        Gdx.app.error("initCardNumAndCost no bontyType",""+a.getArmyType());
                        break;
                }
                if (a.getGeneralIndex() != 0) {
                    l.varGeneralNum += 1;
                    l.varGeneralCost +=  ComUtil.limitValue(a.getFoodCost()/2 ,10,255)*getMilitaryCostRate();
                }
                if(a.isPlayer()&& recruitSkills !=null&& recruitSkills.size>0){
                    for(int i=0;i<recruitSkills.size;i++){
                        int spiritId=recruitSkills.get(i);
                        XmlReader.Element spiritE=game.gameConfig.getDEF_SPIRIT().getElementById(spiritId);
                        if(spiritE!=null&&checkRecruitSkill(a.getArmyType(),spiritE.getInt("effect",100))){
                            int skillId=spiritE.getInt("rule",0);
                            XmlReader.Element skillE=game.gameConfig.getDEF_SKILL().getElementById(skillId);
                            if(skillId>0&&skillE!=null&&a.checkSkillConditions(skillE)){//验证技能是否适合这个类
                                if(!a.learnSkill(skillId)){
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            rs=a.getHexagonIndex();
        }
        //每次造兵后更新legion
        GameMethod.resetLegionCanBuildCardE(l, publicLegionCardEs);
        return rs;
    }


    //招募
    public void pastArmy(ArmyData ca,int hexagon) {
        LegionData l=getLegionDataByRegion(hexagon);

        ArmyData a=getArmyDataByHexagon(hexagon);
        if(a==null){
            a = new ArmyData();
            a.setArmyIndex(armyHDatas.size);
            a.copyAttributes(ca,false);
            a.initVirAttribute();
            armyHDatas.put(hexagon, a);
        }
        a.setHexagonIndex(hexagon);
        a.setLegionIndex(l.getLegionIndex());
        hexagonDatas.get(hexagon).setLegionIndexValue(l.legionIndex);
        if(a.armyActor==null){
            a.createActor();
        }
    }

    public boolean isEditMode(boolean ifOnlyNeutral) {
        if(ifOnlyNeutral){
            if(masterData.getPlayerLegionIndex()==0&&controlMode==2){
                return true;
            }
            return false;
        }
        return controlMode==2;
    }


    public int getCounrtyIdByHexagon(int hexagon) {
        int li = hexagonDatas.get(hexagon).getLegionIndex();
        if (li >= 0 && li < legionDatas.size) {
            return 0;
        } else {
            return legionDatas.get(li).countryId;
        }
    }


    public int getArmyLvByArmyType(int armyId,int type, int legionIndex) {
        if(armyId==1606){//3014
            return legionDatas.get(legionIndex).getMissileLvMax();
        }
        switch (type) {
            case 1://3006
                return legionDatas.get(legionIndex).getInfantryLvMax();
            case 2://3007
                return legionDatas.get(legionIndex).getCannonLvMax();
            case 3://3008
                return legionDatas.get(legionIndex).getTankLvMax();
            case 4://3010
                return legionDatas.get(legionIndex).getNavyLvMax();
            case 5://3011
                return legionDatas.get(legionIndex).getAirLvMax();
            case 6://3009
                return legionDatas.get(legionIndex).getDefenceLvMax();
            case 7://3015
                return legionDatas.get(legionIndex).getNuclearLvMax();
            case 8://3010
                return legionDatas.get(legionIndex).getNavyLvMax();
        }
        return 0;
    }

    public int getArmyGradeLvByArmyType(int armyId,int type, int legionIndex) {
        if(armyId==1606){//3026
            return legionDatas.get(legionIndex).getMissileCardMax();
        }
        switch (type) {
            case 1://3020
                return legionDatas.get(legionIndex).getInfantryCardMax();
            case 2://3022
                return legionDatas.get(legionIndex).getArtilleryCardMax();
            case 3://3021
                return legionDatas.get(legionIndex).getArmorCardMax();
            case 4://3023
                return legionDatas.get(legionIndex).getNavyCardMax();
            case 5://3024
                return legionDatas.get(legionIndex).getAirCardMax();
            case 6://3028
                return legionDatas.get(legionIndex).getDefenceCardMax();
            case 7://3025
                return legionDatas.get(legionIndex).getNuclearCardMax();
            case 8://3027
                return legionDatas.get(legionIndex).getSubmarineCardMax();
        }
        return 0;
    }

    //获得连接信息
    /*public IntArray getBorderRegion(int region) {
        BuildData b=getBuildDataByRegion(region);
        if (b!=null) {
            return connectDatas.get(b.getBuildIndex());
        }
        return null;
    }*/

    //allyType 0,全部  1仅我方自己  2我方与友军  3仅友军 4敌方
    public IntArray getBorderRegionTIA2(int region,int allyType,IntArray rs) {
        if(rs!=null){
            rs.clear();
        }else{
            rs=new IntArray();
        }
        BuildData b=getBuildDataByRegion(region);
        if (b!=null) {
            // return getIntArrayTIA2(region,allyType,connectDatas.get(b.getRegionId()),rs);
            return getIntArrayTIA2(region,allyType,getConnectData(b.getRegionId()),rs);
        }

        return null;
    }
    public IntArray getIntArrayTIA2(int region,int allyType,ConnectData regions,IntArray rs){
       /*for(int i=0,iMax=regions.length;i<iMax;i++){
            addIntArrayByType(region,regions[i],allyType,rs);
        }
        return rs;
        */
        if(regions==null){
            return rs;
        }
        return regions.getIntArrayTIA2(allyType,rs);
    }


    public IntArray getIntArrayTIA2(int region,int allyType,int[] regions,IntArray rs){
        //addIntArrayByType(tempIntArray2,regionMinorIndex1,allyType);
        for(int i=0,iMax=regions.length;i<iMax;i++){
            addIntArrayByType(region,regions[i],allyType,rs);
        }
        return rs;
    }


    public IntArray addIntArrayByType(int regionMainIndex,int hexagon,int allyType,IntArray ids){
        switch (allyType){
            case 0:  ids.add(hexagon);break;
            case 1:  if(getLegionIndexByHexagon(hexagon)==getLegionIndexByHexagon(regionMainIndex)){ ids.add(hexagon);};break;
            case 2:  if(ifAllyByHexagon(hexagon,regionMainIndex)){ ids.add(hexagon);};break;
            case 3:  if(ifAllyByHexagon(hexagon,regionMainIndex)&&getLegionIndexByHexagon(hexagon)!=getLegionIndexByHexagon(regionMainIndex)){ ids.add(hexagon);};break;
            case 4:  if(!ifAllyByHexagon(hexagon,regionMainIndex)){ ids.add(hexagon);};break;
        }
        return ids;
    }




  /*  //获得同编同兵种的 兵种
    public IntArray getMergeHexagon(int region,int hexagon,int armyId,int armyHexagon){

    }
*/

    public boolean playerCanArmyAct(int region) {
        if (regionHexagonMap.containsKey(region)) {
            IntArray hexagons = regionHexagonMap.get(region, null);
                for(int i=0;i<hexagons.size;i++){
                    int hexagon=hexagons.get(i);
                ArmyData a = getArmyDataByHexagon(hexagon);
                if (a != null && a.getLegionIndex() == masterData.getPlayerLegionIndex()) {
                    //  Gdx.app.log("playerCanArmyAct","h:"+h.getHexagonIndex()+"a:"+h.virArmyIndex);
                    return true;
                }
            }
        }
        return false;
    }



    public int getAllRate(BuildData build, LegionData l) {
        int rate=l.getLegionTax();
        int brate=  (build.cityTax  )   + build.getEnergyTaxBonus() ;
        if(masterData.getPlayerMode()==0){
            brate=brate+   (build.getCityStability()-50);
            // 地区收入随区域稳定度变化而提升或降低
            if(ifHaveSpirit(3)){
                brate=brate+   (build.getCityStability()-50);
            }
        }


        rate=rate+brate;
        //战斗区域的收入减半
        if(build.getCityHpMax()!=build.getCityHpNow()||build.getCityHpMax()==0){
            rate=rate/2;
        }
        rate= (int) (rate*game.resGameConfig.allIncomeRate);
/*

        if(ifEffective(16)&&l.isPlayer()){
            //l.setAmbition(51);
            // build.setCityStability(39);
            if(getPlayerAmbition()>50){
                if(build.getCityStability()<(20+getAge()*10)||(l.getStability()<getPlayerAmbition()&&build.getCityStability()>l.getStability())){
                    rate=rate-getPlayerAmbition();
                }
            }else if(getPlayerAmbition()<50){
                if(build.getCityStability()<(30+getAge()*5)){
                    rate=rate- (100-build.getCityStability());
                }
            }
        }
*/

        return ComUtil.limitValue(rate,-200,300);
    }

    public void addVarIncomeByBuild(LegionData l,BuildData build) {
        int rate = getAllRate(build, l);
        if(spiritMap!=null&& ifSystemEffective(16)){
            if(spiritMap.containsKey(41)||(l.isPlayer()&&spiritMap.containsKey(43))){
                rate=rate*2;
            }else  if(spiritMap.containsKey(46)){
                rate=rate*10;
            }
        }

        int money=build.getIncomeMoney(rate+l.getTradeLvMax()*game.resGameConfig.tradeLvExtraAddMoneyRate);
        int industry=build.getIncomeIndustry(rate+l.getIndustLvMax()*game.resGameConfig.industryLvExtraAddIndustryRate);
        int tech=build.getIncomeTech(rate+l.getTechLvMax()*game.resGameConfig.techLvExtraAddTechRate);
        int food=build.getIncomeFood(rate+l.getCityLvMax()*game.resGameConfig.cityLvExtraAddFoodRate);
        int mineral=build.getIncomeMinterial(rate);
        int oil=build.getIncomeOil(rate);
        // 17=本土获得的非金钱资源减半,但通过贸易,势力圈,附属国获得的非金钱资源加倍
        if(l.isPlayer()&&getChiefSpecialEffect(17)>=0){
            if(l.isTerritoryRegion(build.getRegionId())){
                industry=industry/2;
                tech=tech/2;
                food=food/2;
                mineral=mineral/2;
                oil=oil/2;
            }else{
                industry=industry*2;
                tech=tech*2;
                food=food*2;
                mineral=mineral*2;
                oil=oil*2;
            }
        }


        if(build.getInfluenceLi()>0&&build.getInfluenceLi()!=build.getLegionIndex()&&build.getInfluenceLi()!=build.getSuzLegionIndex()){
            LegionData iL=getLegionDataByLi(build.getSuzLegionIndex());
            /*if(mineral>0&&(iL.isPlayer()||l.isPlayer())){
                int s=0;
            }*/
            if(l.getSuzerainLi()==0){
                l.incomeMoney += (money)*0.7f;
                l.incomeIndustry += (industry)*0.7f;
                l.incomeTech += (tech)*0.7f;
                l.incomeFood += (food)*0.7f;
                l.incomeMineral +=mineral*0.7f;
                l.incomeOil+=oil*0.7f;
                iL.incomeMoney += (money)*0.3f;
                iL.incomeIndustry += (industry)*0.3f;
                iL.incomeTech += (tech)*0.3f;
                iL.incomeFood += (food)*0.3f;
                iL.incomeMineral +=mineral*0.3f;
                iL.incomeOil+=oil*0.3f;
            }else {
                l.incomeMoney += (money)*0.2f;
                l.incomeIndustry += (industry)*0.2f;
                l.incomeTech += (tech)*0.2f;
                l.incomeFood += (food)*0.2f;
                l.incomeMineral +=mineral*0.2f;
                l.incomeOil+=oil*0.2f;
                iL.incomeMoney += (money)*0.3f;
                iL.incomeIndustry += (industry)*0.3f;
                iL.incomeTech += (tech)*0.3f;
                iL.incomeFood += (food)*0.3f;
                iL.incomeMineral +=mineral*0.3f;
                iL.incomeOil+=oil*0.3f;
                LegionData sl=l.getSuzerainLegionData();
                sl.incomeMoney += (money)/2;
                sl.incomeIndustry += (industry)/2;
                sl.incomeTech += (tech)/2;
                sl.incomeFood += (food)/2;
                sl.incomeMineral +=mineral/2;
                sl.incomeOil+=oil/2;
            }
        }else{
            if(l.getSuzerainLi()==0){
                l.incomeMoney += (money);
                l.incomeIndustry += (industry);
                l.incomeTech += (tech);
                l.incomeFood += (food);
                l.incomeMineral +=mineral;
                l.incomeOil+=oil;
            }else {
                money=money/2;
                industry=industry/2;
                tech=tech/2;
                food=food/2;
                mineral =mineral/2;
                oil=oil/2;
                l.incomeMoney += (money);
                l.incomeIndustry += (industry);
                l.incomeTech += (tech);
                l.incomeFood += (food);
                l.incomeMineral +=mineral;
                l.incomeOil+=oil;
                LegionData sl=l.getSuzerainLegionData();
                sl.incomeMoney += (money);
                sl.incomeIndustry += (industry);
                sl.incomeTech += (tech);
                sl.incomeFood += (food);
                sl.incomeMineral +=mineral;
                sl.incomeOil+=oil;
            }
        }




        //Gdx.app.log("income","li:"+l.getBuildPolicy()+" rate:"+rate +" money:"+l.money+" industry:"+l.industry+" tech:"+l.tech+ " food:"+l.food);
    }



    //下一回合分为三个方法
    public void nextRoundReady(int incomeCount) {
        masterData.setGameStatu(0);
        masterData.setIfHaveAutoBuild(0);
        if(game.resGameConfig.ifCreateSeaWaveEachRound&&roundState!=1){
            updSeaDecorate();  //更新海浪
        }
        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady updSeaDecorate");}
        //当不是战役的时候,储存的金钱减半
        promptDatas.clear();
        dialogueDatas.clear();
        dialogueGenerals.clear();
        updWorldInfo();
        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady updWorldInfo");}
        if(incomeCount<1){
            incomeCount=1;
        }
        excutePlayerBuildPolicy();
        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady excutePlayerBuildPolicy");}
        for(int i=0;i<incomeCount;i++){
            updIncome(true);
        }

        //扣除军费 依次扣除
        for (int i=0;i<legionDatas.size;i++) {
            LegionData l=legionDatas.get(i);
            if (0 != l.getInternIndex()) {
                l.legionCost();
            }
        }
        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd 军团扣除军费");}

        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady updIncome");}
        resetPLegionRank();
        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady resetPLegionRank");}
        if(roundState==2){
            if(masterData.ifChief==1&&chiefData!=null){
                chiefData.exchangeForRound();
                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady exchangeForRound");}
            }
        }
        if(controlMode==1){
            playerLegionData.addMoney(playerLegionData.incomeMoney*10);
            playerLegionData.addIndustry(playerLegionData.incomeIndustry*10);
            playerLegionData.addMineral(playerLegionData.incomeMineral*10);
            playerLegionData.addOil(playerLegionData.incomeOil*10);
            playerLegionData.addTech(playerLegionData.incomeTech*10);
            playerLegionData.addFood(playerLegionData.incomeFood*10);
            playerLegionData.setLegionRound(0);
        }else if(game.gameConfig.ifLeisureMode){
            playerLegionData.addMoney(playerLegionData.incomeMoney*2);
            playerLegionData.addIndustry(playerLegionData.incomeIndustry*2);
            playerLegionData.addMineral(playerLegionData.incomeMineral*2);
            playerLegionData.addOil(playerLegionData.incomeOil*2);
            playerLegionData.addTech(playerLegionData.incomeTech*2);
            playerLegionData.addFood(playerLegionData.incomeFood*2);
            playerLegionData.setLegionRound(playerLegionData.getLegionRound()/2);
        }

        if(roundState!=1){
            if(ifSystemEffective(4)){
                int index=masterData.getRoundNow()%masterData.getRoundForYear();
                legion_diplomaticAdjustment(index);
                if(ifSystemEffective(9)){
                    event_exchangeArea(index);
                    if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady event_exchangeArea");}
                }
            }
            //每一年的第一回合进行调整
            if(masterData.getRoundNow()%masterData.getRoundForYear()==1){
                if(masterData.ifChief==1&&chiefData!=null){
                    //检测之前的改革是否成功,不成功发生暴动
                    if(chiefData.massesDemandType >0){
                        if(checkReform()){//检测改革,成功则
                            chiefData.massesDemandType =-1;
                        }else if(ComUtil.ifGet(getPlayerLegionData().getStability()/2)){//发生暴动
                            legion_Riot(getPlayerLegionData(),null,null);
                            legion_Rebell(getPlayerLegionData());
                            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady legion_Riot legion_Rebell");}
                        }
                    }
                    //查询是否有争议政策
                    if(chiefData.massesDemandType <=0){
                        int chiefType=checkChiefBuff();
                        if(chiefType>0){//值为1~20
                            chiefData.massesDemandType=chiefType;
                            addPromptData(game.gameMethod.getPromptStrT(95, 0),
                                    game.gameMethod.getPromptStrT(95, 1,"chiefName_"+ chiefType),
                                    game.gameMethod.getPromptStrT(95, 2),masterData.getPlayerLegionIndex(),masterData.getPlayerLegionIndex(),false);
                        }
                    }
                }
            }

        }


        tradeDatas.shuffle();
        generalEs.shuffle();
        if(roundState!=1){
            masterData.roundNow += 1;
            if(masterData.getRoundNow()%masterData.getRoundForYear()==2){
                if(ifSystemEffective(11)){
                    checkGeneral();
                    if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady checkGeneral");}
                }
                if(ifSystemEffective(9)&& ifSystemEffective(13)){
                    executeRandomEvent();
                    if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady executeRandomEvent");}
                }
            }
        }
        //外交包围网
        if(getChiefReputation()>50&&ComUtil.ifGet(getChiefReputation())){//邻国包围网
            if(playerInfo.worldProgress<50){
                legion_siege(playerLegionData,getChiefReputation());
                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady legion_siege");}
            }else{
                legion_worldWarForPlayer();
                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady legion_worldWarForPlayer");}
            }
            chiefData.addReputation(-40);
        }
        //对ai资源不足的进行补充
        if(masterData.getRoundNow()%masterData.getRoundForYear()==1){
            for(LegionData l:legionDatas){
                if(!l.ifPlayerAlly()){
                    world_Help(l, game.resGameConfig.aiWorldHelpRate);
                }
            }
        }
        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady world_Help");}
        clearArmyDeath();
        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady clearArmyDeath");}
        if (masterData.getPlayerMode()==2) {
            ai_LegionUnitAct(masterData.getPlayerLegionIndex());
            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady ai_LegionUnitAct");}
        }else{
            ai_AirAct(getPlayerLegionData());
            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady ai_AirAct");}
            executeUnitActToTarget(getPlayerLegionData());
            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady executeUnitActToTarget");}
        }
        //循环建筑 设定战斗区域
        //  Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
        //while (it.hasNext()) {
        //  IntMap.Entry<BuildData> c = it.next();
        // BuildData b=c.value;
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if(b!=null){
                if(b.getBuildType()!=2&&!ifSeaLand(b.getRegionId())&&b.getEnemyCount()>0){
                    if(b.isPlayer()){
                        b.setBuildStatus(3);
                    }else if(b.isPlayerAlly()){
                        b.setBuildStatus(2);
                    }else{
                        b.setBuildStatus(1);
                    }
                }else {
                    b.setBuildStatus(0);
                }
            }
        }
        clearArmyDeath();
        if(masterData.getPlayerMode()==2){
            initAllFogByRegion();
            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady initAllFogByRegion");}
        }else{
            initAllFog();
            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady initAllFog");}
        }
    }
    private void legion_Rebell(LegionData legionData) {
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            //     Iterator<IntMap.Entry<BuildData>> itB1 = buildRDatas.iterator();
            //   while (itB1.hasNext()) {
            //     IntMap.Entry<BuildData> c = itB1.next();
            //   BuildData b=c.value;
            if(b.getLegionIndex()==0||b.getBuildType()==2||b.ifSea()){
                continue;
            }
            if(b.getCityLvNow()>0&&b.getLegionIndex()!=0&&b.getLegionIndex()==legionData.getLegionIndex()){//123
                if(b.getCityStability()<game.resGameConfig.recruitUnitBaseMorale   &&ComUtil.ifGet(b.getCityStability())){
                    //如果是玩家,战争支持度可以豁免一部分叛乱
                    if(legionData.isPlayer()){
                        if(legionData.varBattleRegions.size>0&&ComUtil.ifGet(getChiefWarSupport())){
                            break;
                        }
                    }
                    recruit(b.getRegionId(),1101,legionData.getCapitalId());
                    ArmyData  a=getArmyDataByHexagon(b.getRegionId());
                    if(a!=null){
                        if(a.isPlayer()){
                            addPromptData(game.gameMethod.getPromptStrT(86, 0,b.getRegionAreaStr()),
                                    game.gameMethod.getPromptStr(86, 1, b.getRegionAreaStr()),  game.gameMethod.getPromptStr(86, 2, b.getRegionAreaStr()),b.getLegionIndex(),b.getLegionIndex(),false);
                        }
                        a.setLegionIndex(0);
                        b.setBuildStatus(3);
                        b.setInfluenceLi(0);
                        if(a.armyActor==null){
                            a.createActor();
                        }
                    }
                    getPlayerLegionData().addStability(game.resGameConfig.buildRobelForLegionStabilityChange);
                }
            }
            if(b.buildActor!=null&&(roundState==0||(roundState==4&&b.isPlayer()))){
                b.buildActor.update();
            }
        }
    }


    //围攻某国
    private void legion_siege(LegionData targetLegion,int siegeChance) {
        int tForce=targetLegion.getAllForce(),sForce=0;
        int maxForce=0,maxLi=0;
        IntArray legionLis=game.tempUtil.getTempIntArray();
        for(int i=0;i<legionDatas.size;i++){
            LegionData l=getLegionDataByLi(i);
            if(l.getInternIndex()==0||l.getLegionIndex()==targetLegion.getLegionIndex()||l.getLegionIndex()==0||l.getSuzerainLi()!=0||l.varRegionCount==0){continue;}
            ForeignData f=getForeignData(l.getLegionIndex(),targetLegion.getLegionIndex());
            boolean ifAlly=f==null?false:f.getDiplomaticAttitude()==2;
            if(ifAlly){continue;}
            int fd=getForeignDegree(l.getLegionIndex(),targetLegion.getLegionIndex());

            if(fd==0&&ComUtil.ifGet(siegeChance)&&l.borderLegionIndexs.contains(targetLegion.getLegionIndex())){
                if(l.getAllArmySumNum()>maxForce){
                    maxLi=l.getLegionIndex();
                    maxForce=l.getAllArmySumNum();
                }
                sForce+=l.getAllArmySumNum();
                legionLis.add(l.getLegionIndex());
            }else if(fd==-1){
                if(l.getAllArmySumNum()>maxForce){
                    maxLi=l.getLegionIndex();
                    maxForce=l.getAllArmySumNum();
                }
                sForce+=l.getAllArmySumNum();
                legionLis.add(l.getLegionIndex());
            }
        }
        if(sForce<tForce){//如果围攻国家的实力小于目标国家的实力,则从全世界重新找
            legionLis.clear();
            sForce=0; maxForce=0;maxLi=0;
            for(int i=0;i<legionDatas.size;i++){
                LegionData l=getLegionDataByLi(i);
                if(l.getInternIndex()==0||l.getLegionIndex()==targetLegion.getLegionIndex()||l.getLegionIndex()==0||l.getSuzerainLi()!=0||l.varRegionCount==0){continue;}
                ForeignData f=getForeignData(l.getLegionIndex(),targetLegion.getLegionIndex());
                boolean ifAlly=f==null?false:f.getDiplomaticAttitude()==2;
                if(ifAlly){continue;}
                int fd=getForeignDegree(l.getLegionIndex(),targetLegion.getLegionIndex());
                if(fd==0&&ComUtil.ifGet(siegeChance)){
                    if(l.getAllArmySumNum()>maxForce){
                        maxLi=l.getLegionIndex();
                        maxForce=l.getAllArmySumNum();
                    }
                    sForce+=l.getAllArmySumNum();
                    legionLis.add(l.getLegionIndex());
                }else if(fd==-1){
                    if(l.getAllArmySumNum()>maxForce){
                        maxLi=l.getLegionIndex();
                        maxForce=l.getAllArmySumNum();
                    }
                    sForce+=l.getAllArmySumNum();
                    legionLis.add(l.getLegionIndex());
                }
            }
        }

        if(legionLis.size>0&&maxLi>0){
            for(int i=0;i<legionLis.size;i++){
                LegionData l=getLegionDataByLi(legionLis.get(i));
                l.setLevel((l.getLevel()+1)*2);
                l.setInternIndex(maxLi);
            }
        }
        LegionData l=  getLegionDataByLi(maxLi);
        legion_DeclareWar(l,targetLegion,true);
        addPromptData(game.gameMethod.getPromptStrT(92, 0),
                game.gameMethod.getPromptStr(92, 1,l.legionName,targetLegion.legionName),
                game.gameMethod.getPromptStr(92, 2),
                l.getLegionIndex(),targetLegion.getLegionIndex(),false);
        game.tempUtil.disposeTempIntArray(legionLis);
    }

    private void ai_LegionUnitAct(int li) {

        //for ( ArmyData a:armyHDatas.values()) {
        Iterator<IntMap.Entry<ArmyData>> itb = armyHDatas.iterator();
        while (itb.hasNext()) {
             ArmyData a=itb.next().value;
            if(a!=null&&a.getLegionIndex()==li&&a.getTargetRegion()!=-1){
                army_legionActToTarget(a);
            }
        }
    }

    public void army_legionActToTarget(ArmyData a){
        int   targetRegion=getRecentDistanceRegion(a.getRegionId(),a.getTargetRegion(),-1);    //0 全部 -1非友好(含中立) 1友好 2本人
        if(targetRegion!=-1){
            // legionUnit_Move(getBuildDataByRegion(targetRegion),a);
            legionUnit_Act(a,getBuildDataByRegion(targetRegion),true);
            if(a.getRegionId()==a.getTargetRegion()&&a.ifAllyRegion()){
                a.setTargetRegion(-1);
            }
        }else{
            targetRegion=getRecentDistanceRegion(a.getRegionId(),a.getTargetRegion(),0);    //0 全部 -1非友好(含中立) 1友好 2本人
            if(targetRegion!=-1){
                // legionUnit_Move(getBuildDataByRegion(targetRegion),a);
                legionUnit_Act(a,getBuildDataByRegion(targetRegion),true);
                if(a.getRegionId()==a.getTargetRegion()&&a.ifAllyRegion()){
                    a.setTargetRegion(-1);
                }
            }else{
                a.setTargetRegion(-1);
            }
        }
    }
    //123
    private void executeUnitActToTarget(LegionData l) {

        //  Iterator<IntMap.Entry<ArmyData>> itb = armyHDatas.iterator();

        //int i=0;
      //  Iterator<IntMap.Entry<ArmyData>> itb = armyHDatas.iterator();
        for (int i=0;i<l.armyArrays.size;i++) {
            ArmyData a=l.armyArrays.get(i);
            // Gdx.app.log("excutePlayerArmyTargetAct",i+"");

            //  ArmyData a=itb.next().value;
            /*if(a!=null&&a.targetRegion==15842&&a.getLegionIndex()==0){
                int s=0;
            }*/
            if(a!=null&&a.getArmyHpNow()>=0&&ifGridIsPass(a.getTargetRegion())&&a.getArmyRound()==0&&a.getLegionIndex()==l.getLegionIndex()){
                if(l.getLegionIndex()==0&&getRegionId(a.getHexagonIndex())==a.getHexagonIndex()&&!a.potionIsSea()){//叛军不会离开城市
                    continue;
                }

                if(a.getRegionId()==a.getTargetRegion()){
                    if(ifHaveCanActPotion(a,false)){
                        army_ActToTarget(a,false);
                    }else{
                        if((roundState==0||roundState==4)&&a.armyActor!=null&&a.isPlayer()){
                            a.armyActor.update();
                        }
                    }
                    if(a.ifAllyRegion()){
                        a.setTargetRegion(-1);
                    }
                }else if(a.getRegionId()!=a.getTargetRegion()){
                    army_ActToTarget(a,false);
                }
            }
        }

    }


    private void excutePlayerBuildPolicy() {
        LegionData l=getPlayerLegionData();
        //Iterator<IntMap.Entry<BuildData>> itb = buildRDatas.iterator();
        //while (itb.hasNext()) {
        //  BuildData b=itb.next().value;
        /*for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
        if(b.getBuildRound()==0&&b.getBuildPolicy()>0&&b.isPlayer()){
                //如果资源执行不足,则跳出
                if(!build_ExcutePolicy(null,l,b)){
                    return;
                }
            }
        }*/
        LegionData pl=getPlayerLegionData();
        pl.buildArrays.shuffle();
        for(int bi=0;bi<pl.buildArrays.size;bi++) {
            BuildData b=pl.buildArrays.get(bi);
            if(b.getBuildRound()==0&&b.isPlayer()&&!b.ifSea()&&!b.isWar()&&b.getBuildPolicy()>0){
                if(!build_ExcutePolicy(null,l,b)){
                    break;
                }
            }
        }
    }


    //rate 10 则是1/10
    private void world_Help(LegionData l, int rate) {
        int wMoney= worldData.getWorldMoney()*rate/100;
        int wIndustry= worldData.getWorldIndustry()*rate/100;
        int wFood= worldData.getWorldFood()*rate/100;
        int wTech= worldData.getWorldTech()*rate/100;
        int v1=0,v2=0,v3=0,v4=0;
        if(l.isPlayer()){
            if(l.getMoney()<wMoney){v1=wMoney-l.getMoney();  l.setMoney(wMoney);}
            if(l.getIndustry()<wIndustry){v2=wIndustry-l.getIndustry();  l.setIndustry(wIndustry);}
            if(l.getFood()<wFood){v3=wFood-l.getFood();  l.setFood(wFood);}
            if(l.getTech()<wTech){v4=wTech-l.getTech();  l.setTech(wTech);}
            if((v1>0||v2>0||v3>0||v4>0)){
                addPromptData(game.gameMethod.getPromptStrT(22,0),
                        game.gameMethod.getPromptStrT(22,1),
                        game.gameMethod.getPromptStrT(22,2,v1,v2,v3,v4),masterData.playerLegionIndex,masterData.playerLegionIndex,false);
            }
        }else{
            l.addMoney(wMoney);
            l.addIndustry(wIndustry);
            l.addFood(wFood);
            l.addTech(wTech);
        }

    }


    // 随机事件从配置读取
    private void executeRandomEvent() {
        Array<XmlReader.Element> rEventsEs=  game.gameConfig.getDEF_REVENT().e.getChildrenByName("revent");
        LegionData pl=getPlayerLegionData();
        XmlReader.Element rEventsE;
        for(int i = 0, iMax = game.resGameConfig.rEventMaxInRound; i<iMax; i++){
            rEventsE=rEventsEs.random();
            if(ComUtil.ifGet(rEventsE.getInt("randomChance",10))){
                excuteREvent(legionDatas.random(),rEventsE);
            }
            if(ComUtil.ifGet(rEventsE.getInt("playerChance",10))){
                excuteREvent(pl,rEventsE);
            }
        }
    }


    //外交调整
    //每回合自动恢复自身以及阵营相同的关系,驻受士兵的地块 城市增加稳定度
    private void legion_diplomaticAdjustment(int index){
        if(foreignDatas!=null&&foreignDatas.size>0){
            for(int i=0;i<foreignDatas.size;i++){
                if(index!=-1&&i%masterData.getRoundForYear()!=index){ continue; }//每4回合轮流进行外交
                ForeignData f=foreignDatas.get(i);
                int dr= getRealDiplomaticRecognition(f.getTargetLegionIndex(),f.getSourceLegionIndex());
                if(f.getSourceLegionIndex()==f.getTargetLegionIndex()){
                    if(f.favorValue <100){
                        f.addFavor(ComUtil.getRandom(1,3));
                    }
                }else  if(ifAllyPlayerByLi(f.getSourceLegionIndex())||ifAllyPlayerByLi(f.getTargetLegionIndex())){//盟友
                    int fa=ComUtil.getRandom(-5,3);
                    //每年度对盟友的外交波动为负时,将会有{0}%几率不下降
                    if(f.isPlayer()&&ifHaveSpirit(20)&&fa<0&&ifTriggerSpirit(20)){

                    }else {
                        f.addFavor(fa);
                    }
                }else  if(legionDatas.get(f.getSourceLegionIndex()).getInternIndex() == legionDatas.get(f.getTargetLegionIndex()).getInternIndex()||dr==1){
                    if(f.favorValue <70){
                        f.addFavor(ComUtil.getRandom(1,3));
                    }
                    if(f.getDiplomaticAttitude()==2){
                        if(f.favorValue <70){
                            f.addFavor(ComUtil.getRandom(1,3));
                        }
                    }
                }
            }
            //如果盟国区域数大于{7},则每回合有{1}%几率降低与玩家{2}的关系度	60-x/2,(x-49)/2+5	35~10,6~30
            /*if(ifEffective(16)&&getPlayerAmbition()>50){
                int pl=(126-getPlayerAmbition())*getPlayerLegionData().varRegionCount/100;
                for(int i=0,iMax=legionDatas.size;i<iMax;i++){
                    if(index!=-1&&i%masterData.getRoundForYear()!=index){ continue; }//没4回合轮流进行外交
                    LegionData l=legionDatas.get(i);
                    if(!l.isPlayer()&&ifAllyPlayerByLi(i)&&l.varRegionCount>pl&&ComUtil.ifGet(60-getPlayerAmbition()/2)){
                        ForeignData f=getForeignData(i);
                        f.reduceFavor((getPlayerAmbition()-49)/2+5);
                        addPromptData(game.gameMethod.getPromptStrT(50,0,l.legionName),
                                game.gameMethod.getPromptStrT(50,1,l.legionName),
                                game.gameMethod.getPromptStrT(50,2,l.legionName,f.getFavorValue()),f.getSourceLegionIndex(),f.getTargetLegionIndex());
                    }
                    //根据恶名,每回合掉好感度
                    int fd=getForeignDegree(masterData.playerLegionIndex,l.getLegionIndex());
                    ForeignData f=getForeignData(l.getLegionIndex());
                    if(!l.isPlayer()&&f!=null){
                        if(fd<1){
                            if(chiefData!=null&&ComUtil.ifGet(chiefData.getReputation())){
                                f.addFavor(1);
                            }
                        }
                    }
                }
            }*/




            //每回合 附庸关系自动掉,玩家阵营掉的快
            /*for(int i=0,iMax=legionDatas.size;i<iMax;i++){
                if(index!=-1&&i%masterData.getRoundForYear()!=index){ continue; }//没4回合轮流进行外交
                LegionData l=legionDatas.get(i);
                if(ComUtil.ifGet(l.getSuzerainFaver()/2)&&ComUtil.ifGet(game.resGameConfig.coloanyRevoltChance+getAge()*20)&&l.getInternIndex()!=0&&l.getSuzerainLi()>0){
                    if(ifAllyPlayerByLi(l.getLegionIndex())){
                        ForeignData f=    getForeignData(l.getLegionIndex(),l.getSuzerainLi());
                            f.reduceFavor(ComUtil.getRandom(5,10));
                            addPromptData(game.gameMethod.getPromptStrT(49,0,l.legionName),
                                    game.gameMethod.getPromptStrT(49,1,l.legionName),
                                    game.gameMethod.getPromptStrT(49,2,l.legionName,f.getFavorValue()),f.getSourceLegionIndex(),f.getTargetLegionIndex());
                    }else{
                        ForeignData f=    getForeignData(l.getLegionIndex(),l.getSuzerainLi());
                        if(f.getDiplomaticAttitude()!=2){
                            f.reduceFavor(ComUtil.getRandom(2,5));
                        }
                    }
                }
            }*/

            // Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
            //while (it.hasNext()) {
            //  IntMap.Entry<BuildData> c = it.next();
            //BuildData b=c.value;
            for(int bi=0;bi<buildRDatas.size();bi++) {
                if(index!=-1&&bi%masterData.getRoundForYear()!=index){ continue; }//没4回合轮流进行外交
                BuildData b=buildRDatas.getByIndex(bi);
                if(b!=null&&!b.ifSea()){
                    ArmyData a=getArmyDataByHexagon(b.getRegionId());
                    if(a!=null&&a.getLegionIndex()==b.getLegionIndex()&&b.getCityStability()<game.resGameConfig.cityStabilityChangeValueMax){
                        b.changeCityStability(ComUtil.getRandom(1,b.cultureLvNow));
                    }
                    b.changeCityStability( getEffectCityStabilityInRound(b));
                }
            }
        }
    }

    public int getEffectCityStabilityInRound(BuildData b) {
        //int[]  c=    getConnectData(b.getRegionId());
        ConnectData c=  getConnectData(b.getRegionId());
        int v=b.getCultureLvNow();BuildData eb;
        if(c==null){
            return v;
        }
        for(int i=0;i<c.getRegionConnectCount();i++){
            // eb=getBuildDataByRegion(c[i]);
            eb=getBuildDataByRegion(c.getConnectValue(i+1,0));
            if(eb!=null){
                if(ifAllyByLi(eb.getLegionIndex(),b.getLegionIndex())){
                    v+=b.getCultureLvNow();
                }else {
                    v-=b.getCultureLvNow();
                }
            }
        }
        //  game.tempUtil.disposeTempIntArray(tempIntArray2);
        return v;
    }


    //isRound true 给军团钱  false 只计算收入
    private void updIncome(boolean isRound) {
        //设置超出玩家资源上限部分减半
       LegionData pl= getPlayerLegionData();
       if(isRound){
           pl.setThanIncomeLoss();
       }
        for (int i=0;i<legionDatas.size;i++) {
            LegionData legion=legionDatas.get(i);
            if(isRound){
                if(roundState!=1){
                    if (legion.taxBonus>100) {
                        legion.reduceTaxBonus(ComUtil.getRandom(1,3));
                        legion.reduceStability(2);
                    }else  if (legion.taxBonus<=100){
                        legion.addTaxBonus(ComUtil.getRandom(1,3));
                    }
                }
                if (legion.getLegionRound() > 0) {
                    legion.legionRound -= 1;
                }
                legion.tradeCount = 1 + legion.financialLvMax;
            }
            legion.varMissileNum = 0;
            legion.incomeMoney = 0;
            legion.incomeFood = 0;
            legion.incomeTech = 0;
            legion.incomeIndustry = 0;
            legion.incomeMineral=0;
            legion.incomeOil=0;

            legion.varBattleRegions.clear();
            legion.ifRequestHelp=false;
        }
        // Gdx.app.log("updIncome 1",legionDatas.get(masterData.playerLegionIndex).getAllAttributes());

        //1 收入
        //   Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
        // while (it.hasNext()) {
        //   IntMap.Entry<BuildData> c = it.next();
        //  BuildData b=c.value;
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            LegionData legion = b.getLegionData();
            addVarIncomeByBuild(legion,b);
            if(isRound){
                if (b.getBuildRound() > 0) {
                    b.buildRound -= 1;
                }
                if (b.cityHpNow == b.cityHpMax) {
                /*if (b.getBuildStatus() >1) {
                    addUpdColorRegion(b.getRegionId());
                }*/
                    b.setBuildStatus(0);
                } else if(b.getLegionIndex()>0){
                    if(masterData.playerMode==2){
                        buildReplyHp(b);
                    }else if(!b.isWar()){
                        buildReplyHp(b);
                    }
                }
            }
        }
        //征服模式下对超过人口的进行限制
        if(masterData.getPlayerMode()==0){
            //   int plPopMax=getPlayerLegionData().getPopulationMax();
            if( pl.getPopulationNow()>game.resGameConfig.populationLimitTrigger){
                int rate=pl.getPopEfficency();
                pl.incomeMoney=  pl.incomeMoney*rate/100;
                pl.incomeIndustry=  pl.incomeIndustry*rate/100;
                pl.incomeTech=  pl.incomeTech*rate/100;
                pl.incomeFood=  pl.incomeFood*rate/100;
                pl.incomeMineral=  pl.incomeMineral*rate/100;
                pl.incomeOil=  pl.incomeOil*rate/100;
            }
        }
        for(LegionData l:legionDatas){
            l.incomeIndustry=ComUtil.limitValue(l.incomeIndustry,0, (int) (l.incomeMoney*game.resGameConfig.industryIncomeMaxRate))  ;
            l.incomeTech=ComUtil.limitValue(l.incomeTech,0, (int) (l.incomeMoney*game.resGameConfig.techIncomeMaxRate));
            l.incomeFood=ComUtil.limitValue(l.incomeFood,0, (int) (l.incomeMoney*game.resGameConfig.foodIncomeMaxRate));
        }
        if(masterData.ifChief==1&&chiefData!=null){
            if(getChiefSpecialEffect(12)>=0){
                pl.incomeMoney= pl.incomeMoney*(100+chiefData.varMoneyEfficiencyChange+(pl.getStability()-50)/2+50-chiefData.literacy)/100;
            }else{
                pl.incomeMoney= pl.incomeMoney*(100+chiefData.varMoneyEfficiencyChange+50-chiefData.literacy)/100;
            }
            pl.incomeFood= pl.incomeFood*(100+chiefData.varResEfficiencyChange+50-chiefData.literacy)/100;
            pl.incomeMineral= pl.incomeMineral*(100+chiefData.varResEfficiencyChange+50-chiefData.literacy)/100;
            pl.incomeOil=pl.incomeOil*(100+chiefData.varResEfficiencyChange+50-chiefData.literacy)/100;
            pl.incomeTech=pl.incomeTech*(chiefData.literacy+50)/100;
            int minMineral=pl.getIndustLvMax()*game.resGameConfig.addMineralEachIndustryLv;
            int minOil=pl.getTechLvMax()*game.resGameConfig.addOilEachTechLv;
            if(pl.incomeMineral<minMineral){
                pl.incomeMineral=minMineral;
            }
            if(pl.incomeOil<minOil){
                pl.incomeOil=minOil;
            }
        }
        if(isRound){
            if(masterData.getGameDifficulty()<3){//正常难度
                for(LegionData l:legionDatas){
                    l.addIncome();
                }
            }else{//非正常难度
                Boolean foreign=false;
                for(LegionData l:legionDatas){
                    //是征服模式的情况下有一定几率根据好感度,判断其收入是否是依据玩家收入
                    if(ifSystemEffective(4)){
                        foreign= ComUtil.ifGet(getForeignData(l.getLegionIndex()).getFavorValue());
                    }
                    if(getForeignDegree(l.getLegionIndex(),masterData.playerLegionIndex)!=-1||foreign){
                        l.addIncome();
                    }else{
                        if(getPlayerLegionData().incomeMoney>l.incomeMoney){
                            l.addMoney(getPlayerLegionData().incomeMoney);
                        }else{
                            l.addMoney(l.incomeMoney);
                        }
                        if(getPlayerLegionData().incomeIndustry>l.incomeIndustry){
                            l.addIndustry(getPlayerLegionData().incomeIndustry);
                        }else{
                            l.addIndustry(l.incomeIndustry);
                        }
                        if(getPlayerLegionData().incomeTech>l.incomeTech){
                            l.addTech(getPlayerLegionData().incomeTech);
                        }else{
                            l.addTech(l.incomeTech);
                        }
                        if(getPlayerLegionData().incomeFood>l.incomeFood){
                            l.addFood(getPlayerLegionData().incomeFood);
                        }else{
                            l.addFood(l.incomeFood);
                        }
                    }
                }
            }
        }


        // Gdx.app.log("updIncome 2",legionDatas.get(masterData.playerLegionIndex).getAllAttributes());

    }

    public void nextRoundPlayerBorderAct() {

        //建筑行动 造兵
        for(int i=0;i<playerInfo.borderPlayerRegionBuilds.size;i++){
            BuildData b=playerInfo.borderPlayerRegionBuilds.get(i);
            if(b!=null&&!b.isPlayer()){
                LegionData bl=b.getLegionData();
                ArmyData a=b.getRegionUnit();
                if(a!=null){
                    if(a.isUnitGroup()){
                        int mergeId=b.getRandomCanRecruitMergeUnitId(a,!bl.ifAiCheatChance());
                        if(mergeId>0){
                            a.mergeUnitGroup(mergeId);
                            if(bl.ifPlayerAlly()){
                                payCardPrice(bl,b,mergeId,true);
                            }
                            a.addArmyRound(1);
                        }
                        if(b.getBuildRound()==0&&a.haveCanUpdUnitGrouplv()){
                            a.randomUpdUnitGroupLv();
                            a.addArmyRound(1);
                        }
                        if(b.getBuildRound()==0&&a.haveCanUpdUnitWealv()){
                            a.randomUpdArmyWealv();
                            b.addBuildRound(1);
                        }
                    }else{
                        if(a.canUpdGroupLv()){
                            a.updArmyGroup();
                            a.addArmyRound(1);
                        }
                        if(b.getBuildRound()==0&&a.haveCanUpdUnitWealv()){
                            a.updWeaLv();
                            b.addBuildRound(1);
                        }
                    }
                }else  if(bl.ifPlayerAlly()){
                   ai_RecruitUnit(bl,b,getBuildCardIdTIA1(bl, b, false, -2,true),-1);
                }else if(bl.ifAiCheatChance()){
                    ai_resBalanceByPlayerOccup(bl);
                    if(bl.ifAiCheatChance()){
                        ai_unitTeleportToAroundRegion(b.getRegionId(),bl.getLegionIndex(),getRoundProgress()>50);
                    }
                }else{
                   ai_RecruitUnit(bl,b,getBuildCardIdTIA1(bl, b, false, -2,false),-1);
                }
            }
        }
        //单位行动
        if(masterData.getPlayerMode()==2){//军团行动
            //遍历所有飞行单位,先行动一遍
            Array<BuildData> buildDatas=game.tempUtil.getTempArray();
            for(int i=0;i<playerInfo.borderPlayerRegionUnits.size;i++){
                ArmyData a=playerInfo.borderPlayerRegionUnits.get(i);
                LegionData legion=a.getLegionData();
                if(a!=null&&!a.isPlayer()&&a.getArmyType()==5&&a.getArmyRound()==0){
                    BuildData tb=getBuildDataByRegion(getRegionId(getTargetEnemyByRangeTIA1(a)));
                    if(tb!=null){
                        if(a.haveCanAtkEnemy()){
                            legionUnit_Act(a,tb,true);
                        }
                        if(!buildDatas.contains(tb,false)){
                            buildDatas.add(tb);
                        }
                    }
                }
            }

            //遍历所有军团
            for(int bi=0;bi< buildDatas.size;bi++) {
              BuildData  build=buildDatas.get(bi);
                    /*if(build.getRegionId()==11755){
                        int s=0;
                    }*/
                if(build!=null&& !build.isPlayer()&&build.canLegionAct()){
                    LegionData legion=build.getLegionData();
                    BuildData enemyBuild=build.getRandomAroundEnemyBuildData();
                    LegionData enemyLegion=null;
                    //获得周边有敌人部队的敌对地区的数量
                    int enemyLegionUnitCount=build.getAroundEnemyLegionUnitRegionCount();
                    int allyLegionUnitCount=build.getAroundAllyLegionUnitRegionCount();
                    //查找周边敌对省区
                    if(enemyBuild!=null){
                        if(!legion.varBattleRegions.contains(build.getRegionId())){
                            legion.varBattleRegions.add(build.getRegionId());
                        }
                        enemyLegion=enemyBuild.getLegionData();
                        BuildData safeBuild=build.getRandomAroundSafeBuildData(enemyLegionUnitCount);
                        if(safeBuild!=null){//撤离部队
                            if( !build.ifHaveUnit(1,1)  ||enemyBuild.getForces(3)>build.getForces(3)*3){//如果敌对实力完全大于我方,则全部撤离
                                Array<ArmyData> armys=build.getCanActLegionUnitTAA(1);
                                legionUnit_Act(build,safeBuild,armys,true);
                            }else if(enemyLegionUnitCount>2){
                                //撤离血量或士气低的部队
                                Array<ArmyData> armys=build.getCanActLegionUnitTAA(3);//tempArmyDataArray
                                legionUnit_Act(build,safeBuild,armys,true);
                            }
                        }
                        //剩余部队判断是否满足进攻条件,满足则进攻
                        if( (build.ifHaveUnit(1,1)&&!enemyBuild.ifHaveUnit(1,1))||(build.getForces(3)>enemyBuild.getForces(0)||legion.getUnitArmyNum()>enemyLegion.getUnitArmyNum()||  legion.isTerritoryRegion(enemyBuild.getRegionId())||ComUtil.ifGet((allyLegionUnitCount-enemyLegionUnitCount+1)*30)))  {
                            Array<ArmyData> armys=build.getCanActLegionUnitTAA(2);
                            if(armys.size>0){
                                legionUnit_Act(build,enemyBuild,armys,true);
                            }
                        }
                    }else{
                        //获取有战力的军队
                        Array<ArmyData> armys=build.getCanActLegionUnitTAA(2);
                        if(armys.size>0){
                            int targetRegion=-1;
                            if(legion.varBattleRegions.size!=0){ //遍历最近的目标省区
                                targetRegion= getRecentDistanceRegion(build.getRegionId(),legion.varBattleRegions,-1);    //0 全部 -1非友好(含中立) 1友好 2本人
                                if(targetRegion==-1){
                                    targetRegion= getRecentDistanceRegion(build.getRegionId(),legion.varBattleRegions,0);    //0 全部 -1非友好(含中立) 1友好 2本人
                                }
                            }
                            for(int i=0;i<armys.size;i++){
                                ArmyData a=armys.get(i);
                                if(a.getTargetRegion()==-1){
                                    if(targetRegion!=-1){
                                        a.setTargetRegion(targetRegion);
                                    }else{ //给予随机敌对国家首都作为目标
                                        if(a.isPlayer()){
                                            a.setTargetRegion(getCanAttackTargetRegionTIA1(legion, a.getRegionId(), 3, (a.getArmyType() == 4 || a.getArmyType() == 8),-1));
                                        }else{
                                            a.setTargetRegion(getCanAttackTargetRegionTIA1(legion, a.getRegionId(), 3, (a.getArmyType() == 4 || a.getArmyType() == 8),-2));
                                        }
                                    }
                                }else{
                                    army_legionActToTarget(a);
                                }
                            }
                        }
                    }
                }
            }
            game.tempUtil.disposeTempArray(buildDatas);
        }else {//ai行动
            //设定ai目标
          int  targetLegionIndex = 0,movement=0,tempValue=-1;
          boolean ifSeaArea,limitCoast=true;
            //兵种行动
            boolean ifAct = false;
           int hexagon=-1;
            //Iterator<IntMap.Entry<ArmyData>> it = armyHDatas.iterator();
                /*Iterator<IntMap.Entry<ArmyData>> itb = armyHDatas.iterator();
                while (itb.hasNext()) {
                    ArmyData a=itb.next().value;*/
            // while (it.hasNext()) {
            // IntMap.Entry<ArmyData> tc = it.next();
            //ArmyData  a=it.next().value;

            for(int i=0;i<playerInfo.borderPlayerRegionUnits.size;i++){
                ArmyData a=playerInfo.borderPlayerRegionUnits.get(i);
                if (a == null||a.isPlayer() || a.getArmyHpNow() <= 0||a.getArmyRound()>0 ) {
                    continue;
                }
                if(a.getHexagonIndex()==19912){
                    int s=0;
                }
                LegionData legion=a.getLegionData();
                Fb2Map.MapHexagon hm=a.getHexagonData();
                if(hm==null){
                    continue;
                }
                BuildData b = a.getBuildData();
                if (b != null&&!b.potionIsSea()&&a.getHexagonIndex()==b.getRegionId()&&(b.getCityStability() < game.resGameConfig.cityStabilityTriggerValue || (b.getCityHpMax() > 0 && b.getHpRate() < game.resGameConfig.aiNotActWhenCityHpRate)) && a.getGeneralIndex() == 0) {
                    continue;
                }
                if (a.getLegionIndex() == legion.getLegionIndex()) {
                    movement = a.getMovement();
                    if (a.getArmyType() == 4 || a.getArmyType() == 8) {
                        ifSeaArea = true;
                        limitCoast = false;
                    } else {
                        ifSeaArea = false;
                    }
                    if(a.armyActor==null&&a.getArmyRound()==0){
                        if(a.getGeneralIndex()!=0){
                            if(a.getUnitArmyId0()==1105){
                                a.setUnitArmyId0(1104);
                            }
                            if(a.getUnitGroup()<a.getArmyRank()&&legion.ifAiCheatChance()){
                              int rs=  army_resetUnitGroup(a,a.getArmyRank()-a.getUnitGroup());
                                a.addArmyRound(rs);
                                continue;
                            }
                        }
                        if(legion.ifAiCheatChance()){
                            army_enhance(a);
                        }
                        if(b!=null&&b.getBuildRound()==0&&!b.isWar()){
                            if(a.getUnitGroup()<a.getArmyRank()&&a.getUnitArmyId0()==1105){
                                a.setUnitArmyId0(1104);
                            }else if(a.isUnitGroup()){
                                int mergeId=b.getRandomCanRecruitMergeUnitId(a,!legion.ifAiCheatChance());
                                if(mergeId>0){
                                    a.mergeUnitGroup(mergeId);
                                    payCardPrice(legion,b,mergeId,true);
                                    a.addArmyRound(1);
                                }
                                if(b.getBuildRound()==0&&a.haveCanUpdUnitGrouplv()){
                                    a.randomUpdUnitGroupLv();
                                    a.addArmyRound(1);
                                }
                                if(b.getBuildRound()==0&&a.haveCanUpdUnitWealv()){
                                    a.randomUpdArmyWealv();
                                    b.addBuildRound(1);
                                }
                            }else{
                                if(a.canUpdGroupLv()){
                                    a.updArmyGroup();
                                    a.addArmyRound(1);
                                }
                                if(b.getBuildRound()==0&&a.haveCanUpdUnitWealv()){
                                    a.updWeaLv();
                                    b.addBuildRound(1);
                                }
                            }
                        }
                    }
                    if (a.targetRegion < 0 && movement > 0) {

                        if (a.armyActor != null && (a.getArmyMorale() < 30 || a.getHpRate() < 30)) {
                            if(a.getUnitGroupSum()>3 ){
                                a.dissolveUnitGroupAndRestoreState();
                            }
                            //撤退
                            // tempValue= getTargetRegionForAllyTIA1(a.getHexagonIndex(), a.getLegionIndex(),ifSeaArea,true);
                            tempValue = getRandomRegionForAllyTIA1(a.getLegionIndex(), a.getHexagonIndex(), ifSeaArea, true, -1);
                            a.setTargetRegion(tempValue);
                            if (roundState == 0 && a.armyActor != null && a.isPlayer()) {
                                a.armyActor.update();
                            }
                        } else if (a.armyType == 4 || a.armyType == 8) {
                            //寻找周围有无敌对海洋区域,有则去占领
                            hexagon = getRandomRegionCanAtkTIA1(a.getLegionIndex(), a.getHexagonIndex(), ifSeaArea, true);
                            if (hexagon != -1) {
                                a.setTargetRegion(hexagon);
                                if (roundState == 0 && a.armyActor != null && a.isPlayer()) {
                                    a.armyActor.update();
                                }
                            } else {//如果没有则搜索 周围海洋区域有无敌对军队,获得目标
                                hexagon = getRandomRegionForHaveEUnitTIA1(a.getLegionIndex(), a.getHexagonIndex(), ifSeaArea, true);

                                if (hexagon != -1) {
                                    a.setTargetRegion(getRegionId(hexagon));
                                } else {
                                    a.setTargetRegion(-1);
                                }
                                if (roundState == 0 && a.armyActor != null && a.isPlayer()) {
                                    a.armyActor.update();
                                }
                            }
                        } else if (ComUtil.ifGet(a.getAttackChance())) {
                            //1.遍历3轮.选择优先进攻目标为敌方地块,次要目标为敌人首都

                            int attackTargetRegion ;
                            if(a.isPlayer()){
                                attackTargetRegion=getCanAttackTargetRegionTIA1(legion, a.getRegionId(), 3, ifSeaArea,-1);
                            }else{
                                attackTargetRegion=getCanAttackTargetRegionTIA1(legion, a.getRegionId(), 3, ifSeaArea,-2);
                            }
                            if (attackTargetRegion != -1) {
                                a.setTargetRegion(attackTargetRegion);

                                targetLegionIndex = getLegionIndexByRegion(attackTargetRegion);
                            } else if (targetLegionIndex > 0) { //2.如果没有,则设置为进攻首都
                                int c = legionDatas.get(targetLegionIndex).getCapitalId();
                                a.setTargetRegion(c);
                            } else {
                                a.setTargetRegion(-1);
                            }
                            if (roundState == 0 && a.armyActor != null && a.isPlayer()) {
                                a.armyActor.update();
                            }
                        } else {//2.如果不进攻,则给一个在战斗的目标作为前进方向
                            if (legion.varBattleRegions.size > 0) {
                                int c = legion.varBattleRegions.random();
                                if (ifSeaArea) {
                                    if (ifSeaArea(c)) {
                                        a.setTargetRegion(c);
                                    } else {
                                        if(a.isPlayer()){
                                            a.setTargetRegion(getCanAttackTargetRegionTIA1(legion, a.getRegionId(), 3, ifSeaArea,-1));
                                        }else{
                                            a.setTargetRegion(getCanAttackTargetRegionTIA1(legion, a.getRegionId(), 3, ifSeaArea,-2));
                                        }
                                    }
                                } else {
                                    a.setTargetRegion(c);
                                }
                            } else {
                                if(a.isPlayer()){
                                    a.setTargetRegion(getCanAttackTargetRegionTIA1(legion, a.getRegionId(), 3, ifSeaArea,-1));
                                }else{
                                    a.setTargetRegion(getCanAttackTargetRegionTIA1(legion, a.getRegionId(), 3, ifSeaArea,-2));
                                }
                            }
                            if (roundState == 0 && a.armyActor != null && a.isPlayer()) {
                                a.armyActor.update();
                            }
                        }
                    }


                    if (a.getTargetRegion() != -1 && a.getArmyRound() == 0) {
                /*if(a.getHexagonIndex()==18444&&legion.getBuildPolicy()==a.getBuildPolicy()){
                    Gdx.app.log("army",""+a.getAllAttributes());
                }*/
                        movement = a.getMovement();
                        ifAct = false;
                        if (a.getArmyType() == 4 || a.getArmyType() == 8) {
                            ifSeaArea = true;
                        } else {
                            ifSeaArea = false;
                        }
                        /*if(a.getHexagonIndex()==15480){
                            Gdx.app.error("nextRoundAct","15480");
                        }*/
                        //如果士气低落,则无法移动
                        if (a.getArmyMorale() < game.resGameConfig.unitMoraleMinLimit) {
                            army_Standby(a);
                            a.addArmyRound(1);
                        } else if (movement > 0) {//如果是玩家获胜的目标
                            if(legion.getLegionIndex()==0&&getRegionId(a.getHexagonIndex())==a.getHexagonIndex()&&!a.potionIsSea()){//叛军不会离开城市
                                continue;
                            }
                            if (ComUtil.ifGet(a.getAttackChance()) && getAroundUnitCountIA1(a, 2) < 5) {
                              int  direct = getDirect(a.getHexagonIndex(), a.getTargetRegion());
                                //获取可以行动的位置
                                IntIntMap tempIntIntMap2 = game.tempUtil.getTempIntIntMap();

                                boolean ifHaveAct= !a.isPlayer()&&  getPotionForAiArmyCanActTIIM1(a, a.getHexagonIndex(), 0, true, false, tempIntIntMap2);
                              if(ifHaveAct){//获取最高分数
                                    while (ifHaveAct&&(a.ifMove==0||a.ifAttack==0)) {
                                        ifHaveAct=   getPotionForAiArmyCanActTIIM1(a, a.getHexagonIndex(), 0, true, false, tempIntIntMap2);
                                        if(! ai_bestAct(a, tempIntIntMap2)){
                                            break;
                                        }
                                    }
                                }else{
                                  if(a.getRegionId()==a.getTargetRegion()){
                                      if(ifHaveCanActPotion(a,false)){
                                          army_ActToTarget(a,false);
                                      }else{
                                          if((roundState==0||roundState==4)&&a.armyActor!=null&&a.isPlayer()){
                                              a.armyActor.update();
                                          }
                                      }
                                      if(a.ifAllyRegion()){
                                          a.setTargetRegion(-1);
                                      }
                                  }else if(a.getRegionId()!=a.getTargetRegion()){
                                      army_ActToTarget(a,false);
                                  }
                              }
                                if (a.ifMove==0) {
                                    if(a.getHpRate()<50&&!ifAllyByHexagon(a.getHexagonIndex(),a.targetRegion)){
                                        a.targetRegion=a.getSafeRegion();
                                    }
                                    //it = tempIntIntMap2.iterator();
                                    //3.移动到最远距离
                                    int h = getRecentHexagon(legion.ifPlayerAlly() ? -1 : a.getLegionIndex(), a.hexagonIndex, a.targetRegion, tempIntIntMap2, a.getIfSeaForMove());
                                    if (h >= 0 && h < hexagonDatas.size && a.canMove(h)) {
                                        army_Move(a, h);
                                    } else {
                                        //休息
                                        army_Standby(a);
                                    }
                                    a.addArmyRound(1);
                                }
                                game.tempUtil.disposeTempIntIntMap(tempIntIntMap2);
                            } else {
                               int direct = getDirect(a.getHexagonIndex(), a.getTargetRegion());
                                //如果没有士气,则撤退
                                IntArray tempMoveIntArray = getArmyMovablePostionTIIM1(a.getHexagonIndex(), a.getLegionIndex(), movement, direct, game.tempUtil.getTempIntArray(), ifSeaArea, limitCoast, a.playerCanCommand());
                                hexagon = getTargetHexagonForAllyTIA1(tempMoveIntArray, a.getLegionIndex(), ifSeaArea);
                                game.tempUtil.disposeTempIntArray(tempMoveIntArray);
                                if (hexagon != -1 && a.canMove(hexagon)) {//移动
                                    army_Move(a, hexagon);
                                } else if (!ifAllyByHexagon(a.getHexagonIndex(), a.getRegionId())) {
                                    //  tempValue= getTargetRegionForAllyTIA1(a.getHexagonIndex(), a.getLegionIndex(),ifSeaArea,true);
                                    tempValue = getRandomRegionForAllyTIA1(a.getLegionIndex(), a.getHexagonIndex(), ifSeaArea, true, -1);
                                    a.setTargetRegion(tempValue);
                                    if (roundState == 0 && a.armyActor != null && a.isPlayer()) {
                                        a.armyActor.update();
                                    }
                                    army_ActToTarget(a, true);
                                } else {
                                    army_Standby(a);
                                }
                            }
                        } else {//寻找周围有无敌人
                            hexagon = getCanAtkTargetByRangeTIA1(a);
                            if (hexagon !=-1) {
                                army_Attack(a, hexagon);
                            } else {
                                army_Standby(a);
                            }
                            a.addArmyRound(1);
                        }
                    } else if (a != null && a.getArmyRound() == 0) {//army没有target
                        army_Standby(a);
                        a.addArmyRound(1);
                    }

                    /*//物资如果所在地与归属相同,则补充满物资
                    if (ifAllyByLi(a.getLegionIndex(), getLegionIndexByRegion(a.getHexagonIndex()))) {
                        tempValue=(a.getResLv()+1)*2;
                        a.addArmyGoods(tempValue );
                        a.getLegionData().costFood(tempValue);
                    }*/
                    //如果目标与所在目标相同,则目标归0
                    if (a.getHexagonIndex() == a.getTargetRegion()) {
                        a.setTargetRegion(-1);
                        if (roundState == 0 && a.armyActor != null && a.isPlayer()) {
                            a.armyActor.update();
                        }
                    }
                }
            }
        }

    }

    public void nextRoundAct(LegionData legion,boolean ifUnitAct) {
        Gdx.app.log("nextRoundAct",legion.legionName);
        if((legion.isPlayer()&&roundState!=3)||legion.varRegionCount==0||legion.varRegionCount==4){
            return;
        }
        if(legion.getLegionIndex()==37){
            int s=0;
        }
        roundLegionIndex=legion.getLegionIndex();
        roundCountryIndex=legion.getCountryId();
       /* if(game.sMapScreen!=null){
            //game.sMapScreen.updProgressCountryImage(legion.countryId);
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }*/
        //0.策略行动

        if(roundState==2||roundState==4){
            legion.resetBattleRegions();
        }
        boolean ifAlly = legion.getLegionIndex() > 0 && masterData.playerLegionIndex > 0 && getForeignDegree(legion.getLegionIndex(),masterData.getPlayerLegionIndex())==1;
        if(ifHaveSpirit(0)){
            ifAlly=false;
        }

        BuildData build;
        int cardId;
        int targetLegionIndex = 0;
        int movement = 0;
        boolean ifSeaArea,limitCoast=true,tempBoolean; int tempValue;
       // int direct;
        int hexagon = 0;
        IntArray tempIntArray;
        int popMax=legion.getPopulationMax();
        if (legion.getInternIndex() != 0 ) {
            {
                //从邻国找非敌对国家,拉拢 然后扫描有没有敌对国家,如果有,则下一步,否则找一个关系差的宣战
                if( roundState!=1&&masterData.getRoundNow()%masterData.getRoundForYear()==legion.getLegionIndex()%masterData.getRoundForYear()&& ifSystemEffective(4)&&!ifSystemEffective(18)&&!legion.isPlayer()&&legion.getSuzerainLi()==0){
                    boolean ifHaveCountry=false;
                    //从邻国找非敌对国家,拉拢
                    legion.borderLegionIndexs.shuffle();
                    if(legion.borderLegionIndexs.size>0){
                        for(int i=0;i<legion.borderLegionIndexs.size;i++){
                            int li=legion.borderLegionIndexs.get(i);
                            if(legion.getLegionIndex()==li){continue;}
                            ForeignData f = getForeignData(legion.getLegionIndex(), li);
                            LegionData tl = getLegionDataByLi(li);
                            if(tl.getSuzerainLi()!=0&&tl.getSuzerainLi()!=legion.getLegionIndex()){
                                continue;
                            }
                            //从邻国找关系好的联盟
                            if (f != null && tl != null  && tl.getInternIndex() != 0 && tl.varRegionCount > 0 &&tl.suzerainLi==0&&ComUtil.ifGet(f.getRealFavor())&&f.getDiplomaticAttitude()!=3) {

                                //   int fd=f.getForeignDegree();
                                if(f.getForeignType()==-1){
                                    if(ComUtil.ifGet(f.getRealFavor()-30)){
                                        if((tl.varRegionCount>legion.varRegionCount||tl.getUnitArmyNum()>legion.getUnitArmyNum())){
                                            if(tl.isPlayer()){//与玩家和解
                                                addPromptData(game.gameMethod.getPromptStrT(71,0),game.gameMethod.getPromptStrT(71,1,legion.legionName),"",17,legion.getLegionIndex(),masterData.getPlayerLegionIndex(),-1,-1,false);
                                            }else{//签署和约
                                                f.setForeignType(1);
                                                f.setForeignValue(10);
                                            }
                                        }else{

                                            if(tl.isPlayer()){//与玩家缓和矛盾
                                                addPromptData(game.gameMethod.getPromptStrT(41,0),game.gameMethod.getPromptStrT(41,1,legion.legionName,f.getFavorValue()),"",7,legion.getLegionIndex(),masterData.getPlayerLegionIndex(),-1,-1,false);
                                            }else{
                                                f.addFavor(ComUtil.getRandom(0,5));
                                            }
                                        }
                                        ifHaveCountry=true;
                                    }
                                }else if(f.getForeignType()!=1&&f.getFavorValue()>game.resGameConfig.allianceEventFavorLimit){
                                    if(ComUtil.ifGet(f.getRealFavor()-50)) {
                                        if (tl.isPlayer()) {//拉拢玩家加入阵营
                                            if ( (tl.varRegionCount > legion.varRegionCount || tl.getUnitArmyNum() > legion.getUnitArmyNum())) {
                                                if(!ifLegionCanAlly(tl,legion)){continue;}
                                                addPromptData(game.gameMethod.getPromptStrT(39, 0), game.gameMethod.getPromptStrT(39, 1, legion.legionName), "", 5, legion.getLegionIndex(), masterData.getPlayerLegionIndex(), -1, -1,false);
                                            } else {
                                                if(!ifLegionCanAlly(legion,tl)){continue;}
                                                addPromptData(game.gameMethod.getPromptStrT(37, 0), game.gameMethod.getPromptStrT(37, 1, legion.legionName), "", 3, legion.getLegionIndex(), masterData.getPlayerLegionIndex(), -1, -1,false);
                                            }

                                        } else {
                                            if (tl.varRegionCount > legion.varRegionCount || tl.getUnitArmyNum() > legion.getUnitArmyNum()) {
                                                if(!ifLegionCanAlly(tl,legion)){continue;}
                                                ifHaveCountry = legion_AllianceTIA1(legion, tl, false);
                                            } else {
                                                if(!ifLegionCanAlly(legion,tl)){continue;}
                                                ifHaveCountry = legion_AllianceTIA1(tl, legion, false);
                                            }
                                        }
                                        ifHaveCountry = true;
                                    }
                                }
                                if(ifHaveCountry){
                                    break;
                                }
                            }
                        }
                    }

                    {//然后从邻国找敌对国家
                        ifHaveCountry=false;
                        IntArray countryLis=game.tempUtil.getTempIntArray();
                        //从邻国中找敌对国家
                        for(int i=0;i<legion.borderLegionIndexs.size;i++){
                            ForeignData f = getForeignData(legion.getLegionIndex(), i);
                            LegionData tl = getLegionDataByLi(i);
                            if (f != null && tl != null && tl.getInternIndex() != 0 && tl.varRegionCount > 0&&f.getDiplomaticAttitude()!=3 ) {
                                //   int fd=f.getForeignDegree();
                                if (f.getForeignType()==0 && f.getFavorValue() < game.resGameConfig.neutralLegionDeclaredWarFavor&& getRealDiplomaticRecognition(f.sourceLegionIndex, f.targetLegionIndex) == -1 && (f.getDiplomaticAttitude()==3||legion.varRegionCount > tl.varRegionCount || legion.incomeMoney > tl.incomeMoney || ComUtil.ifGet(100 - f.getRealFavor()))) {
                                    countryLis.add(tl.getLegionIndex());
                                }
                                if (f.getForeignType()==-1) {//如果有敌对国则停止遍历
                                    game.tempUtil.disposeTempIntArray(countryLis);
                                    ifHaveCountry = true;
                                    break;
                                }
                            }
                        }
                        //然后从历史关系中找
                        if(!ifHaveCountry&&countryLis.size==0){
                            for(int i=0;i<legionDatas.size;i++){
                                ForeignData f=getForeignData(legion.getLegionIndex(),i);
                                LegionData tl=getLegionDataByLi(i);
                                if(f!=null&&tl!=null&&tl.getInternIndex()!=0&&tl.varRegionCount>0&&tl.suzerainLi==0&&f.getDiplomaticAttitude()!=3){
                                    if(f.getForeignType()==0&&f.getFavorValue()<game.resGameConfig.neutralLegionDeclaredWarFavor &&(f.getDiplomaticRecognition()==-1||legion.varRegionCount>tl.varRegionCount||legion.incomeMoney>tl.incomeMoney||ComUtil.ifGet(100-f.getRealFavor()))){
                                        countryLis.add(tl.getLegionIndex());
                                    }
                                    if(countryLis.size>legion.varAllyCount){
                                        game.tempUtil.disposeTempIntArray(countryLis);
                                        break;
                                    }
                                }
                            }
                        }
                        if(countryLis.size>0){
                            LegionData tl=getLegionDataByLi(countryLis.random());
                            if(tl!=null){
                                legion_DeclareWar(legion,tl,legion.getAllForce()>tl.getAllForce()*2);
                            }
                            game.tempUtil.disposeTempIntArray(countryLis);
                        }

                    }
                    if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundAct "+legion.legionName+" 更新周围国家关系");}
                }
                // Gdx.app.log("selectCard", "li:" + l.buildPolicy + " ifEnemy:" + ifAlly);
                //玩家的同盟50几率什么也不做
                if ( (ifAlly && ComUtil.ifGet(game.resGameConfig.playerAllyNoOperateChane)) || (!legion.ifAct()) ) {

                } else if (legion.legionRound == 0) {

                    //1 除玩家外每个国家选1个技能升级
                    if (legion.varNeedTech > 0 ) {
                        if(legion_UpdTech(legion, null, legion.varNeedTech)){
                            payCardPrice(legion,null,legion.varNeedTech,true);
                        }
                        legion.varNeedTech = 0;
                    } else {
                        cardId = publicLegionCanUpdTechId.random();
                        if (cardId != -1) {
                            if(legion_UpdTech(legion, null, cardId)){
                                payCardPrice(legion,null,cardId,true);
                            }
                        }
                    }

                    if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundAct "+legion.legionName+" legion_UpdTech");}
                }

                //2 build 分为重点发展区域与次要区域
                IntArray cityArray = getMajorCity(legion.getLegionIndex(), 1,game.tempUtil.getTempIntArray());

                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundAct "+legion.legionName+" getMajorCity1");}
                    /*if(cityArray.contains(19914)){
                        Gdx.app.error("getMajorCity","buildPolicy:"+legion.getBuildPolicy());
                    }*/
                //   Gdx.app.error("cityArray",cityArray.size+":"+cityArray.toString()+":"+game.tempUtil.getTempIntArrayState(cityArray));
                for (int i = 0, iMax = cityArray.size; i < iMax; i++) {
                    build = getBuildDataByRegion(cityArray.get(i));
                    if(!legion.isPlayer()&&((ifAlly&&ComUtil.ifGet(game.resGameConfig.playerAllyNoOperateChane) )|| (!legion.ifAct()))){
                        continue;
                    }
                    if (build!=null&&build.getBuildType()!=2&&build.getBuildRound() == 0&&build.getLegionIndex()==legion.getLegionIndex()) {
                        if((ifAlly||roundState==1)&&legion.ifHunger()&&ComUtil.ifGet(game.resGameConfig.randomHungerBuildChance)){
                            if(build.getCityLvNow()==0&&legion_UpdTech(legion, build, 2007)){
                                payCardPrice(legion, build, 2007,true);
                                if(legion.getMoney()<50){
                                    break;
                                }
                            }else if(build.ifHunger()&&legion_UpdTech(legion, build, 2005)){
                                payCardPrice(legion, build, 2005,true);
                                if(legion.getMoney()<50){
                                    break;
                                }
                            }else if((build.getIndustryLvNow()==0||(ComUtil.ifGet(legion.getLevel()*10+30)&&build.getIndustryLvNow()<build.getCityLvNow())||build.getIndustryLvNow()*2<build.getCityLvNow())&&legion_UpdTech(legion, build, 2008)){
                                payCardPrice(legion, build, 2008,true);
                                if(legion.getMoney()<50){
                                    break;
                                }
                            }else if((build.getTechLvNow()==0||(ComUtil.ifGet(legion.getLevel()*10+30)&&build.getTechLvNow()<build.getCityLvNow())||build.getTechLvNow()<build.getIndustryLvNow())&&legion_UpdTech(legion, build, 2004)){
                                payCardPrice(legion, build, 2004,true);
                                if(legion.getMoney()<50){
                                    break;
                                }
                            }else if(popMax<game.resGameConfig.populationLimitMax&&legion.getPopulationNow()<popMax&& legion_UpdTech(legion, build, 2007)){
                                payCardPrice(legion, build, 2007,true);
                                if(legion.getMoney()<50){
                                    break;
                                }
                            }else if(popMax<game.resGameConfig.populationLimitMax&&legion.getPopulationNow()<popMax&& legion_UpdTech(legion, build, 2002)){
                                payCardPrice(legion, build, 2002,true);
                                if(legion.getMoney()<50){
                                    break;
                                }
                            }
                        }else if(build.ifEnergyOverload()&& legion_UpdTech(legion, build, 2006)){
                            payCardPrice(legion, build, 2006,true);
                            if(legion.getMoney()<50){
                                break;
                            }
                        }else  if(build.getCityLvNow()==0&& legion_UpdTech(legion, build, 2007)){
                            payCardPrice(legion, build, 2007,true);
                            if(legion.getMoney()<50){
                                break;
                            }
                        }else if(build.ifHunger()&&legion_UpdTech(legion, build, 2005)){
                            payCardPrice(legion, build, 2005,true);
                            if(legion.getMoney()<50){
                                break;
                            }
                        }else if((build.getIndustryLvNow()==0||(ComUtil.ifGet(legion.getLevel()*10+30)&&build.getIndustryLvNow()<build.getCityLvNow())||build.getIndustryLvNow()*2<build.getCityLvNow())&&legion_UpdTech(legion, build, 2008)){
                            payCardPrice(legion, build, 2008,true);
                            if(legion.getMoney()<50){
                                break;
                            }
                        }else if((build.getTechLvNow()==0||(ComUtil.ifGet(legion.getLevel()*10+30)&&build.getTechLvNow()<build.getCityLvNow())||build.getTechLvNow()<build.getIndustryLvNow())&&legion_UpdTech(legion, build, 2004)){
                            payCardPrice(legion, build, 2004,true);
                            if(legion.getMoney()<50){
                                break;
                            }
                        }else if(popMax<game.resGameConfig.populationLimitMax&&legion.getPopulationNow()<popMax&& legion_UpdTech(legion, build, 2007)){
                            payCardPrice(legion, build, 2007,true);
                            if(legion.getMoney()<50){
                                break;
                            }
                        }else if(popMax<game.resGameConfig.populationLimitMax&&legion.getPopulationNow()<popMax&& legion_UpdTech(legion, build, 2002)){
                            payCardPrice(legion, build, 2002,true);
                            if(legion.getMoney()<50){
                                break;
                            }
                        }
                        if (ifAlly) {//玩家盟友随机造兵
                            if(ComUtil.ifGet(game.resGameConfig.randomRecruitChance)){
                                if(masterData.getPlayerMode()==2&&!build.ifHaveUnit(1,1)){
                                    cardId = getBuildCardIdTIA1(legion, build, false, -2,false);
                                }else if(build.ifBorderRegionHaveEnemyUnit(-1,3)&&(build.getBuildType()==1||build.getBuildType()==3)){
                                    cardId = getBuildCardIdTIA1(legion, build, false, -4,false);
                                }else if(build.getBuildType()==1||build.getBuildType()==3){
                                    cardId = getBuildCardIdTIA1(legion, build, false, -6,false);
                                }else{
                                    cardId = getBuildCardIdTIA1(legion, build, false, -2,true);
                                }
                            }else{
                                cardId = getBuildCardIdTIA1(legion, build, true, -2,true);
                            }
                        } else {//敌人获得最优解
                            if(masterData.getPlayerMode()==2&&!build.ifHaveUnit(1,1)){//如果没有方守军
                                cardId = getBuildCardIdTIA1(legion, build, ComUtil.ifGet(50), -2,false);
                            }else if(build.ifBorderRegionHaveEnemyUnit(-1,3)&&(build.getBuildType()==1||build.getBuildType()==3)){
                                cardId = getBuildCardIdTIA1(legion, build, ComUtil.ifGet(50), -4,false);
                            }else if(build.getBuildType()==1||build.getBuildType()==3){
                                cardId = getBuildCardIdTIA1(legion, build, ComUtil.ifGet(50), -6,false);
                            }else{
                                cardId = getBuildCardIdTIA1(legion, build, ComUtil.ifGet(50), -2,true);
                            }
                        }
                        /*if(legion.getLegionIndex()!=masterData.playerLegionIndex){
                            cardId= replaceBuildCardIdForAi(cardId);
                        }*/

                        if(GameMethod.cardIfMax(game,legion,build,cardId)){
                            //Gdx.app.log("recruit than limit",ifAlly+":"+cardId);
                        }else{
                            if (ai_RecruitUnit(legion, build, cardId,-1)) {
                                payCardPrice(legion, build, cardId,true);
                                if(legion.getMoney()<50){
                                    break;
                                }
                            }else if(build.getBuildRound()==0){
                                if (ComUtil.ifGet(game.resGameConfig.randomRecruitChance)) {//玩家盟友随机造兵
                                    cardId = getBuildCardIdTIA1(legion, build, false, -5,false);
                                } else {//敌人获得最优解
                                    cardId = getBuildCardIdTIA1(legion, build, true, -5,false);
                                }
                                if( legion_UpdTech(legion, build, cardId)){
                                    payCardPrice(legion, build, cardId,true);
                                    if(legion.getMoney()<50){
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                game.tempUtil.disposeTempIntArray(cityArray);

                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundAct "+legion.legionName+" buildForMajorCity1");}

                //发展城市
                cityArray = getMajorCity(legion.getLegionIndex(), 2,game.tempUtil.getTempIntArray());

                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundAct "+legion.legionName+" getMajorCity2");}
                for (int i = 0, iMax = cityArray.size; i < iMax; i++) {
                    build = getBuildDataByRegion(cityArray.get(i));
                    if((ifAlly&&ComUtil.ifGet(game.resGameConfig.playerAllyNoOperateChane))|| (!legion.ifAct())||build==null||build.getLegionIndex()!=legion.getLegionIndex()){
                        continue;
                    }


                    if (build!=null&&build.getBuildType()!=2&&build.getBuildRound() == 0) {
                        if (ifAlly||roundState==1) {
                            if(build.getCityLvNow()==0){
                                cardId=2007;
                            }else if(legion.ifHunger()){
                                cardId=2005;
                            }else if(build.ifEnergyOverload()){
                                cardId=2007;
                            }else{
                                cardId = getBuildCardIdTIA1(legion, build, false, -5,true);
                            }
                        } else {
                            if (build.getCityLvNow() == 0) {
                                cardId = 2007;
                            } else if (legion.ifHunger()) {
                                cardId = 2005;
                            } else if (build.ifEnergyOverload()) {
                                cardId = 2007;
                            } else {
                                cardId = getBuildCardIdTIA1(legion, build, true, -5, true);
                            }
                        }
                        if (cardId <= 0) {
                            continue;
                        }
                        if( legion_UpdTech(legion, build, cardId)){
                            payCardPrice(legion, build, cardId,true);
                            if(legion.getMoney()<50){
                                break;
                            }
                        }
                    }
                }
                game.tempUtil.disposeTempIntArray(cityArray);

                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundAct "+legion.legionName+" buildForMajorCity2");}
                {
                    if (!ifAlly) { //如果是敌人,则额外发展首都
                        build = getBuildDataByRegion(legion.getCapitalId());
                        if(build!=null&&build.getLegionIndex()==legion.getLegionIndex()){
                            cardId = getBuildCardIdTIA1(legion, build, true, -5,true);
                            if(build.getBuildRound()==0&& legion_UpdTech(legion, build, cardId)){
                                payCardPrice(legion, build, cardId,true);
                            }
                        }

                    }
                }
            }

            /*
            {//政略开启

            }*/
            //    for(BuildData b:buildRDatas.values()){

            for(int bi=0;bi< legion.buildArrays.size;bi++) {
                BuildData b=legion.buildArrays.get(bi);
                if(b==null||(b.getLegionIndex() == legion.getLegionIndex()&&ifAlly&&ComUtil.ifGet(game.resGameConfig.playerAllyNoOperateChane))|| (!legion.ifAct())||b.getLegionIndex()!=legion.getLegionIndex()){
                    continue;
                }
                //4 根据发展难度来判断是发展城市还是 造兵
                if (b.getBuildType()!=2&&b.getLegionIndex()== legion.getLegionIndex() && b.getBuildRound() == 0) {
                    if (ComUtil.ifGet(100-b.getCityStability())) {//则只发展军事科技或造兵
                        if (ComUtil.ifGet(110-legion.getStability())|| (b.getCityStability() < game.resGameConfig.cityStabilityTriggerValue&&getRandomRegionCanAtkTIA1(b.getLegionIndex(),b.getRegionId(),false,false)!=-1  )   ) {
                            if (ifAlly) {//玩家盟友随机造兵
                                cardId = getBuildCardIdTIA1(legion, b, false, -2,false);
                            } else {//敌人获得最优解
                                if(!b.ifHaveUnit(1,1)){
                                    cardId = getBuildCardIdTIA1(legion, b, false, -2,false);
                                }else if(b.ifBorderRegionHaveEnemyUnit(-1,3)&&(b.getBuildType()==1||b.getBuildType()==3)){
                                    cardId = getBuildCardIdTIA1(legion, b, false, -4,false);
                                }else if(b.getBuildType()==1||b.getBuildType()==3){
                                    cardId = getBuildCardIdTIA1(legion, b, false, -6,false);
                                }else{
                                    cardId = getBuildCardIdTIA1(legion, b, false, -2,true);
                                }
                            }
                            if (ai_RecruitUnit(legion, b, cardId,-1)) {
                                payCardPrice(legion, b, cardId,true);
                                if(legion.getMoney()<50){
                                    break;
                                }
                            } else {
                                cardId = getBuildCardIdTIA1(legion, b, true, 10,true);

                                if( legion_UpdTech(legion, b, cardId)){
                                    payCardPrice(legion, b, cardId,true);
                                    if(legion.getMoney()<50){
                                        break;
                                    }
                                }
                            }
                        } else {
                            cardId = getBuildCardIdTIA1(legion, b, true, 10,true);
                            if ( legion_UpdTech(legion, b, cardId)){
                                payCardPrice(legion, b, cardId,true);
                                if(legion.getMoney()<50){
                                    break;
                                }
                            }
                        }
                    } else {
                        if (legion.varBattleRegions.contains(b.getRegionId())) {
                            if (ifAlly) {//玩家盟友随机造兵
                                cardId = getBuildCardIdTIA1(legion, b, false, -2,false);
                            } else { //敌人获得最优解
                                if(!b.ifHaveUnit(1,1)){
                                    cardId = getBuildCardIdTIA1(legion, b, ComUtil.ifGet(50), -2,false);
                                }else if(b.ifBorderRegionHaveEnemyUnit(-1,3)&&(b.getBuildType()==1||b.getBuildType()==3)){
                                    cardId = getBuildCardIdTIA1(legion, b, ComUtil.ifGet(50), -4,false);
                                }else if(b.getBuildType()==1||b.getBuildType()==3){
                                    cardId = getBuildCardIdTIA1(legion, b, ComUtil.ifGet(50), -6,false);
                                }else{
                                    cardId = getBuildCardIdTIA1(legion, b, ComUtil.ifGet(50), -2,true);
                                }
                            }
                            if (ai_RecruitUnit(legion, b, cardId,-1)) {
                                payCardPrice(legion, b, cardId,true);
                                if(legion.getMoney()<50){
                                    break;
                                }
                            } else {
                                cardId = getBuildCardIdTIA1(legion, b, true, -5,true);
                                if (legion_UpdTech(legion, b, cardId)) {
                                    payCardPrice(legion, b, cardId,true);
                                    if(legion.getMoney()<50){
                                        break;
                                    }
                                }
                            }
                        } else {
                            cardId = getBuildCardIdTIA1(legion, b, true, -5,true);
                            if (cardId != -1) {
                                if (legion_UpdTech(legion, b, cardId)) {
                                    payCardPrice(legion, b, cardId,true);
                                    if(legion.getMoney()<50){
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundAct "+legion.legionName+" buildUpdTech");}
            //如果是玩家的敌人,则会逐步在玩家周围屯兵
            if(legion.ifPlayerEnemy()&&legion.ifAiCheatChance()){
                ai_stationTroops(legion,getPlayerLegionData());
                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundAct "+legion.legionName+" ai_stationTroops");}
            }
        if(ifUnitAct){

            if(masterData.getPlayerMode()==2){//军团行动
                //遍历所有飞行单位,先行动一遍
                Iterator<IntMap.Entry<ArmyData>> it = armyHDatas.iterator();
                while (it.hasNext()) {
                    IntMap.Entry<ArmyData> c = it.next();
                    ArmyData a=c.value;
                    if(a!=null&&a.getLegionIndex()==legion.getLegionIndex()&&a.getArmyType()==5&&a.getArmyRound()==0){
                        BuildData tb=getBuildDataByRegion(getRegionId(getTargetEnemyByRangeTIA1(a)));
                        if(tb!=null&&a.haveCanAtkEnemy()){
                            legionUnit_Act(a,tb,true);
                        }
                    }
                }

                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundAct "+legion.legionName+" 军团:遍历所有飞行单位,先行动一遍");}
                //遍历所有军团
                for(int bi=0;bi< legion.buildArrays.size;bi++) {
                    build=legion.buildArrays.get(bi);
                    /*if(build.getRegionId()==11755){
                        int s=0;
                    }*/
                    if(build!=null&&build.getLegionIndex()==legion.getLegionIndex()&&build.canLegionAct()){
                        BuildData enemyBuild=build.getRandomAroundEnemyBuildData();
                        LegionData enemyLegion=null;
                        //获得周边有敌人部队的敌对地区的数量
                        int enemyLegionUnitCount=build.getAroundEnemyLegionUnitRegionCount();
                        int allyLegionUnitCount=build.getAroundAllyLegionUnitRegionCount();
                        //查找周边敌对省区
                        if(enemyBuild!=null){
                            if(!legion.varBattleRegions.contains(build.getRegionId())){
                                legion.varBattleRegions.add(build.getRegionId());
                            }
                            enemyLegion=enemyBuild.getLegionData();
                            BuildData safeBuild=build.getRandomAroundSafeBuildData(enemyLegionUnitCount);
                            if(safeBuild!=null){//撤离部队
                                if( !build.ifHaveUnit(1,1)  ||enemyBuild.getForces(3)>build.getForces(3)*3){//如果敌对实力完全大于我方,则全部撤离
                                    Array<ArmyData> armys=build.getCanActLegionUnitTAA(1);
                                    legionUnit_Act(build,safeBuild,armys,true);
                                }else if(enemyLegionUnitCount>2){
                                    //撤离血量或士气低的部队
                                    Array<ArmyData> armys=build.getCanActLegionUnitTAA(3);//tempArmyDataArray
                                    legionUnit_Act(build,safeBuild,armys,true);
                                }
                            }
                            //剩余部队判断是否满足进攻条件,满足则进攻
                            if( (build.ifHaveUnit(1,1)&&!enemyBuild.ifHaveUnit(1,1))||(build.getForces(3)>enemyBuild.getForces(0)||legion.getUnitArmyNum()>enemyLegion.getUnitArmyNum()||  legion.isTerritoryRegion(enemyBuild.getRegionId())||ComUtil.ifGet((allyLegionUnitCount-enemyLegionUnitCount+1)*30)))  {
                                Array<ArmyData> armys=build.getCanActLegionUnitTAA(2);
                                if(armys.size>0){
                                    legionUnit_Act(build,enemyBuild,armys,true);
                                }
                            }
                        }else{
                            //获取有战力的军队
                            Array<ArmyData> armys=build.getCanActLegionUnitTAA(2);
                            if(armys.size>0){
                                int targetRegion=-1;
                                if(legion.varBattleRegions.size!=0){ //遍历最近的目标省区
                                    targetRegion= getRecentDistanceRegion(build.getRegionId(),legion.varBattleRegions,-1);    //0 全部 -1非友好(含中立) 1友好 2本人
                                    if(targetRegion==-1){
                                        targetRegion= getRecentDistanceRegion(build.getRegionId(),legion.varBattleRegions,0);    //0 全部 -1非友好(含中立) 1友好 2本人
                                    }
                                }
                                for(int i=0;i<armys.size;i++){
                                    ArmyData a=armys.get(i);
                                    if(a.getTargetRegion()==-1){
                                        if(targetRegion!=-1){
                                            a.setTargetRegion(targetRegion);
                                        }else{ //给予随机敌对国家首都作为目标
                                            if(a.isPlayer()){
                                                a.setTargetRegion(getCanAttackTargetRegionTIA1(legion, a.getRegionId(), 3, (a.getArmyType() == 4 || a.getArmyType() == 8),-1));
                                            }else{
                                                a.setTargetRegion(getCanAttackTargetRegionTIA1(legion, a.getRegionId(), 3, (a.getArmyType() == 4 || a.getArmyType() == 8),-2));
                                            }
                                        }
                                    }else{
                                        army_legionActToTarget(a);
                                    }
                                }
                            }
                        }
                    }
                }

                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundAct "+legion.legionName+" 军团:所有单位行动");}
            }else {//ai行动
                //设定ai目标
                targetLegionIndex = 0;
                //兵种行动
                boolean ifAct = false;
                //Iterator<IntMap.Entry<ArmyData>> it = armyHDatas.iterator();
                /*Iterator<IntMap.Entry<ArmyData>> itb = armyHDatas.iterator();
                while (itb.hasNext()) {
                    ArmyData a=itb.next().value;*/
                    // while (it.hasNext()) {
                    // IntMap.Entry<ArmyData> tc = it.next();
                    //ArmyData  a=it.next().value;

                for  (int i=0;i<legion.armyArrays.size;i++) {

                    Fb2Smap.ArmyData a=legion.armyArrays.get(i);
                    if (a == null || a.getArmyHpNow() <= 0 || a.getLegionIndex() != legion.getLegionIndex()||a.getArmyRound()>0) {
                        continue;
                    }/*
                    if(a.getHexagonIndex()==22485){
                        int s=0;
                    }*/
                    Fb2Map.MapHexagon hm=a.getHexagonData();
                    if(hm==null){
                        continue;
                    }
                    BuildData b = a.getBuildData();
                    if (b != null&&!b.potionIsSea()&&a.getHexagonIndex()==b.getRegionId()&&(b.getCityStability() < game.resGameConfig.cityStabilityTriggerValue || (b.getCityHpMax() > 0 && b.getHpRate() < game.resGameConfig.aiNotActWhenCityHpRate)) && a.getGeneralIndex() == 0) {
                        continue;
                    }
                    if (a.getLegionIndex() == legion.getLegionIndex()) {
                        movement = a.getMovement();
                        if (a.getArmyType() == 4 || a.getArmyType() == 8) {
                            ifSeaArea = true;
                            limitCoast = false;
                        } else {
                            ifSeaArea = false;
                        }
                        if(a.getHexagonIndex()==13492){
                            int s=0;
                        }
                        if(a.armyActor==null){
                            if(a.getGeneralIndex()!=0&&a.getArmyRound()==0){
                                if(a.getUnitArmyId0()==1105){
                                    a.setUnitArmyId0(1104);
                                }
                                if(a.getUnitGroup()<a.getArmyRank()&&legion.ifAiCheatChance()){
                                  int rs=  army_resetUnitGroup(a,a.getArmyRank()-a.getUnitGroup());
                                    a.addArmyRound(rs);
                                    continue;
                                }
                            }
                            if(legion.ifAiCheatChance()){
                                army_enhance(a);
                            }
                            if(b!=null&&b.getBuildRound()==0&&!b.isWar()){
                                if(a.getUnitGroup()<a.getArmyRank()&&a.getUnitArmyId0()==1105){
                                    a.setUnitArmyId0(1104);
                                }else if(a.isUnitGroup()){
                                    int mergeId=b.getRandomCanRecruitMergeUnitId(a,!legion.ifAiCheatChance());
                                    if(mergeId>0){
                                        a.mergeUnitGroup(mergeId);
                                        payCardPrice(legion,b,mergeId,true);
                                        a.addArmyRound(1);
                                    }
                                    if(b.getBuildRound()==0&&a.haveCanUpdUnitGrouplv()){
                                        a.randomUpdUnitGroupLv();
                                        a.addArmyRound(1);
                                    }
                                    if(b.getBuildRound()==0&&a.haveCanUpdUnitWealv()){
                                        a.randomUpdArmyWealv();
                                        b.addBuildRound(1);
                                    }
                                }else{
                                    if(a.canUpdGroupLv()){
                                        a.updArmyGroup();
                                        a.addArmyRound(1);
                                    }
                                    if(b.getBuildRound()==0&&a.haveCanUpdUnitWealv()){
                                        a.updWeaLv();
                                        b.addBuildRound(1);
                                    }
                                }
                            }
                        }
                        if (a.targetRegion < 0 && movement > 0) {

                            if (a.armyActor != null && (a.getArmyMorale() < 30 || a.getHpRate() < 30)) {
                                if(a.getUnitGroupSum()>3 ){
                                    a.dissolveUnitGroupAndRestoreState();
                                }
                                //撤退
                                // tempValue= getTargetRegionForAllyTIA1(a.getHexagonIndex(), a.getLegionIndex(),ifSeaArea,true);
                                tempValue = getRandomRegionForAllyTIA1(a.getLegionIndex(), a.getHexagonIndex(), ifSeaArea, true, -1);
                                a.setTargetRegion(tempValue);
                                if (roundState == 0 && a.armyActor != null && a.isPlayer()) {
                                    a.armyActor.update();
                                }
                            } else if (a.armyType == 4 || a.armyType == 8) {
                                //寻找周围有无敌对海洋区域,有则去占领
                                hexagon = getRandomRegionCanAtkTIA1(a.getLegionIndex(), a.getHexagonIndex(), ifSeaArea, true);
                                if (hexagon != -1) {
                                    a.setTargetRegion(hexagon);
                                    if (roundState == 0 && a.armyActor != null && a.isPlayer()) {
                                        a.armyActor.update();
                                    }
                                } else {//如果没有则搜索 周围海洋区域有无敌对军队,获得目标
                                    hexagon = getRandomRegionForHaveEUnitTIA1(a.getLegionIndex(), a.getHexagonIndex(), ifSeaArea, true);

                                    if (hexagon != -1) {
                                        a.setTargetRegion(getRegionId(hexagon));
                                    } else {
                                        a.setTargetRegion(-1);
                                    }
                                    if (roundState == 0 && a.armyActor != null && a.isPlayer()) {
                                        a.armyActor.update();
                                    }
                                }
                            } else if (ComUtil.ifGet(a.getAttackChance())) {
                                //1.遍历3轮.选择优先进攻目标为敌方地块,次要目标为敌人首都

                                int attackTargetRegion ;
                                if(a.isPlayer()){
                                    attackTargetRegion=getCanAttackTargetRegionTIA1(legion, a.getRegionId(), 3, ifSeaArea,-1);
                                }else{
                                    attackTargetRegion=getCanAttackTargetRegionTIA1(legion, a.getRegionId(), 3, ifSeaArea,-2);
                                }
                                if (attackTargetRegion != -1) {
                                    a.setTargetRegion(attackTargetRegion);

                                    targetLegionIndex = getLegionIndexByRegion(attackTargetRegion);
                                } else if (targetLegionIndex > 0) { //2.如果没有,则设置为进攻首都
                                    int c = legionDatas.get(targetLegionIndex).getCapitalId();
                                    a.setTargetRegion(c);
                                } else {
                                    a.setTargetRegion(-1);
                                }
                                if (roundState == 0 && a.armyActor != null && a.isPlayer()) {
                                    a.armyActor.update();
                                }
                            } else {//2.如果不进攻,则给一个在战斗的目标作为前进方向
                                if (legion.varBattleRegions.size > 0) {
                                    int c = legion.varBattleRegions.random();
                                    if (ifSeaArea) {
                                        if (ifSeaArea(c)) {
                                            a.setTargetRegion(c);
                                        } else {
                                            if(a.isPlayer()){
                                                a.setTargetRegion(getCanAttackTargetRegionTIA1(legion, a.getRegionId(), 3, ifSeaArea,-1));
                                            }else{
                                                a.setTargetRegion(getCanAttackTargetRegionTIA1(legion, a.getRegionId(), 3, ifSeaArea,-2));
                                            }
                                        }
                                    } else {
                                        a.setTargetRegion(c);
                                    }
                                } else {
                                    if(a.isPlayer()){
                                        a.setTargetRegion(getCanAttackTargetRegionTIA1(legion, a.getRegionId(), 3, ifSeaArea,-1));
                                    }else{
                                        a.setTargetRegion(getCanAttackTargetRegionTIA1(legion, a.getRegionId(), 3, ifSeaArea,-2));
                                    }
                                }
                                if (roundState == 0 && a.armyActor != null && a.isPlayer()) {
                                    a.armyActor.update();
                                }
                            }
                        }


                        if (ifGridIsPass(a.getTargetRegion() ) && a.getArmyRound() == 0) {
                /*if(a.getHexagonIndex()==18444&&legion.getBuildPolicy()==a.getBuildPolicy()){
                    Gdx.app.log("army",""+a.getAllAttributes());
                }*/
                            movement = a.getMovement();
                            ifAct = false;
                            if (a.getArmyType() == 4 || a.getArmyType() == 8) {
                                ifSeaArea = true;
                            } else {
                                ifSeaArea = false;
                            }
                        /*if(a.getHexagonIndex()==15480){
                            Gdx.app.error("nextRoundAct","15480");
                        }*/
                            //如果士气低落,则无法移动
                            if (a.getArmyMorale() < game.resGameConfig.unitMoraleMinLimit) {
                                army_Standby(a);
                                a.addArmyRound(1);
                            } else if (movement > 0) {//如果是玩家获胜的目标
                                if (ComUtil.ifGet(a.getAttackChance()) && getAroundUnitCountIA1(a, 2) < 5) {
                                 //  int direct = getDirect(a.getHexagonIndex(), a.getTargetRegion());
                                    //获取可以行动的位置
                                    IntIntMap tempIntIntMap2 = game.tempUtil.getTempIntIntMap();

                                    boolean ifHaveAct=  a.isElite(getGameElite())&& getPotionForAiArmyCanActTIIM1(a, a.getHexagonIndex(), 0, true, false, tempIntIntMap2);
                                    if ( ifAlly) {
                                        if(legion.getLegionIndex()==0&&getRegionId(a.getHexagonIndex())==a.getHexagonIndex()&&!a.potionIsSea()){//叛军不会离开城市
                                            continue;
                                        }
                                        if(a.getRegionId()==a.getTargetRegion()){
                                            if(ifHaveCanActPotion(a,false)){
                                                army_ActToTarget(a,false);
                                            }else{
                                                if((roundState==0||roundState==4)&&a.armyActor!=null&&a.isPlayer()){
                                                    a.armyActor.update();
                                                }
                                            }
                                            if(a.ifAllyRegion()){
                                                a.setTargetRegion(-1);
                                            }
                                        }else if(a.getRegionId()!=a.getTargetRegion()){
                                            army_ActToTarget(a,false);
                                        }
                                    } else if(ifHaveAct){//获取最高分数
                                        while (ifHaveAct&&(a.ifMove==0||a.ifAttack==0)) {
                                            ifHaveAct=   getPotionForAiArmyCanActTIIM1(a, a.getHexagonIndex(), 0, true, false, tempIntIntMap2);
                                            if(! ai_bestAct(a, tempIntIntMap2)){
                                                break;
                                            }
                                        }
                                    }
                                    if (a.ifMove==0) {
                                        if(a.getHpRate()<50&&!ifAllyByHexagon(a.getHexagonIndex(),a.targetRegion)){
                                            a.targetRegion=a.getSafeRegion();
                                        }
                                        //it = tempIntIntMap2.iterator();
                                        //3.移动到最远距离
                                        int h = getRecentHexagon(legion.ifPlayerAlly() ? -1 : a.getLegionIndex(), a.hexagonIndex, a.targetRegion, tempIntIntMap2, a.getIfSeaForMove());
                                        if (h >= 0 && h < hexagonDatas.size && a.canMove(h)) {
                                            army_Move(a, h);
                                        } else {
                                            //休息
                                            army_Standby(a);
                                        }
                                        a.addArmyRound(1);
                                    }
                                    game.tempUtil.disposeTempIntIntMap(tempIntIntMap2);
                                } else {
                                    int direct = getDirect(a.getHexagonIndex(), a.getTargetRegion());
                                    //如果没有士气,则撤退
                                    IntArray tempMoveIntArray = getArmyMovablePostionTIIM1(a.getHexagonIndex(), a.getLegionIndex(), movement, direct, game.tempUtil.getTempIntArray(), ifSeaArea, limitCoast, a.playerCanCommand());
                                    hexagon = getTargetHexagonForAllyTIA1(tempMoveIntArray, a.getLegionIndex(), ifSeaArea);
                                    game.tempUtil.disposeTempIntArray(tempMoveIntArray);
                                    if (hexagon != -1 && a.canMove(hexagon)) {//移动
                                        army_Move(a, hexagon);
                                    } else if (!ifAllyByHexagon(a.getHexagonIndex(), a.getRegionId())) {
                                        //  tempValue= getTargetRegionForAllyTIA1(a.getHexagonIndex(), a.getLegionIndex(),ifSeaArea,true);
                                        tempValue = getRandomRegionForAllyTIA1(a.getLegionIndex(), a.getHexagonIndex(), ifSeaArea, true, -1);
                                        a.setTargetRegion(tempValue);
                                        if (roundState == 0 && a.armyActor != null && a.isPlayer()) {
                                            a.armyActor.update();
                                        }
                                        army_ActToTarget(a, true);
                                    } else {
                                        army_Standby(a);
                                    }
                                }
                            } else {//寻找周围有无敌人
                                hexagon = getCanAtkTargetByRangeTIA1(a);
                                if (hexagon !=-1) {
                                    army_Attack(a, hexagon);
                                } else {
                                    army_Standby(a);
                                }
                                a.addArmyRound(1);
                            }
                        } else if (a != null && a.getArmyRound() == 0) {//army没有target
                            army_Standby(a);
                            a.addArmyRound(1);
                        }

                    /*//物资如果所在地与归属相同,则补充满物资
                    if (ifAllyByLi(a.getLegionIndex(), getLegionIndexByRegion(a.getHexagonIndex()))) {
                        tempValue=(a.getResLv()+1)*2;
                        a.addArmyGoods(tempValue );
                        a.getLegionData().costFood(tempValue);
                    }*/
                        //如果目标与所在目标相同,则目标归0
                        if (a.getHexagonIndex() == a.getTargetRegion()) {
                            a.setTargetRegion(-1);
                            if (roundState == 0 && a.armyActor != null && a.isPlayer()) {
                                a.armyActor.update();
                            }
                        }
                    }
                }

                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundAct "+legion.legionName+" 全体单位行动");}
                ai_AirAct(legion);

                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundAct "+legion.legionName+" ai_AirAct");}

                Iterator<IntMap.Entry<NulcleData>> itN = nulcleIDatas.iterator();
                IntArray tempIntArray2 = game.tempUtil.getTempIntArray();
                while (itN.hasNext()) {
                    NulcleData n = itN.next().value;
                    //核弹检测 region!=-1 且round=0
                    if (n != null && n.getLegionIndex() == legion.getLegionIndex() && n.getRegionId() != -1 && n.getNucleRound() == 0) {
                        //优先配置飞机
                        AirData a = n.getBuildData().getCanLoadNulAir(n);
                        if (a != null) {
                            if (a.loadNul(n)) {
                                n.remove(1);
                                n.addNucleRound(1);
                            }
                            ;
                        } else {
                            // 获取周围信息,能装配则优先转配
                            IntIntMap tempIntIntMap = game.tempUtil.getTempIntIntMap();
                            getNulCanActPotionAndSetColorTIIM1(n, tempIntIntMap);
                            ArmyData army = getCanLoadNulArmyDataByNulHexagons(tempIntIntMap);
                            if (army != null && army.getLegionIndex() == legion.getLegionIndex()) {//单位装载信息
                                if (army.loadNul(n)) {
                                    //n.addNucleRound(1);
                                }
                                ;
                                n.remove(1);
                            } else {
                                //不能转配则查看周围可进攻位置,有则进攻
                                tempValue = getCanAtkHexagonByNulHexagons(tempIntIntMap);
                                if (tempValue != -1) {
                                    nul_Attack(n, tempValue);
                                } else if (ComUtil.ifGet(game.resGameConfig.nuclearTeleportChance) && legion.varBattleRegions.size > 0 && !legion.isPlayerCommand()) {// 启用超时空移动,移动到有region适合进攻的build
                                    int region = getBorderRegionTIA2(legion.varBattleRegions.random(), 1, tempIntArray2).random();
                                    BuildData buildData = getBuildDataByRegion(region);
                                    if (buildData != null && buildData.getBuildType() != 2 && buildData.getNuclearCount() < 4) {
                                        if (nul_Move(n, region)) {
                                            n.addNucleRound(1);
                                        }
                                        ;
                                    }
                                }
                            }
                            game.tempUtil.disposeTempIntIntMap(tempIntIntMap);
                        }
                    }
                }
                game.tempUtil.disposeTempIntArray(tempIntArray2);

                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundAct "+legion.legionName+" 核弹行动");}

            }

        }
            if(ifSystemEffective(4)){

                if(foreignDatas==null||foreignDatas.size==0){
                    createForeignData();
                }
                //只有非玩家盟友才会使用部分外交功能
                if(!ifAlly) {
                    ForeignData legionSelfF=getForeignData(legion.getLegionIndex(),legion.getLegionIndex());
                    //1. 外交卡牌  只有无法造兵的时候才能进行外交
                    //ai使用的卡牌  3105交流  3107求援 3108合并 3109窃取 3111暴动 3112制裁
                    XmlReader.Element tE = null;
                    int targetLi = 0; cardId=0;

                    //2 国家信心低于30,则合并3108,如果国家信心低于50则求援3107,//1搜索所有与其好感度为60的国家,结盟3103 正常为交流3105或扶持
                    if (legion.getTradeCount() > 0) {
                        if(legionSelfF.getFavorValue()<30){
                            cardId=3108;
                        }else if(legionSelfF.getFavorValue()<50){
                            cardId=3107;
                        }else {
                            cardId=3103;
                        }
                        if(cardId!=0){
                            tE = game.gameConfig.getDEF_CARD().getElementById(cardId);
                            if(ComUtil.ifGet(tE.getInt("tech",100))){
                                targetLi = getRandomLegionIndexByFavorBetweenIntervalTIA1(legion.getLegionIndex(), tE.getInt("min"), tE.getInt("max"), true,false);
                                if (targetLi != 0&&targetLi!=masterData.playerLegionIndex) {
                                    updForeignForAi(legion, legionDatas.get(targetLi), cardId);
                                }else{//未结盟
                                    targetLi = getRandomLegionIndexByFavorBetweenIntervalTIA1(legion.getLegionIndex(), 70, 100, true,false);
                                    if(targetLi!=masterData.playerLegionIndex){
                                        ForeignData f=getForeignData(legion.getLegionIndex(),targetLi);
                                        if(f.getFavorValue()>80){
                                            updForeignForAi(legion, legionDatas.get(targetLi), 3105);
                                        }else {
                                            updForeignForAi(legion, legionDatas.get(targetLi), 3106);
                                        }
                                    }
                                }
                                //legion.reduceTradeCount();
                            }

                        }
                    }

                    int[] enemyCardIds = {3109,3111,3112 };

                    if (legion.getTradeCount() > 0) {
                        cardId=ComUtil.getRandOne(enemyCardIds);
                        if(ComUtil.ifGet(tE.getInt("tech",100))) {
                            tE = game.gameConfig.getDEF_CARD().getElementById(cardId);
                            targetLi = getRandomLegionIndexByFavorBetweenIntervalTIA1(legion.getLegionIndex(), tE.getInt("min"), tE.getInt("max"), true, true);
                            if (targetLi != 0&&targetLi!=masterData.playerLegionIndex) {
                                updForeignForAi(legion, legionDatas.get(targetLi), cardId);
                            }
                            //legion.reduceTradeCount();
                        }
                    }
                    if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundAct "+legion.legionName+" updForeignForAi");}
                }
                //2. 自我贸易
                for (int i = 0, iMax = legion.tradeCount; i < iMax; i++) {
                    if(legion.isPlayer()){
                        continue;
                    }
                    TradeData t = getTargetTrade(legion,false);
                    if (t == null||t.isPlayer()) {
                        continue;
                    }
                    legion_Trade(legion, t,legion.getStability()/2);
                }

                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundAct "+legion.legionName+" legion_Trade");}
            }

        }else{//中立国策略

            //2 build 分为重点发展区域与次要区域
            IntArray cityArray = getMajorCity(legion.getLegionIndex(), 1,game.tempUtil.getTempIntArray());

            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundAct 中立国 cityArray1");}
                    /*if(cityArray.contains(19914)){
                        Gdx.app.error("getMajorCity","buildPolicy:"+legion.getBuildPolicy());
                    }*/
            //   Gdx.app.error("cityArray",cityArray.size+":"+cityArray.toString()+":"+game.tempUtil.getTempIntArrayState(cityArray));
            for (int i = 0, iMax = cityArray.size; i < iMax; i++) {
                build = getBuildDataByRegion(cityArray.get(i));
                if (build!=null&&build.getBuildType()!=2&&build.getBuildRound() == 0&&build.getLegionIndex()==legion.getLegionIndex()) {
                    if(build.ifHunger()&&legion_UpdTech(legion, build, 2005)){
                        payCardPrice(legion, build, 2005,true);
                        if(legion.getMoney()<50){
                            break;
                        }
                    }else  if(build.ifEnergyOverload()&&legion_UpdTech(legion, build, 2006)){
                        payCardPrice(legion, build, 2006,true);
                        if(legion.getMoney()<50){
                            break;
                        }
                    }else  if(build.getCityLvNow()==0&&legion_UpdTech(legion, build, 2007)){
                        payCardPrice(legion, build, 2007,true);
                        if(legion.getMoney()<50){
                            break;
                        }
                    }
                    if (ComUtil.ifGet(game.resGameConfig.randomRecruitChance)) {//玩家盟友随机造兵
                        cardId = getBuildCardIdTIA1(legion, build, false, -6,false);
                    } else {//敌人获得最优解
                        cardId = getBuildCardIdTIA1(legion, build, true, -6,false);
                    }
                    //   cardId= replaceBuildCardIdForAi(cardId);

                    if(GameMethod.cardIfMax(game,legion,build,cardId)){
                        //Gdx.app.log("recruit than limit",ifAlly+":"+cardId);
                    }else{
                        if (getArmyDataByHexagon(build.getRegionId())==null&&ai_RecruitUnit(legion, build, cardId,-1)) {
                            payCardPrice(legion, build, cardId,true);
                            if(legion.getMoney()<50){
                                break;
                            }
                        }else if(build.getBuildRound()==0){
                            if (ComUtil.ifGet(game.resGameConfig.randomRecruitChance)) {//玩家盟友随机造兵
                                cardId = getBuildCardIdTIA1(legion, build, false, -5,false);
                            } else {//敌人获得最优解
                                cardId = getBuildCardIdTIA1(legion, build, true, -5,false);
                            }
                            if( legion_UpdTech(legion, build, cardId)){
                                payCardPrice(legion, build, cardId,true);
                                if(legion.getMoney()<50){
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            game.tempUtil.disposeTempIntArray(cityArray);

            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundAct 中立国 buildForCityArray1");}
            //发展城市
            cityArray = getMajorCity(legion.getLegionIndex(), 2,game.tempUtil.getTempIntArray());

            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundAct 中立国 cityArray2");}
            for (int i = 0, iMax = cityArray.size; i < iMax; i++) {
                build = getBuildDataByRegion(cityArray.get(i));
                if (build!=null&&build.getBuildType()!=2&&build.getBuildRound() == 0&&build.getLegionIndex()==legion.getLegionIndex()) {
                    if (ifAlly) {
                        cardId = getBuildCardIdTIA1(legion, build, false, -5,true);
                    } else {
                        cardId = getBuildCardIdTIA1(legion, build, true, -5,true);
                    }
                    if (cardId <= 0) {
                        continue;
                    }
                    if( legion_UpdTech(legion, build, cardId)){
                        payCardPrice(legion, build, cardId,true);
                        if(legion.getMoney()<50){
                            break;
                        }
                    }
                }
            }
            game.tempUtil.disposeTempIntArray(cityArray);
            if(ifUnitAct){
                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundAct 中立国 buildForCityArray1");}
                if (masterData.getPlayerMode()==2) {
                    ai_LegionUnitAct(legion.getLegionIndex());
                    if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundAct 中立国 ai_LegionUnitAct");}
                }else{
                    ai_AirAct(legion);
                    if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundAct 中立国 ai_AirAct");}
                    executeUnitActToTarget(legion);
                    if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundAct 中立国 executeUnitActToTarget");}
                }
            }


           /* for (ArmyData a : armyHDatas.values()) {
                // while (it.hasNext()) {
                // IntMap.Entry<ArmyData> tc = it.next();
                //ArmyData  a=it.next().value;
                if (a == null || a.getArmyHpNow() <= 0 || a.getLegionIndex() != legion.getLegionIndex()||!ifGridIsPass(a.getTargetRegion())) {
                    continue;
                }
                if(){

                }
            }*/
        }

        /*if(legion.getBuildPolicy()==masterData.playerLegionIndex){
            Gdx.app.log("nextRoundActByLegion player legion2",legion.getAllAttributes());
        }*/

    }

    private void legionUnit_Act( ArmyData a,BuildData tb,boolean ifAddRound) {
        if(tb.isAlly(a.getLegionIndex())){
            legionUnit_Move(tb,a,ifAddRound,true);
        }else{
            legionUnit_Attack(tb,a,ifAddRound);
        }
    }

    public void legionUnit_Act(BuildData sb, BuildData tb, Array<ArmyData> armys,boolean ifAddRound) {
        if(sb.isAlly(tb.getLegionIndex())){
            legionUnit_Move(sb,tb,armys,ifAddRound);
        }else{
            legionUnit_Attack(sb,tb,armys,ifAddRound);
        }
    }
    //获取  //0 全部 -1非友好(含中立) 1友好 2本人
    private int getRecentDistanceRegion( int sr,IntArray rsA,int type) {
        int rsR=-1;
        int rsD=99999;
        if(rsA.size>0){
            for(int i=0;i<rsA.size;i++){
                int tr=rsA.get(i);
                if(tr==sr){ continue;   }
                switch (type){
                    case 1:
                        if(  getForeignDegree(getLegionIndexByHexagon(sr),getLegionIndexByHexagon(tr))!=1){
                            continue;
                        }
                        break;
                    case 2:
                        if(  getForeignDegree(getLegionIndexByHexagon(sr),getLegionIndexByHexagon(tr))!=1){
                            continue;
                        }
                        break;
                    case 3:
                        if( getLegionIndexByHexagon(sr)!=getLegionIndexByHexagon(tr)){
                            continue;
                        }
                        break;
                }
                int d=getDistanceForMap(tr,sr);
                if(d<rsD){
                    rsD=d;
                    rsR=tr;
                }
            }
        }
        return rsR;
    }

    //0 全部 -1非友好(含中立) 1友好 2本人
    private int getRecentDistanceRegion( int sr,int tr,int type) {
        int rsR=-1;
        int rsD=99999;
        ConnectData c=getConnectData(sr);
        if(c!=null){
            for(int j=1;j<=c.regionConnectCount;j++){
                int  region=c.getConnectValue(j,0);
                if(region==sr){ continue;   }
                switch (type){
                    case 1:
                        if(  getForeignDegree(getLegionIndexByHexagon(sr),getLegionIndexByHexagon(tr))!=1){
                            continue;
                        }
                        break;
                    case 2:
                        if(  getForeignDegree(getLegionIndexByHexagon(sr),getLegionIndexByHexagon(tr))!=1){
                            continue;
                        }
                        break;
                    case 3:
                        if( getLegionIndexByHexagon(sr)!=getLegionIndexByHexagon(tr)){
                            continue;
                        }
                        break;
                }
                int d=getDistanceForMap(region,tr);
                if(d<rsD){
                    rsD=d;
                    rsR=region;
                }
            }
        }
        return rsR;
    }

    private void ai_AirAct(LegionData legion) {
        if(legion==null){
            return;
        }
        //ai空军设定目标
        Iterator<IntMap.Entry<AirData>> it = airIDatas.iterator();
        IntArray tempIntArray2=game.tempUtil.getTempIntArray();
        while (it.hasNext()) {
            IntMap.Entry<AirData> c = it.next();
            AirData a=c.value;
            if(a==null||a.getAirHpNow()==0||!a.ifOkByAirPolicy(a.getHexagon())||a.getAirRound()!=0||a.getLegionIndex()!=legion.getLegionIndex()||a.getAirGoodsNow()==0){continue;}

            if(a.armyData==null){
                //首先查看有无可搭载单位
                IntArray tempIntArray=game.tempUtil.getTempIntArray();
                a.getCanCarryUnit(tempIntArray);
                ArmyData armyData=getArmyDataByHexagon(tempIntArray.random());
                game.tempUtil.disposeTempIntArray(tempIntArray);
                if(armyData!=null&&armyData.getLegionIndex()==a.getLegionIndex()&&armyData.ifHaveFeature(2)){
                    if(armyData.loadAir(a)){
                        a.addAirRound(1);
                        continue;
                    }
                }
            }
            //无搭载单位
            if(a.targetRegion==-1){
                if(!legion.isPlayer()&&a.inCity()&&ComUtil.ifGet(a.getCrit())&&a.haveCanUpdAirAbilityLv()){
                    a.randomUpdAirAbility();
                    a.addAirRound(1);
                    continue;
                }
                IntArray  tempIntArray=game.tempUtil.getTempIntArray();
                a.getCanActRegions(tempIntArray,1);
                if(tempIntArray.size>0){
                    a.setTargetRegion(tempIntArray.random());
                }else {
                    a.setTargetRegion(-1);
                }
                game.tempUtil.disposeTempIntArray(tempIntArray);
                if(a.targetRegion!=-1) {
                    //对目标进行行动
                    for(int i=0,iMax=ComUtil.getRandom(1,a.getAirGoodsNow());i<iMax;i++){
                        if( air_Attack(a,a.getTargetRegion())){
                            //对行动后的目标进行检查,如果目标消失,则重定义目标
                            int li=getLegionIndexByHexagon(a.getTargetRegion());
                            if(li==0||ifAllyByLi(a.getLegionIndex(),li)){
                                tempIntArray=game.tempUtil.getTempIntArray();
                                if(tempIntArray.size>0){
                                    a.setTargetRegion(tempIntArray.random());
                                }else {
                                    a.setTargetRegion(-1);
                                }
                                game.tempUtil.disposeTempIntArray(tempIntArray);
                            }
                        }
                    }
                    if(a.getAirGoodsNow()==0){
                        a.addAirRound(1);
                    }
                }
                //如果无目标继续通用行动
                if(a.getAirRound()==0&&a.getAirGoodsNow()>0){
                    //1.检查所在区域有无敌军
                    for(int i=0,iMax=ComUtil.getRandom(1,a.getAirGoodsNow());i<iMax;i++) {
                        if (haveEnemyInRegion(a.getRegionId())) {
                            if (!air_Attack(a, a.getRegionId())) {
                                break;
                            }
                        }
                    }
                    if(a.getAirGoodsNow()==0){
                        a.addAirRound(1);
                    }
                    //2.检查有无交战区域,有则飞过去
                    if(a.armyData==null&&ComUtil.ifGet(game.resGameConfig.airTeleportChance)&&legion.varBattleRegions.size>0&&!legion.isPlayerCommand()){// 启用超时空移动,移动到有region适合进攻的build

                        int region=getBorderRegionTIA2(legion.varBattleRegions.random(),1,tempIntArray2).random();

                        BuildData buildData=getBuildDataByRegion(region);
                        if(buildData!=null&&buildData.getBuildType()!=2&&buildData.getAirCount()<4){
                            air_Move(a,region);
                            a.setTargetRegion(-1);
                            a.addAirRound(1);
                        }
                    }
                }
                if(a.getAirRound()==0){
                    air_Standby(a);
                    a.addAirRound(1);
                }
            }else {
                air_Standby(a);
                a.addAirRound(1);
            }
        }
        game.tempUtil.disposeTempIntArray(tempIntArray2);
    }





    private boolean ai_bestAct(ArmyData a, IntIntMap tempIntIntMap2) {
        boolean rs=false;
        int bestHexagon=0;
        int bestScore=0;
        int score,actType;
        Iterator<IntIntMap.Entry>   itB = tempIntIntMap2.iterator();
        //获得最优解
        while (itB.hasNext()) {
            IntIntMap.Entry c = itB.next();
            score=getHexagonScore(a,c.key,c.value);
            if(score>0){//c.value:actType 13 占领建筑 7 合并 25 邻近进攻 18 移动到目标再攻击
                // Gdx.app.log("ai_bestAct:"+a.getArmyIndex(),c.key+":"+c.value+":"+score);
                if(score>=bestScore){
                    bestHexagon=c.key;
                    bestScore=score;
                }
            }
        }
        //行动
        if(bestScore>0){
            actType=tempIntIntMap2.get(bestHexagon,-1);
            if(actType==-1){
                rs=false;
            }else{
                rs= ai_unitAct(a,bestHexagon,actType);
            }
        }
        return rs;
    }

    //ai 的单位行动
    private boolean ai_unitAct(ArmyData a, int hexagon, int actType) {
        if(a.getArmyRound()!=0){
            return false;
        }
        LegionData legion=a.getLegionData();
        boolean ifAct=true;
        if(actType==13){
            army_Move(a,hexagon);
            if(masterData.getPlayerMode()==0){
                addLegionConfidence(legion.getLegionIndex(), 1);
                if(!legion.isPlayerCommand()){
                    //legion.addAmbition(1);
                    /*if (ComUtil.ifGet(100 - legion.getAmbition())) {
                        legion.setTaxBonus(legion.taxBonus - 1);
                    }*/
                }
            }
        }else if(actType==7){
            army_Merge(a, getArmyDataByHexagon(hexagon));
        }else if(actType==25){
            army_Attack(a,hexagon);
        }else if(actType==18){
            army_Move(a, hexagon);
            int target = getCanAtkTargetByRangeTIA1(a);
            if (target !=-1) {
                army_Attack(a, target);
            }
        }else{
            ifAct=false;
        }
        if(ifAct){
            a.addArmyRound(1);
        }
        return ifAct;
    }
    //得分
    private int getHexagonScoreForMove(int li,int armyHexagon,int targetHexagon){
        int aroundEnemyCount= getAroundUnitCountIA1(li,targetHexagon,2);
        int aroundAllyCount= getAroundUnitCountIA1(li,targetHexagon,1);
        if(aroundEnemyCount>3){
            return  -aroundEnemyCount*5;
        }else if(aroundAllyCount>3){
            return  aroundAllyCount/2;
        }else if(aroundEnemyCount>0){//如果周围有敌军
            return  getHexagonScoreByAroundEnemy(li,armyHexagon,targetHexagon);
        }else{
            return  aroundAllyCount+1;
        }
    }

    private int getHexagonScoreByAroundEnemy(int li,int armyHexagon,int targetHexagon){

        int score=0;//int li=army.getLegionIndex();
        ArmyData aroundArmy;
        ArmyData armyData=getArmyDataByHexagon(armyHexagon);
        if(armyData==null){
            return score;
        }
        IntArray tempIntArray1=    getCanAtkPotionTIA1(armyData,targetHexagon,  armyData.getMinRange(), armyData.getMaxRange(),  game.tempUtil.getTempIntArray());

        for(int i=0,iMax=tempIntArray1.size;i<iMax;i++){
            int id=tempIntArray1.get(i);
            BuildData targetBuild=getBuildDataByRegion(id);
            if(targetBuild!=null&&!ifAllyByLi(targetBuild.getLegionIndex(),armyData.getLegionIndex())){
                int foreignDegree=getForeignDegree(targetBuild.getLegionIndex(),armyData.getLegionIndex());
                if(foreignDegree==-1){
                    score+=10;
                }else if(foreignDegree==0){
                    score+=5;
                }
                if(targetBuild.isCapital()){
                    score+=targetBuild.cityLvNow*2+30;
                }
                if(!targetBuild.ifHaveGarrison()){
                    score+=targetBuild.cityLvNow*2+10;
                }
                if(!targetBuild.ifSea()){
                    score+=targetBuild.cityLvNow*2+1;
                }
            }
            aroundArmy=getArmyDataByHexagon(id);
            if(aroundArmy!=null&&ifCanAtk(li,aroundArmy.getLegionIndex())){
                BuildData build=aroundArmy.getBuildData();//战场在目标
                if(build==null){
                    continue;
                }
                if(getDirectForHexagon(armyHexagon,targetHexagon)!=aroundArmy.getArmyDirection()){
                    score+=aroundArmy.getArmyRank()/2;
                }/*else{
                    score-=aroundArmy.getArmyRank()/2+1;
                }*/
             //   int damage=GameUtil.getDamageForArmy(game,getArmyDataByHexagon(armyHexagon),aroundArmy,build,false,0);
                int damage=GameUtil.getDamageForUnit(game,getArmyDataByHexagon(armyHexagon),aroundArmy,build,false,0);
                if(aroundArmy.getArmyHpNow()<damage){
                    score+=aroundArmy.getArmyRank()+aroundArmy.getUnitGroup();
                }else if(aroundArmy.ifInArmyRange(armyHexagon)){
                    score-=aroundArmy.getArmyRank()/3;
                }
            }
        }
        int aroundEnemyCount= getAroundUnitCountIA1(li,targetHexagon,2);

        game.tempUtil.disposeTempIntArray(tempIntArray1);
        if(armyData.getHpRate()<50){
            score-=aroundEnemyCount*aroundEnemyCount;
        }else {
            score-=aroundEnemyCount*aroundEnemyCount/2;
        }
        return score;
    }

    public int getHexagonScore(int hexagon,int targetHexagon,int actType){
        return getHexagonScore(getArmyDataByHexagon(hexagon),targetHexagon,actType);
    }


    //获得最优目标
    //actType 13 占领建筑 7 合并 25 邻近进攻 18 移动到目标再攻击
    public int getHexagonScore(ArmyData a,int targetHexagon, int actType) {
        if(a==null){
            return 0;
        }
        int score=0;

        boolean needUpd=a.needUpd();
        int foreignDegree= getForeignDegree(a.getLegionIndex(),getLegionIndexByHexagon(targetHexagon));

        if(a.isElite(getGameElite())){//a.getGeneralIndex()>0||a.getArmyRank()>4||a.getUnitGroup()>4



            int aroundEnemyCount= getAroundUnitCountIA1(a.getLegionIndex(),targetHexagon,2);
            int aroundAllyCount= getAroundUnitCountIA1(a.getLegionIndex(),targetHexagon,1);
            //0相对中立 1友好 -1敌对

            //特殊加分规则:
            //1.建筑加分最高
            //2.移动到目标加分 根据移动位置计算两个 1.位置 2.可攻击目标
            //3.邻近攻击

            BuildData b=getBuildDataByRegion(targetHexagon);
            if(actType==13||actType==18){//占领建筑
                if(b!=null){
                    if(foreignDegree==-1||needUpd){
                        score+=10;
                    }else if(foreignDegree==0){
                        score+=5;
                    }
                    if(b.isCapital()){
                        score+=b.getSumLv()*3+30;
                    }

                    if(!b.ifSea()){
                        if(!b.ifHaveGarrison()){
                            score+=b.getSumLv()*2+10;
                        }else{
                            score+=b.getSumLv()+5;
                        }
                    }
                }
                if(actType==18){
                    score+=getHexagonScoreByAroundEnemy(a.getLegionIndex(),a.getHexagonIndex(),targetHexagon);
                }
            }else
            if(actType==7){//合并
                ArmyData a2=getArmyDataByHexagon(targetHexagon);
                if(a2!=null){
                    if(a2.isUnitGroup()&&!a2.ifHaveFeature(33)&&!a.ifHaveFeature(33)){
                        if(needUpd||a2.needUpd()){
                            score+=30;
                        }
                        if(a2.getUnitGroup()+a.getUnitGroup()<7){
                            score+=30+(a.getArmyRank()+a2.getArmyRank());
                        }else if(a.getUnitGroup()>6||a2.getUnitGroup()>6){
                            score-=(a.getArmyRank()+a2.getArmyRank());
                        }else{
                            score+=(a.getUnitGroup()+a2.getUnitGroup())*(Math.abs(a.getArmyRank()-a2.getArmyRank())+1) ;
                        }
                    }else{
                        int hpRate=ComUtil.min(a2.getHpRate(),a.getHpRate());
                        if(a2.getGeneralIndex()!=0||a.getGeneralIndex()!=0){
                            GeneralData g;
                            if(a2.getGeneralIndex()!=0){
                                g=a2.getGeneralData();
                            }else{
                                g=a.getGeneralData();
                            }
                            if(hpRate>50){
                                score+=g.getRank()/2+1;
                            }else{
                                score+=g.getRank()+10;
                            }
                        }
                        if(needUpd||a2.needUpd()){
                            score+=10;
                        }
                        score+=ComUtil.max(a2.getArmyRank(),a.getArmyRank())+ComUtil.max(a2.getUnitGroup(),a.getUnitGroup());
                        if(hpRate<50){
                            score= (100-hpRate)/10*score;
                        }else if(score>10){
                            score=10;
                        }
                    }
                }
            }else
            if(actType==25){//25 邻近进攻
                ArmyData a2=getArmyDataByHexagon(targetHexagon);
                if(a2!=null){
                    score+=a.getUnitGroup()-a2.getUnitGroup();
                    score+=(a.getHpRate()-a2.getHpRate())/5;
                    score+=(a.getArmyRank()-a2.getArmyRank())/2;
                    if(getDirectForHexagon(a.getHexagonIndex(),targetHexagon)!=a2.getArmyDirection()){
                        score+=a2.getArmyRank()/2+1;
                    }
                        int damage=GameUtil.getDamageForUnit(game,a,a2,a2.getBuildData(),false,0);
                        score+=a2.getArmyRank()*(damage*100/a2.getArmyHpMax());
                        if(a2.getArmyHpNow()<damage){
                            if(needUpd){
                                score+=5*a2.getArmyRank();
                            }
                            score+=5*a2.getArmyRank();
                        }else if(a2.ifInArmyRange(a.getHexagonIndex())){
                            score-=2*a2.getArmyRank();
                        }
                        if(GameUtil.ifRaidAttack(a,a2)){
                            score+=10;
                        }
                }
                //  b=getBuildDataByRegion(targetHexagon);
                if(b!=null&&b.getCityHpNow()>0){
                    if(needUpd){
                        score+=b.getExp();
                    }
                    if(b.isCapital()){
                        score+=30;
                    }
                    if(!b.ifHaveGarrison()){
                        score+=10;
                    }
                    if(!b.isSeaArea()){
                        score+=b.getCityLvNow()*2+1;
                    }
                }
                if(a.getHpRate()<50){
                    score-=a.getArmyRank();
                }
            }
            //如果是海洋且单位不为海军则分数减半
            if (ifSea(targetHexagon)&&a.getArmyType()!=4&&a.getArmyType()!=8&&a.getTransportType()==0) {
                if(score>0){
                    score=score/3;
                }else{
                    score-=5;
                }
            }
            //位置分
            if(aroundEnemyCount>3){
                score+=-aroundEnemyCount*5;
            }else if(aroundAllyCount>3){
                score+=aroundAllyCount/2;
            }else{
                score+=aroundAllyCount+1;
            }
            //根据所在位置,兵种目标和位置来给位置打分,分值为差值
            if(ifGridIsPass(a.getTargetRegion())&&(a.getHpRate()>50||(ifAllyByHexagon(a.getHexagonIndex(),a.targetRegion)))){
                int potionDistance=getDistanceForMap(a.hexagonIndex,a.getTargetRegion());
                int targetHexagonDistance=getDistanceForMap(targetHexagon,a.getTargetRegion());
                score+=potionDistance-targetHexagonDistance;
            }

            }else{//actType 13 占领建筑 7 合并 25 邻近进攻 18 移动到目标再攻击
            int hpRate=a.getHpRate();

            switch (actType){
                case 13:
                    BuildData b=getBuildDataByRegion(targetHexagon);
                    if(b!=null){
                        if(foreignDegree==-1||needUpd){
                            score+=10;
                        }else if(foreignDegree==0){
                            score+=5;
                        }
                        if(b.isCapital()){
                            score+=b.getSumLv()*3+30;
                        }
                        if(!b.ifSea()){
                            if(!b.ifHaveGarrison()){
                                score+=b.getSumLv()*2+10;
                            }else{
                                score+=b.getSumLv()+5;
                            }
                        }
                    }
                    break;
                case 7:
                    ArmyData a2=getArmyDataByHexagon(targetHexagon);
                    if(a2!=null){
                        if(!a2.ifHaveFeature(33)&&!a.ifHaveFeature(33)){
                            if(needUpd||a2.needUpd()){
                                score+=20;
                            }
                            if(a2.getUnitGroup()+a.getUnitGroup()<7){
                                score+=20;
                            }
                        }else{
                            if(hpRate>50){
                                if(!needUpd){
                                    score-=  a.getArmyRank();
                                }else{
                                    score+=10+ComUtil.max(a.getArmyRank(),a2.getArmyRank());
                                }
                            }else{
                                if(!needUpd){
                                    score-=  hpRate-a.getArmyRank();
                                }else{
                                    score+=15+ComUtil.max(a.getArmyRank(),a2.getArmyRank());
                                }
                            }
                        }
                    }
                    break;
                case 25:
                    if(hpRate>50){
                        score+=   hpRate+a.getArmyRank();
                        a2=getArmyDataByHexagon(targetHexagon);
                        if(a2!=null&&GameUtil.ifRaidAttack(a,a2)){
                            score+=10;
                        }
                    }else{
                        a2=getArmyDataByHexagon(targetHexagon);
                        if(a2!=null&&GameUtil.ifRaidAttack(a,a2)){
                            score+=10;
                        }else{
                            score-=  hpRate;
                        }
                    }
                    break;
                case 18:
                    b=getBuildDataByRegion(targetHexagon);
                    if(b!=null){
                        if(foreignDegree==-1||needUpd){
                            score+=10;
                        }else if(foreignDegree==0){
                            score+=5;
                        }
                        if(b.isCapital()){
                            score+=b.getSumLv()*3+30;
                        }
                        if(!b.ifSea()){
                            if(!b.ifHaveGarrison()){
                                score+=b.getSumLv()*2+10;
                            }else{
                                score+=b.getSumLv()+5;
                            }
                        }
                    }
                    if(hpRate>50){
                        if(foreignDegree==-1){
                            score+=  (hpRate+a.getArmyRank())/2;
                        }else{
                            score-=  (hpRate+a.getArmyRank())/2;
                        }
                    }else{
                        if(foreignDegree==-1){
                            score+=  (hpRate+a.getArmyRank())/2;
                        }else{
                            score-=  (hpRate-a.getArmyRank())/2;
                        }
                    }
                    break;
                default:
                    score+=hpRate;
            }
        }
        return ComUtil.limitValue(score,-100,100);
    }

    private int getCanAtkHexagonByNulHexagons(IntIntMap tempIntIntMap) {
        if(tempIntIntMap.size>0){
            Iterator<IntIntMap.Entry> itH = tempIntIntMap.iterator();
            while (itH.hasNext()) {
                IntIntMap.Entry o=itH.next();
                int c=o.value;
                if(c==25){
                    return o.key;
                }
            }
        }
        return -1;
    }

    //
    private ArmyData getCanLoadNulArmyDataByNulHexagons(IntIntMap tempIntIntMap) {
        if(tempIntIntMap.size>0){
            Iterator<IntIntMap.Entry> itH = tempIntIntMap.iterator();
            while (itH.hasNext()) {
                IntIntMap.Entry o=itH.next();
                int c=o.value;
                if(c==7){
                    ArmyData a=getArmyDataByHexagon(o.key);
                    if(a!=null){
                        return a;
                    }
                }
            }
        }
        return null;
    }

    //替换掉一些没用的建造项目
    private int replaceBuildCardIdForAi(int cardId) {
        if(cardId==1501||cardId==1505||cardId==1507){
            return ComUtil.getRandOne(game.resGameConfig.aiCanBuildAirId);
        }
        return cardId;
    }


    private int getTargetEnemyByRangeTIA1(ArmyData a) {
        IntArray tempIntArray1=game.tempUtil.getTempIntArray();
        getRangePostion(a.getHexagonIndex(), a.getMinRange(), a.getMaxRange(), a.getIfOnlySeaForTarget(), tempIntArray1);
        int rs;

        if(tempIntArray1.size>0){
            tempIntArray1.shuffle();
            boolean ifPlayer=a.playerCanCommand();
            for (int i = 0; i < tempIntArray1.size; i++) {
                int id=tempIntArray1.get(i);
                if (ifHaveCanAtkEnemy(a,id, ifPlayer)) {
                    rs=id;
                    game.tempUtil.disposeTempIntArray(tempIntArray1);
                    return rs;
                }
            }
        }
        game.tempUtil.disposeTempIntArray(tempIntArray1);
        return -1;
    }


    private int getCanAtkTargetByRangeTIA1(ArmyData a) {
        IntArray tempIntArray1=game.tempUtil.getTempIntArray();
        getRangePostion(a.getHexagonIndex(), a.getMinRange(), a.getMaxRange(), a.getIfOnlySeaForTarget(), tempIntArray1);
        int bestTargetHexagon=-1;
        int bestScore=0;
        int score;
        for (int i = 0; i < tempIntArray1.size; i++) {
            int id=tempIntArray1.get(i);
            if (ifHaveCanAtkTarget(a,id)) {
                score=getHexagonScore(a,id,25);
                if(score>bestScore){
                    bestScore=score;
                    bestTargetHexagon=id;
                }
            }
        }
        game.tempUtil.disposeTempIntArray(tempIntArray1);
        return bestTargetHexagon;
    }
    //仅仅恢复玩家可操作的单位和建筑
    public void nextRoundEndForOnlyPlayer(){
        for  (int i=0;i<hexagonDatas.size;i++) {
            Fb2Map.MapHexagon h=hexagonDatas.get(i);
            if(h==null){
                continue;
            }
            Fb2Smap.ArmyData a=h.armyData;
            if (a != null &&a.getArmyHpNow()>0&&a.isPlayer() ) {
                a.setIfMove(0);
                a.setIfAttack(0);
                a.reduceArmyRound(1);
            }
            //Fb2Smap.BuildData b=h.buildData;
        }
        LegionData pl=getPlayerLegionData();
        if(masterData.getPlayerMode()==0&&masterData.ifChief==1&&chiefData!=null){
            if(getForeignPolicy()!=0&&pl.isFreeSovereignCountry()){
                dealWithForeignPolicy();
            }
            int tm=getPlayerLegionData().getIndustry();
            dealWithBuildPolicy();
            if(pl.getIndustry()<tm){
                pl.setIndustry(tm);
            }
        }

        if(masterData.getPlayerMode()==2){
            initAllFogByRegion();
            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady initAllFogByRegion");}
        }else{
            initAllFog();
            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady initAllFog");}
        }
        initCardNumAndCost();
        updInfoByBuild();
        resetPLegionRank();
        updIncome(false);
    }

    public void nextRoundEnd(boolean ifHavePlayer) {
        roundCountryIndex=-5;
        ifBanAiCheat=ifBanAiCheat();
        resetShieldCountry();//屏蔽国设置
        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd resetShieldCountry");}
        LegionData pl=getPlayerLegionData();
        //Gdx.app.log("nextRoundEnd 1",legionDatas.get(masterData.playerLegionIndex).getAllAttributes());

        if(ifSystemEffective(16)&&spiritMap!=null){
            //每回合开始进行一次判断,成功则金钱翻倍,失败则金钱减半
            if(ifHaveSpirit(11)){
                if(ComUtil.ifGet(getSpiritValue(11))){
                    pl.setMoney(getPlayerLegionData().getMoney()*2);
                }else{
                    pl.setMoney(getPlayerLegionData().getMoney()/2);
                }
            }
            //如果不与任何国家处于敌对状态,则金钱收入增加一倍,否则科技收入减半
            if(ifHaveSpirit(28)&&foreignDatas!=null&&foreignDatas.size>0){
                boolean isPeace=true;
                for(int i=0;i<legionDatas.size;i++){
                    ForeignData f=getForeignData(i);
                    LegionData l=getLegionDataByLi(i);
                    if(l.varRegionCount>0&&l.getInternIndex()>0&&l.getLegionIndex()>0&&l.getLegionIndex()!=masterData.getPlayerLegionIndex()){
                        if(f.getForeignType()==-1){
                            isPeace=false;
                            break;
                        }
                    }
                }
                if(isPeace){
                    pl.setMoney(getPlayerLegionData().getMoney()*2);
                }else{
                    pl.setTech(getPlayerLegionData().getTech()/2);
                }
            }
            // 每回合获得外贸次数有{0}%几率加倍
            if(ifTriggerSpirit(32)){
                pl.setTradeCount( pl.getTradeCount()*2);
            }
            if(ifHaveSpirit(43)&&foreignDatas!=null&&foreignDatas.size>0){
                for(int i=1;i<legionDatas.size;i++){
                    if(i==masterData.getPlayerLegionIndex()){continue;  }
                    ForeignData f=getForeignData(i);
                    f.reduceFavor(10);
                }
            }
            if(ifHaveSpirit(45)&&foreignDatas!=null&&foreignDatas.size>0){
                for(int i=1;i<legionDatas.size;i++){
                    if(i==masterData.getPlayerLegionIndex()){continue;  }
                    ForeignData f=getForeignData(i);
                    f.reduceFavor(5);
                }
            }
            if(ifHaveSpirit(44)){//所有部队每回合随机技能变化
                for  (int i=0;i<hexagonDatas.size;i++) {
                    Fb2Map.MapHexagon h=hexagonDatas.get(i);
                    if(h==null){
                        continue;
                    }
                    Fb2Smap.ArmyData a=h.armyData;
                    if (a == null || a.getArmyHpNow()==0 ) {
                        continue;
                    }
                    a.resetSkill();
                }
            }
        }

        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd spirit1");}
        checkRoundDatas();
        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd checkRoundDatas");}
        if(masterData.getPlayerMode()!=1){
            /**/
            if(masterData.getRoundNow()%game.resGameConfig.triggerBorderCountryHostilePlayerRound==1){//非争霸模式下,每隔40回合会发生一次周边国家的敌视
                legion_playerBorderCountryHostile();
                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd legion_playerBorderCountryHostile");}
            }
            if(ifSystemEffective(15)){
                for(int i=0;i<taskDatas.size;i++){
                    TaskData t=taskDatas.get(i);
                    if(t.getTaskType()!=2){
                        t.setTaskRound(t.getTaskRound()-1);
                        if(t.getTaskRound()==0L){
                            updRTask(t);
                        }
                    }
                }
            }
            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd updRTask");}
            if(ifSystemEffective(4)){
                //每回合契约削减
                for(int i=0;i<foreignDatas.size;i++){
                    ForeignData f=foreignDatas.get(i);
                    if(f.getForeignType()==1&&f.getForeignValue()>0){
                        f.foreignValue--;
                        if(f.foreignValue ==0){
                            f.setForeignType(0);
                        }
                    }
                }
                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd 每回合契约削减");}
            }
        }else {
            if(getRemainRound()<10&& getRoundProgress()>90) {
                for  (int i=0;i<hexagonDatas.size;i++) {
                    Fb2Map.MapHexagon h=hexagonDatas.get(i);
                    if(h==null){
                        continue;
                    }
                    Fb2Smap.ArmyData a=h.armyData;
                    if (a == null||a.armyActor!=null ||a.armyActor!=null||a.getArmyMorale()<70|| a.getArmyHpNow() <= 0||a.getArmyRound()>0||ifAllyPlayerByLi(a.getLegionIndex())|| a.getLegionData().getRecruitMultiple(a.getArmyType())==1  ) {
                        continue;
                    }
                    if(ComUtil.ifGet(a.getArmyMorale())){
                        if(ComUtil.ifGet(100-masterData.getGameDifficulty()*10)){
                            Gdx.app.log("削弱ai1 移除:"+masterData.getRoundNow(),a.getAllAttributes());
                            a.addArmyRound(1);
                        }else if(ComUtil.ifGet(masterData.getGameDifficulty()*5)){
                            Gdx.app.log("削弱ai2 休眠:"+masterData.getRoundNow(),a.getAllAttributes());
                            a.setArmyMorale(a.getArmyMorale()/2);
                        }
                    }
                }
                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd ai削弱");}
                clearArmyDeath();
                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd clearArmyDeath");}
            }else{//让ai的部队快速移动到玩家城市周围

                //  Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
                //while (it.hasNext()) {
                //  IntMap.Entry<BuildData> c = it.next();
                //BuildData b=c.value;
                for(int bi=0;bi<buildRDatas.size();bi++) {
                    BuildData b=buildRDatas.getByIndex(bi);
                    if(b!=null&&getForeignDegree(masterData.playerLegionIndex,b.getLegionIndex())!=1&&b.isPlayerAroundRegion()&&b.getLegionData().ifAiCheatChance()){
                        for(int i=0;i<legionDatas.size;i++){
                            LegionData l=legionDatas.get(i);
                            if(l.getInternIndex()!=0&&!l.ifPlayerAlly()){
                                ai_unitTeleportToAroundRegion(b.getRegionId(),l.getLegionIndex(),getRoundProgress()>50);
                            }
                        }
                    }
                }
                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd ai_unitTeleportToAroundRegion");}
            }
        }
        //如果铁路生效
        if(ifSystemEffective(22)){
            IntArray builds=game.tempUtil.getTempIntArray();
            for(int bi=0;bi<buildRDatas.size();bi++) {
                BuildData b=buildRDatas.getByIndex(bi);
                if(b!=null&&b.getLegionIndex()>0&&!b.isPlayer()&&b.getBuildRound()==0&&!b.isWar()&&!b.ifSea()){
                    builds.add(b.getRegionId());
                }
            }
            if(builds.size>0){
                builds.shuffle();
                for(int i=0;i<builds.size;i++){
                    BuildData b=getBuildDataByRegion(builds.get(i));
                    if(b!=null){
                        LegionData bl=b.getLegionData();
                        if(payCardPrice(bl,b,2015,false)){
                            if(b.getTransportLvNow()==0){
                                if(!GameMethod.buildCardIfLock(game,b.getLegionData(),b,2003)){
                                    legion_UpdTech(b.getLegionData(),b,2003);
                                }
                            }else if(ai_buildRailway(b)){
                                b.addBuildRound(1);
                            }else if(b.getCityLvNow()>b.getTransportLvNow() &&!GameMethod.buildCardIfLock(game,b.getLegionData(),b,2003)){
                                legion_UpdTech(b.getLegionData(),b,2003);
                            }
                        }
                    }
                }
            }
            game.tempUtil.disposeTempIntArray(builds);
            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd 铁路");}
        }

        //ai建造奇观
        ai_buildWonder();

        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd ai_buildWonder");}
        //如果是目标类获胜条件,给敌对army设置region
        //0征服胜利 1 占领目标  2占领目标洲际 3消灭目标国家 4占领战略区域 5守护目标
        if(masterData.getRoundNow()>5&& getRoundProgress()>20&&(masterData.getVictoryType()==1||masterData.getVictoryType()==2||masterData.getVictoryType()==4||masterData.getVictoryType()==5)){
            IntArray targetRegions=game.tempUtil.getTempIntArray();
            targetRegions= getPlayerVictoryRegions(targetRegions);
            if(targetRegions.size>0){
                for  (int i=0;i<hexagonDatas.size;i++) {
                    Fb2Map.MapHexagon h=hexagonDatas.get(i);
                    if(h==null){
                        continue;
                    }
                    Fb2Smap.ArmyData a=h.armyData;
                    if (a == null || a.getArmyHpNow() <= 0||getForeignDegree(a.getLegionIndex(),masterData.getPlayerLegionIndex())!=-1||a.getArmyRound()>0 ) {
                        continue;
                    }
                    int targetRegion=targetRegions.random();
                    BuildData tb=getBuildDataByRegion(targetRegion);
                    if(tb!=null&&a.canMove(targetRegion)&&a.getArmyMorale()>game.resGameConfig.unitMoraleMinLimit&&a.getHpRate()>game.resGameConfig.unitHpRateMinLimit&&ComUtil.ifGet(a.getAttackChance())){
                        int th=tb.getFreeTranspotion(a.getLegionIndex());
                        if(th!=-1&&ifAllyByLi(a.getLegionIndex(),tb.getLegionIndex())&&a.armyActor==null&&a.getTargetRegion()==-1
                                &&a.ifCanTeleport(th)&&a.canMove(th)) {
                            army_Move(a, th);
                            //armyData.createActor();
                            if (a.ifNeedCreateActor()) {
                                a.createActor();
                            }
                        }else if(getForeignDegree(tb.getLegionIndex(),masterData.getPlayerLegionIndex())==1){
                            a.setRegionId(tb.getRegionId());
                        }

                    }
                }
            }
            game.tempUtil.disposeTempIntArray(targetRegions);

            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd ai设置目标");}
        }




        BuildData tb;
        for  (int i=0;i<hexagonDatas.size;i++) {
            Fb2Map.MapHexagon h=hexagonDatas.get(i);
            if(h==null){
                continue;
            }
            Fb2Smap.ArmyData a=h.armyData;
            if(a==null||a.getArmyHpNow()<=0){
                continue;
            }
            if(masterData.getPlayerMode()==2){
                int regionLi=getLegionIndexByRegion(a.getRegionId());
                if(ifLiIsPass(regionLi)&&a.getLegionIndex()!=regionLi){
                    a.setLegionIndex(regionLi);
                    if(a.armyActor!=null){
                        if(a.getTargetRegion()!=-1){
                            a.setTargetRegion(-1);
                            a.armyActor.resetTarget();
                        }
                    }
                }
            }

            a.changeMoraleByWeather();

            if(!ifHavePlayer&&a.isPlayer()){
                continue;
            }

            if(!a.isPlayer()){
                if(a.aiCanRecruitGeneral()&&a.getArmyRank()>5){
                    a.updForGeneral();
                }
                if((a.ifAttack==0||a.ifMove==0)  &&a.canDeloyTrap()){
                    if(a.triggerSkill(125)){
                        fort_build(5005,a.getHexagonIndex(),a.getLegionIndex(),a.getArmyRank());
                        a.drawSkill(125);
                    }else if(a.ifHaveFeature(10)&&a.triggerSkill(10)){
                        fort_build(5005,a.getHexagonIndex(),a.getLegionIndex(),a.getArmyRank());
                        a.drawFeature(10);
                    }
                }
            }
            /*if(a.getHexagonIndex()==9772){
                int s=0;
            }
            if(a.ifAttack==0&&a.ifHaveFeature(10)&&ComUtil.ifGet(GameMethod.getUnitFeatureEffect(a,10)) &&a.canDeloyTrap()){
                fort_build(a,5005);
            }
            */
            /**///int fortId,int hexagon,int li,int buildLv

            a.setIfAttack(0);
            a.setIfMove(0);
            //提高可升级兵种的能力


            if (a.getArmyRound() == 0) {
                tb = a.getBuildData();
                if (tb != null && tb.getLegionIndex() == a.getLegionIndex() && tb.getBuildRound() == 0&& !tb.isPlayer() ) {
                    int mergeId=tb.getRandomCanRecruitMergeUnitId(a,!a.getLegionData().ifAiCheatChance());
                    if(mergeId>0){
                        a.mergeUnitGroup(mergeId);
                        payCardPrice(a.getLegionData(),tb,mergeId,true);
                        tb.addBuildRound(1);
                    }else if(ifSystemEffective(8)&&(a.getUnitGroup()>3||a.getGeneralIndex()!=0||a.getArmyRank()>2)&&a.getHpRate()<50&&tb.getSupplyLvNow()>game.gameConfig.getDEF_CARD().getInt(2009,"min")){
                        tactic_FirstAid(a.getHexagonIndex(),tb.getSupplyLvNow(),false);
                        tb.addBuildRound(1);
                    }else if(a.getUnitGroupSum()>3&&a.getHpRate()<50&& a.dissolveUnitGroupAndRestoreState()){

                    }else if(a.randomUpdUnitGroupLv()){
                        tb.addBuildRound(1);
                    }else if(a.randomUpdArmyWealv()){
                        tb.addBuildRound(1);
                    }else if (a.canBuildFort()) {
                        if (!tb.ifSea()&&tb.getBuildStatus() != 0&&a.getHexagonIndex()!=tb.getRegionId() && ComUtil.ifGet(game.resGameConfig.buildFortChance)) {
                            ai_BuildFort(a);
                        } else {
                            army_Standby(a);
                        }
                    }else {
                        army_Standby(a);
                    }
                }  else {
                    army_Standby(a);
                }
                a.addArmyRound(1);
            }
            a.reduceArmyRound(1);
        }

        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd 单位恢复");}
        Iterator<IntMap.Entry<AirData>> it1 = airIDatas.iterator();
        while (it1.hasNext()) {
            AirData a = it1.next().value;
            if(a==null||a.getAirHpNow()<=0){
                continue;
            }
            a.setIfMove(0);
            a.setIfAttack(0);
            if (a.getAirRound() == 0) {
                tb = a.getBuildData();
                if (tb != null && tb.getLegionIndex() == a.getLegionIndex() && tb.getBuildRound() == 0 && !tb.isPlayer()&& a.updWeaLv()) {
                    tb.addBuildRound(1);
                } else {
                    air_Standby(a);
                    a.addAirRound(1);
                }
            }
            a.reduceAirRound(1);
            a.changeMoraleByWeather();
        }

        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd 空军恢复");}
        Iterator<IntMap.Entry<NulcleData>> it2 = nulcleIDatas.iterator();
        while (it2.hasNext()) {
            NulcleData n = it2.next().value;
            if (n.getNucleRound() == 0) {
                nul_StandBy(n);
            }
            n.reduceNulRound(1);
        }

        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd 弹头恢复");}
        Iterator<IntMap.Entry<FortData>> itf = fortHDatas.iterator();
        while (itf.hasNext()) {
            FortData f = itf.next().value;
            if (f == null) {
                continue;
            }
            if (getArmyDataByHexagon(f.getHexagonIndex()) == null && ComUtil.ifGet(50 - f.getFortLv() * 3)) {
                f.setFortRound(f.getFortRound() - 1);
            }
            if (f.getFortRound() <= 0) {
                fort_remove(f.getHexagonIndex());
            }
        }

        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd fort恢复");}

        BuildData build;

        //



        //Gdx.app.log("nextRoundEnd 2",legionDatas.get(masterData.playerLegionIndex).getAllAttributes());
        if(roundState!=1){

            if(ifSystemEffective(8)){
                //城市使用战术卡
                //   Iterator<IntMap.Entry<BuildData>> itB = buildRDatas.iterator();
                // while (itB.hasNext()) {
                //   IntMap.Entry<BuildData> c = itB.next();
                // BuildData b=c.value;
                for(int bi=0;bi<buildRDatas.size();bi++) {
                    BuildData b=buildRDatas.getByIndex(bi);
                    if(b.getBuildRound()==0&&!b.isPlayer()&&b.getLegionIndex()!=0
                    &&(b.getTradeLvNow()>5||b.getDefenceLvNow()>5||b.getCityLvNow()>5||b.getTechLvNow()>5||b.getMissileLvNow()>5)){
                        //如果是安全,则使用 强征,戒严,修补
                        //  int r=   connectDatas.get(b.getBuildIndex()).getRandomRegionCanAtkTIA1(b.getLegionIndex(),false,false );
                        int r= getRandomRegionCanAtkTIA1(b.getLegionIndex(),b.getRegionId(),false,false);
                            if(r==-1){
                                if(b.getCityStability()>50&&b.getTradeLvNow()>game.gameConfig.getDEF_CARD().getInt(2001,"min")){
                                    tactic_ImposeTax(b.getRegionId(),b.getTradeLvNow(),false);
                                    b.addBuildRound(1);
                                }else if(b.getHpRate()<30&&b.getDefenceLvNow()>game.gameConfig.getDEF_CARD().getInt(2010,"min")){
                                    tactic_RepairBuild(b.getRegionId(),b.getDefenceLvNow(),false);
                                    b.addBuildRound(1);
                                }else if(b.getCityLvNow()>game.gameConfig.getDEF_CARD().getInt(2007,"min")){
                                    tactic_MartialLaw(b.getRegionId(),b.getCityLvNow(),false);
                                    b.addBuildRound(1);
                                }
                            }else{//否则 散谣,爆破
                                tb=getBuildDataByRegion(r);
                                if(tb!=null){
                                    if(tb.getHpRate()<30&&b.getTechLvNow()>game.gameConfig.getDEF_CARD().getInt(2004,"min")){
                                        tactic_SpreadRumors(r,b.getTechLvNow(),false);
                                        b.addBuildRound(1);
                                    }else if(b.getMissileLvNow()>game.gameConfig.getDEF_CARD().getInt(2012,"min")){
                                        tactic_Bombardment(b.getRegionId(),r,b.getMissileLvNow(),false);
                                        b.addBuildRound(1);
                                    }
                                }
                            }

                    }
                    if(b.buildActor!=null){
                        b.buildActor.update();
                    }
                }

                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd 建筑战术卡");}
            }


            if(ifSystemEffective(4)){
                String tempValue;
                int li;
                boolean ifFirstPlayer=true;
                for (int i = 0, iMax = legionDatas.size; i < iMax; i++) {
                    LegionData l = legionDatas.get(i);
                    //6.5 出钱维护关系
                    if (l.getInternIndex() != 0 && l.getSuzerainLi() == 0 && l.getLegionIndex() != masterData.playerLegionIndex) {
                        legion_MaintainAll(l);
                    }
                    //7 检测主要领土是否被占领 123
                    if(l.getInternIndex() != 0){
                        int region=l.getLossCoreRegion();
                        // boolean ifHaveTriggerPlayer=false;
                        if(region!=-1){
                            if(!l.varBattleRegions.contains(region)){
                                l.varBattleRegions.add(region);
                            }
                       /*  BuildData lossBuild=getBuildDataByRegion(region);
                       if(lossBuild!=null){

                        prompt_title_81=外交-通牒
                        prompt_detail_81={0}要求从我们这里获得区域{1},否则将会与他的盟友向我们发起全面战争,是否同意对方的领土要求?
                        prompt_effect_81=

                        prompt_title_82=外交-通牒
                        prompt_detail_82={0}要求我们将区域{1}交给{2},否则将会与他的盟友向我们发起全面战争,是否同意对方的领土要求?
                        prompt_effect_82=

                        prompt_title_83=外交-通牒
                        prompt_detail_83=我们的核心领土{0}被{1}占领了,是否向占领国发布通牒,战争或和平?
                        prompt_effect_83=

                        prompt_title_84=外交-通牒
                        prompt_detail_84=我们的核心领土{0}被{1}占领了,我们现在的实力还无法夺回,是否邀请{2}帮助我们调解
                        prompt_effect_84=

                        prompt_title_84=外交-请求支持
                        prompt_detail_84={0}的核心领土{1}被{2}占领了,{0}请求我们施压调解,是否同意
                        prompt_effect_84=

                        prompt_title_84=外交-行为支持
                        prompt_detail_84={0}找到了{1}来应对我们给予的压力,是否坚持对{2}的行为支持,这可能发展为与{1}之间的全面战争
                        prompt_effect_84=


                           LegionData invaderLegion=lossBuild.getLegionData();
                            if(invaderLegion!=null&&invaderLegion.getInternIndex()!=0){
                                if(!ifAllyByLi(invaderLegion.getLegionIndex(),l.getLegionIndex())){
                                    //如果非盟友之间
                                    if(invaderLegion.isPlayer()){
                                        if(!ifFirstPlayer){continue;}//
                                        if(l.getUnitArmyNum()>invaderLegion.getUnitArmyNum()){//被占领国向玩家下通牒 全面战争or和平
                                            //{0}要求从我们这里获得区域{1},否则将会与他的盟友向我们发起全面战争,是否同意对方的领土要求?

                                            ifFirstPlayer=false;
                                        }else{//被占领国找的靠山向玩家下通牒 或求和
                                            //{0}要求我们将区域{1}交给{2},否则将会与他的盟友向我们发起全面战争,是否同意对方的领土要求?
                                            ifFirstPlayer=false;
                                        }
                                    }else if(l.isPlayer()){
                                        if(!ifFirstPlayer){continue;}
                                        if(l.getUnitArmyNum()>invaderLegion.getUnitArmyNum()){//是否向占领国发布通牒 战争or和平
                                            //我们的核心领土{0}被{1}占领了,是否向占领国发布通牒,战争或和平?
                                            ifFirstPlayer=false;
                                        }else{//寻找靠山向被侵略国施压 或求和
                                            //我们的核心领土{0}被{1}占领了,我们现在的实力还无法夺回,是否邀请{2}帮助我们调解
                                            ifFirstPlayer=false;
                                        }
                                    }else {
                                        if(l.getUnitArmyNum()>invaderLegion.getUnitArmyNum()){//全面战争or和平

                                        }else{//选找靠山 或求和
                                           //如果已经触发过玩家,则不再找玩家作为靠山

                                            if(true){//123
                                                ifHaveTriggerPlayer=true;
                                            }

                                        }
                                    }
                                }
                            }
                       }*/
                        }
                    }
                }
                legion_MaintainPlayer();






                //7 首都检测投降  首都必须被占领才算数
                for (int i = 0, iMax = legionDatas.size; i < iMax; i++) {
                    LegionData l = legionDatas.get(i);
                    if(l.getLegionIndex()==0||l.getInternIndex()==0||l.getCapitalId()==-1){
                        continue;
                    }

                    build = getBuildDataByRegion(l.getCapitalId());
                    if (build == null) {
                        //Gdx.app.error("首都检测投降 build is null",l.getAllAttributes());
                        if (!resetCapital(l)) {
                            legion_SurrenderTIA3(l.getLegionIndex(), 0);
                        } else {
                            if (l.getLegionIndex() == masterData.getPlayerLegionIndex()) {
                                l.setTaxBonus(l.taxBonus + 10);
                            } else {
                                l.setTaxBonus(l.taxBonus * 2);
                            }
                        }
                    } else if (build.getLegionIndex() != 0 && build.getLegionIndex() != l.getLegionIndex()) {
                        int chance= game.resGameConfig.surrenderChance + (10 * worldData.getWorldAge());
                        if(ifAllyPlayerByLi(build.getLegionIndex())){
                            chance=chance/2;
                        }
                        Gdx.app.log(build.getLegionData().getCountryId()+" surrenderChance: ",chance+"");
                        if (ComUtil.ifGet(chance)) {
                            legion_SurrenderTIA3(l.getLegionIndex(), build.getLegionIndex());
                        } else {

                            if (!resetCapital(l)) {
                                legion_SurrenderTIA3(l.getLegionIndex(), build.getLegionIndex());
                            } else {
                                //首都被玩家占领
                                if(build.getLegionIndex() ==masterData.playerLegionIndex){
                                    //附属请求
                                    if(ComUtil.ifGet((100-l.getStability())/2)){
                                        addPromptData(game.gameMethod.getPromptStrT(40,0),game.gameMethod.getPromptStrT(40,1,l.legionName),"",6,l.getLegionIndex(),build.getLegionIndex(),-1,-1,false);
                                        l.setTaxBonus((int) (l.taxBonus * 1.2f));
                                    }else{//调解
                                        if(ComUtil.ifGet((100-l.getStability())/2)){
                                            li= getLegionDataForMediatorTIA2(build.getLegionIndex(),l.getLegionIndex());
                                            if(li!=-1){
                                                addPromptData(game.gameMethod.getPromptStrT(44,0),game.gameMethod.getPromptStrT(44,1,getLegionDataByLi(li).legionName,l.legionName),"",10,li,l.getLegionIndex(),-1,-1,false);
                                            }else{
                                                addPromptData(game.gameMethod.getPromptStrT(40,0),game.gameMethod.getPromptStrT(40,1,l.legionName),"",6,l.getLegionIndex(),build.getLegionIndex(),-1,-1,false);
                                            }
                                        }else{
                                            l.setTaxBonus( l.taxBonus * 2);
                                        }
                                    }
                                }else if(l.getLegionIndex()==masterData.playerLegionIndex){
                                    //玩家首都被占领,要求投降
                                    if(ComUtil.ifGet(l.getStability()/2)){
                                        addPromptData(game.gameMethod.getPromptStrT(42,0),game.gameMethod.getPromptStr(42,1,build.getLegionData().legionName),"",8,build.getLegionIndex(),-1,build.getLegionIndex(),masterData.playerLegionIndex,false);
                                    }else{
                                        if(ComUtil.ifGet((100-l.getStability())/2)){
                                            //获得支持
                                            li= getLegionDataForSupporterTIA2(l.getLegionIndex(),build.getLegionIndex());
                                            ForeignData f=getForeignData(li);
                                            if(li!=-1){
                                                addPromptData(game.gameMethod.getPromptStrT(43,0),game.gameMethod.getPromptStrT(43,1,getLegionDataByLi(li).legionName,build.getLegionData().legionName,f.getFavorValue()),"",9,li,build.getLegionIndex(),li,masterData.playerLegionIndex,false);
                                            }else{
                                                addPromptData(game.gameMethod.getPromptStrT(42,0),game.gameMethod.getPromptStrT(42,1,build.getLegionData().legionName),"",8,build.getLegionIndex(),-1,build.getLegionIndex(),masterData.playerLegionIndex,false);
                                            }
                                        }else{
                                            addPromptData(game.gameMethod.getPromptStrT(48, 0, l.legionName),
                                                    game.gameMethod.getPromptStrT(48, 1),
                                                    game.gameMethod.getPromptStrT(48, 2),l.getLegionIndex(),l.getLegionIndex(),false);
                                            l.setStability(l.getStability()/2);
                                        }
                                    }
                                }else{//其他国家首都被占领
                                    if(ifNeedRecordPrompt(l.getLegionIndex())){
                                        addPromptData(game.gameMethod.getPromptStrT(16, 0, l.legionName),
                                                game.gameMethod.getPromptStrT(16, 1, l.legionName),
                                                game.gameMethod.getPromptStrT(16, 2, l.legionName),l.getLegionIndex(),l.getLegionIndex(),false);

                                    }
                                    l.setTaxBonus((int) (l.taxBonus * 1.2f));
                                }
                            }
                        }
                    }
                }
                int stability;
                boolean ifIndependent = false;
                //如果关系不好,则一定几率脱离联盟
                for (int i = 0, iMax = legionDatas.size; i < iMax; i++) {
                    LegionData l = legionDatas.get(i);
                    if (l.getInternIndex() != 0 && l.getInternIndex() != l.getLegionIndex()) {
                        ForeignData f = getForeignData(l.getLegionIndex(), l.getInternIndex());
                        if (l.getLegionIndex() != l.getInternIndex()) {//非本属阵营国家
                            if (l.getSuzerainLi() != 0&&f.getDiplomaticAttitude()!=2) {//宗属国间
                                if (f.getFavorValue() < 30 && l.getStability() > l.getSuzerainLegionData().getStability() && ComUtil.ifGet((50 - f.getFavorValue()) / 2)) {
                                    ifIndependent = true;
                                }
                            } else if (f.getFavorValue() < 60 && ComUtil.ifGet((100 - f.getFavorValue()) / 4)) {//如果盟友关系不好,则一定几率宣布断交
                                legion_DeclareWar(legionDatas.get(l.getInternIndex()), l,false);
                            }
                        }
                        if (ifIndependent) {
                            legion_Independent(l);
                        }
                        stability = l.getStability();
                        if (stability < 30 && ComUtil.ifGet((60 - stability) / 2)) {
                            legion_Riot(l,l.getInternLegionData(), null);
                        }
                    }
                }

                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd 军团关系检测");}
            }

        }
        if (roundState==2&& ifSystemEffective(13)) {
            checkHEvent();
            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd checkHEvent");}
        }
        //城市恢复,稳定度,叛乱
        int tempLi;String tempValue;boolean tempB= ifSystemEffective(0);
        //减少的叛乱几率
        int reducerebelChance=getChiefSpecialEffect(15);
        if(reducerebelChance>=0){
            reducerebelChance=-reducerebelChance;
        }else{
            reducerebelChance=0;
        }
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            //     Iterator<IntMap.Entry<BuildData>> itB1 = buildRDatas.iterator();
            //   while (itB1.hasNext()) {
            //     IntMap.Entry<BuildData> c = itB1.next();
            //   BuildData b=c.value;
            if(b.getLegionIndex()==0||b.getBuildType()==2||b.ifSea()){
                continue;
            }
            LegionData l=b.getLegionData();
            if(b.getCityTax()>100){
                b.setCityTax(b.getCityTax()-ComUtil.getRandom(-10,50+getAge()*20));
            }else{
                b.setCityTax(b.getCityTax()+ComUtil.getRandom(-10,30+getAge()*10));
            }
            if(masterData.getPlayerMode()==0&&roundState==2&&b.isPlayer()&&b.getBuildStatus()==0&&b.getCityStability()<game.resGameConfig.cityStabilityChangeValueMax){
                if(masterData.ifChief==1&&chiefData!=null){
                    b.addCityStability(ComUtil.getRandom((chiefData.vaAreaStabilityChange-game.resGameConfig.cityStabilityChangeLimit),(chiefData.vaAreaStabilityChange+game.resGameConfig.cityStabilityChangeLimit)));
                }
            }
            ArmyData a=getArmyDataByHexagon(b.getRegionId());
            int extraAddCityStaility=0;
            if(l.ifLegionFeature(21)){
                extraAddCityStaility=l.getLegionFeatureEffect(21);
            }
            if(a!=null){
                b.addCityStability(ComUtil.limitValue(a.getArmyRank()*3+extraAddCityStaility,15,30),game.resGameConfig.cityStabilityChangeValueMax);
                b.addCityHpByRate(ComUtil.limitValue(a.getArmyRank()*3,10,30));
                if(a.ifHaveSkill(1)){
                    b.addCityStability(a.getSkillEffect(1));
                    a.drawSkill(1);
                }
                // rebelArmy
                if(masterData.getPlayerMode()==0&&masterData.ifChief==1&&b.getLegionIndex()!=0&&b.isPlayer()&&a.getLegionIndex()==0){
                    if(ComUtil.ifGet(100-b.getCityStability()+reducerebelChance)){
                        int h=getRandomAroundGridForRecruit(a.getHexagonIndex(),10);
                        if(ifGridIsPass(h)){
                            recruit(h,1101,-1);
                            a=getArmyDataByHexagon(h);
                            if(a!=null){
                                a.setTargetRegion(b.getLegionCapital());
                                a.setLegionIndex(0);
                                if(a.ifNeedCreateActor()){
                                    a.createActor();
                                }
                            }
                        }
                    }
                    b.setBuildStatus(3);
                }
            }else{
                if(b.getInfluenceLi()>0&&b.getLegionIndex()!=b.getInfluenceLi()){
                    b.addCityStability(-5);
                }else{
                    b.addCityStability(5+extraAddCityStaility,game.resGameConfig.cityStabilityChangeValueMax);
                }
                if(!b.isWar()){
                    b.addCityHpByRate(5);
                }
                if(b.getInfluenceLi()>0&&b.getLegionIndex()!=b.getInfluenceLi()&&b.getCityStability()<game.resGameConfig.recruitUnitBaseMorale   &&ComUtil.ifGet(b.getCityStability()+reducerebelChance)){
                    if(b.getLegionData().getSuzerainLi()!=0&&b.getInfluenceLi()==masterData.getPlayerLegionIndex()&&getChiefSpecialEffect(18)>=0){
                        ForeignData f=  getForeignData(b.getLegionIndex());
                        f.addFavor(5);
                        if(f.getFavorValue()>game.resGameConfig.neutralLegionDeclaredWarFavor&&ComUtil.ifGet(f.getFavorValue())){
                            LegionData bl=getLegionDataByLi(b.getLegionIndex());
                            legion_Independent(bl);
                            b.setInfluenceLi(0);
                            legion_AllianceTIA1(getPlayerLegionData(),bl,false);
                        }
                    }else{
                        b.setLegionIndex(b.getInfluenceLi());
                        b.setInfluenceLi(0);
                        if(b.isPlayer()){
                            addPromptData(game.gameMethod.getPromptStrT(87, 0),
                                    game.gameMethod.getPromptStr(87, 1, b.getRegionAreaStr()),  game.gameMethod.getPromptStr(87, 2, b.getRegionAreaStr()),b.getLegionIndex(),b.getLegionIndex(),false);
                        }
                    }
                }else if(b.getCityLvNow()>0&&masterData.getPlayerMode()==0&&masterData.ifChief==1&&b.getLegionIndex()!=0&&b.isPlayer()){
                    if(b.getCityStability()<game.resGameConfig.recruitUnitBaseMorale   &&ComUtil.ifGet(b.getCityStability()+reducerebelChance)){
                        if(getPlayerLegionData().varBattleRegions.size>0&&ComUtil.ifGet(getChiefWarSupport())){
                            break;
                        }
                        recruit(b.getRegionId(),1101,-1);
                        a=getArmyDataByHexagon(b.getRegionId());
                        if(a!=null){
                            if(a.isPlayer()){
                                addPromptData(game.gameMethod.getPromptStrT(86, 0,b.getRegionAreaStr()),
                                        game.gameMethod.getPromptStr(86, 1, b.getRegionAreaStr()),  game.gameMethod.getPromptStr(86, 2, b.getRegionAreaStr()),b.getLegionIndex(),b.getLegionIndex(),false);
                            }
                            a.setLegionIndex(0);
                            b.setBuildStatus(3);
                            b.setInfluenceLi(0);
                            if(a.armyActor==null){
                                a.createActor();
                            }
                        }
                        getPlayerLegionData().addStability(game.resGameConfig.buildRobelForLegionStabilityChange);
                    }
                }
            }
            if(tempB){
                if (b.ifCityStabilityTooLow() && ComUtil.ifGet((50 - b.getCityStability()) / 2)) {
                    tempLi = getRandomAroundRegionLegionIndex(b.getRegionId(), true);

                    tempValue = b.getRegionAreaStr();
                    //城市叛乱
                    if (tempLi > 0&&tempLi!=b.getLegionIndex()&&getForeignDegree(b.getLegionIndex(),tempLi)==-1&&!b.isCapital() && ComUtil.ifGet(game.resGameConfig.rebellionChance)) {
                        b.changeAllArmyMorale(-20);
                        int sli=b.getLegionIndex();
                     //  b.setLegionIndex(tempLi);
                        setRegionAllLegionIndex(b.getRegionId(),tempLi,false);
                        b.addCityStability(20+extraAddCityStaility,game.resGameConfig.cityStabilityChangeValueMax);
                        b.setCityTax(b.getCityTax()/2);
                        if (b.buildName != 0&&b.areaName!=null) {

                            if (tempLi == masterData.playerLegionIndex) {//xx城市投降我方
                                addPromptData(game.gameMethod.getPromptStrT(26, 0, tempValue),
                                        game.gameMethod.getPromptStrT(26, 1, tempValue),
                                        game.gameMethod.getPromptStrT(26, 2, tempValue),b.getLegionIndex(),masterData.getPlayerLegionIndex(),false);
                            } else if (sli == masterData.playerLegionIndex) {//我方城市向xx投降了
                                addPromptData(game.gameMethod.getPromptStrT(27, 0, tempValue),
                                        game.gameMethod.getPromptStrT(27, 1, tempValue),
                                        game.gameMethod.getPromptStrT(27, 2, tempValue),sli,tempLi,false);
                            }
                        }
                    } else {
                        if (a!=null) {//没兵,随机降低城市等级
                            b.randomReduceTech( 1, 1);
                            b.addCityStability(20+extraAddCityStaility,game.resGameConfig.cityStabilityChangeValueMax);
                            b.setCityTax(b.getCityTax()/2);
                            if ((b.buildName != 0&&b.areaName!=null)&&tempLi == masterData.playerLegionIndex) {//破坏
                                addPromptData(game.gameMethod.getPromptStrT(51, 0,tempValue),
                                        game.gameMethod.getPromptStrT(51, 1, tempValue),
                                        game.gameMethod.getPromptStrT(51, 2),masterData.playerLegionIndex,masterData.playerLegionIndex,false);
                            }
                        } else {//有兵,降低该区域所有兵的士气
                            b.changeAllArmyMorale(-10);
                            b.addCityStability(20+extraAddCityStaility,game.resGameConfig.cityStabilityChangeValueMax);
                            b.setCityTax(b.getCityTax()/2);
                            if ((b.buildName != 0&&b.areaName!=null)&&tempLi == masterData.playerLegionIndex) {//xx城市降低等级
                                addPromptData(game.gameMethod.getPromptStrT(52, 0, tempValue),
                                        game.gameMethod.getPromptStrT(52, 1, tempValue),
                                        game.gameMethod.getPromptStrT(52, 2),masterData.playerLegionIndex,masterData.playerLegionIndex,false);
                            }

                        }
                    }
                }
            }
            if(b.buildActor!=null){
                b.buildActor.update();
            }
        }

        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd 建筑恢复");}
        initCardNumAndCost();

        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd initCardNumAndCost");}
        updInfoByBuild();

        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd updInfoByBuild");}
        //使顺序归位
        tradeDatas.sort(new Comparator<TradeData>() {
            @Override
            public int compare(TradeData o1, TradeData o2) {
                if (o1.getTradeIndex() <= o2.getTradeIndex()) {
                    return -1;
                } else {
                    return 1;
                }
            }
        });
        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd tradeDatas排序");}

        if(ifHavePlayer&&masterData.getPlayerMode()==0&&masterData.ifChief==1&&chiefData!=null){
            if(getForeignPolicy()!=0&&pl.isFreeSovereignCountry()){
                dealWithForeignPolicy();
                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd dealWithForeignPolicy");}
            }
            int tm=getPlayerLegionData().getIndustry();
            dealWithBuildPolicy();
            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd dealWithBuildPolicy");}
            if(pl.getIndustry()<tm){
                pl.setIndustry(tm);
            }
        }
        if(roundState==4){
            if(ifSystemEffective(17)){
                refreshTrade();
                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd ifSystemEffective");}
            }
            if(ifSystemEffective(4)) {
                createGeneralDiplomaticBehaviors(ComUtil.getRandOne(game.resGameConfig.diplomaticBehaviors));
                if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd createGeneralDiplomaticBehaviors");}
            }

            //将没有地块的国家 设置为0
            for(LegionData l:legionDatas){
                if(l.varRegionCount==0&&l.getInternIndex()!=0){
                    l.setInternIndex(0);
                    l.setSuzerainLi(0);
                    l.setCapitalId(-1);
                    if(ifNeedRecordPrompt(l.getLegionIndex())){
                        addPromptData(game.gameMethod.getPromptStrT(20,0,l.legionName),
                                game.gameMethod.getPromptStrT(20,1,l.legionName),game.gameMethod.getPromptStrT(20,2,l.legionName),l.getLegionIndex(),l.getLegionIndex(),false);
                    }
                }
            }
            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd 检测没有地块的国家");}



            //重置单位设置
            if(ifSystemEffective(12)){
                for  (int i=0;i<hexagonDatas.size;i++) {
                    Fb2Map.MapHexagon h=hexagonDatas.get(i);
                    if(h==null){
                        continue;
                    }
                    Fb2Smap.ArmyData a=h.armyData;
                    if(a!=null){
                        //将领对话
                        if(a.getArmyHpNow()>=0&&a.getHpRateF()<0.3f&&a.canCreateRDialogue()){
                            addDialogueData(a,6,"");
                        }
                    }
                }
            }
            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd 单位创建对话");}
        }
        resetWeather();

        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd resetWeather");}
        clearArmyDeath();

        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd clearArmyDeath");}
        if(roundState!=1&&roundState!=-1){
            initAllLegionRectangularRange();
            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd initAllLegionRectangularRange");}
            initLegionPolicy();
            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd initLegionPolicy");}
        }
        //设置玩家科技升级延迟生效
        if(pl!=null&&pl.getLegionRound()==0&&masterData.getPlayerResearchingCardId()>0){
            onlyUpdLegionTech(pl,masterData.getPlayerResearchingCardId());
            masterData.setPlayerResearchingCardId(0);
            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd onlyUpdLegionTech");}
        }
        mapbin.updAllHexagonBorderAttribute();

        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd updAllHexagonBorderAttribute");}
        //结束时再更新一次数据
        resetPLegionRank();
        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd resetPLegionRank");}
        updIncome(false);

        if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd updIncome");}

        if(masterData.getPlayerMode()==2){
            initAllFogByRegion();
            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady initAllFogByRegion");}
        }else{
            initAllFog();
            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundReady initAllFog");}
        }

        //如果是征服模式且非军团,则增加情报report
        if(masterData.getBtlType()==0&&masterData.getPlayerMode()!=2&&masterData.getWarId()==0&&game.gameConfig.ifConquestReport){
            String sr=getRandomReport();
            if(!ComUtil.isEmpty(sr)){
                addPromptData(game.gameMethod.getStrValue("event_1_title"),sr,"",pl.getLegionIndex(),pl.getLegionIndex(),false);
            }
            if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("nextRoundEnd getRandomReport");}
        };
        //结束标记
        roundLegionIndex=masterData.getPlayerLegionIndex();
        roundCountryIndex=-1;
        Gdx.app.log("nextRoundEnd",roundLegionIndex+":"+roundCountryIndex);
    }

    //ai修铁路
    private boolean ai_buildRailway(BuildData b) {
        if(b!=null&&b.getBuildRound()==0&&!b.ifSea()){
            int hexagon=-1;
            //1获得预设铁路
            IntArray hm=regionHexagonMap.get(b.getRegionId());
            if(hm!=null&&hm.size>0){
                for(int i=0;i<hm.size;i++){
                    int id=hm.get(i);
                    Fb2Map.MapHexagon mapHexagon=getHexagonData(id);
                    if(mapHexagon.getBlockType()!=1&&mapHexagon.getPresetRailway()==1&&mapHexagon.getRailWayId()==0&& (mapHexagon.getRegionId()==id||mapbin.ifBorderRailway(id))){
                        hexagon=id;
                        break;
                    }
                }
            }
            if(ComUtil.ifGet(b.getCityStability())&&ComUtil.ifGet(b.getLegionData().getStability())){
                //2 获得城市铁路
                if(hexagon==-1){
                    Fb2Map.MapHexagon mapHexagon=getHexagonData(b.getRegionId());
                    if(mapHexagon.getBlockType()!=1&&mapHexagon.getRailWayId()==0){
                        hexagon=b.getRegionId();
                    }
                }
                //3 获得周围最大等级的且不相连的城市,然后与之相连
                if(hexagon==-1){
                    ConnectData c=getConnectData(b.getRegionId());
                    if(c!=null){
                        int targetCityRegion=-1;
                        int cityLvSum=0;
                        for(int j=1;j<=c.regionConnectCount;j++){
                            int  region=c.getConnectValue(j,0);
                            if(region==b.getRegionId()){ continue;   }
                            BuildData tb=getBuildDataByRegion(region);
                            if(tb!=null&&!tb.ifSea()&&getForeignDegree(b.getLegionIndex(),tb.getLegionIndex())!=-1&&canBuildRailway(region,b.getRegionId())&&!ifRailwayConnect(region,b.getRegionId())){
                                if(tb.getSumLv()>cityLvSum){
                                    targetCityRegion=tb.getRegionId();
                                    cityLvSum=tb.getSumLv();
                                }
                            }
                        };
                        if(targetCityRegion!=-1){
                            hexagon=getBuildRailwayHexagon(b.getRegionId(),targetCityRegion);
                            Gdx.app.log("ai_buildRailway",hexagon+"");
                        }
                    }
                }
            }

            //4 建造
            if(hexagon!=-1){
                buildRailway(hexagon);
                //   Gdx.app.log("ai_buildRailway",hexagon+"");
                return true;
            }

        }
        return false;
    }

    //两个区域是否陆地相连
    private boolean canBuildRailway(int sr, int tr) {
        if(ifSea(sr)||ifSea(tr)){
            return false;
        }
        boolean r=false;
        IntArray rs=game.tempUtil.getTempIntArray();
        mapbin.getMoveGrid(sr,tr,13,rs);
        if(rs.size>0&&rs.contains(sr)&&rs.contains(tr)){
            r=true;
        }
        game.tempUtil.disposeTempIntArray(rs);
        // Gdx.app.log("canBuildRailway",sr+":"+tr+" "+r);
        return r;
    }
    //两个区域是否已经通过铁路连接上了
    private boolean ifRailwayConnect(int sr, int tr) {
        boolean r=false;
        IntArray rs=game.tempUtil.getTempIntArray();
        mapbin.getMoveGrid(sr,tr,14,rs);
        if(rs.size>0&&rs.contains(sr)&&rs.contains(tr)){
            r=true;
        }
        game.tempUtil.disposeTempIntArray(rs);
        Gdx.app.log("ifRailwayConnect",sr+":"+tr+" "+r);
        return r;
    }
    //获得两个区域修建铁路的下个坐标
    private int getBuildRailwayHexagon(int sr, int tr) {
        IntArray rs=game.tempUtil.getTempIntArray();
        mapbin.getMoveGrid(sr,tr,13,rs);
        int r=-1;
        if(rs.size>0&&rs.contains(sr)&&rs.contains(tr)){
            for(int i=0;i<rs.size;i++){
                int id=rs.get(i);
                if(!mapbin.ifRailway(id)&&mapbin.ifBorderRailway(id)){
                    r=id;
                }
            }
        }
        game.tempUtil.disposeTempIntArray(rs);
        return r;
    }

    /*type -1获取全部且包含对应边的(loop地图) 0全部 1获取region为0的地块 3获取周围的有region的海洋地块 4获取周围的有region的陆地地块
     * 5只获取region为0的海洋地块 6只获取region为0的陆地地块 7只获取region为0的陆地平原地块
     * 8只获取region为0的陆地非平原地块 9根据id区分海洋陆地,获取地块
     * 10 获取周围是陆地的且region相同的地块 11获取周围是海洋的地块
     * 12获取沿海陆地地块*/
    private int getRandomAroundGridForRecruit(int hexagonIndex, int type) {
        IntArray rs=game.tempUtil.getTempIntArray();
        int h=-1;
        mapbin.getAroundIdById(hexagonIndex,type,rs);
        if(rs.size>0){
            for (int i = rs.size-1; i>=0; i--) {
                h=rs.get(i);
                ArmyData a=getArmyDataByHexagon(h);
                if(a!=null){
                    rs.removeIndex(i);
                }
            }
            if(rs.size>0){
                h=rs.random();
            }else {
                h=-1;
            }
        }
        game.tempUtil.disposeTempIntArray(rs);
        return h;
    }


    private void checkRoundDatas() {
        // IntArray tempIntArray=game.tempUtil.getTempIntArray();
        for(int i=roundDatas.size-1;i>=0;i--){
            RoundData r=roundDatas.get(i);
            r.setRound(r.getRound()-1);
            if(r.getTriggerType()==0){// 0 回合到达触发
                if(r.getRound()<=0){
                    excuteRoundeDatas(r);
                    //tempIntArray.add(i);
                    roundDatas.removeValue(r,false);
                }
            }else if(r.getTriggerType()==1){//1 重复触发
                excuteRoundeDatas(r);
                if(r.getRound()<=0){
                    roundDatas.removeValue(r,false);
                }
            }
        }
      /*  for(int i=tempIntArray.size-1;i>=0;i--){
            roundDatas.removeIndex(tempIntArray.get(i));
        }
        game.tempUtil.disposeTempIntArray(tempIntArray);*/

    }


    //是否需要被记录 只记录相关联信息
    private boolean ifNeedRecordPrompt(int legionIndex) {

        if(ifAllyPlayerByLi(legionIndex)){
            return true;
        }else if(foreignDatas!=null&&foreignDatas.size>0){
            ForeignData f=getForeignData(legionIndex);
            if(f.getFavorValue()>=70||f.getFavorValue()<=30){
                return true;
            }
        }
        return false;
    }

    private int getLegionDataForSupporterTIA2(int legionIndex1, int legionIndex2) {
        IntArray tempIntArray2=game.tempUtil.getTempIntArray();
        ForeignData f1,f2;
        LegionData l;
        for(int i=0,iMax=legionDatas.size;i<iMax;i++){
            l=legionDatas.get(i);
            if(l.getSuzerainLi()!=0||l.getLegionIndex()==0||l.getInternIndex()==0||l.getCapitalId()==-1||l.getLegionIndex()==legionIndex1||l.getLegionIndex()==legionIndex2){
                break;
            }
            f1=getForeignData(l.getLegionIndex(),legionIndex1);
            f2=getForeignData(l.getLegionIndex(),legionIndex2);
            if(f1.getFavorValue()>50&&f2.getFavorValue()<50&&l.incomeMoney> worldData.getWorldMoney()){
                tempIntArray2.add(l.getLegionIndex());
            }
        }
        if(tempIntArray2.size>0){
            int rs= tempIntArray2.random();
            game.tempUtil.disposeTempIntArray(tempIntArray2);
            return rs;
        }
        game.tempUtil.disposeTempIntArray(tempIntArray2);
        return -1;
    }

    private int getLegionDataForMediatorTIA2(int legionIndex1, int legionIndex2) {
        IntArray tempIntArray2=game.tempUtil.getTempIntArray();
        ForeignData f1,f2;
        LegionData l;
        for(int i=0,iMax=legionDatas.size;i<iMax;i++){
            l=legionDatas.get(i);
            if(l.getSuzerainLi()!=0||l.getLegionIndex()==0||l.getInternIndex()==0||l.getCapitalId()==-1||l.getLegionIndex()==legionIndex1||l.getLegionIndex()==legionIndex2){
                break;
            }
            f1=getForeignData(l.getLegionIndex(),legionIndex1);
            f2=getForeignData(l.getLegionIndex(),legionIndex2);
            if(f1.getFavorValue()>30&&f2.getFavorValue()>30&&l.incomeMoney> worldData.getWorldMoney()){
                tempIntArray2.add(l.getLegionIndex());
            }
        }
        if(tempIntArray2.size>0){
            int rs=tempIntArray2.random();
            game.tempUtil.disposeTempIntArray(tempIntArray2);
            return rs;
        }
        game.tempUtil.disposeTempIntArray(tempIntArray2);
        return -1;
    }

    //创造通用的外交交互事件
    /**
     * @param  bType {@link #executeDiplomacySelected}
     */
    public void createGeneralDiplomaticBehaviors( int  bType) {
        //1接收援助 2提供资源 3要求结盟 4行为支持 5加盟请求  7关系缓和  11国家合并 13缓和内部矛盾 14自动内政 16提议增加税率 17互不侵犯条约 18移动飞机
        //19解散玩家选中的空军   20解散玩家选中的陆军  21升级玩家选中空中单位的武器等级 22升级玩家选中陆军单位的武器等级   23选中空军单位上将   24选中空军单位上将


        int li=-1,li2=masterData.getPlayerLegionIndex(),v1=-1,v2=-1;
        LegionData l,l2;ForeignData f1;
        int favor=0;
        //处于附属国状态有些则不能使用
        if((bType==3||bType==4||bType==5||bType==7||bType==11||bType==17)  &&getPlayerLegionData().getSuzerainLi()!=0){
            return;
        }


        switch (bType){
            case 1://value 资源类型 value2 资源数值
                //li 资源来源国
                li= getRandomLegionIndexTIA2(1,masterData.getPlayerLegionIndex(),false,false,false);
                //String title,String content,String effect,int type,int li,int li2,int value,int value2
                l=getLegionDataByLi(li);
                if(l==null){
                    break;
                }
                v1=ComUtil.getRandom(0,3);
                v2=getTaskBonty(v1,l.getTaxBonus()/10);
                f1=getForeignData(li);if(f1!=null){favor=f1.getFavorValue();}
                addPromptData(game.gameMethod.getPromptStrT(35,0),game.gameMethod.getPromptStrT(35,1,l.legionName,favor,game.gameMethod.getStrValueForResource(v1,v2)),"",bType,li,li2,v1,v2,false);
                break;

            case 2://value 资源类型 value2 资源数值
                //li 资源提供国
                li= getRandomLegionIndexTIA2(2,masterData.getPlayerLegionIndex(),false,false,false);
                l=getLegionDataByLi(li);
                if(l==null){
                    break;
                }
                f1=getForeignData(li);if(f1!=null){favor=f1.getFavorValue();}
                v1=ComUtil.getRandom(0,3);
                v2=getTaskBonty(v1,l.getTaxBonus()/10);
                addPromptData(game.gameMethod.getPromptStrT(36,0),game.gameMethod.getPromptStrT(36,1,l.legionName,favor,game.gameMethod.getStrValueForResource(v1,v2)),"",bType,li,li2,v1,v2,false);

                break;
            case 3://li 要求结盟国
                li= getRandomLegionIndexTIA2(5,masterData.getPlayerLegionIndex(),false,false,false);

                l=getLegionDataByLi(li);
                if(l==null||l.getSuzerainLi()>0){
                    break;
                }
                l=l.getInternLegionData();
                if(l==null||l.getSuzerainLi()!=0||getPlayerLegionData().getInternIndex()==l.getInternIndex()||getPlayerLegionData().getLegionIndex()==l.getSuzerainLi()){
                    break;
                }
                int c= /*getChanceByCivilSpec(masterData.getPlayerLegionIndex(),li,50)+ */ ComUtil.limitValue(getPlayerLegionData().varRegionCount-l.varRegionCount,10,50) ;
                Gdx.app.log("test chance 要求结盟国"+l.legionName,c+"");
                if(l!=null&&ifLegionCanAlly(l,getPlayerLegionData())&&l.isFreeSovereignCountry()&&ComUtil.ifGet(c)){//
                    addPromptData(game.gameMethod.getPromptStrT(37,0),game.gameMethod.getPromptStrT(37,1,l.legionName),"",bType,li,li2,v1,v2,false);
                }
                break;
            case 4: //li 要求支持国 li2 针对国
                li= getRandomLegionIndexTIA2(1,masterData.getPlayerLegionIndex(),false,false,true);
                li2= getRandomLegionIndexTIA2(3,masterData.getPlayerLegionIndex(),false,false,false);
                if(li==-1||li2==-1){
                    break;
                }
                l=getLegionDataByLi(li);
                if(l==null||l.getInternIndex()==0||l.getSuzerainLi()>0){//附属国不能产生
                    break;
                }
                //c= getChanceByCivilSpec(masterData.getPlayerLegionIndex(),li2,50);
                c=ComUtil.limitValue(getPlayerLegionData().varRegionCount-l.varRegionCount,10,60) ;
                if(ComUtil.ifGet((100-c)/2)){
                    addPromptData(game.gameMethod.getPromptStrT(38,0),game.gameMethod.getPromptStrT(38,1,getLegionDataByLi(li).legionName,getLegionDataByLi(li2).legionName),"",bType,li,li2,v1,v2,false);
                }
                break;

            case 5://li 加盟请求来源国
                li= getRandomLegionIndexTIA2(5,masterData.getPlayerLegionIndex(),false,false,false);
                l=getLegionDataByLi(li);
                if(l==null||getPlayerLegionData().getInternIndex()==l.getInternIndex()||getPlayerLegionData().getLegionIndex()==l.getSuzerainLi()){
                    break;
                }
                //Gdx.app.log("test chance 要求结盟国",c+"");
                if(li!=-1&&ifLegionCanAlly(getPlayerLegionData(),l)&&getPlayerLegionData().getLegionIndex()==getPlayerLegionData().getInternIndex()&&getPlayerLegionData().getSuzerainLi()==0&&l.getSuzerainLi()==0){
                    addPromptData(game.gameMethod.getPromptStrT(39,0),game.gameMethod.getPromptStrT(39,1,l.legionName),"",bType,li,li2,v1,v2,false);
                }
                break;
            case 7://li 缓和关系请求来源国
                li= getRandomLegionIndexTIA2(3,masterData.getPlayerLegionIndex(),false,false,true);
                if(li==-1){
                    break;
                }
              l=getLegionDataByLi(li);
                if(l==null||l.getInternIndex()==0||l.getSuzerainLi()>0){//附属国不能产生
                    break;
                }
                ForeignData f=getForeignData(li);
                addPromptData(game.gameMethod.getPromptStrT(41,0),game.gameMethod.getPromptStrT(41,1,getLegionDataByLi(li).legionName,f.getFavorValue()),"",bType,li,li2,v1,v2,false);

                break;
            case 11://li 合并请求国
                li= getRandomLegionIndexTIA2(1,masterData.getPlayerLegionIndex(),false,false,true);
                l=getLegionDataByLi(masterData.playerLegionIndex);
                l2=getLegionDataByLi(li);
                //Gdx.app.log("test chance 要求结盟国",c+"");

                f=getForeignData(li);
                if(f!=null&&f.getFavorValue()>70&&(l.borderLegionIndexs!=null&&l.borderLegionIndexs.contains(li))&&l2!=null&&l2.getStability()<50&&l2.getLossCoreRegion()!=-1&&l.getSuzerainLi()==0&& checkRegionCanLegionMerge(l,l2)&& ComUtil.ifGet(f.getMergeChance())){
                    addPromptData(game.gameMethod.getPromptStrT(45,0),game.gameMethod.getPromptStrT(45,1,l2.legionName),"",bType,li,li2,v1,v2,false);
                }
                break;
            case 13://
                if(ifHaveSpirit(17)||getPlayerLegionData().getStability()>70){return;}
                addPromptData(game.gameMethod.getPromptStrT(47,0),game.gameMethod.getPromptStrT(47,1,getPlayerLegionData().getStability()),"",bType,masterData.playerLegionIndex,masterData.playerLegionIndex,ComUtil.getRandom(0,3),v2,false);
                break;

            case 14://
                addPromptData(game.gameMethod.getPromptStrT(64,0),game.gameMethod.getPromptStrT(64,1),"",bType,masterData.playerLegionIndex,masterData.playerLegionIndex,ComUtil.getRandom(0,3),v2,false);
                break;
            case 16://
                addPromptData(game.gameMethod.getPromptStrT(66,0),game.gameMethod.getPromptStrT(66,1,getPlayerLegionData().getTaxBonus(),getPlayerLegionData().getStability()),"",bType,masterData.playerLegionIndex,masterData.playerLegionIndex,v1,v2,false);
                break;
            case 17://li 要求互不侵犯
                li= getRandomLegionIndexTIA2(4,masterData.getPlayerLegionIndex(),false,false,true);
                if(li==-1){
                    break;
                }
                l=getLegionDataByLi(li);
                if(l==null||l.getSuzerainLi()>0){
                    break;
                }
                c= ComUtil.limitValue(getPlayerLegionData().varRegionCount-l.varRegionCount,30,60) ;
                Gdx.app.log("test chance 要求结盟国"+l.legionName,c+"");
                if(l!=null&&ComUtil.ifGet(c)){//
                    addPromptData(game.gameMethod.getPromptStrT(71,0),game.gameMethod.getPromptStrT(71,1,l.legionName),"",bType,li,li2,v1,v2,false);
                }
                break;
        }
    }

    //type 0全部 1同盟 2不可进攻国 3可进攻国 4非敌对且不含盟国 5友好国家但未结盟
    //ifHaveNeutral 中立国  intern为0
    //默认忽略掉首都为-1的国家
    private int getRandomLegionIndexTIA2(int type, int li, boolean ifSelf, boolean ifHaveNeutral,boolean ifBorder) {
        if(masterData.playerMode!=0||!ifSystemEffective(4)){
            return -1;
        }

        IntArray tempIntArray2=game.tempUtil.getTempIntArray();
        LegionData l;
        LegionData ml=getLegionDataByLi(li);
        ForeignData f;
        for(int i=0,iMax=legionDatas.size;i<iMax;i++){
            l=legionDatas.get(i);

            if(l.getCapitalId()==-1){
                continue;
            }
            if(!ifSelf&&l.getLegionIndex()==li){
                continue;
            }
            if(!ifHaveNeutral&&l.getInternIndex()==0){
                continue;
            }
            if(ifBorder&&!l.borderLegionIndexs.contains(li)  ){
                continue;
            }

            f=getForeignData(li,l.getLegionIndex());
            if(f==null){
                continue;
            }
            switch (type){
                case 0:
                    tempIntArray2.add(l.getLegionIndex());
                    break;
                case 1:
                    if(f.getForeignType()==2||ifAllyByLi(li,l.getLegionIndex())){
                        tempIntArray2.add(l.getLegionIndex());
                    }
                    break;
                case 2:
                    if(!ifCanAtk(li,l.getLegionIndex())){
                        tempIntArray2.add(l.getLegionIndex());
                    }
                    break;
                case 3:
                    if(ifCanAtk(li,l.getLegionIndex())){
                        tempIntArray2.add(l.getLegionIndex());
                    }
                    break;
                case 4:
                    if(!ifAllyByLi(li,l.getLegionIndex())&&(f.getForeignType()==0||f.getForeignType()==1||getForeignDegree(li,l.getLegionIndex())==0)){
                        tempIntArray2.add(l.getLegionIndex());
                    }
                case 5:
                    if(!f.isAlly()&&f.getFavorValue()>game.resGameConfig.allianceEventFavorLimit){
                        tempIntArray2.add(l.getLegionIndex());
                    }
                    break;
            }
        }
        if(tempIntArray2.size>0){
            int rs=tempIntArray2.random();
            game.tempUtil.disposeTempIntArray(tempIntArray2);
            return rs;
        }
        game.tempUtil.disposeTempIntArray(tempIntArray2);
        return -1;
    }

    //ai选择修建工事
    private void ai_BuildFort(ArmyData a) {
        //根据age获得修建列表
        int[] rs=DefDAO.getAIBuildFortArray(game,getAge());
        //获得随机
        int fortId=ComUtil.getRandOne(rs);
        //自动调整策略
        if(fortId==5002&&hexagonDatas.get(a.getHexagonIndex()).getIfCoast()>0){
            fortId=5004;
        }
        fort_build(fortId,a.getHexagonIndex(),a.getLegionIndex(),a.getArmyRank());//int fortId,int hexagon,int li,int buildLv
    }






    private void legion_MaintainAll(LegionData l) {
        if(l.incomeMoney==0){return;}
        if(l.getLegionIndex()==masterData.playerLegionIndex){return;}
        int wMoney= worldData.getWorldMoney();
        int favorV=ComUtil.limitValue(wMoney/l.incomeMoney,1,5);
        wMoney=ComUtil.limitValue(wMoney/20,10,100);
        for(int i=0,iMax=legionDatas.size;i<iMax;i++){
            ForeignData f=getForeignData(l.getLegionIndex(),i);
            if(ifAllyByLi(l.getLegionIndex(),i)&&i!=masterData.playerLegionIndex){
                if(l.getSuzerainLi()==i){//如果是附属关系
                    if(f.getFavorValue()<30){
                        l.costMoney(wMoney);
                        legionDatas.get(i).addMoney(wMoney);
                        f.addFavor(favorV);  }
                }else if(l.getLegionIndex()==i){//自身稳定度关系
                    if(f.getFavorValue()<30){
                        l.costMoney(wMoney);
                        f.addFavor(favorV*2);  }
                }else{//普通盟友关系
                    if(f.getFavorValue()<60){
                        l.costMoney(wMoney);
                        legionDatas.get(i).addMoney(wMoney);
                        f.addFavor(favorV);  }
                }
            }
            if(l.getMoney()==0){//如果没钱,则跳出
                break;
            }
        }
    }

    //是否是安全地块 判断标准 1.所属相同 2.相邻所属相同 3城市血量>一半
    private boolean ifSafeRegion(int legionIndex, int regionId) {
        if(getLegionIndexByRegion(regionId)==legionIndex){
            BuildData b=getBuildDataByRegion(regionId);
            if(b.getHpRateF()>0.7f){
                return ifBorderRegionIsSameLegionIndex(regionId);
            }
            //ConnectData c=getBorderRegion(regionId);

        }
        return false;
    }

    //查询周围地块是否是同一个的li
    public boolean ifBorderRegionIsSameLegionIndex(int regionId) {
        //int[] rs=getConnectData(regionId);
        ConnectData rs=getConnectData(regionId);
        if(rs==null){
            return false;
        }
        int li=getLegionIndexByRegion(regionId);
        for(int i=0,iMax=rs.getRegionConnectCount();i<iMax;i++){
            if(getLegionIndexByHexagon(rs.getConnectValue(i+1,0))!=li){
                return false;
            }
        }

        return true;
    }

    public void setPlayerFog(){
        if (masterData.getIfFog() == 1) {
            boolean ifFog;
            int h = 0; int hr=0;
          //  for (IntArray hexagonArray : regionHexagonMap.values()) {123

            Iterator<IntMap.Entry<IntArray>> it = regionHexagonMap.iterator();
            while (it.hasNext()) {
                IntMap.Entry<IntArray> c = it.next();
                int regionId=c.key;
                IntArray hexagonArray=c.value;
                ifFog = false;
                for (int i = 0; i < hexagonArray.size; i++) {
                    h = hexagonArray.get(i);
                    hr=hexagonDatas.get(h).getLegionIndex();
                    if (ifAllyByLi(hr, masterData.getPlayerLegionIndex()) || ifAllyByLi(hr, masterData.getPlayerLegionIndex())) {
                        ifFog = true;
                        break;
                    }
                }
                if (ifFog&&hexagonDatas.get(h).getBlockType()!=1) {
                    setFogByRegion(getRegionId(h), 1);
                } else {
                    setFogByRegion(getRegionId(h), 0);
                }
            }
        }
    }



    private boolean resetCapital(LegionData l) {
        /*if(l.getCountryId()==57){
            int s=0;
        }*/
        int maxCityRegion = 0;
        int maxCityLv = 0;
        int li=l.getLegionIndex();
        capitalLegionsMap.remove(l.getCapitalId());
        BuildData build=null;
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);

            // Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
            //while (it.hasNext()) {
            //  IntMap.Entry<BuildData> c = it.next();
            // BuildData b=c.value;
            if (b.getLegionIndex() == li&&!b.isSeaArea()&&!b.isWar()&&!b.ifBorderRegionWar()) {
                if (b.cityLvNow > maxCityLv) {
                    maxCityLv = b.cityLvNow;
                    maxCityRegion = b.getRegionId();
                    build=b;
                }
            }
        }
        if(maxCityRegion==0){
            for(int bi=0;bi<buildRDatas.size();bi++) {
                BuildData b=buildRDatas.getByIndex(bi);
                if (b.getLegionIndex() == li&&!b.isSeaArea()) {
                    if (b.cityLvNow > maxCityLv) {
                        maxCityLv = b.cityLvNow;
                        maxCityRegion = b.getRegionId();
                        build=b;
                    }
                }
            }
        }
        if (maxCityRegion != 0) {
            l.setCapitalId(maxCityRegion);
            capitalLegionsMap.put(maxCityRegion,l);
            if(build.buildActor!=null&&(roundState==0||(roundState==4&&build.isPlayer()))){
                build.buildActor.update();
            }
            return true;
        } else {
            return false;
        }
    }

    //阵营解体
    private void dissolutionCampTIA3(int dissolutionLegionIndex){
        IntArray tempIntArray3=game.tempUtil.getTempIntArray();
        LegionData l=null;
        for(int i=0,iMax=legionDatas.size;i<iMax;i++){
            l=legionDatas.get(i);
            if(l.getLegionIndex()==0||l.getInternIndex()==0||l.getLegionIndex()==dissolutionLegionIndex){

            }else if(l.getSuzerainLi()==dissolutionLegionIndex){
                l.setSuzerainLi(0);
                if(l.getInternIndex()==dissolutionLegionIndex){
                    l.setInternIndex(l.getLegionIndex());
                    /*if(ifAllyPlayerByLi(l.getLegionIndex())){
                        addUpdColorRegion(l.getLegionIndex());
                    }*/
                    tempIntArray3.add(l.getCountryId());
                }
            }else if(l.getInternIndex()==dissolutionLegionIndex){
                l.setInternIndex(l.getLegionIndex());
                /*if(ifAllyPlayerByLi(l.getLegionIndex())){
                    addUpdColorRegion(l.getLegionIndex());
                }*/
                tempIntArray3.add(l.getCountryId());
            }
        }

        if(tempIntArray3.size>0&& ifNeedRecordPrompt(dissolutionLegionIndex)){
            l=legionDatas.get(dissolutionLegionIndex);
            addPromptData(game.gameMethod.getPromptStrT(21,0,l.legionName),
                    game.gameMethod.getPromptStrT(21,1,l.legionName,game.gameMethod.getPromptStrByCountry(tempIntArray3,4)),game.gameMethod.getPromptStrT(21,2,l.legionName),l.getLegionIndex(),l.getLegionIndex(),false);
        }
        game.tempUtil.disposeTempIntArray(tempIntArray3);
    }

    private void legion_SurrenderTIA3(int surrenderLegionIndex, int legionIndex1) {
        if(surrenderLegionIndex==legionIndex1){
            return ;
        }
        dissolutionCampTIA3(surrenderLegionIndex);


        //addUpdColorRegion(surrenderLegionIndex);
        for  (int i=0;i<hexagonDatas.size;i++) {
            Fb2Map.MapHexagon h=hexagonDatas.get(i);
            if(h==null){
                continue;
            }
            Fb2Smap.ArmyData a=h.armyData;
            if (a != null&&a.getArmyHpNow()>=0 && a.getLegionIndex() == surrenderLegionIndex) {
                army_Death(a.getHexagonIndex(),false);
            }
        }
        clearArmyDeath();
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            //  Iterator<IntMap.Entry<BuildData>> itB1 = buildRDatas.iterator();
            //while (itB1.hasNext()) {
            //  IntMap.Entry<BuildData> c = itB1.next();
            //BuildData b=c.value;
            if (b.getLegionIndex() == surrenderLegionIndex) {
                if (b.getBuildType()!=2&&ComUtil.ifGet(game.resGameConfig.surrenderChance + (10 * worldData.getWorldAge()))) {
                    b.setLegionIndex(legionIndex1);
                    hexagonDatas.get(b.getRegionId()).setLegionIndexValue(legionIndex1);
                } else {
                    b.setLegionIndex(0);
                    hexagonDatas.get(b.getRegionId()).setLegionIndexValue(0);
                }
            }
        }
        LegionData sl=legionDatas.get(surrenderLegionIndex);
        LegionData tl=legionDatas.get(legionIndex1);


        sl.setInternIndex(0);
        sl.setSuzerainLi(0);
        sl.setCapitalId(-1);
        String countryStr=sl.legionName;
        String countryStr2=tl.legionName;
        if(ifNeedRecordPrompt(sl.legionIndex)){
            if (legionIndex1 != 0) {
                String effect = game.gameMethod.getPromptStrT(17, 1, countryStr, countryStr2);
                addPromptData(game.gameMethod.getPromptStrT(17, 0, countryStr),
                        effect, game.gameMethod.getPromptStrT(17, 2),sl.getLegionIndex(),legionIndex1,false);
            } else {
                addPromptData(game.gameMethod.getPromptStrT(20, 0, countryStr),
                        game.gameMethod.getPromptStrT(20, 1, countryStr), game.gameMethod.getPromptStrT(20, 2, countryStr),sl.getLegionIndex(),sl.getLegionIndex(),false);
            }
        }
        for(int i=0;i<legionDatas.size;i++){
            LegionData l=legionDatas.get(i);
            if(l.getInternIndex()!=0&&l.varRegionCount>0&&l.getSuzerainLi()==sl.getLegionIndex()){
                ForeignData f=getForeignData(l.getLegionIndex(),legionIndex1);
                if(f!=null){
                    if(ComUtil.ifGet(f.getRealFavor())||(f.getDiplomaticRecognition()==1&&l.varRegionCount<tl.varRegionCount )){
                        l.setSuzerainLi(tl.getLegionIndex());
                    }else{
                        l.setSuzerainLi(0);
                    }
                }else {
                    if(l.varRegionCount<tl.varRegionCount&&ComUtil.ifGet(50)){
                        l.setSuzerainLi(tl.getLegionIndex());
                    }else{
                        l.setSuzerainLi(0);
                    }
                }
            }
        }
    }

    //result: -1 失败 0 未获胜 1~5 d~s
    //end 1世界霸主,分路线 2冷战,分路线 3危机酝酿-失败者 4危机酝酿-成功者 5幸存者
    public int getGameResult() {
        int playerLegionIndex = masterData.getPlayerLegionIndex();
        int playerCountryId=getPlayerLegionData().getCountryId();
        if(playerLegionIndex==0){
            return 0;
        }
        if(game.gameConfig.isShieldCountry(playerCountryId)||game.gameConfig.isInvincibleCountrys(playerCountryId)){
            return 1;
        }

        //胜利检测
        //victoryType  默认计算占领城市比
        int hostileBuildCount = 0;//敌对城市占比
        int playerBuildCount = 0;//玩家建筑城市
        int allBuildCound = 0;
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if (b.getLegionIndex() > 0 && !b.ifSea()  &&b.getLegionData().getInternIndex()>0) {
                if (!ifAllyByLi(playerLegionIndex, b.getLegionIndex())) {
                    hostileBuildCount++;
                } else if (b.getLegionIndex() == playerLegionIndex||b.getLegionData().getSuzerainLi()==playerLegionIndex) {
                    playerBuildCount++;
                }
                allBuildCound++;
            }
        }
        float v=playerBuildCount*1f / allBuildCound;

        //消灭全部敌人的地块,也可以获得胜利
        if(hostileBuildCount==0){
            return DefDAO.getGameEvaluate(masterData.getRoundNow(),masterData.getRoundMax(),masterData.getGameDifficulty());
        }

        //除了征服胜利和 固守据点胜利以外,其他只要超过回合,直接判负
        if(masterData.getVictoryType()!=0&&masterData.getVictoryType()!=5&&masterData.getRoundNow()>masterData.getRoundMax()){
            return -1;
        }


        //victoryType 0 如果是mode 0则是征服 1是任务 2是
        switch (masterData.getVictoryType()){//0征服胜利 1 占领目标  2占领目标洲际 3消灭目标国家 4占领战略区域 5守护目标
            case 0:
                if(masterData.getRoundNow() >= masterData.getRoundMax()){//时间解锁胜利
                    int rs=-1;
                    if(masterData.getPlayerMode()==0){


                        String effect=null;

                        if(masterData.nextStageId!=0){
                            effect= game.gameMethod.getStrValueT("end_effect_b");
                        }else {
                            effect= game.gameMethod.getStrValueT("end_effect_d");
                        }


                        if (v > 0.7f) {//冷战
                            String endInfo=null;
                            if(getPlayerAmbition()>100){
                                endInfo=game.gameMethod.getStrValueT("end_info_r_2");
                            }else if(getPlayerAmbition()<100){
                                endInfo=game.gameMethod.getStrValueT("end_info_b_2");
                            }else{
                                endInfo=game.gameMethod.getStrValueT("end_info_n_2");
                            }


                            addPromptData(game.gameMethod.getStrValueT("end_name_2","stage_name_"+stageId),
                                    endInfo,
                                    effect,masterData.playerLegionIndex,masterData.playerLegionIndex,true
                            );
                            rs=4;
                        } else if (v > 0.6f) {//危机酝酿-成功者
                            addPromptData(game.gameMethod.getStrValueT("end_name_4","stage_name_"+stageId),
                                    game.gameMethod.getStrValueT("end_info_n_4"),
                                    effect,masterData.playerLegionIndex,masterData.playerLegionIndex,true
                            );
                            rs=3;
                        } else {//危机酝酿-失败者
                            addPromptData(game.gameMethod.getStrValueT("end_name_3","stage_name_"+stageId),
                                    game.gameMethod.getStrValueT("end_info_n_3"),
                                    effect,masterData.playerLegionIndex,masterData.playerLegionIndex,true
                            );
                            if (v> 0.5f) {
                                rs=2;
                            }else {
                                rs=1;
                            }
                        }
                        if(v<0.4f){
                            rs=-1;
                        }
                    }else{
                        if (v > 0.7f) {
                            rs= 4;
                        }else if(v > 0.6f){
                            rs= 3;
                        }else if(v > 0.5f){
                            rs= 2;
                        }else if(v > 0.4f){
                            rs= 1;
                        }else{
                            rs= -1;
                        }
                    }
                    if(!playerLegionData.ifControlCoreRegion()){
                        rs=rs-2;
                    }
                    if(!playerLegionData.ifControlMajorRegion()){
                        rs=rs-1;
                    }
                    if(rs==0){
                        rs=-1;
                    }
                    return ComUtil.limitValue(rs,-1,5);
                }else {//时间内胜利
                    if (v> 0.9f&&playerLegionData.ifControlCoreRegion()&&playerLegionData.ifControlMajorRegion()) { //世界霸主
                        if(masterData.getPlayerMode()==0){
                            String endInfo=null;
                            if(ifSystemEffective(16)){
                                if(getPlayerAmbition()>100){
                                    endInfo=game.gameMethod.getStrValueT("end_info_r_1");
                                }else if(getPlayerAmbition()<100){
                                    endInfo=game.gameMethod.getStrValueT("end_info_b_1");
                                }else{
                                    endInfo=game.gameMethod.getStrValueT("end_info_n_1");
                                }
                            }else{
                                endInfo=game.gameMethod.getStrValueT("end_info_n_0");
                            }

                            addPromptData(game.gameMethod.getStrValueT("end_name_1","stage_name_"+stageId),
                                    endInfo,
                                    game.gameMethod.getStrValueT("end_effect_a"),masterData.playerLegionIndex,masterData.playerLegionIndex,true
                            );
                        }
                        return 5;
                    }else if (playerBuildCount <= 0) {//幸存者
                        if(masterData.getPlayerMode()==0) {
                            addPromptData(game.gameMethod.getStrValueT("end_name_5", "stage_name_" + stageId),
                                    game.gameMethod.getStrValueT("end_info_n_5"),
                                    game.gameMethod.getStrValueT("end_effect_c"), masterData.playerLegionIndex, masterData.playerLegionIndex,true
                            );
                        }
                        return -1;
                    } else {
                        return 0;
                    }
                }

            case 1://任务时间内占领据点胜利
                boolean ifVictory=true;
                for(int bi=0;bi<buildRDatas.size();bi++) {
                    BuildData b=buildRDatas.getByIndex(bi);
                    int countryId=b.getCountryId();
                    if(b.getHinge() ==1&&!b.isPlayerAlly()&&!game.gameConfig.isShieldCountry(countryId)&&!game.gameConfig.isInvincibleCountrys(countryId)){//守护据点
                        ifVictory=false;
                    }
                }
                if(masterData.getRoundNow()<masterData.getRoundMax()&&ifVictory){
                    return DefDAO.getGameEvaluate(masterData.getRoundNow(),masterData.getRoundMax(),masterData.getGameDifficulty());
                }
                break;
            case 2://目标区域型检测
                if(masterData.getRoundNow()<masterData.getRoundMax()&&getPlayerLegionData().ifControlTargetAreaZone()){
                    return DefDAO.getGameEvaluate(masterData.getRoundNow(),masterData.getRoundMax(),masterData.getGameDifficulty());
                }
                break;
            case 3://消灭国家
                LegionData l=getLegionDataByLi(masterData.getVictoryTarget());
                if(masterData.getRoundNow()<masterData.getRoundMax()&&l!=null&&l.isFail()){
                    return DefDAO.getGameEvaluate(masterData.getRoundNow(),masterData.getRoundMax(),masterData.getGameDifficulty());
                }
                break;

            case 4://战略目标
                if(masterData.getRoundNow()<masterData.getRoundMax()&&ifContralSR(masterData.getPlayerLegionIndex(),masterData.getVictoryTarget())){
                    return DefDAO.getGameEvaluate(masterData.getRoundNow(),masterData.getRoundMax(),masterData.getGameDifficulty());
                }
                break;
            case 5://任务时间内守护据点
                int allH=0;
                int pH=0;
                for(int bi=0;bi<buildRDatas.size();bi++) {
                    BuildData b=buildRDatas.getByIndex(bi);
                    int tc=b.getCountryId();
                    if(b.getHinge() ==1&&!game.gameConfig.isShieldCountry(tc)&&!game.gameConfig.isInvincibleCountrys(tc)){//占领据点
                        allH++;
                        if(b.isPlayerAlly()){
                            pH++;
                        }
                    }
                }
                if(pH==0){
                    return -1;
                }
                if(masterData.getRoundNow()==masterData.getRoundMax()){
                    return DefDAO.getGameEvaluateByHinge(allH,pH);
                }
        }
        if (playerBuildCount <= 0||masterData.getRoundNow()>masterData.getRoundMax()) {
            return -1;
        }
        return 0;
    }


    private boolean ifContralSR(int playerLegionIndex, int target) {
        for(int bi=0;bi<buildRDatas.size();bi++){
            BuildData b=buildRDatas.getByIndex(bi);
            int tc=b.getCountryId();
            if(b!=null&& b.getStrategicRegion()==target&& !ifAllyByLi(b.getLegionIndex(),playerLegionIndex)&&!game.gameConfig.isShieldCountry(tc)&&!game.gameConfig.isInvincibleCountrys(tc) ){
                return false;
            }
        }
        return true;
    }


    //获得距离目标最近的距离
    private int getRecentHexagon(int targetRegion, IntArray tempMoveIntArray, boolean ifNavy) {
        int tempHMin = 0;
        float tempHDMin = 99999;
        float tempHD = 99999;
        if (ifNavy) {
            for (int i = 0, iMax = tempMoveIntArray.size; i < iMax; i++) {
                tempHD = getDistanceForMap(targetRegion, tempMoveIntArray.get(i));
                int tempId=tempMoveIntArray.get(i);
                if (hexagonDatas.get(tempId).getBlockType() == 1 && tempHD < tempHDMin) {
                    tempHDMin = tempHD;
                    tempHMin = tempMoveIntArray.get(i);
                }
            }
        } else {
            for (int i = 0, iMax = tempMoveIntArray.size; i < iMax; i++) {
                tempHD = getDistanceForMap(targetRegion, tempMoveIntArray.get(i));
                if (tempHD < tempHDMin) {
                    tempHDMin = tempHD;
                    tempHMin = tempMoveIntArray.get(i);
                }
            }
        }
        return tempHMin;
    }

    //获得距离目标最近的距离 li为-1时忽略计分器
    public int getRecentHexagon(int li,int hexagon,int targetRegion, IntIntMap tempMoveIntIntMap, boolean ifNavy) {
        int tempHMin = -1;
        int tempHDMin = 99999;
        int tempHD = 99999;
        if(targetRegion==-1){
            return -1;
        }
        Iterator<IntIntMap.Entry> it = tempMoveIntIntMap.iterator();
        int score=0;
        int bestScore=0;
        IntIntMap rs=game.tempUtil.getTempIntIntMap();
        if (ifNavy) {
            while (it.hasNext()) {
                IntIntMap.Entry c = it.next();
                if (c.value == 6||c.value==13||c.value==18) {
                    tempHD = getDistanceForMap(targetRegion, c.key);
                    if(c.value==18){
                        if(tempHD==1){
                            rs.put(c.key,tempHD);
                        }
                    }else{
                        rs.put(c.key,tempHD);
                    }
                    if (hexagonDatas.get(c.key).getBlockType() == 1 &&tempHDMin>tempHD ) {
                        if(li==-1){
                            tempHDMin = tempHD;
                            tempHMin = c.key;
                        }else {
                            score=getHexagonScoreForMove(li,hexagon,c.key);
                            if(score>bestScore){
                                bestScore=score;
                                tempHDMin = tempHD;
                                tempHMin = c.key;
                            }
                        }
                    }
                }
            }
        } else {
            while (it.hasNext()) {
                IntIntMap.Entry c = it.next();
                if (c.value == 6||c.value==13||c.value==18) {
                    tempHD = getDistanceForMap(targetRegion, c.key);
                    if(c.value==18){
                        if(tempHD==1){
                            rs.put(c.key,tempHD);
                        }
                    }else{
                        rs.put(c.key,tempHD);
                    }
                    if (tempHDMin>tempHD) {
                        if(li==-1){
                            tempHDMin = tempHD;
                            tempHMin = c.key;
                        }else {
                            score=getHexagonScoreForMove(li,hexagon,c.key);
                            if(score>bestScore){
                                bestScore=score;
                                tempHDMin = tempHD;
                                tempHMin = c.key;
                            }
                        }
                    }
                }
            }
        }
        if(tempHMin!=-1){
            IntArray r=game.tempUtil.getTempIntArray();
            Iterator<IntIntMap.Entry> rsM = rs.iterator();
            while (rsM.hasNext()) {
                IntIntMap.Entry c = rsM.next();
                if(c.value==tempHDMin){
                    r.add(c.key);
                }
                // Gdx.app.log("距离 "+tempHDMin,c.key+":"+c.value);
            }
            tempHDMin=99999;
            for(int i=0;i<r.size;i++){
                int tId=r.get(i);
                //距离
                tempHD = getDistanceForMap(hexagon, tId);

                if(tempHDMin>tempHD){
                    tempHDMin = tempHD;
                    tempHMin = tId;
                }
            }
            game.tempUtil.disposeTempIntArray(r);
        }
        game.tempUtil.disposeTempIntIntMap(rs);
        return tempHMin;
    }



    private void logHexagon(int hexagon, String str) {
        Gdx.app.log("logHexagon:" + str, hexagonDatas.get(hexagon).getAllAttributes());
        if (ifHArmyDatasContainsKey(hexagon)) {
            if (getArmyDataByHexagon(hexagon) == null) {
                Gdx.app.log("army:", null);
            } else {
                Gdx.app.log("army:", getArmyDataByHexagon(hexagon).getAllAttributes());
            }
        }
        if (buildRDatas.containsKey(hexagon)) {
            Gdx.app.log("build:", buildRDatas.getByKey(hexagon).getAllAttributes());
        }
    }

    private int getTargetForEnemyTIA1_2(ArmyData army, IntArray tempMoveIntArray, boolean ifNavy) {
        int tempLi;
        int li = army.getLegionIndex();
        IntArray tempIntArray2=game.tempUtil.getTempIntArray();
        //Gdx.app.log("getTargetForEnemyTIA1_2 tempMoveIntArray.get(i)",tempMoveIntArray.toString());
        boolean ifPlayer=army.playerCanCommand();
        if (ifNavy) {
            for (int i = 0, iMax = tempMoveIntArray.size; i < iMax; i++) {
                if (tempMoveIntArray.get(i) < 0) {
                    continue;
                }
                int tempId=tempMoveIntArray.get(i);
                tempLi = hexagonDatas.get(tempId).getLegionIndex();
                if (tempLi >= 0 && tempLi >= 0 && getForeignDegree(tempLi, li)==-1 && (buildRDatas.containsKey(tempMoveIntArray.get(i)) || (ifHArmyDatasContainsKey(tempMoveIntArray.get(i)) && getArmyDataByHexagon(tempMoveIntArray.get(i)) != null)) && hexagonDatas.get(tempId).getBlockType() == 1) {
                    //logHexagon(tempMoveIntArray.get(i),"getTargetForEnemyTIA1_2");
                    if (ifHaveEnemyInRangeTIA1(tempMoveIntArray.get(i), li, army.getMinRange(), army.getMaxRange(), ifNavy,ifPlayer)) {
                        tempIntArray2.add(tempMoveIntArray.get(i));
                    } else {
                        BuildData b = getBuildDataByRegion(tempMoveIntArray.get(i));
                        if (b != null) {
                            tempIntArray2.add(tempMoveIntArray.get(i));
                        }
                    }
                }
            }
        } else {
            for (int i = 0, iMax = tempMoveIntArray.size; i < iMax; i++) {
                if (tempMoveIntArray.get(i) < 0) {
                    continue;
                }
                int tempId=tempMoveIntArray.get(i);
                tempLi = hexagonDatas.get(tempId).getLegionIndex();
                if (tempLi >= 0 && tempLi >= 0 && getForeignDegree(tempLi, li)==-1 && (buildRDatas.containsKey(tempMoveIntArray.get(i)) || (ifHArmyDatasContainsKey(tempId) && getArmyDataByHexagon(tempId) != null))) {
                    //logHexagon(tempMoveIntArray.get(i),"getTargetForEnemyTIA1_2");
                    if (ifHaveEnemyInRangeTIA1(tempMoveIntArray.get(i), li, army.getMinRange(), army.getMaxRange(), ifNavy,ifPlayer)) {
                        tempIntArray2.add(tempMoveIntArray.get(i));
                    } else {
                        BuildData b = getBuildDataByRegion(tempMoveIntArray.get(i));
                        if (b != null && b.getCityHpNow() > 0) {
                            tempIntArray2.add(tempMoveIntArray.get(i));
                        }
                    }
                }
            }
        }

        if (tempIntArray2.size > 0) {
            int rs=tempIntArray2.random();
            game.tempUtil.disposeTempIntArray(tempIntArray2);
            return rs;
        } else {
            game.tempUtil.disposeTempIntArray(tempIntArray2);
            return 0;
        }
    }


    public ConnectData getConnectData(int hexagon){
        //int  region=getRegionId(hexagon);
        // return connectDatas.get(region);
        /*BuildData b=getBuildDataByRegion(getRegionId(hexagon));
       if(b!=null){
           return connectDatas.get(b.getBuildIndex());
       }*/
        ConnectData c=connectDatas.get(getRegionId(hexagon));
        if(c==null){
            Gdx.app.error("getConnectData is null",hexagon+":"+getRegionId(hexagon));
        }
        return c;
    }

   /* private int getTargetRegionCanAtkTIA1(int hexagon, int li, boolean ifSeaArea, boolean ifSelf){
        IntArray c= getConnectData(hexagon);
        int  i= c.getRandomRegionCanAtkTIA1(li,ifSeaArea,ifSelf);
        return i;
    }

    private int getTargetRegionForHaveEnemyUnitTIA1(int hexagon, int li, boolean ifSeaArea, boolean ifSelf){
        IntArray c= getConnectData(hexagon);
        int  i= c.getRandomRegionForHaveEUnitTIA1(li,ifSeaArea,ifSelf);
        return i;
    }*/


    //ifSea true 只查找目标是海洋的地块  false 则查全部
    private int getTargetHexagonForAllyTIA1(IntArray tempMoveIntArray, int li, boolean ifSea) {
        int tempLi;
        IntArray tempIntArray1=game.tempUtil.getTempIntArray();

        for (int i = 0, iMax = tempMoveIntArray.size; i < iMax; i++) {
            int tempId=tempMoveIntArray.get(i);
            tempLi = hexagonDatas.get(tempId).getLegionIndex();
            if (tempLi >= 0 && ifAllyByLi(tempLi, li)) {
                if (ifSea && hexagonDatas.get(tempId).getBlockType() == 1) {
                    tempIntArray1.add(tempId);
                } else {
                    tempIntArray1.add(tempId);
                }
            }
        }
        if (tempIntArray1.size > 0) {
            tempLi=tempIntArray1.random();
            game.tempUtil.disposeTempIntArray(tempIntArray1);
            return tempLi;
        } else {
            game.tempUtil.disposeTempIntArray(tempIntArray1);
            return -1;
        }
    }

    private boolean ifBorderLi(int hexagon,int li, boolean ifHaveSea) {
        int tempLi;
        ConnectData c=connectDatas.get(getRegionId(hexagon));
        if(c==null){
            return false;
        }
        for (int i = 0, iMax = c.getRegionConnectCount(); i < iMax; i++) {
            int connectV = c.getConnectValue(i + 1, 0);
            if(!ifHaveSea&&ifSea(connectV)){
                continue;
            }
            if (buildRDatas.containsKey(connectV) && getLegionIndexByRegion(connectV) == li  ) {
                return true;
            }
        }
        return false;
    }

    private void setBorderLi(int hexagon,boolean ifHaveSea,IntArray rs){
        ConnectData c=connectDatas.get(getRegionId(hexagon));
        if(c==null){
            return ;
        }
        for (int i = 0, iMax = c.getRegionConnectCount(); i < iMax; i++) {
            int connectV = c.getConnectValue(i + 1, 0);
            if(!ifHaveSea&&ifSea(connectV)){
                continue;
            }
            int li= getLegionIndexByRegion(connectV);
            if (buildRDatas.containsKey(connectV) && !rs.contains(li)  ) {
                rs.add(li);
            }
        }
    }

    //升级指定科技,强制升级,不扣钱,需要扣钱需要额外判断返回结果
    public boolean legion_UpdTech(LegionData l, BuildData build, int cardId) {

        if(!game.gameConfig.getDEF_CARD().contain(cardId)){
            return false;
        }
        XmlReader.Element x  =game.gameConfig.getDEF_CARD().getElementById(cardId);
        if(x==null){
            Gdx.app.error("cardId is error",cardId+"");
            return false;
        }


        int cardType=x .getInt("type",-1);
        if(cardType==-1){
            return false;
        }
        if (build == null ){
            switch (cardType){
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 15:
                    return false;
            }
        }





        if(build != null &&build.getBuildType()==2 && cardId < 3000){
            return false;
        }
        if (l == null && cardId >= 3000) {
            return false;
        }
        if(l!=null){
            if(ifSystemEffective(0)){
                l.addStability(ComUtil.getRandom(1,5));
            }
        }

        boolean updSuc = false;int hexagon;

        if(build!=null&&build.getCityLvNow()==0){
            updSuc =build.updCityLvNow();
        }else if(build!=null&&build.ifEnergyOverload()&&!GameMethod.cardIfMax(game,l, build, 2006)){
            updSuc =build.updEnergyLvNow();
        }else  {
            if (GameMethod.cardIfMax(game,l, build, cardId)) {
                return false;
            }
            switch (cardId) {
                //贸易
                case 2001:
                    updSuc = build.updTradeLvNow();
                    break;
                //文化
                case 2002:
                    updSuc =  build.updCultureLvNow();
                    break;
                //交通
                case 2003:
                    updSuc = build.updTransportLvNow();
                    break;
                //学校
                case 2004:
                    updSuc = build.updTechLvNow();
                    break;
                //原料
                case 2005:
                    updSuc = build.updFoodLvNow();
                    break;
                //能源
                case 2006:
                    updSuc = build.updEnergyLvNow();
                    break;
                //城市
                case 2007:
                    updSuc = build.updCityLvNow();
                    break;
                //工业
                case 2008:
                    updSuc = build.updIndustLvNow();
                    break;
                //补给
                case 2009:
                    updSuc = build.updSupplyLvNow();
                    break;
                //城防
                case 2010:
                    updSuc = build.updDefenceLvNow();
                    break;
                //飞机厂
                case 2011:
                    updSuc = build.updAirLvNow();
                    break;
                //防空/飞弹
                case 2012:
                    updSuc =build.updMissileLvNow();
                    break;
                //秘密武器
                case 2013:
                    updSuc =  build.updNuclearLvNow();
                    break;
                //军营
                case 2014:
                    updSuc =build.updArmyLvNow();
                    break;
                //城市可提升等级
                case 3001:
                    updSuc = l.updCityLvMax();
                    break;
                //工业可提升等级
                case 3002:
                    updSuc = l.updIndustLvMax();
                    break;
                //研究可提升等级
                case 3003:
                    updSuc = l.updTechLvMax();
                    break;
                //能源可提升等级
                case 3004:
                    updSuc = l.updEnergyLvMax();
                    break;
                //交通可提升等级
                case 3005:
                    updSuc = l.updTransportLvMax();
                    break;
                //建造士兵军衔上限
                case 3006:
                    updSuc = l.updInfantryLvMax();
                    break;
                //建造炮兵军衔上限
                case 3007:
                    updSuc = l.updCannonLvMax();
                    break;
                //建造坦克军衔上限
                case 3008:
                    updSuc = l.updTankLvMax();
                    break;
                //建造要塞军衔上限
                case 3009:
                    updSuc = l.updFortLvMax();
                    break;
                //建造海军军衔上限
                case 3010:
                    updSuc = l.updNavyLvMax();
                    break;
                //建造空军军衔上限
                case 3011:
                    updSuc = l.updAirLvMax();
                    break;
                //城市升级补给上限
                case 3012:
                    updSuc = l.updSupplyLvMax();
                    break;
                //城市城防升级上限
                case 3013:
                    updSuc = l.updDefenceLvMax();
                    break;
                //城市导弹升级上限
                case 3014:
                    updSuc = l.updMissileLvMax();
                    break;
                //城市超武升级上限
                case 3015:
                    updSuc = l.updNuclearLvMax();
                    break;
                //军团金融科技上限
                case 3016:
                    updSuc = l.updFinancialLvMax();
                    break;
                //城市贸易科技上限
                case 3017:
                    updSuc = l.updTradeLvMax();
                    break;
                //城市文化科技上限
                case 3018:
                    updSuc = l.updCultureLvMax();
                    break;
                //奇观
                case 3019:
                    updSuc = l.updMiracleLvNow();
                    break;
                //步兵卡库
                case 3020:
                    updSuc = l.updInfantryCardMax();
                    break;
                //装甲卡库
                case 3021:
                    updSuc = l.updArmorCardMax();
                    break;
                //火炮卡库
                case 3022:
                    updSuc = l.updArtilleryCardMax();
                    break;
                //海军卡库
                case 3023:
                    updSuc = l.updNavyCardMax();
                    break;
                //空军卡库
                case 3024:
                    updSuc = l.updAirCardMax();
                    break;
                //超武卡库
                case 3025:
                    updSuc = l.updNuclearCardMax();
                    break;
                //导弹卡库
                case 3026:
                    updSuc = l.updMissileCardMax();
                    break;
                //潜艇卡库
                case 3027:
                    updSuc = l.updSubmarineCardMax();
                    break;
                //战术卡库
                case 3028:
                    updSuc = l.updDefenceCardMax();
                    break;
                //将领卡库
                case 3029:
                    updSuc = l.updGeneralCardMax();
                    break;
                //刷新数量
                case 3030:
                    updSuc = l.updMilitaryAcademyLv();
                    break;
                case 6001:
                    IntIntMap rs=game.tempUtil.getTempIntIntMap();
                    rs = getHexagonToBuild(build.getRegionId(), 15,cardId,  rs);
                    hexagon = rs.keys().toArray().random();
                    buildFacility(hexagon,1);
                    updSuc =true;
                    break;
            }
        }
        if (updSuc) {
            int round=getRound(cardId,0);
            if(cardId==2007&&build!=null&&build.ifBuildLvIsOnlyTop(2007)&&!l.ifAiCheatChance()){//升级城市等级时如果城市是该区域设施唯一最高级
                int poor=ComUtil.max(1,build.getBuildCardLvPoorForCityLv());
                round+=poor;
            }
            switch (cardType){
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 15:
                    build.addBuildRound(round);
                    if(build.buildActor!=null&&(roundState==0||(roundState==4&&build.isPlayer()))){
                        build.buildActor.update();
                    }
                    break;
                default:
                    l.addLegionRound(round);
                    break;
            }


        }
        return updSuc;
    }

    //这个ai使用不扣钱
    public void updForeignForAi(LegionData liA,LegionData liB,int cardId){

        int favor=0;
        ForeignData f=getForeignData(liA.getLegionIndex(),liB.getLegionIndex());
        if(f.isSelf()||(liA.getSuzerainLi()!=0&&liA.getSuzerainLi()!=liB.getSuzerainLi())){
            return;
        }
        /*if(liA.getBuildPolicy()==masterData.playerLegionIndex||liB.getBuildPolicy()==masterData.playerLegionIndex){
            Gdx.app.log("updForeignForAi",liA.getBuildPolicy()+":"+liB.getBuildPolicy()+" c:"+cardId+" f:"+f.initToGetFavorByLi());
        }*/
        int cardTechId;
        switch (cardId){
            //礼物
            case 3101:
                if(f.getDiplomaticAttitude()==3&&!f.isPlayer()){break;}
                favor=f.getABSCivilSpecFavor();f.addFavor(favor);
                if(f.isPlayer()&&!f.isSelf()){
                    if(liA.isPlayer()){
                        addPromptData(game.gameMethod.getPromptStrT(53, 0),
                                game.gameMethod.getPromptStr(53, 1, liB.legionName), game.gameMethod.getPromptStr(53, 2, liB.legionName,favor),liB.getLegionIndex(),liA.getLegionIndex(),false);
                    }else{
                        addPromptData(game.gameMethod.getPromptStrT(53, 0),
                                game.gameMethod.getPromptStr(53, 1, liA.legionName), game.gameMethod.getPromptStr(53, 2, liA.legionName,favor),liA.getLegionIndex(),liB.getLegionIndex(),false);
                    }
                }

                break;
            //警告
            case 3102: if(f.getFavorValue()>50||f.isAlly()){break;}
                if(f.getDiplomaticAttitude()==2&&!f.isPlayer()){break;}
                favor=f.getABSCivilSpecFavor();f.reduceFavor(favor);
                if(f.isPlayer()&&!f.isSelf()){
                    if(liA.isPlayer()){
                        addPromptData(game.gameMethod.getPromptStrT(54, 0),
                                game.gameMethod.getPromptStr(54, 1, liB.legionName), game.gameMethod.getPromptStr(54, 2, liB.legionName,favor),liB.getLegionIndex(),liA.getLegionIndex(),false);
                    }else{
                        addPromptData(game.gameMethod.getPromptStrT(53, 0),
                                game.gameMethod.getPromptStr(54, 1, liA.legionName), game.gameMethod.getPromptStr(54, 2, liA.legionName,favor),liA.getLegionIndex(),liB.getLegionIndex(),false);
                    }

                }

                break;
            //结盟
            case 3103:
                if(liB.getSuzerainLi()!=0||liA.getSuzerainLi()!=0||f.getFavorValue()<60){
                    break;
                }
                if(f.getDiplomaticAttitude()==3&&!f.isPlayer()){break;}
                if(  ComUtil.ifGet(f.getFavorValue())) {
                    legion_AllianceTIA1(liA,liB,true);
                    favor=f.getABSCivilSpecFavor()*2;
                    f.addFavor(favor);
                }else if(!f.isPlayer()){
                    favor=f.getABSCivilSpecFavor();
                    f.reduceFavor(favor);
                }
                break;

            //宣战
            case 3104:
                if(f.getDiplomaticAttitude()==2&&!f.isPlayer()){break;}
                if(!f.isAlly()&&f.getFavorValue()<60&&ComUtil.ifGet(game.resGameConfig.declareWarChance)&&liA.getSuzerainLi()==0){
                    f.reduceFavor(30);
                    legion_DeclareWar(liA,liB,!liA.haveCoreRegionBeOccup(liB)&&!liB.haveCoreRegionBeOccup(liA));
                    legion_removeAllBuildInfuce(liA.getLegionIndex(),liB.getLegionIndex());
                }
                break;
            //交流
            case 3105:
                if(f.getDiplomaticAttitude()==3&&!f.isPlayer()){break;}
                cardTechId=legionExchangeTechTIA1(liA,liB);
                if (cardTechId!=0&&f.isPlayer()&&!f.isSelf()) {
                    favor=f.getABSCivilSpecFavor()*2;
                    f.addFavor(favor);
                    if(liA.isPlayer()){
                        int  round=ComUtil.limitValue(liA.getUpdTechLegionRound(cardTechId,liA.isPlayer()),1,255);
                        liA.addLegionRound(round);
                        addPromptData(game.gameMethod.getPromptStrT(3,0),
                                game.gameMethod.getPromptStrT(3,1,liB.legionName,game.gameMethod.getCardName(liB,liB.getCapital(),cardTechId,12),favor,f.getFavorValue()),
                                game.gameMethod.getPromptStrT(3,2,round),liA.getLegionIndex(),liB.getLegionIndex(),false
                        );
                    }else{
                        int  round=ComUtil.limitValue(liB.getUpdTechLegionRound(cardTechId,liA.isPlayer()),1,255);
                        liB.addLegionRound(round);
                        addPromptData(game.gameMethod.getPromptStrT(58,0),
                                game.gameMethod.getPromptStrT(58,1,liA.legionName,game.gameMethod.getCardName(liB,liB.getCapital(),cardTechId,12),favor,f.getFavorValue()),
                                game.gameMethod.getPromptStrT(58,2,round),liA.getLegionIndex(),liB.getLegionIndex(),false);
                    }
                }
                break;
            //扶持
            case 3106:
                if(f.getDiplomaticAttitude()==3&&!f.isPlayer()){break;}
                favor=f.getABSCivilSpecFavor();
                legion_Support(liB,liA,favor);break;
            //求援
            case 3107:
                if(f.getDiplomaticAttitude()==3&&!f.isPlayer()){break;}
                favor=f.getABSCivilSpecFavor();
                legion_Support(liA,liB,favor);break;
            //合并
            case 3108:
                if( checkRegionCanLegionMerge(liA,liB)&& ComUtil.ifGet(f.getMergeChance())) {
                    legion_Merge(liA,liB,true);
                }
                break;
            //窃取科技
            case 3109:
                if(f.getDiplomaticAttitude()==2){break;}
                if(f.getFavorValue()>50||f.isAlly()){break;}   favor=-ComUtil.getRandom(5,15);f.addFavor(favor); cardTechId=legionExchangeTechTIA1(liA,liB);
                if (cardTechId!=0&&f.isPlayer()&&!f.isSelf()) {
                    if(liA.isPlayer()){
                        int  round=ComUtil.limitValue(liA.getUpdTechLegionRound(cardTechId,false),1,255);
                        liA.addLegionRound(round);
                        addPromptData(game.gameMethod.getPromptStrT(57,0),
                                game.gameMethod.getPromptStrT(57,1,liB.legionName,game.gameMethod.getCardName(liB,liB.getCapital(),cardTechId,12),favor,f.getFavorValue()),
                                game.gameMethod.getPromptStrT(57,2,round),liA.getLegionIndex(),liB.getLegionIndex(),false
                        );
                    }else{
                        int  round=ComUtil.limitValue(liB.getUpdTechLegionRound(cardTechId,false),1,255);
                        liB.addLegionRound(round);
                        addPromptData(game.gameMethod.getPromptStrT(56,0),
                                game.gameMethod.getPromptStrT(56,1,liA.legionName,game.gameMethod.getCardName(liB,liB.getCapital(),cardTechId,12),favor,f.getFavorValue()),
                                game.gameMethod.getPromptStrT(56,2,round),liA.getLegionIndex(),liB.getLegionIndex(),false);
                    }
                }

                break;
            //和约
            case 3110:    /*favor=ComUtil.getRandom(5,20);f.addFavor(favor);
                if(f.isPlayer()&&!f.isSelf()){
                    if(liA.isPlayer()){
                        addPromptData(game.gameMethod.getPromptStrT(59, 0),
                                game.gameMethod.getPromptStr(59, 1, liB.legionName), game.gameMethod.getPromptStr(53, 2, liB.legionName,favor));
                    }else{
                        addPromptData(game.gameMethod.getPromptStrT(59, 0),
                                game.gameMethod.getPromptStr(59, 1, liA.legionName), game.gameMethod.getPromptStr(53, 2, liA.legionName,favor));
                    }
                }*/
                legion_BegPeace(liA,liB);
                break;
            //暴动
            case 3111:
                if(f.getDiplomaticAttitude()==2&&!f.isPlayer()){break;}
                if(f.getFavorValue()>50||f.isAlly()){break;}   favor=-ComUtil.getRandom(15,30);f.addFavor(favor);
                legion_Riot(liB,liA,null);
                if(liB.isPlayer()&&ComUtil.ifGet(50-favor)){
                    addPromptData(game.gameMethod.getPromptStrT(60, 0),
                            game.gameMethod.getPromptStr(60, 1, liA.legionName), game.gameMethod.getPromptStr(53, 2, liA.legionName,favor),liB.getLegionIndex(),liA.getLegionIndex(),false);
                }
                break;
            //制裁
            case 3112:
                if(f.getDiplomaticAttitude()==2&&!f.isPlayer()){break;}
                if(f.getFavorValue()>50||f.isAlly()){break;}   favor=-ComUtil.getRandom(10,20);f.addFavor(favor);
                liB.reduceTaxBonus(ComUtil.getRandom(5,10));
                liB.reduceStability(7);
                if(liB.isPlayer()){
                    addPromptData(game.gameMethod.getPromptStrT(61, 0),
                            game.gameMethod.getPromptStr(61, 1, liA.legionName), game.gameMethod.getPromptStr(61, 2, liA.legionName,favor),liA.getLegionIndex(),liB.getLegionIndex(),false);
                }
                break;
            case 3113:
                if(f.getForeignType()==1){
                    f.setForeignValue(f.getForeignValue()+10);
                }else{
                    f.setForeignType(1);
                    f.setForeignValue(10);
                }
                break;

            case 3114:
                if(f.getForeignDegree()==-1){
                    legion_inviteAttack(f.getSourceLegionData(),f.getTargetLegionData());
                }
                break;
            case 3115:
                if(liA.borderLegionIndexs.contains(liB.getLegionIndex())&&getForeignDegree(liA.getLegionIndex(),liB.getLegionIndex())!=1&&liA.isFreeSovereignCountry()&&liA.getAllArmySumNum()>liB.getAllArmySumNum()){
                    BuildData b=liB.getRandomBorderBuildData(liA.getLegionIndex());
                    if(b!=null&&ComUtil.ifGet(getSetInfluenceChance(b,liA.getLegionIndex()))){
                        b.setInfluenceLi(liA.getLegionIndex());
                        if(b.isPlayer()){
                            addPromptData(game.gameMethod.getPromptStrT(88, 0,b.getRegionAreaStr()),
                                    game.gameMethod.getPromptStr(88, 1,liA.legionName, b.getRegionAreaStr()),  game.gameMethod.getPromptStr(88, 2, b.getRegionAreaStr(),liA.legionName),b.getLegionIndex(),b.getLegionIndex(),false);
                        }
                    }
                }
                break;
            case 3116:
                legion_Independent(liA);
                break;
        }
    }



    public int getRound(int cardId,int cardType) {
        if(isEditMode(true)){
            return 0;
        }
        if(cardType==17){
            XmlReader.Element xE=game.gameConfig.getDEF_WONDER().getElementById(cardId);
            if(xE!=null){
                return xE.getInt("star",1);
            }
            return 1;
        }
        XmlReader.Element xE=game.gameConfig.getDEF_CARD().getElementById(cardId);
        if(xE!=null){
            return xE.getInt("round", 1);
        }
        Gdx.app.error("card is error",cardId+":"+cardType );
        return 1;
    }
    //不针对特殊价格卡
 /*   public boolean playerCanBuyCard(BuildData buildData,int cardId){
        LegionData legion=getPlayerLegionData();
        XmlReader.Element cardE=game.gameConfig.getDEF_CARD().getElementById(cardId);
        if(cardE!=null&&buildData!=null&&legion!=null){
            boolean ifCanBuy=true;
            if(cardE.getInt("priceType",0)==0){
                //priceType 为0的为普通卡牌,money=比例+基础,其他三项均为比例


                int money=ComUtil.limitValue(legion.getMoney()*cardE.getInt("moneyRateCost",0)/100+cardE.getInt("money",0),0,999);
                int industry=ComUtil.limitValue(legion.getIndustry()*cardE.getInt("industryRateCost",0)/100,0,999);
                int food=ComUtil.limitValue(legion.getFood()*cardE.getInt("foodRateCost",0)/100,0,999);
                int tech=ComUtil.limitValue(legion.getTech()*cardE.getInt("techRateCost",0)/100,0,999);

                if(ifCanBuy&&(money>legion.getMoney()||industry>legion.getIndustry()||tech>legion.getTech()||food>legion.getFood())){
                    ifCanBuy=false;
                }
            }else {  //industry为1的为好感度卡牌,只moneyRateCost有效
                int selectCardFavorPrice=cardE.getInt("moneyRateCost",0);
                ForeignData f=getForeignData(buildData.getLegionIndex());

                if(ifCanBuy&&f.getFavorValue()<selectCardFavorPrice){
                    ifCanBuy=false;
                }

            }
            return ifCanBuy;
        }
        return false;
    }*/

    //注意,该购买为强制购买,仅仅支付价格  true 钱足够,false 无法支付,没钱了

    /* public boolean ai_canPayCardPrice(LegionData l, BuildData build, int cardId) {
         if (cardId < 1) {
             return true;
         }
         XmlReader.Element cardE = game.gameConfig.getDEF_CARD().getElementById(cardId);
         if (cardE == null) {
             return true;
         }
         int money = cardE.getInt("money", 0)+l.incomeMoney*cardE.getInt("moneyRateCost", 0)/100    ;
         int industry = cardE.getInt("industry", 0)+l.incomeIndustry*cardE.getInt("industryRateCost", 0)/100 ;
         int food = cardE.getInt("food", 0)+l.incomeFood*cardE.getInt("foodRateCost", 0)/100;
         int tech = cardE.getInt("tech", 0)+l.incomeTech*cardE.getInt("techRateCost", 0)/100;

         int cardType = cardE.getInt("type");
         boolean ifConquest=masterData.getPlayerMode()==0;
         money =ComUtil.limitValue( DefDAO.getCardPrice(l,build,0,money, cardType, cardId,+GameMethod.getCardLv(l, build, cardId), ifConquest),0,999);
         industry = ComUtil.limitValue(DefDAO.getCardPrice(l,build,1,industry, cardType,cardId, +GameMethod.getCardLv(l, build, cardId), ifConquest),0,999);
         tech = ComUtil.limitValue(DefDAO.getCardPrice(l,build,2,tech, cardType,cardId, +GameMethod.getCardLv(l, build, cardId), ifConquest),0,999);
         food = ComUtil.limitValue(DefDAO.getCardPrice(l,build,3,food, cardType,cardId, +GameMethod.getCardLv(l, build, cardId), ifConquest),0,999);


         // boolean selectCardCanBuy = true;

         int i=0;

         if ( l.getMoney()>=money) {
             i++;
         }
         if ( l.getIndustry()>=industry) {
             i++;
         }
         if ( l.getTech()>=tech) {
             i++;
         }
         if ( l.getFood()>=food) {
             i++;
         }
         return i==4;
     }
 */
    public boolean canPayCardPrice(LegionData l, BuildData build, int cardId) {
        if (cardId < 1) {
            return true;
        }
        XmlReader.Element cardE = game.gameConfig.getDEF_CARD().getElementById(cardId);
        if (cardE == null) {
            return true;
        }
        boolean rs=false;
        if(cardE.getInt("priceType",0)==0) {
            int money = cardE.getInt("money", 0) + l.incomeMoney * cardE.getInt("moneyRateCost", 0) / 100;
            int industry = cardE.getInt("industry", 0) + l.incomeIndustry * cardE.getInt("industryRateCost", 0) / 100;
            int food = cardE.getInt("food", 0) + l.incomeFood * cardE.getInt("foodRateCost", 0) / 100;
            int tech = cardE.getInt("tech", 0) + l.incomeTech * cardE.getInt("techRateCost", 0) / 100;

            int cardType = cardE.getInt("type");
            boolean ifConquest = masterData.getPlayerMode() == 0;
            money = ComUtil.limitValue(DefDAO.getCardPrice(l, build, 0, money, cardType, cardId, +GameMethod.getCardLv(l, build, cardId)), 0, 999);
            industry = ComUtil.limitValue(DefDAO.getCardPrice(l, build, 1, industry, cardType, cardId, +GameMethod.getCardLv(l, build, cardId)), 0, 999);
            tech = ComUtil.limitValue(DefDAO.getCardPrice(l, build, 2, tech, cardType, cardId, +GameMethod.getCardLv(l, build, cardId)), 0, 999);
            food = ComUtil.limitValue(DefDAO.getCardPrice(l, build, 3, food, cardType, cardId, +GameMethod.getCardLv(l, build, cardId)), 0, 999);


            // boolean selectCardCanBuy = true;


            int i = 0;

            if (l.getMoney() >= money) {
                i++;
            }
            if (l.getIndustry() >= industry) {
                i++;
            }
            if (l.getTech() >= tech) {
                i++;
            }
            if (l.getFood() >= food) {
                i++;
            }
            rs=i==4;
        }else{
            int selectCardFavorPrice=cardE.getInt("moneyRateCost",0);
            ForeignData f=getForeignData(build.getLegionIndex());
            if(f!=null){
                if(f.getFavorValue()>=selectCardFavorPrice){
                    rs=true;
                }else{
                    rs=false;
                }
            }
        }
        return rs;
    }


    /*public boolean playerBuyCard(BuildData buildData,int cardId){
        LegionData legion=getPlayerLegionData();
        XmlReader.Element cardE=game.gameConfig.getDEF_CARD().getElementById(cardId);
        if(cardE!=null&&buildData!=null&&legion!=null){
            boolean ifCanBuy=false;
            if(cardE.getInt("priceType",0)==0){
                //priceType 为0的为普通卡牌,money=比例+基础,其他三项均为比例
                int money=ComUtil.limitValue(legion.getMoney()*cardE.getInt("moneyRateCost",0)/100+cardE.getInt("money",0),0,999);
                int industry=ComUtil.limitValue(legion.getIndustry()*cardE.getInt("industryRateCost",0)/100,0,999);
                int food=ComUtil.limitValue(legion.getFood()*cardE.getInt("foodRateCost",0)/100,0,999);
                int tech=ComUtil.limitValue(legion.getTech()*cardE.getInt("techRateCost",0)/100,0,999);

                if(ifCanBuy&&(money>legion.getMoney()||industry>legion.getIndustry()||tech>legion.getTech()||food>legion.getFood())){
                    ifCanBuy=false;
                }else{
                    legion.buyCard(money,industry,tech,food);
                    ifCanBuy=true;
                }
                if(roundState==0&&game.sMapScreen!=null){
                    game.sMapScreen.updResourceForPlayer();
                }
            }else {  //industry为1的为好感度卡牌,只moneyRateCost有效
                int selectCardFavorPrice=cardE.getInt("moneyRateCost",0);
                ForeignData f=getForeignData(buildData.getLegionIndex());
                if(f!=null){
                    if(f.getFavorValue()>=selectCardFavorPrice){
                        f.reduceFavor(selectCardFavorPrice);
                        ifCanBuy=true;

                    }else{
                        ifCanBuy=false;
                    }
                }
            }
            return ifCanBuy;
        }
        return false;
    }*/


    public boolean payCardPrice(LegionData l, BuildData build, int cardId, boolean ifForce) {
        if (cardId < 1) {
            return true;
        }
        XmlReader.Element cardE = game.gameConfig.getDEF_CARD().getElementById(cardId);
        if (cardE == null) {
            return true;
        }
        boolean rs=false;
        if(cardE.getInt("priceType",0)==0) {
            int money = cardE.getInt("money", 0) + l.incomeMoney * cardE.getInt("moneyRateCost", 0) / 100;
            int industry = cardE.getInt("industry", 0) + l.incomeIndustry * cardE.getInt("industryRateCost", 0) / 100;
            int food = cardE.getInt("food", 0) + l.incomeFood * cardE.getInt("foodRateCost", 0) / 100;
            int tech = cardE.getInt("tech", 0) + l.incomeTech * cardE.getInt("techRateCost", 0) / 100;

            int cardType = cardE.getInt("type");
            money = ComUtil.limitValue(DefDAO.getCardPrice(l, build, 0, money, cardType, cardId, +GameMethod.getCardLv(l, build, cardId)), 0, 999);
            industry = ComUtil.limitValue(DefDAO.getCardPrice(l, build, 1, industry, cardType, cardId, +GameMethod.getCardLv(l, build, cardId)), 0, 999);
            tech = ComUtil.limitValue(DefDAO.getCardPrice(l, build, 2, tech, cardType, cardId, +GameMethod.getCardLv(l, build, cardId)), 0, 999);
            food = ComUtil.limitValue(DefDAO.getCardPrice(l, build, 3, food, cardType, cardId, +GameMethod.getCardLv(l, build, cardId)), 0, 999);


            // boolean selectCardCanBuy = true;


            int i = 0;

            if (l.getMoney() >= money) {
                i++;
            }
            if (l.getIndustry() >= industry) {
                i++;
            }
            if (l.getTech() >= tech) {
                i++;
            }
            if (l.getFood() >= food) {
                i++;
            }

            if (i == 4 || ifForce) {
                l.buyCard(money, industry, tech, food);
            }
            rs=i==4;
        }else{
            int selectCardFavorPrice=cardE.getInt("moneyRateCost",0);
            ForeignData f=getForeignData(build.getLegionIndex());
            if(f!=null){
                if(f.getFavorValue()>=selectCardFavorPrice){
                    f.reduceFavor(selectCardFavorPrice);
                    rs=true;

                }else{
                    rs=false;
                }
            }
        }
        if(rs&&game.sMapScreen!=null&&(roundState==0||roundState==4)&&l.isPlayer()){
            game.sMapScreen.updResourceForPlayer();
        }
        return rs;
    }


    //获得要重点发展的城市
    //type 0全部 1战斗城市 2发展城市
    private IntArray getMajorCity(int legionIndex,int type, IntArray rsList) {
        /*if (buildPolicy == 37) {
            Gdx.app.error("getMajorCity", "buildPolicy:" + buildPolicy);
        }*/
        /*if (rsList == null) {
            rsList = new IntArray();
        } else {
            rsList.clear();
        }*/

        LegionData l=getLegionDataByLi(legionIndex);
        //1 首都
        if (getLegionIndexByRegion(l.getCapitalId()) == legionIndex) {
            rsList.add(l.getCapitalId());
        }
        if(type==0||type==1) {
            if( l.coreAreaRegions!=null){
                for (int i = 0; i < l.coreAreaRegions.size; i++) {
                    int cr=l.coreAreaRegions.get(i);
                        BuildData b=getBuildDataByRegion(cr);
                        if(b!=null){
                            if((b.getLegionIndex()!=legionIndex&&getForeignDegree(legionIndex,b.getLegionIndex())!=1)||b.getBuildStatus()!=0){
                                if (!rsList.contains(b.getRegionId())) {
                                    rsList.add(b.getRegionId());
                                }
                            }
                        }
                    }

            }

            if(l.majorAreaRegions!=null){

                for (int i = 0; i < l.majorAreaRegions.size; i++) {

                        int cr=l.majorAreaRegions.get(i);
                        BuildData b=getBuildDataByRegion(cr);
                        if(b!=null){
                            if((b.getLegionIndex()!=legionIndex&&getForeignDegree(legionIndex,b.getLegionIndex())!=1)||b.getBuildStatus()!=0){
                                if (!rsList.contains(b.getRegionId())) {
                                    rsList.add(b.getRegionId());
                                }
                            }
                        }
                }
            }



           /* for (int r1=0;r1<rsList.size;r1++) {
                int r=rsList.get(r1);
                //3 添加战斗邻近区域
                if (buildRDatas.containsKey(r)) {
                    //int[] c=getConnectData(r);
                    ConnectData c = getConnectData(r);
                    if (c != null) {
                        for (int i = 0, iMax = c.getRegionConnectCount(); i < iMax; i++) {
                          int  k = c.getConnectValue(i + 1, 0);
                            if (buildRDatas.containsKey(k) && getLegionIndexByRegion(k) == legionIndex && !rsList.contains(k)) {
                                rsList.add(k);
                            }
                        }
                    }
                }
            }*/
        }
            //   Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
            // while (it.hasNext()) {
            //   IntMap.Entry<BuildData> c = it.next();
            // BuildData b=c.value;
            for(int bi=0;bi<l.buildArrays.size;bi++) {
                BuildData b=l.buildArrays.get(bi);
                if(b!=null&&b.getBuildRound()==0&&b.getLegionIndex() == legionIndex ){
                    if ((type==0||type==2)&& (l.isCoreAreaRegion(b.getRegionId())||l.isMajorAreaRegion(b.getRegionId()))&&b.getBuildStatus()==0) {
                        if (!rsList.contains(b.getRegionId())) {
                            rsList.add(b.getRegionId());
                        }
                    }
                    if ((type==0||type==1)&&(b.getBuildStatus() >0||b.ifEnergyOverload()) && b.buildRound == 0) {
                        if (!rsList.contains(b.getRegionId())) {
                            rsList.add(b.getRegionId());
                        }
                    }
                }
            }
        return rsList;
    }


    /**
     * 获得可建造卡牌
     * cardType  0战术 1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇 9民用建筑卡 10军用建筑卡 11国策卡 12外交卡 -1全部  -2全部军队 -3全部陆军 -4全部海军 -5 全部建筑用卡牌 -6全部陆军或海军
     * limitArmyCardBuy true当取兵种时是否判断建造条件
     *
     * */
    private int getBuildCardIdTIA1(LegionData l, BuildData b, Boolean ifMaxLv, int cardType,boolean limitArmyCardBuy) {
        IntArray tempIntArray1 = GameMethod.getCanBuildCardByLegion(game,this,l, b, cardType, game.tempUtil.getTempIntArray(),limitArmyCardBuy);
        int rs;
        if (tempIntArray1.size < 1) {
            game.tempUtil.disposeTempIntArray(tempIntArray1);
            return -1;
        } else if (ifMaxLv) {
            rs=GameMethod.getMaxLvArmyId(l, tempIntArray1);
            game.tempUtil.disposeTempIntArray(tempIntArray1);
            return rs;
        } else {
            rs=tempIntArray1.random();
            game.tempUtil.disposeTempIntArray(tempIntArray1);
            return rs;
        }
    }

    public void updInfoByBuild() {
        masterData.varPlayerRegionCount = 0;
        allRegionCount=0;
        //  Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
        // while (it.hasNext()) {
        //   IntMap.Entry<BuildData> c = it.next();
        // BuildData b=c.value;
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if(b==null||b.ifSea()){continue;}
            LegionData l = b.getLegionData();
            if(l==null||l.getInternIndex()==0){
                continue;
            }
            if (l.getLegionIndex() == masterData.getPlayerLegionIndex()) {
                masterData.varPlayerRegionCount += 1;
            }
            allRegionCount++;
        }
    }

    private void initCardNumAndCost() {


        for (int i=0;i<legionDatas.size;i++) {
            LegionData legion=legionDatas.get(i);
            legion.varInfantryNum = 0;
            legion.varArmorNum = 0;
            legion.varArtilleryNum = 0;
            legion.varNavyNum = 0;
            legion.varAirNum = 0;
            legion.varNuclearNum = 0;
            legion.varMissileNum = 0;
            legion.varSubmarineNum = 0;
            legion.varDefenceNum = 0;
            legion.varGeneralNum = 0;


            legion.varInfantryCost = 0;
            legion.varArmorCost = 0;
            legion.varArtilleryCost = 0;
            legion.varNavyCost = 0;
            legion.varAirCost = 0;
            legion.varNuclearCost = 0;
            legion.varMissileCost = 0;
            legion.varSubmarineCost = 0;
            legion.varDefenceCost = 0;
            legion.varGeneralCost = 0;
        }


        for  (int i=0;i<hexagonDatas.size;i++) {
            Fb2Map.MapHexagon h=hexagonDatas.get(i);
            if(h==null){
                continue;
            }
            Fb2Smap.ArmyData armyData=h.armyData;
            if (armyData == null||armyData.getArmyHpNow()<=0) {
                continue;
            }
            LegionData l= armyData.getLegionData();
            switch (armyData.armyType) {
                case 1:
                    l.varInfantryNum +=armyData.getPopulation();
                    l.varInfantryCost += armyData.getFoodCost() *getMilitaryCostRate();
                    break;
                case 2:
                    l.varArtilleryNum += armyData.getPopulation();
                    l.varArtilleryCost += armyData.getFoodCost()  *getMilitaryCostRate();
                    break;
                case 3:
                    l.varArmorNum += armyData.getPopulation();;
                    l.varArmorCost += armyData.getFoodCost()  *getMilitaryCostRate();
                    break;
                case 4:
                    l.varNavyNum += armyData.getPopulation();
                    l.varNavyCost += armyData.getFoodCost()  *getMilitaryCostRate();
                    break;
                case 5:
                    l.varAirNum += 1;
                    l.varAirCost += armyData.getFoodCost() *getMilitaryCostRate();
                    break;
                case 6:
                    if(armyData.ifHaveFeature(5)){
                        l.varMissileNum += 1;
                        l.varMissileCost += armyData.getFoodCost()  *getMilitaryCostRate();
                    }else {
                        l.varDefenceNum +=1;
                        l.varDefenceCost += armyData.getFoodCost()  *getMilitaryCostRate();
                    }
                    break;
                case 7:
                    l.varNuclearNum += 1;
                    l.varNuclearCost +=armyData.getFoodCost()  *getMilitaryCostRate();
                    break;
                case 8:
                    l.varSubmarineNum += armyData.getPopulation();
                    l.varSubmarineCost += armyData.getFoodCost() *getMilitaryCostRate();
                    break;
                default:
                    Gdx.app.error("initCardNumAndCost no bontyType",""+armyData.getArmyType());
                    break;
            }
            if (armyData.getGeneralIndex() != 0) {
                l.varGeneralNum += 1;
                l.varGeneralCost +=  ComUtil.limitValue(armyData.getFoodCost()/2 ,10,255)*getMilitaryCostRate();
            }
        }
        if(masterData.getPlayerMode()!=2){
            Iterator<IntMap.Entry<AirData>> it1 = airIDatas.iterator();
            while (it1.hasNext()) {
                IntMap.Entry<AirData> c = it1.next();
                AirData air=c.value;
                if(air==null){continue;}
                LegionData l= legionDatas.get(air.getLegionIndex());
                l.varAirNum += air.getPopulation();
                l.varAirCost += air.getFoodCost() *getMilitaryCostRate();

                if (air.getGeneralIndex() != 0) {
                    l.varGeneralNum += 1;
                    l.varGeneralCost += ComUtil.limitValue(air.getFoodCost()/2 ,10,255) *getMilitaryCostRate();
                }
            }
            int li;
            Iterator<IntMap.Entry<NulcleData>> it2 = nulcleIDatas.iterator();
            while (it2.hasNext()) {
                IntMap.Entry<NulcleData> c = it2.next();
                NulcleData nulcleData=c.value;

                if(nulcleData==null){continue;}
                li = getLegionIndexByRegion(nulcleData.getRegionId());
                legionDatas.get(li).varNuclearNum += 1;
                legionDatas.get(li).varNuclearCost += nulcleData.getGameValue() *getMilitaryCostRate();
            }
        }

        Iterator<IntMap.Entry<GeneralData>> itG = generalIDatas.iterator();
        while (itG.hasNext()) {
            GeneralData g=itG.next().value;
            if(g==null){continue;}
            if(g.getState()==0&&!generalIds.contains(g.getGeneralId())){
                generalIds.add(g.getGeneralId());
            }
        }
        /*for(LegionData l:legionDatas){
            Gdx.app.log("initCardNumAndCost",l.getAllAttributes());
        }*/
    }

    private void initLegionCanBuildCard() {
        for (int i=0;i<legionDatas.size;i++) {
            LegionData l=legionDatas.get(i);
        }
    }

    private void initLegionBattleRegions() {
        for (int i=0;i<legionDatas.size;i++) {
            LegionData l=legionDatas.get(i);
            l.varBattleRegions = new IntArray();
        }
    }



    //注意这个使用了临时tempIntArray
    //ifSea true 只查找目标是海洋的地块  false 则查全部

    public IntArray getArmyMovablePostionTIIM1(int hexagon, int li, int movement, int direct, IntArray rsIntArray, boolean ifSea, boolean coastLimit,boolean ifPlayer) {
        //movement=2;
       /* if (rsIntArray == null) {
            rsIntArray = new IntArray();
        } else {
            rsIntArray.clear();
        }*/
        IntIntMap tempIntIntMap=game.tempUtil.getTempIntIntMap();
        rsIntArray.add(hexagon);
        tempIntIntMap.put(hexagon, movement);

        //先执行一遍
        // getCanMoveId(hexagon, movement, direct, ifLoop, false, tempIntIntMap,coastLimit);

        //问题:因为公用路径消耗,所以会导致覆盖问题
        // 解决:使遍历点的顺序从新的顺序开始,并且不覆盖

        int  oldSize = 0,index=0;
        while (oldSize != tempIntIntMap.size) {
            oldSize = tempIntIntMap.size;
            for (int jMax = rsIntArray.size; index < jMax; index++) {
                int sId=rsIntArray.get(index);
                int tId=tempIntIntMap.get(sId, -1);

             //   Gdx.app.log("getArmyMovablePostionTIIM1 0","");
                if (tId != -1) {
                    getCanMoveId(li,hexagon,sId,tId, direct, ifLoop, false, tempIntIntMap,coastLimit,ifPlayer);
                    //  Gdx.app.log("getArmyMovablePostionTIIM1","id:"+rsIntArray.get(index)+" size:"+jMax +":"+ rsIntArray.size+" index:"+index+" ids:"+tempIntIntMap.toString());
                }
              //  Gdx.app.log("getArmyMovablePostionTIIM1 1","");
            }
            Iterator<IntIntMap.Entry> it = tempIntIntMap.iterator();
            while (it.hasNext()) {
                IntIntMap.Entry c = it.next();
                if (c!=null&&!rsIntArray.contains(c.key) ) {

                  //  Gdx.app.log("getArmyMovablePostionTIIM1 3","");
                    if(!ifHaveArmy(c.key,ifPlayer)) {
                        BuildData b = getBuildDataByRegion(c.key);
                        if (b != null) {
                            if (b.getCityHpNow() > 0 && b.getLegionIndex() != li) {
                                continue;
                            }
                        }
                        if (c.key >=hexagonDatas.size||c.key<0) {

                        } else if (ifSea && hexagonDatas.get(c.key).getBlockType() == 1) {
                            rsIntArray.add(c.key);
                        } else {
                            rsIntArray.add(c.key);
                        }
                //        Gdx.app.log("getArmyMovablePostionTIIM1 4","");
                    }
              //      Gdx.app.log("getArmyMovablePostionTIIM1 4.5 ",c.key+"");
                    /*if(c.key==10912&&hexagon==10542){
                        int s=0;
                    }*/
                    if(ifCanMerge(hexagon,c.key)){
                        rsIntArray.add(c.key);
                    }
                    //Gdx.app.log("getArmyMovablePostionTIIM1 5","");
                }
             //   Gdx.app.log("getArmyMovablePostionTIIM1 6","");

            }
        }
        rsIntArray.removeValue(hexagon);
        game.tempUtil.disposeTempIntIntMap(tempIntIntMap);
        return rsIntArray;
    }


    //ifSelfBuildSeaLimit 空军特殊限制, 空军不能移动到 自己的属于海洋类型的建筑
    //ifArmyCanCarryAir 单位是否可以携带空军
    //targetType 0全部 1非友军 2仅自己 3可攻击地面目标 4有可空战空军的地区 5可战术空降地区 6可战略空降地区
    //targetRegionType 0全部 1仅海洋 2仅陆地
    //ifBanAlly true 则禁止目标是友军单位
    public IntArray getIdsInRange(int hexagon,int legionIndex,int minRange,  int maxRange, boolean ifOnlyRegion,int targetRegionType,boolean ifBanAlly,int targetType,boolean ifSelfBuildSeaLimit,boolean ifArmyCanCarryAir,boolean ifHaveSelf, boolean ifSameRegion,IntArray rsIntArray) {



        /*if (rsIntArray == null) {
            rsIntArray = new IntArray();
        } else {
            rsIntArray.clear();
        }*/
        int rangeCount = maxRange - minRange + 1;
        //获取左上角值
        //  1↖ 2↑ 3↗ 4↙ 5↓ 6↘  {3, 6, 5, 4, 1, 2}
        int[] srd = ResDefaultConfig.Map.GRID_RANGE_SORT_ARRAY;
        int range, grid,li,tempRegion;
        tempRegion=getRegionId(hexagon);


        for (int j = 0, jMax = rangeCount; j < jMax; j++) {
            range = minRange + j;
            grid = getIdForDirectRange(hexagon, 1, range);
            for (int i = 0; i <  srd.length; i++) {
                for (int k = 0, kMax = range; k < kMax; k++) {
                    grid = getIdForDirectRange(grid, srd[i], 1);
                    li=getLegionIndexByHexagon(grid);
                    if (grid > 0 && grid < hexagonDatas.size && ifGridIsPass(grid)) {
                       /* if(grid==45099||grid==45835){
                            int s=0;
                        }
*/
                        if (targetRegionType==1 ) {
                            if(!ifSea(grid)){
                                continue;
                            }
                        }else  if(targetRegionType==2){
                            if(ifSea(grid)){
                                continue;
                            }
                        }
                        if(ifSameRegion){
                            if(tempRegion!=getRegionId(grid)){
                                continue;
                            }
                        }
                        ArmyData a=getArmyDataByHexagon(grid);
                        if(a!=null&&ifArmyCanCarryAir&&a.legionIndex==li&&(a.ifHaveFeature(2)||a.getArmyType()==4)&&a.getAirCount()<4){
                            if(!rsIntArray.contains(grid)){
                                rsIntArray.add(grid);
                            }
                        }
                        if (ifOnlyRegion&&getRegionId(grid)!=grid) {
                            continue;
                        }
                        if(ifBanAlly&&li!=legionIndex&&ifAllyByLi(li,legionIndex)){
                            continue;
                        }
                        BuildData buildData=getBuildDataByRegion(grid);
                        if(ifSelfBuildSeaLimit){
                            if(buildData!=null&&buildData.getLegionIndex()==legionIndex&&buildData.getBuildType()==2){
                                continue;
                            }
                        }
                        if(targetType==1){
                            if(ifAllyByLi(li,legionIndex)){
                                continue;
                            }
                        }else if(targetType==2){
                            if(li!=legionIndex){
                                continue;
                            }
                        }else if(targetType==3){
                            if(!ifHaveCanAtkEnemy(legionIndex,grid,false)){
                                continue;
                            }
                        }else if(targetType==4){
                            if(buildData!=null&&buildData.getInterceptorAir()==null){
                                continue;
                            }
                        }else if(targetType==5){//战术空降
                            if(buildData!=null&&buildData.getCityHpNow()>0&&buildData.getLegionIndex()!=legionIndex){
                                continue;
                            }
                            if(a!=null){
                                continue;
                            }
                        }else if(targetType==6){//战略空降
                            if(buildData==null){
                                continue;
                            }else{
                                if(!ifAllyByLi(buildData.getLegionIndex(),legionIndex)&&(buildData.ifHaveLegionAllyUnit(true)||buildData.getCityHpNow()>0)){
                                    continue;
                                }
                            }
                        }
                        if(!rsIntArray.contains(grid)){
                            rsIntArray.add(grid);
                        }
                    }
                }
            }
        }
        if(ifHaveSelf){
            if(!rsIntArray.contains(hexagon)){
                rsIntArray.add(hexagon);
            }
        }else{
            if(rsIntArray.contains(hexagon)){
                rsIntArray.removeValue(hexagon);
            }
        }
        return rsIntArray;
    }


    private boolean ifCanMerge(int hexagon, int hexagonB) {
        return ifCanMerge(getArmyDataByHexagon(hexagon),getArmyDataByHexagon(hexagonB));
    }

    //获得两个相邻的方向   //-1未知  自身0  1左上 2上 3左下 4左下 5下 6右下
    public int getDirectByBorderId(int hexagon, int targetHexagon){
        if(hexagon==targetHexagon){
            return 0;
        }
        for(int d=1;d<=6;d++){
            int id=getBorderIdByDirect(hexagon,d);
            if(id==targetHexagon){
                return d;
            }
        }
        return -1;
    }


    //获得另一个的方向
    //-1未知  自身0  1左上 2上 3左下 4左下 5下 6右下
    public int getDirect(int hexagon, int targetHexagon) {
        if (hexagon != targetHexagon && ifGridIsPass(hexagon) && ifGridIsPass(targetHexagon)) {
            int rs=getDirectByBorderId(hexagon,targetHexagon);
            if(rs>=0){
                return rs;
            }
            int hy = (int) hexagon / masterData.getWidth();
            int hx = hexagon - hy * masterData.getWidth();

            int ty = (int) targetHexagon / masterData.getWidth();
            int tx = targetHexagon - ty * masterData.getWidth();

            if (hx == tx) {
                if (hy > ty) {
                    return 2;
                } else {
                    return 5;
                }
            }

            if (ifLoop) {
                int mid = masterData.getWidth() / 2;
                if ((hx > tx || (tx > mid && hx < mid)) && !(tx < mid && hx > mid)) {
                    if (hy >= ty) {
                        return 1;
                    } else {
                        return 4;
                    }
                } else {
                    if (hy > ty) {
                        return 3;
                    } else {
                        return 6;
                    }
                }
            } else {
                if (hx > tx) {
                    if (hy >= ty) {
                        return 1;
                    } else {
                        return 4;
                    }
                } else {
                    if (hy >= ty) {
                        return 3;
                    } else {
                        return 6;
                    }
                }
            }
        }
        return 0;
    }




    //coastLimit true,则查到沿海地块则不再查找
    public IntIntMap getCanMoveId(int legionIndex,int sourceHexagon,int id, int movement, int direct, boolean ifLoop, boolean ifClear, IntIntMap rsIds,boolean coastLimit,boolean ifPlayer) {
        if (rsIds == null) {
            rsIds = new IntIntMap();
        } else if (ifClear) {
            rsIds.clear();
        }
        boolean top = false;
        boolean foot = false;
        boolean left = false;
        boolean right = false;
        Fb2Map.MapHexagon h;

        if(!ifGridIsPass(id)){
            return rsIds;
        }
        ArmyData a=getArmyDataByHexagon(id);
        if(ifPlayer){
            if(a!=null&&a.armyActor!=null&&getForeignDegree(legionIndex,a.getLegionIndex())!=1){
                rsIds.put(id, 0);
                return rsIds;
            }
        }else{
            if(a!=null&&a.armyActor!=null&&getForeignDegree(legionIndex,a.getLegionIndex())!=1){
                rsIds.put(id, 0);
                return rsIds;
            }
        }

        BuildData b=getBuildDataByRegion(id);
        if(b!=null&&getForeignDegree(legionIndex,b.getLegionIndex())!=1&&b.getCityHpNow()>0){
            rsIds.put(id, 0);
            return rsIds;
        }

        IntArray riverId=game.tempUtil.getTempIntArray();
        //判断处于哪个边
        int y = (int) id / masterData.getWidth();
        int x = id - y * masterData.getWidth();
        int t1, t2, t3, t4, t5, t6;
        boolean ifParity = (x & 1) == 1;
        if (ifParity) {
            t1 = id - 1;
            t2 = id - masterData.getWidth();
            t3 = id + 1;
            t4 = id + masterData.getWidth() - 1;
            t5 = id + masterData.getWidth();
            t6 = id + masterData.getWidth() + 1;
        } else {
            t1 = id - masterData.getWidth() - 1;
            t2 = id - masterData.getWidth();
            t3 = id - masterData.getWidth() + 1;
            t4 = id - 1;
            t5 = id + masterData.getWidth();
            t6 = id + 1;
        }
        if (x == 0) {
            left = true;
        }
        if (x == masterData.getWidth() - 1) {
            right = true;
        }
        if (y == 0) {
            top = true;
        }
        if (y == masterData.getWidth() - 1) {
            foot = true;
        }
        Fb2Map.MapHexagon sh=getHexagonData(id);
        if (ifLoop) {
            if (ifParity) {
                if (ifGridIsPass(t1)&&(direct == 0 || direct == 1)) {h=hexagonDatas.get(t1);
                    if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                        riverId.add(h.getHexagonIndex());
                        if(h.ifBorder(sourceHexagon)){
                            rsIds.put(t1, 0);
                        }else{
                            rsIds.put(id, 0);
                        }
                    }else if (movement >= getMoveCost(t1)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t1,id)))) {
                        if(!rsIds.containsKey(t1)){
                            rsIds.put(t1, movement - getMoveCost(t1));
                        }
                    } else if(h.ifCanForceMove(sourceHexagon,movement)){
                        rsIds.put(t1, 0);
                    }
                }
                if (!top) {
                    if (ifGridIsPass(t2)&&(direct == 0 || direct == 2)) {h=hexagonDatas.get(t2);
                        if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                            riverId.add(h.getHexagonIndex());
                            if(h.ifBorder(sourceHexagon)){
                                rsIds.put(t2, 0);
                            }else{
                                rsIds.put(id, 0);
                            }
                        }else if (movement >= getMoveCost(t2)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t2,id)))) {
                            if(!rsIds.containsKey(t2)){
                                rsIds.put(t2, movement - getMoveCost(t2));
                            }
                        } else if(h.ifCanForceMove(sourceHexagon,movement)){
                            rsIds.put(t2, 0);
                        }
                    }
                }
                if (ifGridIsPass(t3)&&(direct == 0 || direct == 3)) {h=hexagonDatas.get(t3);
                    if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                        riverId.add(h.getHexagonIndex());
                        if(h.ifBorder(sourceHexagon)){
                            rsIds.put(t3, 0);
                        }else{
                            rsIds.put(id, 0);
                        }
                    }else if (movement >= getMoveCost(t3)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t3,id)))) {
                        if(!rsIds.containsKey(t3)){
                            rsIds.put(t3, movement - getMoveCost(t3));
                        }
                    } else if(h.ifCanForceMove(sourceHexagon,movement)){
                        rsIds.put(t3, 0);
                    }
                }
                if (!foot) {
                    if (ifGridIsPass(t4)&&(direct == 0 || direct == 4)) {h=hexagonDatas.get(t4);
                        if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                            riverId.add(h.getHexagonIndex());
                            if(h.ifBorder(sourceHexagon)){
                                rsIds.put(t4, 0);
                            }else{
                                rsIds.put(id, 0);
                            }
                        }else  if (movement >= getMoveCost(t4)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t4,id)))) {
                            if(!rsIds.containsKey(t4)){
                                rsIds.put(t4, movement - getMoveCost(t4));
                            }
                        }  else if(h.ifCanForceMove(sourceHexagon,movement)){
                            rsIds.put(t4, 0);
                        }
                    }
                    if (ifGridIsPass(t5)&&(direct == 0 || direct == 5)) {h=hexagonDatas.get(t5);
                        if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                            riverId.add(h.getHexagonIndex());
                            if(h.ifBorder(sourceHexagon)){
                                rsIds.put(t5, 0);
                            }else{
                                rsIds.put(id, 0);
                            }
                        }else  if (movement >= getMoveCost(t5)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t5,id)))) {
                            if(!rsIds.containsKey(t5)){
                                rsIds.put(t5, movement - getMoveCost(t5));
                            }
                        }  else if(h.ifCanForceMove(sourceHexagon,movement)){
                            rsIds.put(t5, 0);
                        }
                    }
                    if (ifGridIsPass(t6)&&(direct == 0 || direct == 6)) {h=hexagonDatas.get(t6);
                        if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                            riverId.add(h.getHexagonIndex());
                            if(h.ifBorder(sourceHexagon)){
                                rsIds.put(t6, 0);
                            }else{
                                rsIds.put(id, 0);
                            }
                        }else  if (movement >= getMoveCost(t6)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t6,id)))) {
                            if(!rsIds.containsKey(t6)){
                                rsIds.put(t6, movement - getMoveCost(t6));
                            }
                        }  else if(h.ifCanForceMove(sourceHexagon,movement)){
                            rsIds.put(t6, 0);
                        }
                    }
                }
            } else {
                if (!top) {
                    if (ifGridIsPass(t1)&&(direct == 0 || direct == 1)) {h=hexagonDatas.get(t1);
                        //Gdx.app.log("ArrayIndexOutOfBoundsException",t1+":");
                        if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                            riverId.add(h.getHexagonIndex());
                            if(h.ifBorder(sourceHexagon)){
                                rsIds.put(t1, 0);
                            }else{
                                rsIds.put(id, 0);
                            }
                        }else if (movement >= getMoveCost(t1)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t1,id)))) {
                            if(!rsIds.containsKey(t1)){
                                rsIds.put(t1, movement - getMoveCost(t1));
                            }
                        }  else if(h.ifCanForceMove(sourceHexagon,movement)){
                            rsIds.put(t1, 0);
                        }
                    }
                    if (ifGridIsPass(t2)&&(direct == 0 || direct == 2)) {h=hexagonDatas.get(t2);
                        if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                            riverId.add(h.getHexagonIndex());
                            if(h.ifBorder(sourceHexagon)){
                                rsIds.put(t2, 0);
                            }else{
                                rsIds.put(id, 0);
                            }
                        }else  if (movement >= getMoveCost(t2)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t2,id)))) {
                            if(!rsIds.containsKey(t2)){
                                rsIds.put(t2, movement - getMoveCost(t2));
                            }
                        }  else if(h.ifCanForceMove(sourceHexagon,movement)){
                            rsIds.put(t2, 0);
                        }
                    }
                    if (ifGridIsPass(t3)&&(direct == 0 || direct == 3)) {h=hexagonDatas.get(t3);
                        if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                            riverId.add(h.getHexagonIndex());
                            if(h.ifBorder(sourceHexagon)){
                                rsIds.put(t3, 0);
                            }else{
                                rsIds.put(id, 0);
                            }
                        }else  if (movement >= getMoveCost(t3)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t3,id)))) {
                            if(!rsIds.containsKey(t3)){
                                rsIds.put(t3, movement - getMoveCost(t3));
                            }
                        } else if(h.ifCanForceMove(sourceHexagon,movement)){
                            rsIds.put(t3, 0);
                        }
                    }
                }
                if (ifGridIsPass(t4)&&(direct == 0 || direct == 4)) {h=hexagonDatas.get(t4);
                    if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                        riverId.add(h.getHexagonIndex());
                        if(h.ifBorder(sourceHexagon)){
                            rsIds.put(t4, 0);
                        }else{
                            rsIds.put(id, 0);
                        }
                    }else if (movement >= getMoveCost(t4)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t4,id)))) {
                        if(!rsIds.containsKey(t4)){
                            rsIds.put(t4, movement - getMoveCost(t4));
                        }
                    }  else if(h.ifCanForceMove(sourceHexagon,movement)){
                        rsIds.put(t4, 0);
                    }
                }
                if (!foot) {
                    if (ifGridIsPass(t5)&&(direct == 0 || direct == 5)) {h=hexagonDatas.get(t5);
                        if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                            riverId.add(h.getHexagonIndex());
                            if(h.ifBorder(sourceHexagon)){
                                rsIds.put(t5, 0);
                            }else{
                                rsIds.put(id, 0);
                            }
                        }else  if (movement >= getMoveCost(t5)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t5,id)))) {
                            if(!rsIds.containsKey(t5)){
                                rsIds.put(t5, movement - getMoveCost(t5));
                            }
                        }  else if(h.ifCanForceMove(sourceHexagon,movement)){
                            rsIds.put(t5, 0);
                        }
                    }
                }
                if (ifGridIsPass(t6)&&(direct == 0 || direct == 6)) {h=hexagonDatas.get(t6);
                    if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                        riverId.add(h.getHexagonIndex());
                        if(h.ifBorder(sourceHexagon)){
                            rsIds.put(t6, 0);
                        }else{
                            rsIds.put(id, 0);
                        }
                    }else  if (movement >= getMoveCost(t6)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t6,id)))) {
                        if(!rsIds.containsKey(t6)){
                            rsIds.put(t6, movement - getMoveCost(t6));
                        }
                    }  else if(h.ifCanForceMove(sourceHexagon,movement)){
                        rsIds.put(t6, 0);
                    }
                }
            }
        } else {
            if (ifParity) {
                if (!left) {
                    if (ifGridIsPass(t1)&&(direct == 0 || direct == 1)) {h=hexagonDatas.get(t1);
                        if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                            riverId.add(h.getHexagonIndex());
                            if(h.ifBorder(sourceHexagon)){
                                rsIds.put(t1, 0);
                            }else{
                                rsIds.put(id, 0);
                            }
                        }else  if (movement >= getMoveCost(t1)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t1,id)))) {
                            if(!rsIds.containsKey(t1)){
                                rsIds.put(t1, movement - getMoveCost(t1));
                            }
                        }  else if(h.ifCanForceMove(sourceHexagon,movement)){
                            rsIds.put(t1, 0);
                        }
                    }
                }
                if (!top) {
                    if (ifGridIsPass(t2)&&(direct == 0 || direct == 2)) {h=hexagonDatas.get(t2);
                        if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                            riverId.add(h.getHexagonIndex());
                            if(h.ifBorder(sourceHexagon)){
                                rsIds.put(t2, 0);
                            }else{
                                rsIds.put(id, 0);
                            }
                        }else  if (movement >= getMoveCost(t2)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t2,id)))) {
                            if(!rsIds.containsKey(t2)){
                                rsIds.put(t2, movement - getMoveCost(t2));
                            }
                        }  else if(h.ifCanForceMove(sourceHexagon,movement)){
                            rsIds.put(t2, 0);
                        }
                    }
                }
                if (!right) {
                    if (ifGridIsPass(t3)&&(direct == 0 || direct == 3)) {h=hexagonDatas.get(t3);
                        if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                            riverId.add(h.getHexagonIndex());
                            if(h.ifBorder(sourceHexagon)){
                                rsIds.put(t3, 0);
                            }else{
                                rsIds.put(id, 0);
                            }
                        }else  if (movement >= getMoveCost(t3)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t3,id)))) {
                            if(!rsIds.containsKey(t3)){
                                rsIds.put(t3, movement - getMoveCost(t3));
                            }
                        } else if(h.ifCanForceMove(sourceHexagon,movement)){
                            rsIds.put(t3, 0);
                        }
                    }
                }
                if (!foot && !left) {
                    if (ifGridIsPass(t4)&&(direct == 0 || direct == 4)) {h=hexagonDatas.get(t4);
                        if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                            riverId.add(h.getHexagonIndex());
                            if(h.ifBorder(sourceHexagon)){
                                rsIds.put(t4, 0);
                            }else{
                                rsIds.put(id, 0);
                            }
                        }else if (movement >= getMoveCost(t4)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t4,id)))) {
                            if(!rsIds.containsKey(t4)){
                                rsIds.put(t4, movement - getMoveCost(t4));
                            }
                        }  else if(h.ifCanForceMove(sourceHexagon,movement)){
                            rsIds.put(t4, 0);
                        }
                    }
                }
                if (!foot) {
                    if (ifGridIsPass(t5)&&(direct == 0 || direct == 5)) {h=hexagonDatas.get(t5);
                        if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                            riverId.add(h.getHexagonIndex());
                            if(h.ifBorder(sourceHexagon)){
                                rsIds.put(t5, 0);
                            }else{
                                rsIds.put(id, 0);
                            }
                        }else  if (movement >= getMoveCost(t5)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t5,id)))) {
                            if(!rsIds.containsKey(t5)){
                                rsIds.put(t5, movement - getMoveCost(t5));
                            }
                        }  else if(h.ifCanForceMove(sourceHexagon,movement)){
                            rsIds.put(t5, 0);
                        }
                    }
                }
                if (!foot && !right) {
                    if (ifGridIsPass(t6)&&(direct == 0 || direct == 6)) {h=hexagonDatas.get(t6);
                        if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                            riverId.add(h.getHexagonIndex());
                            if(h.ifBorder(sourceHexagon)){
                                rsIds.put(t6, 0);
                            }else{
                                rsIds.put(id, 0);
                            }
                        }else if (movement >= getMoveCost(t6)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t6,id)))) {
                            if(!rsIds.containsKey(t6)){
                                rsIds.put(t6, movement - getMoveCost(t6));
                            }
                        }  else if(h.ifCanForceMove(sourceHexagon,movement)){
                            rsIds.put(t6, 0);
                        }
                    }
                }
            } else {
                if (!top && !left) {
                    if (ifGridIsPass(t1)&&(direct == 0 || direct == 1)) {h=hexagonDatas.get(t1);
                        if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                            riverId.add(h.getHexagonIndex());
                            if(h.ifBorder(sourceHexagon)){
                                rsIds.put(t1, 0);
                            }else{
                                rsIds.put(id, 0);
                            }
                        }else if (movement >= getMoveCost(t1)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t1,id)))) {
                            if(!rsIds.containsKey(t1)){
                                rsIds.put(t1, movement - getMoveCost(t1));
                            }
                        }  else if(h.ifCanForceMove(sourceHexagon,movement)){
                            rsIds.put(t1, 0);
                        }
                    }
                }
                if (!top) {
                    if (ifGridIsPass(t2)&&(direct == 0 || direct == 2)) {h=hexagonDatas.get(t2);
                        if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                            riverId.add(h.getHexagonIndex());
                            if(h.ifBorder(sourceHexagon)){
                                rsIds.put(t2, 0);
                            }else{
                                rsIds.put(id, 0);
                            }
                        }else  if (movement >= getMoveCost(t2)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t2,id)))) {
                            if(!rsIds.containsKey(t2)){
                                rsIds.put(t2, movement - getMoveCost(t2));
                            }
                        }  else if(h.ifCanForceMove(sourceHexagon,movement)){
                            rsIds.put(t2, 0);
                        }
                    }
                }
                if (!top && !right) {
                    if (ifGridIsPass(t3)&&(direct == 0 || direct == 3)) {h=hexagonDatas.get(t3);
                        if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                            riverId.add(h.getHexagonIndex());
                            if(h.ifBorder(sourceHexagon)){
                                rsIds.put(t3, 0);
                            }else{
                                rsIds.put(id, 0);
                            }
                        }else  if (movement >= getMoveCost(t3)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t3,id)))) {
                            if(!rsIds.containsKey(t3)){
                                rsIds.put(t3, movement - getMoveCost(t3));
                            }
                        }  else if(h.ifCanForceMove(sourceHexagon,movement)){
                            rsIds.put(t3, 0);
                        }
                    }
                }
                if (!left) {
                    if (ifGridIsPass(t4)&&(direct == 0 || direct == 4)) {h=hexagonDatas.get(t4);
                        if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                            riverId.add(h.getHexagonIndex());
                            if(h.ifBorder(sourceHexagon)){
                                rsIds.put(t4, 0);
                            }else{
                                rsIds.put(id, 0);
                            }
                        }else  if (movement >= getMoveCost(t4)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t4,id)))) {
                            if(!rsIds.containsKey(t4)){
                                rsIds.put(t4, movement - getMoveCost(t4));
                            }
                        }  else if(h.ifCanForceMove(sourceHexagon,movement)){
                            rsIds.put(t4, 0);
                        }
                    }
                }
                if (!foot) {
                    if (ifGridIsPass(t5)&&(direct == 0 || direct == 5)) {h=hexagonDatas.get(t5);
                        if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                            riverId.add(h.getHexagonIndex());
                            if(h.ifBorder(sourceHexagon)){
                                rsIds.put(t5, 0);
                            }else{
                                rsIds.put(id, 0);
                            }
                        }else  if (movement >= getMoveCost(t5)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t5,id)))) {
                            if(!rsIds.containsKey(t5)){
                                rsIds.put(t5, movement - getMoveCost(t5));
                            }
                        }  else if(h.ifCanForceMove(sourceHexagon,movement)){
                            rsIds.put(t5, 0);
                        }
                    }
                }
                if (!right) {
                    if (ifGridIsPass(t6)&&(direct == 0 || direct == 6)) {h=hexagonDatas.get(t6);
                        if(!riverId.contains(h.getHexagonIndex())&&sh.ifRiverPass(h.getHexagonIndex())){
                            riverId.add(h.getHexagonIndex());
                            if(h.ifBorder(sourceHexagon)){
                                rsIds.put(t6, 0);
                            }else{
                                rsIds.put(id, 0);
                            }
                        }else   if (movement >= getMoveCost(t6)&&(!coastLimit||(coastLimit&&ifSameLandOrSea(t6,id)))) {
                            if(!rsIds.containsKey(t6)){
                                rsIds.put(t6, movement - getMoveCost(t6));
                            }
                        }  else if(h.ifCanForceMove(sourceHexagon,movement)){
                            rsIds.put(t6, 0);
                        }
                    }
                }
            }
        }
        game.tempUtil.disposeTempIntArray(riverId);
        //  Gdx.app.log("getCanMoveId", rsIds.toString());
        return rsIds;
    }

    private int getMoveCost(int hexagon) {
        if(mapbin!=null){
            return mapbin.getMoveCost(hexagon);
        }else{
            if(!ifGridIsPass(hexagon)){
                return 9999;
            }
            Fb2Map.MapHexagon h=hexagonDatas.get(hexagon);
            int tile=h.getBackTile();
            if(tile==1){
                if(h.getForeTile()==9){
                    tile=9;
                }
            }else if(h.getBlockType()!=1){
                if(h.getOtherTile()==1){
                    BuildData b=getBuildDataByRegion(getRegionId(hexagon));
                    if(b!=null&&!b.isWar()){
                        tile=10;
                    }else{
                        tile=10;
                    }
                }
            }
            return game.gameConfig.getDEF_TERRAIN().getElementById(tile).getInt("movementCost", 2);
        }
    }

    //判断是否同海或者同陆
    private boolean ifSameLandOrSea(int id1, int id2) {
        int t1=hexagonDatas.get(id1).getBlockType();
        int t2=hexagonDatas.get(id2).getBlockType();
        if((t1==1&&t2!=1)||(t1!=1&&t2==1)){
            return false;
        }else {
            return true;
        }
    }

    //ifLoop true获取全部且包含对应边的 0全部
    //direct 0全部 1↖ 2上 3↗ 4↙ 5↓ 6↘
    public IntArray getAroundIdsById(int id, int direct, boolean ifLoop,  IntArray rsIds) {

        /*if (rsIds == null) {
            rsIds = new IntArray();
        } else if (ifClear) {
            rsIds.clear();
        }*/
        rsIds.clear();

        boolean top = false;
        boolean foot = false;
        boolean left = false;
        boolean right = false;
        //判断处于哪个边
        int y = (int) id / masterData.getWidth();
        int x = id - y * masterData.getWidth();
        int t1, t2, t3, t4, t5, t6;
        boolean ifParity = (x & 1) == 1;
        if (ifParity) {
            t1 = id - 1;
            t2 = id - masterData.getWidth();
            t3 = id + 1;
            t4 = id + masterData.getWidth() - 1;
            t5 = id + masterData.getWidth();
            t6 = id + masterData.getWidth() + 1;
        } else {
            t1 = id - masterData.getWidth() - 1;
            t2 = id - masterData.getWidth();
            t3 = id - masterData.getWidth() + 1;
            t4 = id - 1;
            t5 = id + masterData.getWidth();
            t6 = id + 1;
        }
        if (x == 0) {
            left = true;
        }
        if (x == masterData.getWidth() - 1) {
            right = true;
        }
        if (y == 0) {
            top = true;
        }
        if (y == masterData.getWidth() - 1) {
            foot = true;
        }
        if (ifLoop) {
            if (ifParity) {
                if (direct == 0 || direct == 1) {
                    rsIds.add(t1);
                }
                if (!top) {
                    if (direct == 0 || direct == 2) {
                        rsIds.add(t2);
                    }
                }
                if (direct == 0 || direct == 3) {
                    rsIds.add(t3);
                }
                if (!foot) {
                    if (direct == 0 || direct == 4) {
                        rsIds.add(t4);
                    }
                    if (direct == 0 || direct == 5) {
                        rsIds.add(t5);
                    }
                    if (direct == 0 || direct == 6) {
                        rsIds.add(t6);
                    }
                }
            } else {
                if (!top) {
                    if (direct == 0 || direct == 1) {
                        rsIds.add(t1);
                    }
                    if (direct == 0 || direct == 2) {
                        rsIds.add(t2);
                    }
                    if (direct == 0 || direct == 3) {
                        rsIds.add(t3);
                    }
                }
                if (direct == 0 || direct == 4) {
                    rsIds.add(t4);
                }
                if (!foot) {
                    if (direct == 0 || direct == 5) {
                        rsIds.add(t5);
                    }
                }
                if (direct == 0 || direct == 6) {
                    rsIds.add(t6);
                }
            }
        } else {
            if (ifParity) {
                if (!left) {
                    if (direct == 0 || direct == 1) {
                        rsIds.add(t1);
                    }
                }
                if (!top) {
                    if (direct == 0 || direct == 2) {
                        rsIds.add(t2);
                    }
                }
                if (!right) {
                    if (direct == 0 || direct == 3) {
                        rsIds.add(t3);
                    }
                }
                if (!foot && !left) {
                    if (direct == 0 || direct == 4) {
                        rsIds.add(t4);
                    }
                }
                if (!foot) {
                    if (direct == 0 || direct == 5) {
                        rsIds.add(t5);
                    }
                }
                if (!foot && !right) {
                    if (direct == 0 || direct == 6) {
                        rsIds.add(t6);
                    }
                }
            } else {
                if (!top && !left) {
                    if (direct == 0 || direct == 1) {
                        rsIds.add(t1);
                    }
                }
                if (!top) {
                    if (direct == 0 || direct == 2) {
                        rsIds.add(t2);
                    }
                }
                if (!top && !right) {
                    if (direct == 0 || direct == 3) {
                        rsIds.add(t3);
                    }
                }
                if (!left) {
                    if (direct == 0 || direct == 4) {
                        rsIds.add(t4);
                    }
                }
                if (!foot) {
                    if (direct == 0 || direct == 5) {
                        rsIds.add(t5);
                    }
                }
                if (!right) {
                    if (direct == 0 || direct == 6) {
                        rsIds.add(t6);
                    }
                }
            }

        }


        return rsIds;
    }

    //-1未知  自身0  1左上 2上 3左下 4左下 5下 6右下
    //0自己 1↖ 2上 3↗ 4↙ 5↓ 6↘
    public int getBorderIdByDirect(int id, int direct) {
        if(direct==0){
            return id;
        }

        boolean top = false;
        boolean foot = false;
        boolean left = false;
        boolean right = false;
        //判断处于哪个边
        int y = (int) id / masterData.getWidth();
        int x = id - y * masterData.getWidth();
        int t1, t2, t3, t4, t5, t6;
        boolean ifParity = (x & 1) == 1;
        if (ifParity) {
            t1 = id - 1;
            t2 = id - masterData.getWidth();
            t3 = id + 1;
            t4 = id + masterData.getWidth() - 1;
            t5 = id + masterData.getWidth();
            t6 = id + masterData.getWidth() + 1;
        } else {
            t1 = id - masterData.getWidth() - 1;
            t2 = id - masterData.getWidth();
            t3 = id - masterData.getWidth() + 1;
            t4 = id - 1;
            t5 = id + masterData.getWidth();
            t6 = id + 1;
        }
        if (x == 0) {
            left = true;
        }
        if (x == masterData.getWidth() - 1) {
            right = true;
        }
        if (y == 0) {
            top = true;
        }
        if (y == masterData.getWidth() - 1) {
            foot = true;
        }
        if (ifLoop) {
            if (ifParity) {
                if ( direct == 1) {
                    return(t1);
                }
                if (!top) {
                    if ( direct == 2) {
                        return(t2);
                    }
                }
                if ( direct == 3) {
                    return(t3);
                }
                if (!foot) {
                    if ( direct == 4) {
                        return(t4);
                    }
                    if ( direct == 5) {
                        return(t5);
                    }
                    if ( direct == 6) {
                        return(t6);
                    }
                }
            } else {
                if (!top) {
                    if ( direct == 1) {
                        return(t1);
                    }
                    if ( direct == 2) {
                        return(t2);
                    }
                    if ( direct == 3) {
                        return(t3);
                    }
                }
                if ( direct == 4) {
                    return(t4);
                }
                if (!foot) {
                    if ( direct == 5) {
                        return(t5);
                    }
                }
                if ( direct == 6) {
                    return(t6);
                }
            }
        } else {
            if (ifParity) {
                if (!left) {
                    if ( direct == 1) {
                        return(t1);
                    }
                }
                if (!top) {
                    if ( direct == 2) {
                        return(t2);
                    }
                }
                if (!right) {
                    if ( direct == 3) {
                        return(t3);
                    }
                }
                if (!foot && !left) {
                    if ( direct == 4) {
                        return(t4);
                    }
                }
                if (!foot) {
                    if ( direct == 5) {
                        return(t5);
                    }
                }
                if (!foot && !right) {
                    if ( direct == 6) {
                        return(t6);
                    }
                }
            } else {
                if (!top && !left) {
                    if ( direct == 1) {
                        return(t1);
                    }
                }
                if (!top) {
                    if ( direct == 2) {
                        return(t2);
                    }
                }
                if (!top && !right) {
                    if ( direct == 3) {
                        return(t3);
                    }
                }
                if (!left) {
                    if ( direct == 4) {
                        return(t4);
                    }
                }
                if (!foot) {
                    if ( direct == 5) {
                        return(t5);
                    }
                }
                if (!right) {
                    if ( direct == 6) {
                        return t6;
                    }
                }
            }

        }


        return -1;
    }


    public int getDistanceForMap(int hexagonA, int hexagonB) {
        if (hexagonA != hexagonB && hexagonA > 0 && hexagonB > 0) {
            int width = masterData.getWidth();
            // int y1 = (int) hexagonA / width;
            // int x1 = hexagonA - y1 * width;
            // int y2 = (int) hexagonB / width;
            // int x2 = hexagonB - y2 * width;

            int y1 =GameMap.getHY(hexagonA,width);
            int x1 =GameMap.getHX(hexagonA,width);
            int y2 =GameMap.getHY(hexagonB,width);
            int x2 =GameMap.getHX(hexagonB,width);
            int midX = width / 2;

            if (ifLoop) {
                if (x1 > midX && x2 < midX) {// x2  mid x1
                    if (width - x1 + x2 > Math.abs(x1 - x2)) {
                        return GameUtil.getDistance(x1, y1, x2, y2);
                    } else {
                        return GameUtil.getDistance(width - x1 + x2 + x2, y1, x2, y2);
                    }
                } else if (x2 > midX && x1 < midX) {// x1  mid  x2
                    if (width - x2 + x1 > Math.abs(x1 - x2)) {
                        return GameUtil.getDistance(x1, y1, x2, y2);
                    } else {
                        return GameUtil.getDistance(x1, y1, width - x2 + x1 + x1, y2);
                    }
                } else {
                    return GameUtil.getDistance(x1, y1, x2, y2);
                }
            } else {
                return GameUtil.getDistance(x1, y1, x2, y2);
            }

        }
        return 0;
    }



    //有可占领建筑
    public boolean canRegionOccupation(int hexagon, int li) {
        BuildData b=getBuildDataByRegion(hexagon);
        // int li1=getLegionIndexByHexagon(hexagon);
        if (b!=null &&b.getBuildType()!=2&& b.getCityHpNow()==0) {
            /*if(ifEffective(4)&&foreignDatas!=null&&foreignDatas.size>0){
                ForeignData f=getForeignData(b.getLegionIndex(),li);
                if(f.getForeignType()<1 &&getForeignDegree(b.getLegionIndex(),li)!=1){
                    return true;
                }
            }else{
                if(getForeignDegree(b.getLegionIndex(),li)!=1){
                    return true;
                }
            }*/
            if(getForeignDegree(b.getLegionIndex(),li)!=1){
                return true;
            }
            /*if(ifCanAtk(li,b.getLegionIndex())|| (ifEffective(6)&&roundState==0&&li==masterData.getPlayerLegionIndex())   ){
                return true;
            }*/
        }
        return false;
    }

    public void initLegionMode(){
        Iterator<IntMap.Entry<ArmyData>> it = armyHDatas.iterator();
        while (it.hasNext()) {
            IntMap.Entry<ArmyData> c = it.next();
            ArmyData armyData=c.value;
            if (armyData == null||armyData.getArmyHpNow()<=0) {
                continue;
            }
            armyData.setLegionIndex(getLegionIndexByRegion(armyData.getHexagonIndex()));
            armyData.replaceSkill();
        }
    }


    //返回是否创建单位
    public void army_Move(ArmyData army, int moveHexagon) {
        if(army.getArmyType()==6&&buildRDatas.containsKey(moveHexagon)){//防御物移动的bug
            int s=0;
            return;
        }
        boolean ifTargetHexagonIsSea=ifSea(moveHexagon);
        if((army.getArmyType()==4||army.getArmyType()==8)&&!ifTargetHexagonIsSea){//寻找海军移动到陆地的bug
            int s=0;
            return;
        }
        ForeignData fg=null;
      //  boolean ifChangeModel=army.potionIsSea()&&ifTargetHexagonIsSea;
        BuildData build =getBuildDataByRegion(moveHexagon);
        boolean ifOccupy=false;
        if(masterData.getPlayerMode()==2){
            BuildData cb=getBuildDataByRegion(getRegionId(moveHexagon));
            //目标区域有驻军且非友军,为什么会在军团进入?
            boolean ifHaveLegionAllyUnit=cb.ifHaveLegionAllyUnit(true);
            int fd=getForeignDegree(cb.getLegionIndex(),army.getLegionIndex());
            /*if(ifHaveLegionAllyUnit&&fd!=1){
                int s=0;
            }*/
            if(!ifHaveLegionAllyUnit&&fd!=1  ){
                cb.setLegionIndex(army.getLegionIndex());
                ifOccupy=true;
            }
        }else {//在非军团模式,如果是非玩家进入一个城市等级是0或hp上限是的区域,如果该区域无驻兵,直接占领
            BuildData cb=getBuildDataByRegion(getRegionId(moveHexagon));
            if((cb.getCityLvNow()==0||cb.getCityHpNow()==0||cb.getCityHpMax()==0|| (ifSystemEffective(16)&&spiritMap!=null&&spiritMap.containsKey(41)))&&!cb.ifHaveLegionAllyUnit(true)&&getForeignDegree(cb.getLegionIndex(),army.getLegionIndex())!=1){
                // cb.setLegionIndex(army.getLegionIndex());
                fg=getForeignData(army.getLegionIndex(),cb.getLegionIndex());
                if(fg!=null&&fg.getForeignType()>0){

                }else{
                    build=cb;
                }
            }else if(!army.isPlayer()&& (cb.isRell()|| (cb.getLegionIndex()==0&&cb.getBuildType()!=2&&!cb.ifSea()) )&&cb.getLegionIndex()!=army.getLegionIndex()&& !ifAllyByLi(cb.getLegionIndex(),army.getLegionIndex()) ){//如果城市处于叛乱状态,且势力不同不为盟友,则可以接收叛乱城市
                setRegionAllRebellLegionIndex(cb.getRegionId(),army.getLegionIndex());
            }
        }
        if(army.isRound()){
            army.resetArmyForamtion(0,moveHexagon);
        }


        ArmyData tA=getArmyDataByHexagon(moveHexagon);
        if(tA!=null&&!tA.equals(army)){
            army_exchangePotion(army,tA);
            return;
        }
        army.setStandyRound(0);
        Fb2Map.MapHexagon sh=army.getHexagonData();
        Fb2Map.MapHexagon th=getHexagonData(moveHexagon);
        // Gdx.app.log("army_move",army.getArmyIndex()+":"+army.getHexagonIndex()+":"+moveHexagon);
        /**/
        if(army.getHexagonIndex()!=moveHexagon){
            army.setIfMove(1);
        }
        BuildData sb=army.getHBuildData();
        int oldRegion=army.getRegionId();
        if(sb!=null){
            sb.updActor();
        }

        //boolean ifP=ifAllyPlayerByLi(army.getBuildPolicy());
        setDirect(army, moveHexagon);
        LegionData al=army.getLegionData().getSuzerainLegionData();



        if(ifSystemEffective(2)&&getAge()>0&&army.getArmyType()!=1&&army.isPlayer()){
            army.getLegionData().addOil(-army.getUnitGroup());
            if(game.sMapScreen!=null){
                game.sMapScreen.updResourceForPlayer();
            }
        }

        boolean setSuzerain=false;
        boolean ifSurrend=false;
        //如果移动处是建筑,则不改变归属
        if (!buildRDatas.containsKey(army.getHexagonIndex())) {
            sh.setLegionIndexValue(-1);
        }
        //setFogTIA3(army.getHexagonIndex(), range, army.getBuildPolicy());



        int sli=army.getLegionData().getSuzerainLi();
        int favor;



        LegionData bl=null;
        if(build!=null){//可以直接占领的
            bl=build.getLegionData();
            fg=getForeignData(al.getLegionIndex(),bl.getLegionIndex());
        }else{
            fg=getForeignData(al.getLegionIndex(),army.getLegionIndex());
        }

        if(masterData.getPlayerMode()==0){
            favor=fg.getFavorValue();
        }else {
            favor=100;
        }
        //占领
        if (bl!=null&&build.getLegionIndex()!=army.getLegionIndex()) {



            //如果外交不可用,但是有外交数据的情况下,设置外交好感度为0
         /*  if(fg!=null&&fg.isPlayer()&&!ifEffective(4)){
               fg.setFavorValue(0);
           }*/

            if(ifSystemEffective(0)){
                build.addCityStability(ComUtil.getRandom(-20-getAge()*10,20+getAge()*10),game.resGameConfig.cityStabilityChangeValueMax);
            }

            if(build.getBuildType()!=2){

                if(chiefData!=null){
                    if(bl.isPlayer()){
                        chiefData.addWarSupport(-bl.getCityLvMax());
                    }else if(al.isPlayer()){
                        chiefData.addWarSupport(1);
                    }
                }
                if(!ifNeedDrawViewMap&&roundState==0){
                    ifNeedDrawViewMap=true;
                }
                if(build.getLegionIndex()!=0&&army.isPlayer()&&build.getLegionData().getInternIndex()==0){
                    build.getLegionData().setInternIndex(build.getLegionData().getLegionIndex());
                }

                if(build.isCapital()){
                    //首都被占领,则所在部队产生怯战或死战的念头,士气在-20到10之间随机改变
                    build.changeAllArmyMorale(ComUtil.getRandom(-40,10));
                    if(masterData.getPlayerMode()==0){
                        if(ComUtil.ifGet(favor)){
                            setSuzerain=true;
                        }
                        if(army.isPlayer()){
                            if (ifSystemEffective(16)&&!setSuzerain&&ifHaveSpirit(7) && ifTriggerSpirit(7)) {
                                setSuzerain = true;
                            }
                            //占领敌对国首都,有{0}%机率让己方比对方低的军团科技升1级
                            if(ifHaveSpirit(27)){
                                legion_RobTech(al,bl,getSpiritValue(27));
                            }
                            if(ifSystemEffective(16)&&bl.getSpiritId()!=-1){
                                addSpiritId(bl.getSpiritId(),true);
                            }
                        }
                    }
                    if(al.getInternIndex()>0){
                        ifSurrend=true;
                    }
                }
                int pfd=getForeignDegree(build.getLegionIndex(),masterData.playerLegionIndex);
                if(ifSystemEffective(4)&&getPlayerAmbition()<100&&(bl.isCoreAreaRegion(build.getRegionId())||build.isCapital())&&!bl.ifRequestHelp&&pfd!=-1&&!al.ifPlayerAlly()&&(bl.getAllArmySumNum()<al.getAllArmySumNum()||bl.varRegionCount<al.varRegionCount)){
                    //当有中立国领土遭到入侵时将会有{0}%几率寻找玩家来支持
                    LegionData pl=getPlayerLegionData();
                    if(bl.getAllArmySumNum()<pl.getAllArmySumNum()||bl.varRegionCount<pl.varRegionCount){
                        if(bl.getSuzerainLi()==0&&(bl.getAllArmySumNum()*2<pl.getAllArmySumNum()||bl.varRegionCount*2<pl.varRegionCount)){//附属
                            addPromptData(game.gameMethod.getPromptStrT(40,0),game.gameMethod.getPromptStrT(40,1,bl.legionName),"",6,bl.getLegionIndex(),masterData.playerLegionIndex,-1,-1,false);
                        }else if(ifLegionCanAlly(pl,bl)&&!bl.isPlayerCamp()&&ComUtil.ifGet(getForeignData(build.getLegionIndex()).getFavorValue())){//加盟请求
                            addPromptData(game.gameMethod.getPromptStrT(39,0),game.gameMethod.getPromptStrT(39,1,bl.legionName),"",5,bl.getLegionIndex(),masterData.playerLegionIndex,-1,-1,false);
                        }else{//行为支持
                            addPromptData(game.gameMethod.getPromptStrT(38,0),game.gameMethod.getPromptStrT(38,1,bl.legionName,al.legionName),"",4,bl.getLegionIndex(),army.getLegionIndex(),-1,-1,false);
                        }
                        bl.ifRequestHelp=true;
                    }
                }

                if(army.isPlayer()) {
                    //玩家不宣而占
                    int fd=getForeignDegree(bl.getLegionIndex(),al.getLegionIndex());
                    ForeignData f=getForeignData(bl.getLegionIndex(),al.getLegionIndex());
                    if(army.isPlayer()&&chiefData!=null){
                        if(fd==1){
                            chiefData.reputation+=30;
                        }else if(fd==0){
                            chiefData.reputation+=5;
                        }
                    }
                    if(f!=null){
                        if(f.getForeignType()!=-1&&game.sMapScreen!=null){
                            ifNeedDrawViewMap=true;
                        }
                        if(f.isAlly()){
                            legion_separate(f.getSourceLegionIndex(),f.getTargetLegionIndex(),-game.resGameConfig.attackAllyReduceFavor);
                        }
                        f.reduceFavor(ComUtil.getRandom(20, 40));
                        if(f.getForeignType()!=-1&&bl.ifEffective(4)){
                            if(al.isPlayer()){
                                if(bl.getLegionIndex()>0){
                                    addPromptData(game.gameMethod.getPromptStr(105, 0),
                                            game.gameMethod.getPromptStr(105, 1, build.srName,bl.legionName),
                                            game.gameMethod.getPromptStr(105, 2,bl.legionName,f.getFavorValue()), bl.getLegionIndex(), al.getLegionIndex(),true);
                                }
                            }else if(bl.isPlayer()&&al.getLegionIndex()>0){
                                addPromptData(game.gameMethod.getPromptStr(106, 0),
                                        game.gameMethod.getPromptStr(106, 1, build.srName,al.legionName),
                                        game.gameMethod.getPromptStr(106, 2,al.legionName,f.getFavorValue()), bl.getLegionIndex(), al.getLegionIndex(),false);
                            }
                        }
                        if(f.getFavorValue()<60&&f.getForeignType()!=-1){
                            f.setForeignType(-1);
                            if(al.isPlayer()&&bl.getLegionIndex()>0){
                                GeneralData g=getMaxRankGeneralData(bl.getLegionIndex(),true);
                                if(g!=null){
                                    // int countryId,GeneralData g,int dialogueIdType,String value
                                    addDialogueData(bl.getCountryId(),g,17,"",true);
                                    legion_intensifyUnity(bl,(masterData.getGameDifficulty()+bl.getLevel())/2+1);
                                }
                            }
                        }

                    }
                    if(masterData.ifChief==1&&chiefData!=null){
                        chiefData.addLiteracy(-build.getCityLvNow());
                    }
                    if(ifHaveSpirit(2)){
                        //占领任意非敌对国领土将提升所有盟国{0}关系度并降低所有非盟国{0}关系度
                        if (getForeignDegree(build.getLegionIndex(), al.getLegionIndex())!=-1) {
                            legion_addFavorAllyLegionAndReduceNotAllyLegionFavor(al, getSpiritValue(2));
                        }
                    }
                    if(ifHaveSpirit(9)){
                        //占领一片领土立即获得{0}%的可提供资源并随机降低该区域{0}次的设施等级
                        int v=getSpiritValue(9);
                        build.robResource(getPlayerLegionData(),v);
                        build.randomReduceTech(v,0);
                    }

                    //ai 强制动员
                    //争霸模式不启用此作弊
                    //ai作弊触发条件为被玩家攻击,且兵种数量小于玩家的一半,且盟友势力小于玩家
                    if(bl.getInternIndex()!=0&&masterData.getPlayerMode()!=1&&!bl.ifPlayerAlly()&&bl.ifAiCheatChance()&&bl.isTerritoryRegion(build.getRegionId())&&bl.getAllArmySumNum()*2<al.getAllArmySumNum()&&bl.getAllForce()<al.getAllForce()){
                        // int li,int targetLi,int mobilizationType,boolean ifForce
                        legion_mobilization(bl.getLegionIndex(),al.getLegionIndex(),-3,false);
                    }
                }

                if(build.isPlayer()){
                    if(masterData.ifChief==1&&chiefData!=null){
                        chiefData.addLiteracy(-build.getCityLvNow()*2);
                    }
                    if(ifHaveSpirit(12)){
                        //当有区域被敌国占领时,将会获得额外的资源援助
                        build.robResource(bl,getSpiritValue(12));
                    }
                    if(ifHaveSpirit(19)){
                        //当丢失一片领土时,该区域上所有己方单位士气重置为{0}
                        build.resetAllUnitMorale(getSpiritValue(19));
                    }
                }
                int v=getChiefSpecialEffect(20);
                //20=占领新的区域时国家稳定度增加,但是失去区域时国家稳定度也会减少
                if(masterData.ifChief==1&&chiefData!=null&&v>=0){
                    if(army.isPlayer()){
                        if(!build.isPlayer()&&!build.ifSea()){
                            getPlayerLegionData().addStability(v);
                        }
                    }else if(build.isPlayer()&&!build.ifSea()){
                        getPlayerLegionData().addStability(-v);
                    }
                }


                if(build.isCapital()){//占领首都
                    if(army.canCreateRDialogue()&&bl.getInternIndex()!=0){
                        addDialogueData(army,8,bl.legionName);
                    }
                    al.addStability(ComUtil.getRandom(1,5));
                    if(masterData.getPlayerMode()!=1){
                        if (!resetCapital(bl)) {
                            legion_SurrenderTIA3(bl.getLegionIndex(), army.getLegionIndex());
                        }
                    }
                    bl.setPower(bl.getPower()/2);
                    al.setPower(al.getPower()+bl.getPower());
                }else {//将领占领建筑
                    addDialogueData(army,5,"");
                    bl.setPower(bl.getPower()-build.getCityLvNow());
                    al.setPower(al.getPower()+build.getCityLvNow());
                }
                //敌将占领我方领土
                if(build.isPlayer()&&bl.isTerritoryRegion(build.getRegionId())){
                    GeneralData g=getMaxRankGeneralDataByRegion(build,al.getLegionIndex(),true);
                    if(g==null){
                        g=getMaxRankGeneralData(al.getLegionIndex(),true);
                    }
                    if(g!=null){//int countryId,GeneralData g,int dialogueIdType,String value
                        addDialogueData(al.countryId,g,18,al.legionName,true);
                    }
                }
                //敌将被占领
                if(al.isPlayer()){
                    GeneralData g=getMaxRankGeneralDataByRegion(build,bl.getLegionIndex(),true);
                    if(g==null){
                        g=getMaxRankGeneralData(bl.getLegionIndex(),true);
                    }
                    if(g!=null){//int countryId,GeneralData g,int dialogueIdType,String value
                        if(bl.isCoreAreaRegion(build.getRegionId())){//核心区域
                            addDialogueData(bl.countryId,g,19,bl.legionName,true);
                        }else{//警告
                            addDialogueData(bl.countryId,g,20,"",true);
                        }
                    }
                }


                if(masterData.playerMode!=2){
                    //如果build的原归属国是玩家或其盟友,则让入侵国快速调兵或在周围快速生成兵
                    if((build.isPlayerAlly()||build.isPlayerAroundRegion())&&al.ifAiCheatChance()){
                        ai_unitBalanceByPlayerOccupTIA1A2(build.getRegionId(),al,army);
                        if(al.ifAiCheatChance()){
                            ai_unitTeleportToAroundRegion(build.getRegionId(),army.getLegionIndex(),getRoundProgress()>50);
                        }
                    }else if(roundState==0&&al.isPlayer()&&build.getLegionIndex()>0&&ComUtil.ifGet(build.getSumLv())){//如果是玩家占领的
                        ai_unitTeleportToAroundRegion(build.getRegionId(),build.getLegionIndex(),getRoundProgress()>50);
                    }
                }

                if(masterData.playerMode==0){
                    if(army.getLegionIndex()==0){
                        army.setTargetRegion(-1);
                    }else {
                        if(build.getLegionIndex()!=army.getLegionIndex()){
                            ifOccupy=true;
                        }
                        build.setLegionIndex(army.getLegionIndex());
                    }
                    //如果是起义军,则进入城市会使周边区域一起叛变
                    //占领一片本土区域时,有{0}%几率使该区域的所有敌军直接投降
                    if(army.getLegionIndex()==0&&build.isPlayer()){
                        armyToSurrenderForRegion(build.getRegionId(),army.getLegionIndex());
                    }
                    if(army.isPlayer()){
                        if(ifHaveSpirit(24)){
                            //占领一片领土立刻恢复这片区域上所有己方单位的{0}%生命值和{0}士气
                            build.restoreArmyState(getSpiritValue(24));
                        }
                        //在占领本土时,所有部队重置状态
                        if(getPlayerLegionData().isTerritoryRegion(build.getRegionId())){
                            if(ifTriggerSpirit(25)){
                                armyToSurrenderForRegion(build.getRegionId(),army.getLegionIndex());
                            }
                            if(ifHaveSpirit(26)){
                                build.resetAllUnitState();
                            }
                        }
                    }
                }else {
                    if(build.getLegionIndex()!=army.getLegionIndex()){
                        ifOccupy=true;
                    }
                    build.setLegionIndex(army.getLegionIndex());
                }
                if(army.isPlayerSuz()&&getChiefSpecialEffect(10)>=0){
                    build.setInfluenceLi(masterData.getPlayerLegionIndex());
                }else{
                    build.setInfluenceLi(0);
                }

                //占领一个区域的大部分获得该区域的大部分领土
                if(masterData.playerMode==0){
                    if(checkSROccupy(build.getRegionId())&&getAge()==0&&al.getInternIndex()>0&&bl.getInternIndex()>0){//某一区域被全部占领
                        if(fg.getDiplomaticAttitude()!=3&&bl.isCoreAreaRegion(build.getRegionId())&&fg.getForeignType()==-1&&ifBegPeace(bl,al)&& ifAcceptBegPeace(bl,al)){
                            if(al.isPlayer()){//ai向玩家求和  String title,String content,String effect,int type,int li,int li2,int value,int value2
                                if(bl.varRegionCount>0&&ComUtil.ifGet(100-bl.getStability())) {
                                    addPromptData(game.gameMethod.getPromptStr(89, 0, bl.legionName),
                                            game.gameMethod.getPromptStr(89, 1, bl.legionName),
                                            game.gameMethod.getPromptStr(89, 2), 28, bl.getLegionIndex(), al.getLegionIndex(), -1, -1,false);
                                }
                            }else if(bl.isPlayer()){//询问玩家是否向xx求和
                                addPromptData(game.gameMethod.getPromptStr(90, 0, al.legionName),
                                        game.gameMethod.getPromptStr(90, 1, al.legionName),
                                        game.gameMethod.getPromptStr(90, 2),28,bl.getLegionIndex(),al.getLegionIndex(),-1,-1,false);
                            }else{
                                if(bl.varRegionCount>0&&ComUtil.ifGet(100-bl.getStability())) {
                                    legion_BegPeace(bl, al);
                                }
                            }
                        }
                    }
                }

                //检查周围是否有孤立无援地块
                ConnectData c=getConnectData(build.getRegionId());
                BuildData b;
                if(c!=null&&build.getBuildType()!=2){
                    for(int i=1,iMax=c.getRegionConnectCount();i<=iMax;i++){
                        //r=c[i];
                        b=getBuildDataByRegion(c.getConnectValue(i,0));
                        if(b!=null&&b.ifIsolate()){
                            b.changeAllArmyMorale(ComUtil.getRandom(-15,5));
                        }
                    }
                }
                build.randomReduceTech( ComUtil.getRandom(1, getAge()), 1);
                checkTask(true, army.getLegionIndex(), 5, 1);
                checkTask(true, army.getLegionIndex(), 21, 1);
            }else{
                if(masterData.playerMode==0){
                    if(army.getLegionIndex()==0){
                        army.setTargetRegion(-1);
                    }else {
                        if(build.getLegionIndex()!=army.getLegionIndex()){
                            ifOccupy=true;
                        }
                        build.setLegionIndex(army.getLegionIndex());
                    }
                }else {
                    if(build.getLegionIndex()!=army.getLegionIndex()){
                        ifOccupy=true;
                    }
                    build.setLegionIndex(army.getLegionIndex());
                }
            }
            //addUpdColorRegion(build.getRegionId());
            setFogByRegionTIA3(build.getRegionId());
            lastUnitHexagon=-1;
        }else {
            if((roundState==0||(roundState==4&&army.isPlayer()))&&army.playerCanCommand()){
                lastUnitHexagon=army.hexagonIndex;
            }else {
                lastUnitHexagon=-1;
            }
        }
        armyHDatas.remove(army.hexagonIndex);
        armyHDatas.put(moveHexagon, army);
        army.setHexagonIndex(moveHexagon);
        army.setRegionId(getRegionId(moveHexagon));
        if(oldRegion!=army.getRegionId()){
            updBuildActorByRegion(oldRegion);
            updBuildActorByRegion(army.getRegionId());
        }else if(build!=null){
            build.updActor();
        }
        if (army.getTargetRegion() == moveHexagon) {
            army.setTargetRegion(-1);
        }
        //setFogTIA3(army.getHexagonIndex(), range, army.getBuildPolicy());
        /*if(army.getBuildPolicy()==masterData.playerLegionIndex){
            army.setFogInSearchTIA3(true);
        }else*/
        // setArmyMorale(army);
        int aroundCount = getAroundUnitCountIA1(army,2);
        if (aroundCount > 2) {
            army.setArmyMoraleChange(-ComUtil.getRandom( game.resGameConfig.unitMoraleChangeValueMax/2, game.resGameConfig.unitMoraleChangeValueMax *(aroundCount-1)));
        }

        if(masterData.getPlayerMode()==0&&setSuzerain&&al!=null){
            legion_responsive(bl,al,roundState==0||((al.isPlayer()||bl.isPlayer())&&roundState==4));
            army.setLegionIndex(al.getLegionIndex());
        }else{
            th.setLegionIndexValue(army.getLegionIndex());
        }
        if(army.isPlayerAlly()){
            setFogInSearchTIA3(army.getHexagonIndex(),army.getLegionIndex(),army.getSearchRange(),true,true);//int hexagonIndex,int li,int searchRange,boolean ifCreateActor
        }
        FortData f=getFortDataByHexagon(army.getHexagonIndex());
        if(f!=null){
            //地雷
            if(f.getFortId()==5005&&!ifAllyByLi(f.getLegionIndex(),army.getLegionIndex())){
                int damage=army.getArmyHpMax()* ComUtil.limitValue((f.getFortLv()+1)*game.resGameConfig.dropDamageRateEachFortLv,5,70);
                //扫雷
                if(army.ifHaveFeature(12)){
                    damage= ComUtil.limitValue( (damage*  (100-ComUtil.limitValue(army.getFeatureEffect(12),0,100) )/100 ),0,damage);
                }
                int minD=Math.min(army.getArmyLife()/10+1,10);
                if(damage<minD){
                    damage=minD;
                }
                if(army.playerCanCommand()){
                    effectStage.drawUnitHp(army.getHexagonIndex(),-damage,2f);
                }
                if(army.injured(damage,army.getHexagonIndex())){
                    army_Death(army.getHexagonIndex(),(roundState==0||(roundState==4&&army.isPlayer())));
                }
                f.setFortRound(0);
            }
            if(f.getFortRound()<=0){
                fort_remove(f.getHexagonIndex());
            }else if(f.fortActor!=null){
                f.fortActor.update();
            }
        }
        if(ifOccupy&&bl!=null){
            if(bl.isCoreAreaRegion(build.getRegionId())){
                bl.reduceStability(2*ComUtil.getRandom(1,bl.getCityLvMax()));
            }else if(bl.getStability()>game.resGameConfig.cityStabilityChangeValueMax&&bl.isMajorAreaRegion(build.getRegionId())){
                bl.reduceStability(ComUtil.getRandom(1,bl.getCityLvMax()));
            }
        }
        if(army.armyActor!=null){
            army.armyActor.actorMoveHexagon(moveHexagon,ifOccupy);
            army.armyActor.update();
            /*if(ifChangeModel){
                army.armyActor.switchArmyModel();
            }*/
        }
        sh.armyData=null;
        th.armyData=army;


        //如果离开,则归为中立所属
        if(masterData.getPlayerMode()!=2&&sh.buildData!=null&&sh.buildData.getBuildType()==2&&sh.armyData==null){
            sh.setLegionIndexValue(0);
            sh.buildData.setLegionIndex(0);
        }

        if(ifSurrend){
            if(ifSystemEffective(4)){
                if(!setSuzerain){
                    if(ComUtil.ifGet(100-bl.getStability())){
                        legion_SurrenderTIA3(bl.getLegionIndex(),al.getLegionIndex());
                    }else  if(army.isPlayer()){//ai向玩家求和  String title,String content,String effect,int type,int li,int li2,int value,int value2
                        if(bl.varRegionCount>0&&ComUtil.ifGet(100-bl.getStability())){
                            addPromptData(game.gameMethod.getPromptStr(89, 0, bl.legionName),
                                    game.gameMethod.getPromptStr(89, 1, bl.legionName),
                                    game.gameMethod.getPromptStr(89, 2),28,bl.getLegionIndex(),al.getLegionIndex(),-1,-1,true);
                        }
                    }else if(bl.isPlayer()){//询问玩家是否向xx求和
                        addPromptData(game.gameMethod.getPromptStr(90, 0, al.legionName),
                                game.gameMethod.getPromptStr(90, 1, al.legionName),
                                game.gameMethod.getPromptStr(90, 2),28,bl.getLegionIndex(),al.getLegionIndex(),-1,-1,false);
                    }else{
                        if(bl.varRegionCount>0&&ComUtil.ifGet(100-bl.getStability())){
                            legion_BegPeace(bl,al);
                        }
                    }
                }
            }else if(masterData.getBtlType()==0){//征服中直接获得其领土
                legion_SurrenderTIA3(bl.getLegionIndex(),al.getLegionIndex());
            }
        }
        //army.addArmyRound(1);
    }


    //求和概率 begLegion 想要求和的国家  targetLegion 强大的国家
    private boolean ifBegPeace(LegionData begLegion, LegionData targetLegion) {
        if(ComUtil.ifGet((targetLegion.getAllArmySumNum()+1)*100/(targetLegion.getAllArmySumNum()+begLegion.getAllArmySumNum()+1))){
            return true;
        }
        return false;
    }

    //是否接受求和
    public boolean ifAcceptBegPeace(LegionData begLegion, LegionData AcceptLegion) {
        if(ComUtil.ifGet((begLegion.getAllForce()+1)*100/(AcceptLegion.getAllForce()+begLegion.getAllForce()+1))){
            return true;
        }
        return false;
    }

    //判断是否瞬间移动
   /* private boolean ifArmyTeleport(ArmyData army, int moveHexagon) {
      if(ifRegionAdjacent(army.getHexagonIndex(),moveHexagon)){
            return false;
      }
        return true;
    }*/
    //两个region是否相邻
    private boolean ifRegionAdjacent(int hexagonIndex1, int hexagonIndex2) {
        int region1=getRegionId(hexagonIndex1);
        int region2=getRegionId(hexagonIndex2);
        if(region1==region2){
            return true;
        }
        ConnectData c=getConnectData(region1);
        if(c!=null&&c.contain(region2)){
            return true;
        }
        return false;
    }

    private void updBuildActorByRegion(int region) {
        BuildData b=getBuildDataByRegion(region);
        if(b!=null&&b.buildActor!=null){
            b.buildActor.update();
        }
    }

    //对所有国家好感度+value
    private void legion_addFavorAllLegion(LegionData l, int favor) {
        if(foreignDatas==null||foreignDatas.size==0){return;}
        // ForeignData f1=getForeignData(7,28);
        ForeignData f;int li=l.getLegionIndex();
        for(int i=0,iMax=legionDatas.size;i<iMax;i++){
            f=getForeignData(li,i);
            //Gdx.app.log("addAllFavor1",li+":"+i+":"+f.getFavor()+":"+favor);
            f.addFavor(favor);
            //Gdx.app.log("addAllFavor2",li+":"+i+":"+f.getFavor());
        }
    }

    //给同盟加对应好感度,给非同盟减对应好感度
    private void legion_addFavorAllyLegionAndReduceNotAllyLegionFavor(LegionData l,int favor) {
        if(foreignDatas==null||foreignDatas.size==0){return;}
        ForeignData f;int li=l.getLegionIndex();
        for(int i=0,iMax=legionDatas.size;i<iMax;i++){
            f=getForeignData(li,i);
            if(getForeignDegree(li,i)==1){
                f.addFavor(favor);
            }else{
                f.addFavor(-favor);
            }
        }
    }


    //al抢劫bl技术,al的所有比bl低科技(除卡库,奇观点外)的都有一定几率升级
    private void legion_RobTech(LegionData al, LegionData bl,int chance) {
        //城市可提升等级
        if(ComUtil.ifGet(chance)&&al.getCityLvMax()<bl.getCityLvMax()){al.updCityLvMax();}
        //工业可提升等级
        if(ComUtil.ifGet(chance)&&al.getIndustLvMax()<bl.getIndustLvMax()){al.updIndustLvMax();}
        //研究可提升等级
        if(ComUtil.ifGet(chance)&&al.getTechLvMax()<bl.getTechLvMax()){al.updTechLvMax();}
        //能源可提升等级
        if(ComUtil.ifGet(chance)&&al.getEnergyLvMax()<bl.getEnergyLvMax()){al.updEnergyLvMax();}
        //交通可提升等级
        if(ComUtil.ifGet(chance)&&al.getTransportLvMax()<bl.getTransportLvMax()){al.updTransportLvMax();}
        //建造士兵军衔上限
        if(ComUtil.ifGet(chance)&&al.getInfantryLvMax()<bl.getInfantryLvMax()){al.updInfantryLvMax();}
        //建造炮兵军衔上限
        if(ComUtil.ifGet(chance)&&al.getCannonLvMax()<bl.getCannonLvMax()){al.updCannonLvMax();}
        //建造坦克军衔上限
        if(ComUtil.ifGet(chance)&&al.getTankLvMax()<bl.getTankLvMax()){al.updTankLvMax();}
        //建造要塞军衔上限
        if(ComUtil.ifGet(chance)&&al.getFortLvMax()<bl.getFortLvMax()){al.updFortLvMax();}
        //建造海军军衔上限
        if(ComUtil.ifGet(chance)&&al.getNavyLvMax()<bl.getNavyLvMax()){al.updNavyLvMax();}
        //建造空军军衔上限
        if(ComUtil.ifGet(chance)&&al.getAirLvMax()<bl.getAirLvMax()){al.updAirLvMax();}
        //城市升级补给上限
        if(ComUtil.ifGet(chance)&&al.getSupplyLvMax()<bl.getSupplyLvMax()){al.updSupplyLvMax();}
        //城市城防升级上限
        if(ComUtil.ifGet(chance)&&al.getDefenceLvMax()<bl.getDefenceLvMax()){al.updDefenceLvMax();}
        //城市导弹升级上限
        if(ComUtil.ifGet(chance)&&al.getMissileLvMax()<bl.getMissileLvMax()){al.updMissileLvMax();}
        //城市超武升级上限
        if(ComUtil.ifGet(chance)&&al.getNuclearLvMax()<bl.getNuclearLvMax()){al.updNuclearLvMax();}
        //城市贸易科技上限
        if(ComUtil.ifGet(chance)&&al.getTradeLvMax()<bl.getTradeLvMax()){al.updTradeLvMax();}
        //城市贸易规模上限
        if(ComUtil.ifGet(chance)&&al.getFinancialLvMax()<bl.getFinancialLvMax()){al.updFinancialLvMax();}
        //城市文化科技上限
        if(ComUtil.ifGet(chance)&&al.getCultureLvMax()<bl.getCultureLvMax()){al.updCultureLvMax();}
        /*//奇观
        if(al.<bl.){al.updSpaceLvNow();
        //步兵卡库
        if(ComUtil.ifGet(chance)&&al.getInf<bl.()){al.updInfantryCardMax();
        //装甲卡库
        if(ComUtil.ifGet(chance)&&al.<bl.()){al.updArmorCardMax();
        //火炮卡库
        if(ComUtil.ifGet(chance)&&al.<bl.()){al.updArtilleryCardMax();
        //海军卡库
        if(ComUtil.ifGet(chance)&&al.<bl.()){al.updNavyCardMax();
        //空军卡库
        if(ComUtil.ifGet(chance)&&al.<bl.()){al.updAirCardMax();
        //超武卡库
        if(ComUtil.ifGet(chance)&&al.<bl.()){al.updNuclearCardMax();
        //导弹卡库
        if(ComUtil.ifGet(chance)&&al.<bl.()){al.updMissileCardMax();
        //潜艇卡库
        if(ComUtil.ifGet(chance)&&al.<bl.()){al.updSubmarineCardMax();
        //战术卡库
        if(ComUtil.ifGet(chance)&&al.<bl.()){al.updDefenceCardMax();
        //将领卡库
        if(ComUtil.ifGet(chance)&&al.<bl.()){al.updGeneralCardMax();
        //刷新数量
        if(ComUtil.ifGet(chance)&&al.<bl.()){al.updRecruitGeneralLvNow();*/


    }

    //合并两个兵种 a单位合并b单位,b消失
    public boolean army_Merge(ArmyData aArmy, ArmyData bArmy) {
        Gdx.app.log("army_Merge",aArmy.getHexagonIndex()+":"+bArmy.getHexagonIndex());
        checkTask(true,aArmy.getLegionIndex(),0,1);
        boolean ifExchangePotion = false;
        int auc=aArmy.getUnitGroup();
        int buc=bArmy.getUnitGroup();
        if (buc == 1) {
            ifExchangePotion = false;
        } else if (buc>1 &&auc == 1) {
            ifExchangePotion = true;
        } else if(aArmy.isUnitGroup()&&bArmy.isUnitGroup()&&auc+buc>7){
            return false;
        }
        if (aArmy != null && bArmy != null) {
            //
            if(aArmy.ifHaveFeature(33)){
                if(bArmy.ifHaveFeature(33)){
                    if(bArmy.getUnitGroup()>aArmy.getUnitGroup()||bArmy.getArmyRank()>aArmy.getArmyRank()||bArmy.getGeneralIndex()>aArmy.getGeneralIndex()){
                        army_replaceAttribute(aArmy,bArmy);
                    }
                }else{
                    army_replaceAttribute(aArmy,bArmy);
                }
            }else if(aArmy.getArmyType()!=bArmy.getArmyType()&&(aArmy.getArmyType()==4||bArmy.getArmyType()==4)){
                if(aArmy.getArmyType()==4){
                    army_replaceAttribute(aArmy,bArmy);
                }
            }else if(bArmy.getGeneralIndex()>aArmy.getGeneralIndex()){
                army_replaceAttribute(aArmy,bArmy);
            }else if(aArmy.isUnitGroup()&&bArmy.isUnitGroup()){
                if(bArmy.getUnitGroup()>aArmy.getUnitGroup()){
                    army_replaceAttribute(aArmy,bArmy);
                }
            }else{
                if(aArmy.getUnitArmyId0()==bArmy.getUnitArmyId0()&&bArmy.getUnitGroup()>aArmy.getUnitGroup()){
                    army_replaceAttribute(aArmy,bArmy);
                }
            }
            //Gdx.app.log("army_Merge",aArmy.getHexagonIndex()+":"+bArmy.getHexagonIndex());
            int tempV;


            army_skillMerge(aArmy,bArmy);
            //同类兵种补充
            if((aArmy.getUnitGroup()==1||bArmy.getUnitGroup()==1)&&aArmy.getUnitArmyId0()==bArmy.getUnitArmyId0()&&aArmy.getArmyHpNow()+bArmy.getArmyHpNow()<ComUtil.max(aArmy.getArmyHpMax(),bArmy.getArmyHpMax())  ){
                if(bArmy.getUnitGroup()>aArmy.getUnitGroup()){
                    army_replaceAttribute(aArmy,bArmy);
                }
                aArmy.addArmyHpNow(bArmy.getArmyHpNow());
                aArmy.setUnitWealv0(ComUtil.max(bArmy.getUnitWealv0(),aArmy.getUnitWealv0()));
            }else if((aArmy.ifHaveFeature(33)||bArmy.ifHaveFeature(33))&&!aArmy.potionIsSea()&&!bArmy.potionIsSea()){//如果是维修
                if((aArmy.getArmyType()==6)||(bArmy.getArmyType()==6)){
                    if((bArmy.getArmyType()==6)){//交换,让aArmy是建筑
                        army_replaceAttribute(aArmy,bArmy);
                    }
                    aArmy.addArmyHpNow(bArmy.getArmyHpNow());
                }
                aArmy.addArmyHpNow(bArmy.getArmyHpNow()*2);
            }else  if(aArmy.getArmyType()!=bArmy.getArmyType()&&bArmy.getArmyType()==4){//如果是护航
                if(bArmy.getUnitArmyId0()>aArmy.getTransportType()+1400){
                    aArmy.setTransportType(bArmy.getUnitArmyId0()-1400);
                };
                aArmy.addArmyHpNow(bArmy.getArmyHpNow());
                if(aArmy.getArmyHpMax()<bArmy.getArmyHpMax()){
                    int uc=(bArmy.getArmyHpMax()-aArmy.getArmyHpMax())/aArmy.getArmyLife();
                    if(uc>0){
                        aArmy.updUnitGroupGroupLv(0,uc,true);
                    }
                }
                aArmy.setUnitWealv0(ComUtil.max(bArmy.getUnitWealv0(),aArmy.getUnitWealv0()));
            }else if (aArmy.isUnitGroup()&&bArmy.isUnitGroup()) {//如果是组合部队
                /*if(aArmy.getUnitGroup()==1){
                    army_replaceAttribute(aArmy,bArmy);
                }*/
                if(aArmy.getUnitGroup()+bArmy.getUnitGroup()<8){
                    for(int i=0;i<7;i++){
                        int armyId=bArmy.getUnitGroupArmyId(i);
                        int armyGroupLv=bArmy.getUnitGroupGroupLv(i);
                        int armyWeavLv=bArmy.getUnitGroupWealLv(i);
                        if(armyId==0||armyGroupLv==0){
                            continue;
                        }
                        int potion = aArmy.getEmptyGroupPotion();
                        if (potion > 0) {
                            aArmy.setGroupArmyId(potion, armyId);
                            aArmy.setUnitGroupWealLv(potion,armyWeavLv,false);
                            aArmy.setUnitGroupGroupLv(potion,armyGroupLv,false);
                        }else{
                            break;
                        }
                    }
                }else{
                    int tArmyId=bArmy.getUnitGroupArmyId(0);
                    for(int i=0;i<7;i++){
                        int sArmyId=aArmy.getUnitGroupArmyId(i);
                        if(sArmyId==0){continue;}
                        if(sArmyId==tArmyId){
                            int index = aArmy.getPotionForCanUpdUnitWealv(sArmyId);
                            if (index >-1) {
                                aArmy.updUnitGroupWealLv(index,1);
                                break;
                            }
                            index = aArmy.getPotionForCanUpdUnitGrouplv(sArmyId);
                            if (index> -1) {
                                aArmy.updUnitGroupLv(index);
                                break;
                            }
                        }
                    }
                    if(aArmy.isPlayer()&&aArmy.armyActor!=null){
                        aArmy.armyActor.resetUpdMark();
                    }
                }
                if (aArmy.ifHaveSkill(119)) {
                    aArmy.updKill(bArmy.getArmyKills() + 1,true);
                    aArmy.drawSkill(119);
                } else  {
                    aArmy.updKill(bArmy.getArmyKills() / 2 + 1,true);
                }
                aArmy.setArmyHpMax(aArmy.getArmyHpMax()+bArmy.getArmyHpMax());
                aArmy.resetArmyHpMax();
                aArmy.addArmyHpNow(bArmy.getArmyHpNow());

            }else if(masterData.getPlayerMode()==2){//军团模式的合并只是单纯的加血
                int groupMax=aArmy.getUnitGradeLv(0);
                aArmy.setUnitGroup0Lv(Math.min(aArmy.getUnitGroup0Lv()+bArmy.getUnitGroup0Lv(),groupMax));
                aArmy.resetArmyHpMax();
                aArmy.addArmyHpNow(bArmy.getArmyHpNow());
            }else{
                //只可以在兵种上限/武器等级/军衔升级中升级一项
                boolean ifUpd=false;
                if(aArmy.canUpdGroupLv()){
                    if(aArmy.updArmyGroup()){
                        ifUpd=true;
                    }
                }
                if(bArmy.getUnitWealv0Value()>aArmy.getUnitWealv0Value()){
                    tempV=aArmy.getUnitWealv0Value();
                    aArmy.setUnitWealv0(bArmy.getUnitWealv0Value());
                    bArmy.setUnitWealv0(tempV);
                }
                if(bArmy.getArmyHpMax()>aArmy.getArmyHpMax()){
                    tempV=aArmy.getArmyHpMax();
                    aArmy.setArmyHpMax(bArmy.getArmyHpMax());
                    bArmy.setArmyHpMax(tempV);
                }
                if(bArmy.getArmyHpNow()>aArmy.getArmyHpNow()){
                    tempV=aArmy.getArmyHpNow();
                    aArmy.setArmyHpNow(bArmy.getArmyHpNow());
                    bArmy.setArmyHpNow(tempV);
                }
                if(aArmy.getUnitArmyId0()==bArmy.getUnitArmyId0()||(roundState!=0&&!bArmy.isPlayer()&&!aArmy.isPlayer())){
                    if (aArmy.getUnitGroup() < 9 ) {
                        aArmy.updArmyGroup();
                        ifUpd=true;
                        aArmy.resetArmyHpMax();
                        // aArmy.setAirGoodsMax(aArmy.getAirGoodsMax()+bArmy.getAirGoodsMax()/2);
                    }else {
                        if(aArmy.getUnitGroup()>5&&aArmy.getGeneralIndex()==0){
                            armyUpdForGeneral(aArmy);
                        }
                        //  aArmy.setAirGoodsMax(ComUtil.Max(aArmy.getAirGoodsMax(),bArmy.getAirGoodsMax()));
                    }
                }

                aArmy.setTransportType(ComUtil.max(aArmy.getTransportType(),bArmy.getTransportType()));
                aArmy.addArmyHpNow(aArmy.getArmyHpNow() + bArmy.getArmyHpNow());


                //步兵合并
                if(aArmy.getUnitArmyId0()!=bArmy.getUnitArmyId0()){
                    int armyId=aArmy.getUnitArmyId0();
                    if(bArmy.getArmyRank()>aArmy.getArmyRank()||bArmy.getGeneralIndex()!=0||bArmy.getUnitArmyId0()>aArmy.getUnitArmyId0()  ){
                        armyId= bArmy.getUnitArmyId0();
                    }
                    aArmy.setUnitArmyId0(armyId);
                }
                if (aArmy.getUnitGroup1Lv() < bArmy.getUnitGroup1Lv()) {
                    aArmy.setUnitGroup1Lv(bArmy.getUnitGroup1Lv());
                }
                if (aArmy.getUnitWealv0Value() < bArmy.getUnitWealv0Value()) {
                    aArmy.setUnitWealv0(bArmy.getUnitWealv0Value());
                }
                if(aArmy.ifHaveSkill(119)){
                    aArmy.updKill(bArmy.getArmyKills()+1,true);
                    aArmy.drawSkill(119);
                }else if(!ifUpd){
                    aArmy.updKill(bArmy.getArmyKills()/2+1,true);
                }else{
                    aArmy.updKill(1,true);
                }
            }



            if (bArmy.getGeneralIndex() != 0 && aArmy.getGeneralIndex() == 0) {
                aArmy.setGeneralIndex(bArmy.getGeneralIndex());
                bArmy.setGeneralIndex(0);
            }
            aArmy.setArmyRank(ComUtil.max(aArmy.getArmyRank(),bArmy.getArmyRank()));

            army_Death(bArmy.getHexagonIndex(),(roundState==0||(roundState==4&&aArmy.isPlayer())));
            if (ifExchangePotion) {
                army_Move(aArmy, bArmy.getHexagonIndex());
            }

            aArmy.setIfMove(1);
            aArmy.setIfAttack(1);
            if(aArmy.ifHaveSkill(55)){
                aArmy.resetState();
                aArmy.drawSkill(55);
            }
            if(aArmy.ifHaveSkill(7)){
                int effect=aArmy.getSkillEffect(7);
                aArmy.addArmyHpByRate(effect);
                aArmy.setArmyMoraleChange(effect);
                aArmy.drawSkill(7);
            }
            aArmy.setArmyMorale(ComUtil.max(aArmy.getArmyMorale(),bArmy.getArmyMorale()));
            if(aArmy.getArmyMorale()<game.resGameConfig.resetUnitMoraleMax){
                aArmy.setArmyMorale(game.resGameConfig.resetUnitMoraleMax);
            }
            if(aArmy.armyActor!=null){
                aArmy.armyActor.updArmyModel();
                aArmy.armyActor.update();
            }
            addDialogueData(aArmy,4,"");
            aArmy.initVirAttribute();
            aArmy.resetGameValue();


            return true;
        }
        return false;
    }

    private void army_replaceSkill(ArmyData aArmy, ArmyData bArmy) {
        for(int i=0;i<4;i++){
            int skillId=aArmy.getSkillIdByIndex(i);
            int skillLv=aArmy.getSkillLvByIndex(i);
            aArmy.setSkill(i,bArmy.getSkillIdByIndex(i),bArmy.getSkillLvByIndex(i));
            bArmy.setSkill(i,skillId,skillLv);
        }
    }

    //a,b技能融合 ,b是材料
    private void army_skillMerge(ArmyData aArmy, ArmyData bArmy) {
        if(aArmy!=null&&bArmy!=null&&bArmy.getSkillCount()>0){
            for(int i=0;i<4;i++){
                int skillId=aArmy.getSkillIdByIndex(i);
                if(skillId==0){//学习bArmy的1号技能
                    skillId=bArmy.getNotSameSkillForIndex(aArmy);
                    if(skillId>=0){
                        aArmy.learnSkill(bArmy.getSkillIdByIndex(skillId),bArmy.getSkillLvByIndex(skillId));
                    }
                }else if(bArmy.ifHaveSkill(skillId)&&aArmy.canUpdSkill(i)){//如果bArmy的技能中包含这个,则升一级
                    aArmy.updSkill(skillId);
                }
            }
            aArmy.updSkillForRank();
            bArmy.skillLv1=aArmy.skillLv1;
            bArmy.skillLv2=aArmy.skillLv2;
            bArmy.skillLv3=aArmy.skillLv3;
            bArmy.skillLv4=aArmy.skillLv4;
            bArmy.skillId1=aArmy.skillId1;
            bArmy.skillId2=aArmy.skillId2;
            bArmy.skillId3=aArmy.skillId3;
            bArmy.skillId4=aArmy.skillId4;
        }
    }

    private void army_replaceAttribute(ArmyData aArmy, ArmyData bArmy) {
        tempArmyData.copyAttributes(aArmy,false);
        for(int i=0;i<7;i++){
            aArmy.setUnitGroupArmyId(i,bArmy.getUnitGroupArmyId(i,false));
            aArmy.setUnitGroupWealLv(i,bArmy.getUnitGroupWealLv(i,false),false);
            aArmy.setUnitGroupGroupLv(i,bArmy.getUnitGroupGroupLv(i,false),false);
            bArmy.setUnitGroupArmyId(i,tempArmyData.getUnitGroupArmyId(i,false));
            bArmy.setUnitGroupWealLv(i,tempArmyData.getUnitGroupWealLv(i,false),false);
            bArmy.setUnitGroupGroupLv(i,tempArmyData.getUnitGroupGroupLv(i,false),false);
        }
        aArmy.armyHpNow=bArmy.armyHpNow;
        aArmy.armyHpMax=bArmy.armyHpMax;
        aArmy.armyMorale=bArmy.armyMorale;
        bArmy.armyHpNow=tempArmyData.armyHpNow;
        bArmy.armyHpMax=tempArmyData.armyHpMax;
        bArmy.armyMorale=tempArmyData.armyMorale;
        aArmy.resetXmlE();
        bArmy.resetXmlE();
    }


    //获取周围的信息 0全部 1盟友 2敌人
    private int getAroundUnitCountIA1(ArmyData army, int type){
        return getAroundUnitCountIA1(army.getLegionIndex(),army.getHexagonIndex(),type);
    }
    //获取周围的信息 0全部 1盟友 2敌人
    private int getAroundUnitCountIA1(int li, int hexagon, int type){
        IntArray tempIntArray1=    getAroundIdsById(hexagon,0,ifLoop,game.tempUtil.getTempIntArray());
        int c=0;//int li=army.getLegionIndex();
        if(tempIntArray1.size>0){
            ArmyData aroundArmy;
            for(int i=0;i<tempIntArray1.size;i++){
                int id=tempIntArray1.get(i);
                aroundArmy=getArmyDataByHexagon(id);
                if(aroundArmy!=null){
                    switch (type){
                        case 0:c=c+1;break;
                        case 1:if(getForeignDegree(li,aroundArmy.getLegionIndex())==1){c=c+1;}break;
                        case 2:if(getForeignDegree(li,aroundArmy.getLegionIndex())==-1){c=c+1;}break;
                    }
                }
            }
        }
        game.tempUtil.disposeTempIntArray(tempIntArray1);
        return c;
    }


    //1 周围与hexagon的省区相同的地块
    //2 周围与hexagon的类型相同的地块(同海洋或同陆地)
    //3 周围是陆地且region相同
    //4 周围是海洋且region相同
    //5 周围是陆地
    //6 周围是海洋
    private int getAroundGridCountIA1( int hexagon, int type){
        IntArray tempIntArray1=    getAroundIdsById(hexagon,0,ifLoop,game.tempUtil.getTempIntArray());
        int c=0;//int li=army.getLegionIndex();
        int t;
        for(int i=0,iMax=tempIntArray1.size;i<iMax;i++){
            int id=tempIntArray1.get(i);
            switch (type){
                case 1:
                    t=getRegionId(hexagon);
                    if(getRegionId(id)==t){
                        c++;
                    }
                    break;
                case 2:
                    if(ifSameLandOrSea(hexagon,id)){
                        c++;
                    }
                    break;
                case 3:
                    t=getRegionId(hexagon);
                    if(getRegionId(id)==t&&!ifSea(id)){
                        c++;
                    }
                    break;
                case 4:
                    t=getRegionId(hexagon);
                    if(getRegionId(id)==t&&ifSea(id)){
                        c++;
                    }
                    break;
                case 5:
                    if(!ifSea(id)){
                        c++;
                    }
                    break;
                case 6:
                    if(ifSea(id)){
                        c++;
                    }
                    break;
            }

        }
        game.tempUtil.disposeTempIntArray(tempIntArray1);
        return c;
    }

    //fog 0不可见 1可见
    private void setFogByRegion(int region, int value) {
        if (regionHexagonMap.containsKey(region)) {
            IntArray array = regionHexagonMap.get(region);
            for (int i = 0; i < array.size; i++) {
                hexagonDatas.get(array.get(i)).setIfFog(value);
            }
        }
    }

    private void setFogByHexagon(int hexagon, int value) {
        hexagonDatas.get(hexagon).setIfFog(value);
    }

    public int getCountryIdByli(int li) {
        if (li >= 0 && li < legionDatas.size && legionDatas.get(li).getCountryId() != -1) {
            return legionDatas.get(li).getCountryId();
        }
        return -1;
    }
    public void army_Attack(ArmyData army, int targetHexagon) {
        army_Attack(army,targetHexagon,1f,1f,0f);
    }


    //recordRegion true记录的是region,false记录hexagon
    //attackRate 攻击方造成的伤害百分比
    //defRate 反击方造成的伤害百分比  为0 ,则目标不反击
    public void army_Attack(ArmyData army, int targetHexagon,float attackRate,float defRate,float damageTime) {
        if(roundState==1||army==null){
            return;
        }
        if((masterData.getPlayerMode()!=2&&army.isPlayer()&&!army.ifInArmyRange(targetHexagon))){
            Gdx.app.error("警告","玩家单位攻击的目标不在其射程内,如果有异议,请保留存档并咨询管理员");
            return;
        }
        int tLi=getLegionIndexByHexagon(targetHexagon);
        if(ifSystemEffective(4)&&foreignDatas!=null&&foreignDatas.size>0){
            ForeignData f=getForeignData(tLi,army.getLegionIndex());
            if(f!=null&&f.getForeignType()>0){
                if(army.isPlayer()&&ifSystemEffective(18)){

                }else{
                    return;
                }
            }
        }
        army.setIfAttack(1);
        lastUnitHexagon=-1;
        LegionData al=army.getLegionData();
        LegionData tl=getLegionDataByHexagon(targetHexagon);
        if(army.isPlayer()&& ifSystemEffective(3)){
            al.addIndustry(-(army.getUnitGroup()+army.getArmyRank()));
            if(game.sMapScreen!=null){
                game.sMapScreen.updResourceForPlayer();
            }
        }


        boolean  ifRecordDamage = (roundState==0||(roundState==4&&army.playerCanCommand()));
        if(army.getNucleIndex()!=-1){
            nul_Bomber(nulcleIDatas.get(army.getNucleIndex()),targetHexagon,ifRecordDamage);
            nul_Death(army.getNucleIndex());
            army.setNucleIndex(-1);
            if(army.getArmyHpNow()<=0){
                return;
            }
        }

        // HexagonData a=hexagonDatas.get(hexagonDatas.size+1);
        setDirect(army, targetHexagon);
        boolean ifTargetHexagonIsBuild = buildRDatas.containsKey(targetHexagon);
        boolean ifTargetHexagonIsArmy = army.canAttack(getArmyDataByHexagon(targetHexagon));
        boolean ifArmyHexagonIsBuild = buildRDatas.containsKey(army.getHexagonIndex());
        int damage = 0;
        GeneralData g;
        army.setStandyRound(0);
        BuildData tBuild=getBuildDataByRegion(targetHexagon);
        BuildData tAreaBuild=getBuildDataByRegion(getRegionId(targetHexagon));
        ArmyData tArmy= getArmyDataByHexagon(targetHexagon);

        boolean ifLogDamage=roundState==0;
        boolean ifStrike;
        float addDamageTime=0.5f;
        int direct=army.getDirectByBorderId(targetHexagon);//如果是-1,则是远程
        int tDirect=getDirect(targetHexagon,army.getHexagonIndex());
        boolean isRound=army.isRound();
        //是否第一攻击序列
        boolean ifFirst=false;
        int raidEffect=0;
        //0  目标fort失效
        //1  将目标击退。如果被击退的方向是丘陵，山地等方向，则其受到额外伤害，如果是无法击退且其准备回合为0，则增加准备回合+1,如果消灭目标，则有几率移动到目标位置，并恐惧周围敌军。
        //2  对目标士气造成额外降低，并对目标造成至少百分之10当前生命值的伤害。如果消灭目标后，则激励周围的友军。

        //如果在其进攻回合,且其进攻的非要塞类且是目标单位的背面且是近战攻击,则判定发动突袭成功,发动突袭后目标单位不能反击
        boolean ifRaid= false;
        if(tArmy!=null&&masterData.getPlayerMode()!=2){
            ifFirst= GameUtil.ifRaidAttack(army,tArmy);
            ifRaid=isRound&&tArmy.getUnitType()!=6&&direct!=-1&&ifFirst;
            if(ifRaid&&ifRaidEffect(army,tArmy)){//如果是突袭,判断是否触发特殊效果
                if(army.getArmyHpNow()*2>tArmy.getArmyHpNow()){
                    raidEffect=1;
                }else{
                    raidEffect=2;
                }
            }
            if(tArmy.getArmyRound()>1){
                ifFirst=true;
            }
        }

        if((roundState==0||roundState==4)&&!ifRecordDamage&&( (tArmy!=null&&tArmy.playerCanCommand())||(tBuild!=null&&tBuild.isPlayerAlly()))){
            ifRecordDamage=true;
        }

        if(ifLogDamage){
            Gdx.app.log("armya_attack",army.getHexagonIndex()+">"+targetHexagon+" ifRecordDamage:"+ifRecordDamage);
            Gdx.app.log("armya_attack ","ifFirst:"+ifFirst+" ifRaid:"+ifRaid+" raidEffect:"+raidEffect);
        }
        //外交关系
        int foreignDegree= getForeignDegree(army.getLegionIndex(),getLegionIndexByHexagon(targetHexagon));
        ForeignData f=getForeignData(army.getLegionIndex(),getLegionIndexByHexagon(targetHexagon));
        if(f!=null){
            /*if(f.getForeignType()!=-1&&(army.isPlayer()||tArmy.isPlayer())){
                int s=0;
            }*/
            //玩家不宣而战
            if(army.isPlayer()&&chiefData!=null){
                if(foreignDegree==1){
                    chiefData.reputation+=30;
                }else if(foreignDegree==0){
                    chiefData.reputation+=5;
                }
                if(ifLogDamage){
                    Gdx.app.log("armya_attack:"+army.getHexagonIndex()+">"+targetHexagon,"  chiefData.reputation:"+ chiefData.reputation);
                }
            }
            if(f.getForeignType()!=-1&&game.sMapScreen!=null){
                ifNeedDrawViewMap=true;
            }
            f.reduceFavor(ComUtil.getRandom(20, 40));
            if(f.getForeignType()!=-1&&al.ifEffective(4)){
                if(al.isPlayer()){
                    if(tl.getLegionIndex()>0){
                        addPromptData(game.gameMethod.getPromptStr(100, 0, tl.legionName),
                                game.gameMethod.getPromptStr(100, 1, getSRNameByRegion(getRegionId(targetHexagon)),tl.legionName),
                                game.gameMethod.getPromptStr(100, 2,tl.legionName,f.getFavorValue()), al.getLegionIndex(), tl.getLegionIndex(),true);
                    }
                }else if(tl.isPlayer()&&al.getLegionIndex()>0){
                    addPromptData(game.gameMethod.getPromptStr(104, 0),
                            game.gameMethod.getPromptStr(104, 1, getSRNameByRegion(getRegionId(targetHexagon)),al.legionName),
                            game.gameMethod.getPromptStr(104, 2,al.legionName,f.getFavorValue()), tl.getLegionIndex(), al.getLegionIndex(),false);
                }
            }
            if(f.getFavorValue()<60&& f.getForeignType()!=-1){
                f.setForeignType(-1);
                if(al.isPlayer()&&tl.getLegionIndex()>0){
                    g=getMaxRankGeneralData(tl.getLegionIndex(),true);
                    if(g!=null){
                        // int countryId,GeneralData g,int dialogueIdType,String value
                        addDialogueData(tl.getCountryId(),g,17,"",true);
                        legion_intensifyUnity(tl,(masterData.getGameDifficulty()+tl.getLevel())/2+1);
                    }
                    g=null;
                }
            }
            if(f.isAlly()){
                legion_separate(f.getSourceLegionIndex(),f.getTargetLegionIndex(),-game.resGameConfig.attackAllyReduceFavor);
            }

            if(ifLogDamage){
                Gdx.app.log("armya_attack:"+army.getHexagonIndex()+">"+targetHexagon,f.log());
            }
        }


        //当Ai不现形单位进攻一个玩家友军/建筑，该单位现形
        if(army.isPlayerAlly()|| (tArmy!=null&& tArmy.isPlayerAlly())||(tBuild!=null&&tBuild.isPlayerAlly())){
            if(army.armyActor==null){
                army.createActor();
            }
            if(tArmy!=null&&tArmy.armyActor==null){
                tArmy.createActor();
            }
        }
        if(ifAllyByLi(army.getLegionIndex(),tArmy!=null?tArmy.getLegionIndex():tBuild!=null?tBuild.getLegionIndex():0)){
            Gdx.app.error("army_Attack is error", "盟友互相进攻");
            return;
        }
        if(army.getGeneralIndex()>0&&tArmy!=null&&tArmy.getGeneralIndex()>0){
            GeneralData g1=army.getGeneralData();
            GeneralData g2=tArmy.getGeneralData();
            if(g1.getState()==0&&g2.getState()==0){
                if(army.isPlayer()){//int countryId,GeneralData g,int dialogueIdType,String value
                    addDialogueData(getPlayerLegionData().countryId,army.getGeneralData(),14,tArmy.getGeneralName(),true);
                }else if(tArmy.isPlayer()){
                    addDialogueData(getPlayerLegionData().countryId,tArmy.getGeneralData(),14,army.getGeneralName(),true);
                }
            }
        }
        // int drawI=0;
        if(!ifTargetHexagonIsBuild&&!ifTargetHexagonIsArmy){
            return;
        }else if (army.triggerSkill(48)){
            if(army.isRound()){army.resetArmyForamtion(1,targetHexagon);}
            army_SplashAttack(army,targetHexagon,1,attackRate,army.getSkillEffect(48)/100f,ifRecordDamage,damageTime,addDamageTime);
            army.drawSkill(48);
            army.updKill(army.getExp(),false);
            if(tArmy!=null){
                setDirect(tArmy, army.getHexagonIndex());
            }
            return;
        } else if (army.triggerSkill(49)){
            if(army.isRound()){army.resetArmyForamtion(1,targetHexagon);}
            army_SplashAttack(army,targetHexagon,1,attackRate,army.getSkillEffect(49)/100f,ifRecordDamage,damageTime,addDamageTime);
            army.drawSkill(49);
            army.updKill(army.getExp(),false);
            if(tArmy!=null){
                setDirect(tArmy, army.getHexagonIndex());
            }
            return;
        }else if (ifTargetHexagonIsBuild && ifTargetHexagonIsArmy) {//进攻的是建筑和兵种
            //tBuild = buildRDatas.get(nucleIndex);
            //tArmy = armyHDatas.get(nucleIndex);
            tArmy.setStandyRound(0);
            //是否可以反击
            //ifStrike = ifInRange(army.getHexagonIndex(), tArmy.getMinRange(), tArmy.getMaxRange(), tArmy.getIfOnlySeaForTarget());
             if(defRate==0){
                ifStrike=false;
            }else if(masterData.getPlayerMode()==2) {
                 if (army.getArmyType() == 5) {//如果进攻的是飞机
                     ifStrike = tArmy.ifCanAirDefense();
                 } else {
                     ifStrike = tArmy.getMaxRange() >= army.getMaxRange() ? true : ComUtil.ifGet(100 - (army.getMaxRange() - tArmy.getMaxRange()) * 30);
                 }
             }else if(tArmy.getArmyRound()>1){//有回合的单位不能反击
                 ifStrike=false;
            }else if(ifRaid&&ComUtil.max(army.getArmyMorale(),army.getHpRate() )>(tArmy.getArmyMorale()+tBuild.getHpRate())/2){//有30~80的几率 在城市的敌人不能反击
                ifStrike=false;
            }else if((army.ifHaveFeature(8)&&army.triggerFeature(8))||army.triggerSkill(72)||(army.triggerSkill(43)&&tArmy.getAroundUnitCountIA1(2)>2)){
                ifStrike=false;
                if(army.ifHaveSkill(72)){
                    army.drawSkill(72);
                }else if(army.ifHaveSkill(43)){
                    army.drawSkill(43);
                }else if(army.ifHaveFeature(8)){
                    army.drawSkill(8);
                }
            }else {
                ifStrike =ifInRange(tArmy.getHexagonIndex(),army.getHexagonIndex(),tArmy.getMinRange(), tArmy.getMaxRange(), tArmy.getIfOnlySeaForTarget());
            }
            if (army.getArmyRank()*2 > tArmy.getArmyRank()||(!army.isUnitGroup()&&army.getUnitWealv6() > tArmy.getArmyRank())||(!army.isUnitGroup()&&!tArmy.isUnitGroup()&&army.getUnitWealv6() >= tArmy.getUnitWealv6())  || !ifStrike||ifFirst||army.getArmyMorale()>tArmy.getArmyMorale()*2) {
              //  damage = (int) (GameUtil.getDamageForArmy(game, army, tArmy,tAreaBuild,damageTime) * game.resGameConfig.buildSaveInjuryRatio*attackRate);
                 if(army.isRound()){army.resetArmyForamtion(1,targetHexagon);}
                damage = (int) (GameUtil.getDamageForUnit(game, army, tArmy,tAreaBuild,true,damageTime) * game.resGameConfig.buildSaveInjuryRatio*attackRate);
                if(ifLogDamage){
                    Gdx.app.log("armya_attack:"+army.getHexagonIndex()+">"+targetHexagon,"getDamageForUnit damage:"+damage);
                }
                if(raidEffect==2){
                    damage+=tArmy.getArmyHpMax()/10;
                    if(ifLogDamage){
                        Gdx.app.log("army_attack:"+army.getHexagonIndex()+">"+targetHexagon,"raidEffect2 damage:"+damage);
                    }
                }
                //进攻获得经验
               int exp=ComUtil.limitValue(damage*(1+tArmy.getExp())/army.getUnitGroupAvgAttack(0),1,tArmy.getExp());
                boolean ifRCC=false;//是否碾压
                if(!tArmy.inMountain()&&army.getArmyHpNow()>tArmy.getArmyHpNow()&&tArmy.getGeneralIndex()==0&&  army.ifHaveFeature(16)&&army.triggerFeature(16)&&hexagonCanDash(army.getHexagonIndex(),targetHexagon,5002)&&ComUtil.ifGet(army.getArmyRank()* game.resGameConfig.unityFeatureChanceForLv)){
                    damage=99999;;
                    ifRCC=true;
                    army.drawFeature(16);
                    if(ifLogDamage) {
                        Gdx.app.log("getDamageForUnit:" + army.getHexagonIndex() + ">" + targetHexagon, " feature:" + game.gameMethod.getFeatureStr(16) + " damage:" + damage);
                    }
                }
                if (ifRecordDamage) {
                    army.drawAttackEffect(direct,damageTime);
                    damageTime=damageTime+addDamageTime;
                    tArmy.drawStrike(army.getAttackStrike(),damageTime);
                    effectStage.drawUnitHp( tArmy.getHexagonIndex(),-damage,damageTime);
                }
                setDirect(tArmy, army.getHexagonIndex());
                //防御获得经验
                exp=ComUtil.limitValue(damage*(1+army.getExp())/tArmy.getUnitGroupAvgAttack(0),1,army.getExp());
                tArmy.updKill(exp,false);
                if (tArmy.injured(damage,army.getHexagonIndex())) {//受伤死亡
                    if(raidEffect==2&&army.getArmyMorale()<game.resGameConfig.unitMoraleMaxLimit+1){
                        army.setArmyMorale(game.resGameConfig.unitMoraleMaxLimit+1);
                    }
                    checkTask(army.getGeneralIndex()>0,army.getLegionIndex(),3,1);
                    checkTask(foreignDegree==-1,army.getLegionIndex(),6,1);
                    checkTask(army.getHpRateF()<0.3f&&foreignDegree==-1,army.getLegionIndex(),10,1);
                    checkTask(tArmy.getArmyMorale()<20&&foreignDegree==-1,army.getLegionIndex(),17,1);
                    checkTask(army.ifHaveFeature(5),army.getLegionIndex(),22,1);
                    checkTask(army.getUnitWealv0Value()>=tArmy.getUnitWealv0Value()&&foreignDegree==-1,army.getLegionIndex(),23,1);

                    if(tArmy.ifHaveSkill(115)){
                        int effect=tArmy.getSkillEffect(115);
                        army.randomReduceSkillLv(effect);
                        tArmy.drawSkill(115);
                    }
                    if(tArmy.ifHaveSkill(60)){
                        army.setArmyHpNow(army.getArmyHpNow()*(100- tArmy.getSkillEffect(60)));
                        tArmy.drawSkill(60);
                    }
                    if(tArmy.ifHaveSkill(99)){
                        army.setArmyMorale(army.getArmyMorale()/2);
                        tArmy.drawSkill(99);
                    }
                    if(tArmy.triggerSkill(68)&&army.getGeneralIndex()==0&&army.getHexagonIndex()!=army.getRegionId()){
                        army.setLegionIndex(tArmy.getLegionIndex());
                        tArmy.drawSkill(68);
                    }
                    addLegionConfidence(tArmy.getLegionIndex(),-1);
                    addLegionConfidence(army.getLegionIndex(),1);
                    int kill=tArmy.getExp();
                    if(tArmy.ifHaveSkill(39)){
                        kill+=tArmy.getArmyKills()/2;
                        tArmy.drawSkill(39);
                    }
                    army.updKill(kill,true);
                    if((army.getGeneralIndex()!=0||tArmy.getGeneralIndex()!=0)&& ifSystemEffective(21)){
                        if(army.getArmyType()==3||army.getArmyType()==8||army.getArmyType()==6){ // 1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇
                            tactic_FearAround(army);
                        }else{
                            tactic_IncentiveAround(army);
                        }
                    }
                    if(army.ifHaveSkill(18)){
                        tactic_SpyingMessage(army.getRegionId(),army.getSkillLv(18),army.getLegionIndex(),ifRecordDamage);
                        army.drawSkill(18);
                    }
                    if(tArmy.triggerSkill(93)&&tArmy.getUnitArmyId0()!=1101){//被摧毁后一定{1}%率逃出一个步兵,并继承大部分能力
                        tArmy.setUnitArmyId0(1101);
                        if(tArmy.armyActor!=null){
                            tArmy.armyActor.update();
                        }
                        tArmy.drawSkill(93);
                    }else {
                        army_Death(tArmy.getHexagonIndex(),ifRecordDamage);
                    }
                    if(army.ifHaveSkill(122)){//消灭敌军后可以再次移动
                        army.setIfMove(0);
                        army.drawSkill(122);
                    }
                    army.setArmyMoraleChange(tArmy.getUnitGroup()*ComUtil.getRandom( game.resGameConfig.unitMoraleChangeValueMax/2, game.resGameConfig.unitMoraleChangeValueMax));

                    addDialogueData(army, 2, "");
                    //进攻消灭对方,如果对方的地块类型与我方一样且不是建筑且没有战壕且符合armyType则移动到目标地点
                    if(masterData.getPlayerMode()!=2&&!isMountain(targetHexagon)&&army.canMove(targetHexagon)&& (ifRCC||raidEffect==1||army.triggerSkill(12)||army.triggerSkill(123)||( army.ifHaveFeature(7)&&(ComUtil.ifGet(army.getArmyRank()* game.resGameConfig.unityFeatureChanceForLv)||army.triggerFeature(7))))&&hexagonCanDash(army.getHexagonIndex(),targetHexagon,5001)){
                        army_Move(army,targetHexagon);
                        tactic_FearAround(army);
                        if(army.ifHaveSkill(12)){
                            army.drawSkill(12);
                        }else if(army.ifHaveSkill(123)){
                            army.drawSkill(123);
                        }else if(army.ifHaveFeature(7)){
                            army.drawFeature(7);
                        }
                    }
                    if(army.ifHaveFeature(13)&&army.triggerFeature(13)){
                        army.setIfAttack(0);
                        army.drawFeature(13);
                    }
                    if(army.ifHaveFeature(14)&&army.triggerFeature(14)){
                        army.setIfMove(0);
                        army.drawFeature(14);
                    }
                } else if (ifStrike) {//没死亡 反击
                    if(tArmy.isRound()){tArmy.resetArmyForamtion(1,army.getHexagonIndex());}
                   // damage = (int) (GameUtil.getDamageForArmy(game, tArmy, army,tAreaBuild,damageTime)*defRate);
                    damage = (int) (GameUtil.getDamageForUnit(game, tArmy, army,tAreaBuild,true,damageTime)*defRate);
                    exp=ComUtil.limitValue(damage*(1+army.getExp())/tArmy.getUnitGroupAvgAttack(0),1,army.getExp());
                    tArmy.updKill(exp,false);
                    if (ifArmyHexagonIsBuild) {
                        damage = (int) (damage * game.resGameConfig.buildSaveInjuryRatio);
                    }
                    if (ifRecordDamage) {
                        tArmy.drawAttackEffect(tDirect,damageTime);
                        damageTime=damageTime+addDamageTime;
                        army.drawStrike(tArmy.getAttackStrike(),damageTime);
                        effectStage.drawUnitHp( army.getHexagonIndex(),-damage,damageTime);
                    }
                    exp=ComUtil.limitValue(damage*(1+tArmy.getExp())/army.getUnitGroupAvgAttack(0),1,tArmy.getExp());
                    army.updKill(exp,false);
                    if (army.injured(damage,tArmy.getHexagonIndex())) {//受伤死亡
                        addLegionConfidence(tArmy.getLegionIndex(),1);
                        addLegionConfidence(army.getLegionIndex(),-1);
                        checkTask(tArmy.getGeneralIndex()>0,tArmy.getLegionIndex(),3,1);
                        checkTask(foreignDegree==-1,tArmy.getLegionIndex(),6,1);
                        checkTask(tArmy.getHpRateF()<0.3f&&foreignDegree==-1,tArmy.getLegionIndex(),10,1);
                        checkTask(army.getArmyMorale()<20&&foreignDegree==-1,tArmy.getLegionIndex(),17,1);
                        checkTask( tArmy.ifHaveFeature(5),tArmy.getLegionIndex(),22,1);
                        checkTask(tArmy.getUnitWealv0Value()>=army.getUnitWealv0Value()&&foreignDegree==-1,tArmy.getLegionIndex(),23,1);
                        checkTask(true,army.getLegionIndex(),26,1);

                        if(army.ifHaveSkill(115)){
                            int effect=army.getSkillEffect(115);
                            tArmy.randomReduceSkillLv(effect);
                            army.drawSkill(115);
                        }
                        if(army.ifHaveSkill(60)){
                            tArmy.setArmyHpNow(tArmy.getArmyHpNow()*(100- army.getSkillEffect(60)));
                            army.drawSkill(60);
                        }
                        if(army.ifHaveSkill(99)){
                            tArmy.setArmyMorale(tArmy.getArmyMorale()/2);
                            army.drawSkill(99);
                        }
                        if(army.triggerSkill(68)&&tArmy.getGeneralIndex()==0&&tArmy.getHexagonIndex()!=tArmy.getRegionId()){
                            tArmy.setLegionIndex(army.getLegionIndex());
                            army.drawSkill(68);
                        }
                        int kill=army.getExp();
                        if(army.ifHaveSkill(39)){
                            kill+=army.getArmyKills()/2;
                            army.drawSkill(39);
                        }
                        tArmy.updKill(kill,true);
                        if(tArmy.ifHaveSkill(18)){
                            tactic_SpyingMessage(tArmy.getRegionId(),tArmy.getSkillLv(18),tArmy.getLegionIndex(),ifRecordDamage);
                            tArmy.drawSkill(18);
                        }
                        if(army.triggerSkill(93)&&army.getUnitArmyId0()!=1101){//被摧毁后一定{1}%率逃出一个步兵,并继承大部分能力
                            army.setUnitArmyId0(1101);
                            if(army.armyActor!=null){
                                army.armyActor.update();
                            }
                            army.drawSkill(93);
                        }else {
                            army_Death(army.getHexagonIndex(),ifRecordDamage);
                        }
                        if(tArmy.ifHaveSkill(122)){//消灭敌军后可以再次移动
                            tArmy.setIfMove(0);
                            tArmy.drawSkill(122);
                        }
                        tArmy.setArmyMoraleChange(army.getUnitGroup()*ComUtil.getRandom( game.resGameConfig.unitMoraleChangeValueMax/2, game.resGameConfig.unitMoraleChangeValueMax));
                        addDialogueData(tArmy,2,"");
                    }
                }

                //伤害建筑
              //  damage = (int) (GameUtil.getDamageForBuild(game, army, tBuild) * game.resGameConfig.buildSaveInjuryRatio*attackRate);
                if(army.isRound()){army.resetArmyForamtion(1,targetHexagon);}
                damage = (int) (GameUtil.getDamageForUnit(game, army, tBuild,tBuild,true,0) * game.resGameConfig.buildSaveInjuryRatio*attackRate);
                exp=ComUtil.limitValue(damage*(1+tArmy.getExp())/army.getUnitGroupAvgAttack(0),1,tArmy.getExp());
                army.updKill(exp,false);
                if (ifRecordDamage) {
                    army.drawAttackEffect(direct,damageTime);
                    damageTime=damageTime+addDamageTime;
                }
                tBuild.beAttack(army,damage,damageTime);
                if(ifSystemEffective(12)){
                    if(tBuild.getLegionIndex()==masterData.playerLegionIndex){
                        g=tBuild.getGeneralData();
                        if(g!=null){
                            if(tBuild.isCapital()&&tBuild.getBuildName()!=0){
                                addDialogueData(tBuild.getCountryId(),g,11,tBuild.areaName,true);
                            }else if(army.getLegionData().getInternIndex()!=0){
                                addDialogueData(tBuild.getCountryId(),g,9,army.getLegionData().legionName,true);
                            }
                        }
                    }else if(army.canCreateRDialogue()&&tBuild.getBuildName()!=0){
                        g=army.getGeneralData();
                        addDialogueData(army.getCountryId(),g,10,tBuild.areaName,true);
                    }
                }
            } else {//否则敌军先行动
                setDirect(tArmy, army.getHexagonIndex());
              //  damage = GameUtil.getDamageForArmy(game, tArmy, army,tAreaBuild,damageTime);
                if(tArmy.isRound()){tArmy.resetArmyForamtion(1,army.getHexagonIndex());}
                damage = GameUtil.getDamageForUnit(game, tArmy, army,tAreaBuild,true,damageTime);
               int exp=ComUtil.limitValue(damage*(1+army.getExp())/tArmy.getUnitGroupAvgAttack(0),1,army.getExp());
                tArmy.updKill(exp,false);
                if (ifArmyHexagonIsBuild) {
                    damage = (int) (damage * game.resGameConfig.buildSaveInjuryRatio*defRate);
                }
                if (ifRecordDamage) {
                    tArmy.drawAttackEffect(tDirect,damageTime);
                    damageTime=damageTime+addDamageTime;
                    army.drawStrike(tArmy.getAttackStrike(),damageTime);
                    effectStage.drawUnitHp( army.getHexagonIndex(),-damage,damageTime);
                }
                exp=ComUtil.limitValue(damage*(1+tArmy.getExp())/army.getUnitGroupAvgAttack(0),1,tArmy.getExp());
                army.updKill(exp,false);
                if (army.injured(damage,tArmy.getHexagonIndex())) {//受伤死亡
                    addLegionConfidence(tArmy.getLegionIndex(),1);
                    addLegionConfidence(army.getLegionIndex(),-1);

                    checkTask(tArmy.getGeneralIndex()>0,tArmy.getLegionIndex(),3,1);
                    checkTask(foreignDegree==-1,tArmy.getLegionIndex(),6,1);
                    checkTask(tArmy.getHpRateF()<0.3f&&foreignDegree==-1,tArmy.getLegionIndex(),10,1);
                    checkTask(army.getArmyMorale()<20&&foreignDegree==-1,tArmy.getLegionIndex(),17,1);
                    checkTask(  tArmy.ifHaveFeature(5),tArmy.getLegionIndex(),22,1);
                    checkTask(tArmy.getUnitWealv0Value()>=army.getUnitWealv0Value()&&foreignDegree==-1,tArmy.getLegionIndex(),23,1);
                    checkTask(true,army.getLegionIndex(),26,1);

                    if(army.ifHaveSkill(115)){
                        int effect=army.getSkillEffect(115);
                        tArmy.randomReduceSkillLv(effect);
                        army.drawSkill(115);
                    }
                    if(army.ifHaveSkill(60)){
                        tArmy.setArmyHpNow(tArmy.getArmyHpNow()*(100- army.getSkillEffect(60)));
                        army.drawSkill(60);
                    }
                    if(army.ifHaveSkill(99)){
                        tArmy.setArmyMorale(tArmy.getArmyMorale()/2);
                        army.drawSkill(99);
                    }
                    if(army.triggerSkill(68)&&tArmy.getGeneralIndex()==0&&tArmy.getHexagonIndex()!=tArmy.getRegionId()){
                        tArmy.setLegionIndex(army.getLegionIndex());
                        army.drawSkill(68);
                    }

                    int kill=army.getExp();
                    if(army.ifHaveSkill(39)){
                        kill+=army.getArmyKills()/2;
                        army.drawSkill(39);
                    }
                    tArmy.updKill(kill,true);
                    if(tArmy.ifHaveSkill(18)){
                        tactic_SpyingMessage(tArmy.getRegionId(),tArmy.getSkillLv(18),tArmy.getLegionIndex(),ifRecordDamage);
                        tArmy.drawSkill(18);
                    }
                    if(army.triggerSkill(93)&&army.getUnitArmyId0()!=1101){//被摧毁后一定{1}%率逃出一个步兵,并继承大部分能力
                        army.setUnitArmyId0(1101);
                        if(army.armyActor!=null){
                            army.armyActor.update();
                        }
                        army.drawSkill(93);
                    }else {
                        army_Death(army.getHexagonIndex(),ifRecordDamage);
                    }
                    if(tArmy.ifHaveSkill(122)){//消灭敌军后可以再次移动
                        tArmy.setIfMove(0);
                        tArmy.drawSkill(122);
                    }
                    tArmy.setArmyMoraleChange(army.getUnitGroup()*ComUtil.getRandom( game.resGameConfig.unitMoraleChangeValueMax/2, game.resGameConfig.unitMoraleChangeValueMax));
                    addDialogueData(tArmy, 2, "");
                } else {//没死亡 反击
                 //   damage = (int) (GameUtil.getDamageForArmy(game, army, tArmy,tAreaBuild,damageTime) * game.resGameConfig.buildSaveInjuryRatio*attackRate);
                    if(army.isRound()){army.resetArmyForamtion(1,targetHexagon);}
                    damage = (int) (GameUtil.getDamageForUnit(game, army, tArmy,tAreaBuild,true,damageTime) * game.resGameConfig.buildSaveInjuryRatio*attackRate);
                    if(raidEffect==2){
                        damage+=tArmy.getArmyHpMax()/10;
                    }
                    exp=ComUtil.limitValue(damage*(1+tArmy.getExp())/army.getUnitGroupAvgAttack(0),1,tArmy.getExp());
                    army.updKill(exp,false);
                    if (ifRecordDamage) {
                        army.drawAttackEffect(direct,damageTime);
                        damageTime=damageTime+addDamageTime;
                        tArmy.drawStrike(army.getAttackStrike(),damageTime);
                        effectStage.drawUnitHp( tArmy.getHexagonIndex(),-damage,damageTime);
                    }
                    exp=ComUtil.limitValue(damage*(1+army.getExp())/tArmy.getUnitGroupAvgAttack(0),1,army.getExp());
                    tArmy.updKill(exp,false);
                    if (tArmy.injured(damage,army.getHexagonIndex())) {//受伤死亡
                        if(raidEffect==2&&army.getArmyMorale()<game.resGameConfig.unitMoraleMaxLimit+1){
                            army.setArmyMorale(game.resGameConfig.unitMoraleMaxLimit+1);
                        }
                        addLegionConfidence(tArmy.getLegionIndex(),-1);
                        addLegionConfidence(army.getLegionIndex(),1);

                        checkTask(army.getGeneralIndex()>0,army.getLegionIndex(),3,1);
                        checkTask(foreignDegree==-1,army.getLegionIndex(),6,1);
                        checkTask(army.getHpRateF()<0.3f&&foreignDegree==-1,army.getLegionIndex(),10,1);
                        checkTask(tArmy.getArmyMorale()<20&&foreignDegree==-1,army.getLegionIndex(),17,1);
                        checkTask( army.ifHaveFeature(5),army.getLegionIndex(),22,1);
                        checkTask(army.getUnitWealv0Value()>=tArmy.getUnitWealv0Value()&&foreignDegree==-1,army.getLegionIndex(),23,1);

                        if(tArmy.ifHaveSkill(115)){
                            int effect=tArmy.getSkillEffect(115);
                            army.randomReduceSkillLv(effect);
                            tArmy.drawSkill(115);
                        }
                        if(tArmy.ifHaveSkill(60)){
                            army.setArmyHpNow(army.getArmyHpNow()*(100- tArmy.getSkillEffect(60)));
                            tArmy.drawSkill(60);
                        }
                        if(tArmy.ifHaveSkill(99)){
                            army.setArmyMorale(army.getArmyMorale()/2);
                            tArmy.drawSkill(99);
                        }
                        if(tArmy.triggerSkill(68)&&army.getGeneralIndex()==0&&army.getHexagonIndex()!=army.getRegionId()){
                            army.setLegionIndex(tArmy.getLegionIndex());
                            tArmy.drawSkill(68);
                        }
                        int kill=tArmy.getExp();
                        if(tArmy.ifHaveSkill(39)){
                            kill+=tArmy.getArmyKills()/2;
                            tArmy.drawSkill(39);
                        }
                        army.updKill(kill,true);
                        if((army.getGeneralIndex()!=0||tArmy.getGeneralIndex()!=0)&& ifSystemEffective(21)){
                            if(army.getArmyType()==3||army.getArmyType()==8||army.getArmyType()==6){ // 1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇
                                tactic_FearAround(army);
                            }else{
                                tactic_IncentiveAround(army);
                            }
                        }

                        if(army.ifHaveSkill(18)){
                            tactic_SpyingMessage(army.getRegionId(),army.getSkillLv(18),army.getLegionIndex(),ifRecordDamage);
                            army.drawSkill(18);
                        }
                        if(tArmy.triggerSkill(93)&&tArmy.getUnitArmyId0()!=1101){//被摧毁后一定{1}%率逃出一个步兵,并继承大部分能力
                            tArmy.setUnitArmyId0(1101);
                            if(tArmy.armyActor!=null){
                                tArmy.armyActor.update();
                            }
                            tArmy.drawSkill(93);
                        }else {
                            army_Death(tArmy.getHexagonIndex(),ifRecordDamage);
                        }
                        if(army.ifHaveSkill(122)){//消灭敌军后可以再次移动
                            army.setIfMove(0);
                            army.drawSkill(122);
                        }
                        army.setArmyMoraleChange(tArmy.getUnitGroup()*ComUtil.getRandom( game.resGameConfig.unitMoraleChangeValueMax/2, game.resGameConfig.unitMoraleChangeValueMax));

                        addDialogueData(army, 2, "");
                    }
                    //伤害建筑
                  //  damage = (int) (GameUtil.getDamageForBuild(game, army, tBuild) * game.resGameConfig.buildSaveInjuryRatio*attackRate);
                    if(army.isRound()){army.resetArmyForamtion(1,targetHexagon);}
                    damage = (int) (GameUtil.getDamageForUnit(game, army, tBuild,tBuild,true,0) * game.resGameConfig.buildSaveInjuryRatio*attackRate);
                    exp=ComUtil.limitValue(damage*(1+tArmy.getExp())/army.getUnitGroupAvgAttack(0),1,tArmy.getExp());
                    army.updKill(exp,false);
                    if (ifRecordDamage) {
                        army.drawAttackEffect(direct,damageTime);
                        damageTime=damageTime+addDamageTime;
                    }
                    tBuild.beAttack(army,damage,damageTime);

                    if(ifSystemEffective(12)){
                        if(tBuild.getLegionIndex()==masterData.playerLegionIndex){
                            g=tBuild.getGeneralData();
                            if(g!=null){
                                if(tBuild.isCapital()&&tBuild.getBuildName()!=0){
                                    addDialogueData(tBuild.getCountryId(),g,11,tBuild.areaName,true);
                                }else if(army.getLegionData().getInternIndex()!=0){
                                    addDialogueData(tBuild.getCountryId(),g,9,army.getLegionData().legionName,true);
                                }
                            }
                        }else if(army.canCreateRDialogue()&&tBuild.getBuildName()!=0){
                            g=army.getGeneralData();
                            addDialogueData(army.getCountryId(),g,10,tBuild.areaName,true);
                        }
                    }
                }
            }
        } else if (ifTargetHexagonIsBuild) {//进攻的只是建筑
            // tBuild = buildRDatas.get(nucleIndex);
        //    damage = (int) (GameUtil.getDamageForBuild(game, army, tBuild)*attackRate);
            if(army.isRound()){army.resetArmyForamtion(1,targetHexagon);}
            damage = (int) (GameUtil.getDamageForUnit(game, army, tBuild,tBuild,true,0)*attackRate);
           int exp=ComUtil.limitValue(damage*(1+tBuild.getExp())/army.getUnitGroupAvgAttack(0),1,tBuild.getExp());
            army.updKill(exp,false);
            // ifRecordDamage = army.playerCanCommand() ;

            /*if(tBuild.regionId==16110){
                int s=0;
            }*/
            if (ifRecordDamage) {
                army.drawAttackEffect(direct,damageTime);
                damageTime=damageTime+addDamageTime;
            }
            tBuild.beAttack(army,damage,damageTime);

            if(ifSystemEffective(12)){
                if(tBuild.getLegionIndex()==masterData.playerLegionIndex){
                    g=tBuild.getGeneralData();
                    if(g!=null){
                        if(tBuild.isCapital()&&tBuild.getBuildName()!=0){
                            addDialogueData(tBuild.getCountryId(),g,11,tBuild.areaName,true);
                        }else if(army.getLegionData().getInternIndex()!=0){
                            addDialogueData(tBuild.getCountryId(),g,9,army.getLegionData().legionName,true);
                        }
                    }
                }else if(army.canCreateRDialogue()&&tBuild.getBuildName()!=0){
                    g=army.getGeneralData();
                    addDialogueData(army.getCountryId(),g,10,tBuild.areaName,true);
                }
            }

        } else if (ifTargetHexagonIsArmy) {//进攻的只是单位
            // tArmy = armyHDatas.get(nucleIndex);
            //  ifRecordDamage = army.playerCanCommand() || (tArmy != null && tArmy.playerCanCommand());
            // ifStrike = ifInRange(army.getHexagonIndex(), tArmy.getMinRange(), tArmy.getMaxRange(), tArmy.getIfOnlySeaForTarget());

            if(defRate==0){
                ifStrike=false;
            }else if(masterData.getPlayerMode()==2){
                if(army.getArmyType()==5){//如果进攻的是飞机
                    ifStrike=tArmy.ifCanAirDefense();
                }else{
                    ifStrike=tArmy.getMaxRange()>=army.getMaxRange()?true:ComUtil.ifGet(100-(army.getMaxRange()-tArmy.getMaxRange())*30);
                }
            }else if(tArmy.getArmyRound()>1) {//有回合的单位不能反击
                ifStrike = false;
            }else  if(ifRaid&&ComUtil.max(army.getArmyMorale(),army.getHpRate())>tArmy.getArmyMorale()/2){//
                ifStrike=false;
            }else if((army.ifHaveFeature(8)&&army.triggerFeature(8))||army.triggerSkill(72)||(army.triggerSkill(43)&&tArmy.getAroundUnitCountIA1(2)>2)){
                ifStrike=false;
                if(army.ifHaveSkill(72)){
                    army.drawSkill(72);
                }else if(army.ifHaveSkill(43)){
                    army.drawSkill(43);
                }else if(army.ifHaveFeature(8)){
                    army.drawSkill(8);
                }
            }else {
                ifStrike =ifInRange(tArmy.getHexagonIndex(),army.getHexagonIndex(),tArmy.getMinRange(), tArmy.getMaxRange(), tArmy.getIfOnlySeaForTarget());
            }
            if (army.getArmyRank()*2 > tArmy.getArmyRank()||(!army.isUnitGroup()&&army.getUnitWealv6() > tArmy.getArmyRank())||(!army.isUnitGroup()&&!tArmy.isUnitGroup()&&army.getUnitWealv6() >= tArmy.getUnitWealv6())||!ifStrike||ifFirst||army.getArmyMorale()>tArmy.getArmyMorale()*2) {
                //damage = (int) (GameUtil.getDamageForArmy(game, army, tArmy,tAreaBuild,damageTime)*attackRate);
                if(army.isRound()){army.resetArmyForamtion(1,targetHexagon);}
                damage = (int) (GameUtil.getDamageForUnit(game, army, tArmy,tAreaBuild,true,damageTime)*attackRate);
                if(raidEffect==2){
                    damage+=tArmy.getArmyHpMax()/10;

                    if(ifLogDamage) {
                        Gdx.app.log("addDamage:" + army.getHexagonIndex() + ">" + targetHexagon, "raidEffect2 damage:" + damage);
                    }
                }
               int exp=ComUtil.limitValue(damage*(1+tArmy.getExp())/army.getUnitGroupAvgAttack(0),1,tArmy.getExp());
                army.updKill(exp,false);
                boolean ifRCC=false;//是否碾压
                if(masterData.getPlayerMode()!=2&&!tArmy.inMountain()&&army.getArmyHpNow()>tArmy.getArmyHpNow()&&tArmy.getGeneralIndex()==0&&  army.ifHaveFeature(16)&&army.triggerFeature(16)&&hexagonCanDash(army.getHexagonIndex(),targetHexagon,5002)&&ComUtil.ifGet(army.getArmyRank()* game.resGameConfig.unityFeatureChanceForLv)){
                    damage=99999;;
                    ifRCC=true;
                    army.drawFeature(16);
                    if(ifLogDamage) {
                        Gdx.app.log("getDamageForUnit:" + army.getHexagonIndex() + ">" + targetHexagon, " feature:" + game.gameMethod.getFeatureStr(16) + " damage:" + damage);
                    }
                }
                if (ifRecordDamage) {
                    army.drawAttackEffect(direct,damageTime);
                    damageTime=damageTime+addDamageTime;
                    tArmy.drawStrike(army.getAttackStrike(),damageTime);
                    effectStage.drawUnitHp( tArmy.getHexagonIndex(),-damage,damageTime);
                }
                setDirect(tArmy, army.getHexagonIndex());
                exp=ComUtil.limitValue(damage*(1+army.getExp())/tArmy.getUnitGroupAvgAttack(0),1,army.getExp());
                tArmy.updKill(exp,false);
                if (tArmy.injured(damage,army.getHexagonIndex())) {//受伤死亡
                    if(raidEffect==2&&army.getArmyMorale()<game.resGameConfig.unitMoraleMaxLimit+1){
                        army.setArmyMorale(game.resGameConfig.unitMoraleMaxLimit+1);
                    }
                    addLegionConfidence(tArmy.getLegionIndex(),-1);
                    addLegionConfidence(army.getLegionIndex(),1);

                    checkTask(army.getGeneralIndex()>0,army.getLegionIndex(),3,1);
                    checkTask(foreignDegree==-1,army.getLegionIndex(),6,1);
                    checkTask(army.getHpRateF()<0.3f&&foreignDegree==-1,army.getLegionIndex(),10,1);
                    checkTask(tArmy.getArmyMorale()<20&&foreignDegree==-1,army.getLegionIndex(),17,1);
                    checkTask(  army.ifHaveFeature(5),army.getLegionIndex(),22,1);
                    checkTask(army.getUnitWealv0Value()>=tArmy.getUnitWealv0Value()&&foreignDegree==-1,army.getLegionIndex(),23,1);

                    if(tArmy.ifHaveSkill(115)){
                        int effect=tArmy.getSkillEffect(115);
                        army.randomReduceSkillLv(effect);
                        tArmy.drawSkill(115);
                    }
                    if(tArmy.ifHaveSkill(60)){
                        army.setArmyHpNow(army.getArmyHpNow()*(100- tArmy.getSkillEffect(60)));
                        tArmy.drawSkill(60);
                    }
                    if(tArmy.ifHaveSkill(99)){
                        army.setArmyMorale(army.getArmyMorale()/2);
                        tArmy.drawSkill(99);
                    }
                    if(tArmy.triggerSkill(68)&&army.getGeneralIndex()==0&&army.getHexagonIndex()!=army.getRegionId()){
                        army.setLegionIndex(tArmy.getLegionIndex());
                        tArmy.drawSkill(68);
                    }
                    int kill=tArmy.getExp();
                    if(tArmy.ifHaveSkill(39)){
                        kill+=tArmy.getArmyKills()/2;
                        tArmy.drawSkill(39);
                    }
                    army.updKill(kill,true);
                    if((army.getGeneralIndex()!=0||tArmy.getGeneralIndex()!=0)&& ifSystemEffective(21)){
                        if(army.getArmyType()==3||army.getArmyType()==8||army.getArmyType()==6){ // 1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇
                            tactic_FearAround(army);
                        }else{
                            tactic_IncentiveAround(army);
                        }
                    }

                    if(army.ifHaveSkill(18)){
                        tactic_SpyingMessage(army.getRegionId(),army.getSkillLv(18),army.getLegionIndex(),ifRecordDamage);
                        army.drawSkill(18);
                    }
                    if(tArmy.triggerSkill(93)&&tArmy.getUnitArmyId0()!=1101){//被摧毁后一定{1}%率逃出一个步兵,并继承大部分能力
                        tArmy.setUnitArmyId0(1101);
                        if(tArmy.armyActor!=null){
                            tArmy.armyActor.update();
                        }
                        tArmy.drawSkill(93);
                    }else {
                        army_Death(tArmy.getHexagonIndex(),ifRecordDamage);
                    }
                    if(army.ifHaveSkill(122)){//消灭敌军后可以再次移动
                        army.setIfMove(0);
                        army.drawSkill(122);
                    }
                    army.setArmyMoraleChange(tArmy.getUnitGroup()*ComUtil.getRandom( game.resGameConfig.unitMoraleChangeValueMax/2, game.resGameConfig.unitMoraleChangeValueMax));

                    addDialogueData(army, 2, "");
                    //进攻消灭对方,如果对方的地块类型与我方一样且不是建筑且没有战壕且符合armyType则移动到目标地点
                    if(masterData.getPlayerMode()!=2&&!isMountain(targetHexagon)&&army.canMove(targetHexagon)&& (ifRCC||raidEffect==1||army.triggerSkill(12)||army.triggerSkill(123)||( army.ifHaveFeature(7)&&army.triggerFeature(7)))&&hexagonCanDash(army.getHexagonIndex(),targetHexagon,5001)){
                        army_Move(army,targetHexagon);
                        tactic_FearAround(army);
                        if(army.ifHaveSkill(12)){
                            army.drawSkill(12);
                        }else if(army.ifHaveSkill(123)){
                            army.drawSkill(123);
                        }else if(army.ifHaveFeature(7)){
                            army.drawFeature(7);
                        }
                    }
                    if(army.ifHaveFeature(13)&army.triggerFeature(13)){
                        army.setIfAttack(0);
                        army.drawFeature(13);
                    }
                    if(army.ifHaveFeature(14)&&army.triggerFeature(14)){
                        army.setIfMove(0);
                        army.drawFeature(14);
                    }

                } else if(ifStrike){//没死亡 反击
                    //damage = GameUtil.getDamageForArmy(game, tArmy, army,tAreaBuild,damageTime);
                    if(tArmy.isRound()){tArmy.resetArmyForamtion(1,army.getHexagonIndex());}
                    damage = GameUtil.getDamageForUnit(game, tArmy, army,tAreaBuild,true,damageTime);
                    exp=ComUtil.limitValue(damage*(1+tArmy.getExp())/army.getUnitGroupAvgAttack(0),1,tArmy.getExp());
                    army.updKill(exp,false);
                    if (ifArmyHexagonIsBuild) {
                        damage = (int) (damage * game.resGameConfig.buildSaveInjuryRatio);
                    }
                    if (ifRecordDamage) {
                        tArmy.drawAttackEffect(tDirect,damageTime);
                        damageTime=damageTime+addDamageTime;
                        army.drawStrike(tArmy.getAttackStrike(),damageTime);
                        effectStage.drawUnitHp(army.getHexagonIndex(),-damage,damageTime);
                    }
                    exp=ComUtil.limitValue(damage*(1+army.getExp())/tArmy.getUnitGroupAvgAttack(0),1,army.getExp());
                    tArmy.updKill(exp,false);
                    if (army.injured(damage,tArmy.getHexagonIndex())) {//受伤死亡
                        addLegionConfidence(tArmy.getLegionIndex(),1);
                        addLegionConfidence(army.getLegionIndex(),-1);

                        checkTask(tArmy.getGeneralIndex()>0,tArmy.getLegionIndex(),3,1);
                        checkTask(foreignDegree==-1,tArmy.getLegionIndex(),6,1);
                        checkTask(tArmy.getHpRateF()<0.3f&&foreignDegree==-1,tArmy.getLegionIndex(),10,1);
                        checkTask(army.getArmyMorale()<20&&foreignDegree==-1,tArmy.getLegionIndex(),17,1);
                        checkTask(  tArmy.ifHaveFeature(5),tArmy.getLegionIndex(),22,1);
                        checkTask(tArmy.getUnitWealv0Value()>=army.getUnitWealv0Value()&&foreignDegree==-1,tArmy.getLegionIndex(),23,1);
                        checkTask(true,army.getLegionIndex(),26,1);

                        if(army.ifHaveSkill(115)){
                            int effect=army.getSkillEffect(115);
                            tArmy.randomReduceSkillLv(effect);
                            army.drawSkill(115);
                        }
                        if(army.ifHaveSkill(60)){
                            tArmy.setArmyHpNow(tArmy.getArmyHpNow()*(100- army.getSkillEffect(60)));
                            army.drawSkill(60);
                        }
                        if(army.ifHaveSkill(99)){
                            tArmy.setArmyMorale(tArmy.getArmyMorale()/2);
                            army.drawSkill(99);
                        }
                        if(army.triggerSkill(68)&&tArmy.getGeneralIndex()==0&&tArmy.getHexagonIndex()!=tArmy.getRegionId()){
                            tArmy.setLegionIndex(army.getLegionIndex());
                            army.drawSkill(68);
                        }
                        int kill=army.getExp();
                        if(army.ifHaveSkill(39)){
                            kill+=army.getArmyKills()/2;
                            army.drawSkill(39);
                        }
                        tArmy.updKill(kill,true);

                        if(tArmy.ifHaveSkill(18)){
                            tactic_SpyingMessage(tArmy.getRegionId(),tArmy.getSkillLv(18),tArmy.getLegionIndex(),ifRecordDamage);
                            tArmy.drawSkill(18);
                        }
                        if(army.triggerSkill(93)&&army.getUnitArmyId0()!=1101){//被摧毁后一定{1}%率逃出一个步兵,并继承大部分能力
                            army.setUnitArmyId0(1101);
                            if(army.armyActor!=null){
                                army.armyActor.update();
                            }
                            army.drawSkill(93);
                        }else {
                            army_Death(army.getHexagonIndex(),ifRecordDamage);
                        }
                        if(tArmy.ifHaveSkill(122)){//消灭敌军后可以再次移动
                            tArmy.setIfMove(0);
                            tArmy.drawSkill(122);
                        }
                        tArmy.setArmyMoraleChange(army.getUnitGroup()*ComUtil.getRandom( game.resGameConfig.unitMoraleChangeValueMax/2, game.resGameConfig.unitMoraleChangeValueMax));
                        addDialogueData(tArmy, 2, "");
                    }
                }
            } else {//否则敌军先行动
                setDirect(tArmy, army.getHexagonIndex());
               // damage = GameUtil.getDamageForArmy(game, tArmy, army,tAreaBuild,damageTime);
                if(tArmy.isRound()){tArmy.resetArmyForamtion(1,army.getHexagonIndex());}
                damage = GameUtil.getDamageForUnit(game, tArmy, army,tAreaBuild,true,damageTime);
                int exp=ComUtil.limitValue(damage*(1+army.getExp())/tArmy.getUnitGroupAvgAttack(0),1,army.getExp());
                tArmy.updKill(exp,false);
                if (ifRecordDamage) {
                    tArmy.drawAttackEffect(tDirect,damageTime);
                    damageTime=damageTime+addDamageTime;
                    army.drawStrike(tArmy.getAttackStrike(),damageTime);
                    effectStage.drawUnitHp( army.getHexagonIndex(),-damage,damageTime);
                }
                exp=ComUtil.limitValue(damage*(1+tArmy.getExp())/army.getUnitGroupAvgAttack(0),1,tArmy.getExp());
                army.updKill(exp,false);
                if (army.injured(damage,tArmy.getHexagonIndex())) {//受伤死亡
                    addLegionConfidence(tArmy.getLegionIndex(),1);
                    addLegionConfidence(army.getLegionIndex(),-1);

                    checkTask(tArmy.getGeneralIndex()>0,tArmy.getLegionIndex(),3,1);
                    checkTask(foreignDegree==-1,tArmy.getLegionIndex(),6,1);
                    checkTask(tArmy.getHpRateF()<0.3f&&foreignDegree==-1,tArmy.getLegionIndex(),10,1);
                    checkTask(army.getArmyMorale()<20&&foreignDegree==-1,tArmy.getLegionIndex(),17,1);
                    checkTask(  tArmy.ifHaveFeature(5),tArmy.getLegionIndex(),22,1);
                    checkTask(tArmy.getUnitWealv0Value()>=army.getUnitWealv0Value()&&foreignDegree==-1,tArmy.getLegionIndex(),23,1);
                    checkTask(true,army.getLegionIndex(),26,1);

                    if(army.ifHaveSkill(115)){
                        int effect=army.getSkillEffect(115);
                        tArmy.randomReduceSkillLv(effect);
                        army.drawSkill(115);
                    }
                    if(army.ifHaveSkill(60)){
                        tArmy.setArmyHpNow(tArmy.getArmyHpNow()*(100- army.getSkillEffect(60)));
                        army.drawSkill(60);
                    }
                    if(army.ifHaveSkill(99)){
                        tArmy.setArmyMorale(tArmy.getArmyMorale()/2);
                        army.drawSkill(99);
                    }
                    if(army.triggerSkill(68)&&tArmy.getGeneralIndex()==0&&tArmy.getHexagonIndex()!=tArmy.getRegionId()){
                        tArmy.setLegionIndex(army.getLegionIndex());
                        army.drawSkill(68);
                    }
                    int kill=army.getExp();
                    if(army.ifHaveSkill(39)){
                        kill+=army.getArmyKills()/2;
                        army.drawSkill(39);
                    }
                    tArmy.updKill(kill,true);
                    if(tArmy.ifHaveSkill(18)){
                        tactic_SpyingMessage(tArmy.getRegionId(),tArmy.getSkillLv(18),tArmy.getLegionIndex(),ifRecordDamage);
                        tArmy.drawSkill(18);
                    }
                    if(army.triggerSkill(93)&&army.getUnitArmyId0()!=1101){//被摧毁后一定{1}%率逃出一个步兵,并继承大部分能力
                        army.setUnitArmyId0(1101);
                        if(army.armyActor!=null){
                            army.armyActor.update();
                        }
                        army.drawSkill(93);
                    }else {
                        army_Death(army.getHexagonIndex(),ifRecordDamage);
                    }
                    if(tArmy.ifHaveSkill(122)){//消灭敌军后可以再次移动
                        tArmy.setIfMove(0);
                        tArmy.drawSkill(122);
                    }
                    tArmy.setArmyMoraleChange(army.getUnitGroup()*ComUtil.getRandom( game.resGameConfig.unitMoraleChangeValueMax/2, game.resGameConfig.unitMoraleChangeValueMax));
                    addDialogueData(tArmy, 2, "");
                } else {//没死亡 反击
                  //  damage = (int) (GameUtil.getDamageForArmy(game, army, tArmy,tAreaBuild,damageTime) * game.resGameConfig.buildSaveInjuryRatio*attackRate);
                    if(army.isRound()){army.resetArmyForamtion(1,targetHexagon);}
                    damage = (int) (GameUtil.getDamageForUnit(game, army, tArmy,tAreaBuild,true,damageTime) * game.resGameConfig.buildSaveInjuryRatio*attackRate);
                    if(raidEffect==2){
                        damage+=tArmy.getArmyHpMax()/10;

                        if(ifLogDamage) {
                            Gdx.app.log("addDamage:" + army.getHexagonIndex() + ">" + targetHexagon,  "raidEffect2, damage:" + damage);
                        }
                    }
                    exp=ComUtil.limitValue(damage*(1+tArmy.getExp())/army.getUnitGroupAvgAttack(0),1,tArmy.getExp());
                    army.updKill(exp,false);
                    if (ifRecordDamage) {
                        army.drawAttackEffect(direct,damageTime);
                        damageTime=damageTime+addDamageTime;
                        tArmy.drawStrike(army.getAttackStrike(),damageTime);
                        effectStage.drawUnitHp( tArmy.getHexagonIndex(),-damage,damageTime);
                    }
                    exp=ComUtil.limitValue(damage*(1+army.getExp())/tArmy.getUnitGroupAvgAttack(0),1,army.getExp());
                    tArmy.updKill(exp,false);
                    if (tArmy.injured(damage,army.getHexagonIndex())) {//受伤死亡
                        if(raidEffect==2&&army.getArmyMorale()<game.resGameConfig.unitMoraleMaxLimit+1){
                            army.setArmyMorale(game.resGameConfig.unitMoraleMaxLimit+1);
                        }
                        addLegionConfidence(tArmy.getLegionIndex(),-1);
                        addLegionConfidence(army.getLegionIndex(),1);

                        checkTask(army.getGeneralIndex()>0,army.getLegionIndex(),3,1);
                        checkTask(foreignDegree==-1,army.getLegionIndex(),6,1);
                        checkTask(army.getHpRateF()<0.3f&&foreignDegree==-1,army.getLegionIndex(),10,1);
                        checkTask(tArmy.getArmyMorale()<20&&foreignDegree==-1,army.getLegionIndex(),17,1);
                        checkTask(army.ifHaveFeature(5),army.getLegionIndex(),22,1);
                        checkTask(army.getUnitWealv0Value()>=tArmy.getUnitWealv0Value()&&foreignDegree==-1,army.getLegionIndex(),23,1);
                        if(tArmy.ifHaveSkill(115)){
                            int effect=tArmy.getSkillEffect(115);
                            army.randomReduceSkillLv(effect);
                            tArmy.drawSkill(115);
                        }
                        if(tArmy.ifHaveSkill(60)){
                            army.setArmyHpNow(army.getArmyHpNow()*(100- tArmy.getSkillEffect(60)));
                            tArmy.drawSkill(60);
                        }
                        if(tArmy.ifHaveSkill(99)){
                            army.setArmyMorale(army.getArmyMorale()/2);
                            tArmy.drawSkill(99);
                        }
                        if(tArmy.triggerSkill(68)&&army.getGeneralIndex()==0&&army.getHexagonIndex()!=army.getRegionId()){
                            army.setLegionIndex(tArmy.getLegionIndex());
                            tArmy.drawSkill(68);
                        }
                        int kill=tArmy.getExp();
                        if(tArmy.ifHaveSkill(39)){
                            kill+=tArmy.getArmyKills()/2;
                            tArmy.drawSkill(39);
                        }
                        army.updKill(kill,true);
                        if((army.getGeneralIndex()!=0||tArmy.getGeneralIndex()!=0)&& ifSystemEffective(21)){
                            if(army.getArmyType()==3||army.getArmyType()==8||army.getArmyType()==6){ // 1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇
                                tactic_FearAround(army);
                            }else{
                                tactic_IncentiveAround(army);
                            }
                        }
                        if(army.ifHaveSkill(18)){
                            tactic_SpyingMessage(army.getRegionId(),army.getSkillLv(18),army.getLegionIndex(),ifRecordDamage);
                            army.drawSkill(18);
                        }
                        if(tArmy.triggerSkill(93)&&tArmy.getUnitArmyId0()!=1101){//被摧毁后一定{1}%率逃出一个步兵,并继承大部分能力
                            tArmy.setUnitArmyId0(1101);
                            if(tArmy.armyActor!=null){
                                tArmy.armyActor.update();
                            }
                            tArmy.drawSkill(93);
                        }else {
                            army_Death(tArmy.getHexagonIndex(),ifRecordDamage);
                        }
                        if(army.ifHaveSkill(122)){//消灭敌军后可以再次移动
                            army.setIfMove(0);
                            army.drawSkill(122);
                        }
                        army.setArmyMoraleChange(tArmy.getUnitGroup()*ComUtil.getRandom( game.resGameConfig.unitMoraleChangeValueMax/2, game.resGameConfig.unitMoraleChangeValueMax));

                        addDialogueData(army, 2, "");
                    }
                }
            }
        }
        //飞弹属于一次性单位
        if(army!=null){
            if(army.armyActor!=null){
                army.armyActor.update();
            }
            if(army.triggerSkill(66)){
                army.setIfAttack(0);
                army.drawSkill(66);
            }else if(army.triggerSkill(14)){
                army.setIfAttack(0);
                army.drawSkill(14);
            }
            if(army.triggerSkill(78)){
                army.setIfMove(0);
                army.drawSkill(78);
            }
            if(army.triggerSkill(108)){
                tactic_IncentiveAround(army);
                army.drawSkill(108);
            }
            if(army.triggerSkill(109)){
                army.addArmyHpByRate(army.getSkillEffect(109));
                army.drawSkill(109);
            }
            if(tArmy!=null){
                if(tArmy.getArmyHpNow()>0){
                    if(raidEffect==2){
                        if(tArmy.getArmyMorale()>game.resGameConfig.resetUnitMoraleMax){
                            tArmy.setArmyMorale(game.resGameConfig.resetUnitMoraleMax);
                        }
                    }
                    if(tArmy.isRound()){tArmy.resetArmyForamtion(0,army.getHexagonIndex());}
                    if(army.triggerSkill(11)||raidEffect==1){//进攻时有{1}%几率将敌人击退
                        int hexagon=getHexagonForTargetBehind(army.getHexagonIndex(),tArmy.getHexagonIndex());
                        if(ifGridIsPass(hexagon)&&((ifSea(army.getHexagonIndex())&&ifSea(tArmy.getHexagonIndex()))||(!ifSea(army.getHexagonIndex())&&!ifSea(tArmy.getHexagonIndex())))){
                            tArmy.armyMove(hexagon);
                            if(isMountain(targetHexagon)){
                                int hp = tArmy.getArmyHpNow() * 10 / 100;
                                tArmy.addArmyHpNow(-hp);
                                if(tArmy.getArmyHpNow()==0){
                                    tArmy.setArmyHpNow(1);
                                }
                            }
                        }else{//击退不了,准备回合+1
                            int hp = tArmy.getArmyHpNow() * 10 / 100;
                            tArmy.addArmyHpNow(-hp);
                            if(tArmy.getArmyHpNow()==0){
                                tArmy.setArmyHpNow(1);
                            }
                        }
                        if(army.ifHaveSkill(11)){
                            army.drawSkill(11);
                        }
                    }
                    if(army.triggerSkill(110)){//造成伤害后一定{1}%几率出现在敌人后方
                        int hexagon=getHexagonForTargetBehind(army.getHexagonIndex(),tArmy.getHexagonIndex());
                        if(ifGridIsPass(hexagon)&&((ifSea(army.getHexagonIndex())&&ifSea(tArmy.getHexagonIndex()))||(!ifSea(army.getHexagonIndex())&&!ifSea(tArmy.getHexagonIndex())))){
                            army.armyMove(hexagon);
                            army.drawSkill(110);
                            tactic_FearAround(army);
                        }
                    }
                    if(tArmy.ifHaveSkill(92)&&tArmy.getArmyHpNow()<army.getArmyHpNow()){
                        tArmy.setLegionIndex(army.getLegionIndex());
                        tArmy.drawSkill(92);
                    }
                }
            }
            if(raidEffect==0&&(tArmy==null||tArmy.getArmyHpNow()==0)){
                FortData t=getFortDataByHexagon(targetHexagon);
                if(t!=null){
                    t.death();
                }
            }

            if(army.ifHaveFeature(5)){
                army_Death(army.getHexagonIndex(),ifRecordDamage);
            }
            if(army.isRound()){army.resetArmyForamtion(0,targetHexagon);}
        }

        if(tArmy!=null&&tArmy.getArmyHpNow()>0){
            setDirect(tArmy, army.getHexagonIndex());
            if(tArmy.ifHaveSkill(58)&&tArmy.getHpRate()<tArmy.getSkillEffect(58)){
                int hexagon = getRandomRegionForAllyTIA1(tArmy.getLegionIndex(), tArmy.getHexagonIndex(), tArmy.getIfSeaForMove(), true, -1);
                tArmy.setTargetRegion(hexagon);
                tArmy.moveForTarget();
                tArmy.drawSkill(58);
            }
            if(tArmy.armyActor!=null){
                tArmy.armyActor.update();
            }
        }
    }

    private boolean ifRaidEffect(ArmyData army, ArmyData tArmy) {
       // &&tBuild==null&&ifRaid&&army.getUnitType()!=6&&!army.potionIsSea()&&!tArmy.potionIsSea()&&!tArmy.ifUnitGroupIsFormation(tDirect,false)
        if(army==null||tArmy==null){
            return false;
        }
        if(army.getUnitType()==6||tArmy.getUnitType()==6){
            return false;
        }
        if(army.potionIsSea()||tArmy.potionIsSea()){
            return false;
        }
        int tDirect=getDirect(tArmy.getHexagonIndex(),army.getHexagonIndex());
        if(tArmy.ifUnitGroupIsFormation(tDirect,false)){
            return false;
        }
        BuildData b=tArmy.getBuildData();
        if(b!=null&&b.getHexagonIndex()==tArmy.getHexagonIndex()){
            return false;
        }
        int forId=getFortId(tArmy.getHexagonIndex());
        if(forId!=-1) {
            if(tArmy.getArmyType()==3){//坦克
                if(forId==5002){
                    return false;
                }
            }else{
                if(forId==5002||forId==5001){
                    return false;
                }
            }
        }
        return true;
    }


    //分离
    //reduceFavor 始终作为负数处理
    public void legion_separate(int li1, int li2,int reduceFavor) {
        LegionData l1=getLegionDataByLi(li1);
        LegionData l2=getLegionDataByLi(li2);
        if(l1!=null&&l2!=null){
            if(l1.getSuzerainLi()==li2){
                l1.setSuzerainLi(0);
            }else if(l2.getSuzerainLi()==li1){
                l2.setSuzerainLi(0);
            }
            if(l1.getInternIndex()==li2){
                l1.setInternIndex(li1);
            }else if(l2.getInternIndex()==li1){
                l2.setInternIndex(li2);
            }else if(l1.getInternIndex()==l2.getInternIndex()){
                if(l1.varRegionCount>l2.varRegionCount){
                    l1.setInternIndex(li1);
                }else{
                    l2.setInternIndex(li2);
                }
            }
        }
        ForeignData f=getForeignData(li1,li2);
        if(f!=null){
            if(reduceFavor>0){
                reduceFavor=-reduceFavor;
            }
            f.reduceFavor(reduceFavor);
            if(f.getForeignType()>0){
                f.setForeignType(0);
                f.setForeignValue(0);
            }
        }
    }

    //恐惧周围血量/士气/军衔比该单位低的单位
    private void tactic_FearAround(ArmyData army) {
        IntArray tempIntArray1=getAroundIdsById(army.getHexagonIndex(), 0, ifLoop, game.tempUtil.getTempIntArray());
        //tempIntArray1.get(i)
        for (int i = 0; i < tempIntArray1.size; i++) {
            int id=tempIntArray1.get(i);
            ArmyData tArmy=getArmyDataByHexagon(id);
            if (tArmy!=null&&ifCanAtk(army.getLegionIndex(),tArmy.getLegionIndex())&&(army.getArmyRank()>tArmy.getArmyRank()||army.getArmyMorale()>tArmy.getArmyMorale()||army.getHpRate()>tArmy.getHpRate())) {
                tArmy.setArmyMoraleChange(ComUtil.getRandom( game.resGameConfig.unitMoraleChangeValueMax/2, game.resGameConfig.unitMoraleChangeValueMax));
            }
        }
        game.tempUtil.disposeTempIntArray(tempIntArray1);
    }
    //激励周围士气比自己低的单位
    private void tactic_IncentiveAround(ArmyData army) {
        IntArray tempIntArray1=getAroundIdsById(army.getHexagonIndex(), 0, ifLoop, game.tempUtil.getTempIntArray());
        //tempIntArray1.get(i)
        boolean ifPlayer=army.playerCanCommand();
        for (int i = 0; i < tempIntArray1.size; i++) {
            int id=tempIntArray1.get(i);
            ArmyData tArmy=getArmyDataByHexagon(id);
            if (tArmy!=null&&tArmy.getArmyMorale()<army.getArmyMorale()&&ifAllyByLi(army.getLegionIndex(),tArmy.getLegionIndex())) {
                tArmy.setArmyMoraleChange(ComUtil.getRandom( game.resGameConfig.unitMoraleChangeValueMax/2, game.resGameConfig.unitMoraleChangeValueMax));
            }
        }
        game.tempUtil.disposeTempIntArray(tempIntArray1);
    }


    private boolean hexagonCanDash(int sourceHexagon,int targetHexagon,int checkFortId) {
        if(!ifSameLandOrSea(sourceHexagon,targetHexagon)){
            return false;
        }
        BuildData b=getBuildDataByRegion(targetHexagon);
        if(b!=null&&b.getCityHpNow()>0){
            return false;
        }
        FortData f=getFortDataByHexagon(targetHexagon);
        if(f!=null&&f.getFortId()==checkFortId){
            return false;
        }
        return true;
    }

    private int getFortId(int hexagon){
        FortData f=getFortDataByHexagon(hexagon);
        if(f!=null){
            return f.getFortId();
        }
        return -1;
    }



    private void nul_StandBy(NulcleData n) {
        n.addNucleRound(1);
    }

    //ai 待机  在同盟或有物资的情况下回血 回士气 isPRound 是否是玩家回合
    // 该方法不会增加armyRound;
    public void army_Standby(ArmyData army) {
        if(!army.ifAllyRegion()){
            return;
        }
        if(army.isPlayerAlly()&&army.getLegionData().getFood()==0){
            return;
        }
        Fb2Map.MapHexagon hexagon=army.getHexagonData();
        if(hexagon==null){
            return;
        }
        if(army.getIfAttack()==0&&army.getIfMove()==0){
            army.setStandyRound(army.getStandyRound()+1);
        }else{
            army.setIfAttack(0);
            army.setIfMove(0);
        }



        // army.addArmyRound(1);


        float oldHR=army.getHpRateF();
        //因为单位的物资功能合并到士气中,所以对其效果进行补偿
        //可以额外恢复 士气值的1/3的hp 和1/2的士气
        BuildData build = getBuildDataByRegion(hexagon.getRegionId());
        if(build==null){
            return;
        }
        if(roundState!=0){
            if(army.isPlayer()&&masterData.ifChief==1&&chiefData!=null){
                if((ComUtil.ifGet(chiefData.unitGetExtraSkillChance)||army.getHexagonIndex()==build.getRegionId())  &&build.getLegionIndex()==army.getLegionIndex()&&army.getArmyRank()<build.getArmyLvNow()){
                    if(army.getHexagonIndex()==build.getRegionId()||army.isFacility(1)){
                        army.updKill(build.getExp(),true);
                    }else{
                        army.updKill(1,false);
                    }
                }
            }else{
                if(build.getLegionIndex()==army.getLegionIndex()&&army.getArmyRank()<build.getArmyLvNow()){
                    if(masterData.getPlayerMode()==2||army.getLegionData().ifAiCheatChance()||army.getHexagonIndex()==build.getRegionId()||army.isFacility(1)){
                        army.updKill(build.getExp(),true);
                    }else{
                        army.updKill(1,false);
                    }
                }
                /*if(masterData.ifChief==1&&chiefData!=null){
                }*/
            }
        }
        FacilityData f=getFacilityDataByHexagon(army.getHexagonIndex());

        if(army.getHexagonData().getBlockType()==1&&f==null){
            return;
        }
        if((army.getArmyType()==4||army.getArmyType()==8)&&f==null){
            return;
        }
        if (ifAllyByLi(build.getLegionIndex(), army.getLegionIndex())&&build.getCityStability()>30) {
          /*  if(hexagon.getOtherTile()==1){
            }*/
            ArmyData regionArmy=build.getRegionUnit();
            if(regionArmy!=null){//在城市修整时,区域中同类型单位的士气增加+{0}
                if(regionArmy.getArmyType()==army.getArmyType()&&regionArmy.ifHaveSkill(19)){
                    army.setArmyMoraleChange(regionArmy.getSkillEffect(19));
                    regionArmy.drawSkill(19);
                }
            }
            if(army.ifHaveSkill(38)){
                build.addCityStability(army.getSkillEffect(38));
                army.drawSkill(38);
            }
            if(army.ifHaveSkill(95)){
                build.restoreArmyState(army.getSkillEffect(95));
                army.drawSkill(95);
            }
            if(army.ifHaveSkill(23)){
                tactic_SpyingMessage(army.getRegionId(),army.getSkillLv(23),army.getLegionIndex(),(roundState==0||(roundState==4&&(army.isPlayer()))));
                army.drawSkill(23);
            }
        }

        //goods=goods*replayRate/100;

        if(build.getCityHpMax()==build.getCityHpNow()&&build.getCityHpMax()>0){
            if(army.ifHaveSkill(100)){
                army.drawSkill(100);
            }
        }
        if(army.ifHaveSkill(98)){
            army.drawSkill(98);
        }
        if(build.getLegionIndex()==army.getLegionIndex()&&army.ifHaveSkill(88)){
            army.drawSkill(88);
        }
        int hp=army.getArmyReplyHp();
        int m=army.getArmyReplyMorale();
        army.addArmyHpNow(hp);
        army.setArmyMoraleChange(m);
        if(m>0){
            tactic_IncentiveAround(army);
        }
        if(oldHR<1&&army.isPlayer()&&army.armyActor!=null&&(roundState==0||(roundState==4&&(army.isPlayer())))){
            army.armyActor.resetFlash();
            effectStage.drawUnitHp(army.getHexagonIndex(),hp,2);
        }
        checkTask(oldHR<0.8f&&army.getHpRateF()>0.8f,army.getLegionIndex(),20,1 );
    }


    public void air_Standby(AirData air) {
        if(air.isPlayerAlly()&&air.getLegionData().getFood()==0){
            return;
        }
        int hp = 0;
        int morale=0;
        int goods=0;
        int replayRate=air.getWeatherXmlE().getInt("replyRate",100);




        BuildData build = air.getBuildData();
        if(build==null){
            return;
        }


        if(roundState==2){
            if(air.isPlayer()) {
                if (masterData.ifChief == 1 && chiefData != null) {
                    replayRate += chiefData.varUnitRestoreEfficiencyChange;
                    if (ComUtil.ifGet(chiefData.unitGetExtraSkillChance) && build.getLegionIndex() == air.getLegionIndex() && air.getAirRank() < build.getAirLvNow()) {
                        air.updKill(build.getAirExp());
                    }
                }
            }else{
                if( build.getLegionIndex() == air.getLegionIndex() && air.getAirRank() < build.getAirLvNow()&&air.getLegionData().ifAiCheatChance()){
                    air.updKill(build.getAirExp());
                }
            }
        }
        if (build.getLegionIndex() == air.getLegionIndex()&&build.getCityStability()>30) {
            morale=build.getBuildReplyMorale();
            goods=build.getAirLvNow();

            int skillEffect=    build.getAirSkillEffect(19);
            if(skillEffect>0){  //在城市修整时,区域中同类型单位的士气增加+{0}
                air.setAirMoraleChange(skillEffect);
                air.drawSkill(19);
            }
            if(air.ifHaveSkill(38)){
                build.addCityStability(air.getSkillEffect(38));
                air.drawSkill(38);
            }
            if(air.ifHaveSkill(95)){
                build.restoreArmyState(air.getSkillEffect(95));
                air.drawSkill(95);
            }
            if(air.ifHaveSkill(23)){
                tactic_SpyingMessage(air.getRegionId(),air.getSkillLv(23),air.getLegionIndex(),(roundState==0||(roundState==4&&(build.isPlayer()||air.isPlayer()))));
                air.drawSkill(23);
            }
        }
        int weatherId=air.getWeatherId();
        if(weatherId==3||weatherId==7){
            replayRate=replayRate+air.getLegionData().getLegionFeatureEffect(83);
        }else if(weatherId==5||weatherId==6){
            replayRate=replayRate+air.getLegionData().getLegionFeatureEffect(84);
        }else if(weatherId==2||weatherId==4){
            replayRate=replayRate+air.getLegionData().getLegionFeatureEffect(85);
        }
        if(air.ifHaveAirFeature(26)&&replayRate<100){
            replayRate=100;
        }
        if(air.getIfAttack()==0){
            replayRate+=air.getAckLv()*2;
        }
        if(air.getIfMove()==0){
            replayRate+=air.getActLv()*2;
        }
        if(ifAllyByLi(getLegionIndexByHexagon(air.getHexagon()),air.getLegionIndex())&&air.ifHaveAirFeature(24)){
            replayRate+= air.getAirFeatureEffect(24);;
        }
        air.setIfAttack(0);
        air.setIfMove(0);
        if(air.getAirMorale()>game.resGameConfig.resetUnitMoraleMax){
            morale=0;
        }else{
            morale=morale*replayRate/100;
        }
        goods=goods*replayRate/100;
        if(build.getCityHpMax()==build.getCityHpNow()&&build.getCityHpMax()>0){
            morale=morale*2;
            goods=goods*2;
        }

        hp = hp+air.getAirReplyHp();
        if(hp>air.getAirHpMax()/2){
            hp=air.getAirHpMax()/2;
        }
        air.addAirHpNow(hp);
        if(goods<=0){
            goods=1;
        }
        if(goods>0){
            air.addAirGoods(goods);
        }
        if(morale>0){
            air.setAirMoraleChange(ComUtil.getRandom(1,morale), game.resGameConfig.resetUnitMoraleMax);
        }
        if(air.getAirMorale()< game.resGameConfig.resetUnitMoraleMax){//如果士气低于标准士气,则回复一下
            if(ComUtil.ifGet(game.resGameConfig.resetUnitMoraleChance +air.getAirRank()* game.resGameConfig.addRestoreMoraleChanceForRankLv)){
                air.setAirMoraleChange(ComUtil.getRandom(1, game.resGameConfig.extraReplyMoraleRatio*air.getAirRank()), game.resGameConfig.resetUnitMoraleMax);
            }else {
                air.setAirMoraleChange(ComUtil.getRandom( game.resGameConfig.unitMoraleChangeValueMax/2, game.resGameConfig.unitMoraleChangeValueMax));
            }
        }else if(air.getAirMorale()>game.resGameConfig.unitMoraleMaxLimit){
            air.setAirMoraleChange(-ComUtil.getRandom( game.resGameConfig.unitMoraleChangeValueMax/2, game.resGameConfig.unitMoraleChangeValueMax));
        }
        air.setAirGoodsNow(air.getAirGoodsNow()+air.getAirReplyGoods());
    }

    public void clearAllDeath(){
        //彻底删除所有的问题单位
        clearArmyDeath();
        clearAirDeath();
        clearNulDeath();
        clearFortDeath();
        clearGeneralDeath();
    }

    private void clearGeneralDeath() {
        Array<GeneralData> rs=game.tempUtil.getTempArray();

        Iterator<IntMap.Entry<GeneralData>> it = generalIDatas.iterator();
        while (it.hasNext()) {
            IntMap.Entry<GeneralData> c = it.next();
            GeneralData a=c.value;

            if(a!=null&&a.getAbilityValue()<0){
                rs.add(a);
                Gdx.app.error("clearNulDeath",a.getAllAttribute());
            }
        }

        for(int i=0;i<rs.size;i++){
            GeneralData a=rs.get(i);
            if(a!=null){
                generalIDatas.remove(a.getGeneralIndex());
            }
            a=null;
        }
        game.tempUtil.disposeTempArray(rs);
    }


    private void clearAirDeath() {
        Array<AirData> rs=game.tempUtil.getTempArray();

        Iterator<IntMap.Entry<AirData>> it = airIDatas.iterator();
        while (it.hasNext()) {
            IntMap.Entry<AirData> c = it.next();
            AirData a=c.value;

            if(a!=null&&(a.getAirHpNow()<=0)){
                rs.add(a);
                Gdx.app.error("clearNulDeath",a.getAllAttribute());
            }
        }

        for(int i=0;i<rs.size;i++){
            AirData a=rs.get(i);
            if(a!=null){
                airIDatas.remove(a.getAirIndex());
            }
            a=null;
        }
        game.tempUtil.disposeTempArray(rs);
    }

    private void clearFortDeath() {
        IntArray rs=game.tempUtil.getTempIntArray();

        Iterator<IntMap.Entry<FortData>> it = fortHDatas.iterator();
        while (it.hasNext()) {
            IntMap.Entry<FortData> c = it.next();
            FortData a=c.value;

            if(a!=null&&(a.getFortRound()<=0 )){
                rs.add(a.getHexagonIndex());
                Gdx.app.error("clearFortDeath",a.getAllAttribute());
            }
        }

        for(int i=0;i<rs.size;i++){
            FortData a=  fortHDatas.remove(rs.get(i));
            if(a.fortActor!=null){
                //a.fortActor.remove();
                a.removeActor();
            }
            a=null;
        }
        game.tempUtil.disposeTempIntArray(rs);
    }

    private void fortDataDeath(int hexagon){
        FortData a=  fortHDatas.remove(hexagon);
        if(a.fortActor!=null){
            //a.fortActor.remove();
            a.removeActor();
        }
        a=null;
    }

    private void clearNulDeath() {
        Array<NulcleData> rs=game.tempUtil.getTempArray();

        Iterator<IntMap.Entry<NulcleData>> it = nulcleIDatas.iterator();
        while (it.hasNext()) {
            IntMap.Entry<NulcleData> c = it.next();
            NulcleData a=c.value;

            if(a!=null&&a.getGameValue()<0){
                rs.add(a);
                Gdx.app.error("clearNulDeath",a.getAllAttribute());
            }
        }
        for(int i=0;i<rs.size;i++){
            NulcleData a=rs.get(i);
            if(a!=null){
                nulcleIDatas.remove(a.getNuclearId());
            }
            a=null;
        }
        game.tempUtil.disposeTempArray(rs);
    }
    public void clearArmyDeath(){
       // IntArray rs=game.tempUtil.getTempIntArray();

        Iterator<IntMap.Entry<ArmyData>> it = armyHDatas.iterator();
        while (it.hasNext()) {
            IntMap.Entry<ArmyData> c = it.next();
            ArmyData a=c.value;
            if(a!=null&&(a.getArmyHpNow()<=0||a.getArmyIndex()==-1  )){
                   armyHDatas.remove(a.getHexagonIndex());
                if(a.armyActor!=null){
                    a.removeActor();
                }
                a=null;
            }
        }

       /* for(int i=0;i<rs.size;i++){

            if(a.armyActor!=null){
                a.armyActor.remove();
            }
            a=null;
        }*/
      //  game.tempUtil.disposeTempIntArray(rs);
    }

    private void army_Death(int hexagon,Boolean ifTrue){
        ArmyData armyData ;

        if(ifTrue){
            armyData = armyHDatas.remove(hexagon);
        }else{
            armyData = armyHDatas.get(hexagon);
        }
        if(armyData==null){
            return;
        }
        Fb2Map.MapHexagon hexagonData=armyData.getHexagonData();
        hexagonData.armyData=null;
        if(armyData==null){return;}
        FortData f=getFortDataByHexagon(hexagon);
        if(f!=null&&ComUtil.ifGet(game.resGameConfig.destroyFortChance)){
            f.death();
        }
        Fb2Map.MapHexagon mapHexagon=getHexagonData(hexagon);
        if(mapHexagon!=null&&mapHexagon.getRegionId()!=hexagon&&mapHexagon.getOtherTile()==1&&ComUtil.ifGet(game.resGameConfig.destroyRailwayChance)){
            mapHexagon.setOtherTile(0);
            mapHexagon.updHexagonBorderAttribute();
            for(int d=1;d<=6;d++){
                int id=getBorderIdByDirect(hexagon,d);
                if(ifGridIsPass(id)){
                    mapHexagon=getHexagonData(id);
                    if(mapHexagon.getOtherTile()==1){
                        mapHexagon.updHexagonBorderAttribute();
                    }
                }
            }
        }
        army_Death(armyData,ifTrue);
    }

    //ifTrue 是否真死
    private void army_Death(ArmyData armyData,Boolean ifTrue) {

        Fb2Map.MapHexagon hexagonData=armyData.getHexagonData();
        hexagonData.armyData=null;
        //布雷
        /*  if(ifTrue&&(armyData.ifHaveFeature(10))&&ComUtil.ifGet(GameMethod.getUnitFeatureEffect(armyData,10)) &&armyData.canDeloyTrap()){
            fort_build(armyData,5005);
        }*/

        checkTask(true,armyData.getLegionIndex(),7,1);
        armyData.setArmyHpNow(0);
        armyData.removeActor();
        addDialogueData(armyData,3,"");
        if(armyData.isPlayer()){
            if(chiefData!=null){
                chiefData.addWarSupport(-armyData.getArmyRank());
            }
        }
        LegionData l= legionDatas.get(armyData.getLegionIndex());
        if(ifTrue){
            switch (armyData.getArmyType()) {
                case 1:
                    l.varInfantryNum -=armyData.getPopulation();
                    l.varInfantryCost -= armyData.getFoodCost() *getMilitaryCostRate();
                    break;
                case 2:
                    l.varArtilleryNum -= armyData.getPopulation();
                    l.varArtilleryCost -= armyData.getFoodCost()  *getMilitaryCostRate();
                    break;
                case 3:
                    l.varArmorNum -= armyData.getPopulation();;
                    l.varArmorCost -= armyData.getFoodCost()  *getMilitaryCostRate();
                    break;
                case 4:
                    l.varNavyNum -= armyData.getPopulation();
                    l.varNavyCost -= armyData.getFoodCost()  *getMilitaryCostRate();
                    break;
                case 5:
                    l.varAirNum -= 1;
                    l.varAirCost -= armyData.getFoodCost() *getMilitaryCostRate();
                    break;
                case 6:
                    if(armyData.ifHaveFeature(5)){
                        l.varMissileNum -= 1;
                        l.varMissileCost -= armyData.getFoodCost()  *getMilitaryCostRate();
                    }else {
                        l.varDefenceNum -=1;
                        l.varDefenceCost -= armyData.getFoodCost()  *getMilitaryCostRate();
                    }
                    break;
                case 7:
                    l.varNuclearNum -= 1;
                    l.varNuclearCost -=armyData.getFoodCost()  *getMilitaryCostRate();
                    break;
                case 8:
                    l.varSubmarineNum -= armyData.getPopulation();
                    l.varSubmarineCost -= armyData.getFoodCost() *getMilitaryCostRate();
                    break;
            }
        }

        if(armyData.getGeneralIndex()!=0){
            general_Death(armyData.getGeneralIndex(),armyData.getFoodCost()/2);
        }
        armyData.setGeneralIndex(0);
        if(armyData.getNucleIndex()!=-1){
            nul_Death(armyData.getNucleIndex());
        }
        armyData.setNucleIndex(-1);
        if(armyData.armyActor!=null){
            armyData.removeActor();
        }
        armyData=null;
    }

    //将领移除
    private void general_Death(int generalIndex,int foodCost) {
        if(generalIndex!=0){
            GeneralData g=  generalIDatas.remove(generalIndex);
            generalIds.removeValue(g.getGeneralId());
            if(g!=null){
                g.setAbility(-1);
                LegionData l= g.getLegionData();
                l.varGeneralNum--;
                l.varGeneralCost -= ComUtil.limitValue(foodCost ,10,255) *getMilitaryCostRate();
            }
        }
    }


    public void air_Death(AirData air) {
        if(air==null){
            return;
        }
        //AirData air = airIDatas.remove(airIndex);

        if(air.generalIndex!=0){
            general_Death(air.generalIndex,air.getFoodCost()/2);
        }
        air.setGeneralIndex(0);
        LegionData l=air.getLegionData();
        BuildData b=air.getBuildData();
        if(b!=null){
            b.removeAirIndex(air.getAirIndex());
        }
        air.setAirHpNow(0);
        l.varAirNum=l.varAirNum-air.getPopulation();
        if (air.armyData!=null&&air.armyData.armyActor!=null) {
            air.armyData.armyActor.updDrawInfo();
        }

        l.varAirNum-=air.getPopulation();
        l.varAirCost -= air.getFoodCost() *getMilitaryCostRate();
    }




    private void nul_Death(int nucleIndex) {
        if(nucleIndex==-1||!nulcleIDatas.containsKey(nucleIndex)){return;}
        NulcleData nul = nulcleIDatas.remove(nucleIndex);
        LegionData nl=nul.getLegionData();
        nl.varNuclearNum--;
        nl.varNuclearCost-= nul.getGameValue() *getMilitaryCostRate();
        nul.remove(0);
        nul.setGameValue(-1);
        //nul = null;
    }
    public void fort_remove(int hexagon){
        FortData f=fortHDatas.remove(hexagon);
        Fb2Map.MapHexagon hexagonData=getHexagonData(hexagon);
        hexagonData.fortData=null;
        if(f==null){
            return;
        }
        f.removeActor();
        f.setFortRound(0);
    }

    private void buildReplyHp(BuildData build) {
        if (build.getCityHpNow() == build.getCityHpMax()) {
            return;
        } else {
            int replayHp = (int) (build.getCityHpMax() * game.resGameConfig.buildReplayHpRate);
            int effect=build.getSkillEffect(101,false);
            if(effect>0){
                replayHp=replayHp*(100+effect)/100;
            }
            if(replayHp>build.getCityHpMax()/2){
                replayHp=build.getCityHpMax()/2;
            }
            build.replayHp(replayHp);
        }
    }


    //goodsType  1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇  -1全部军队  -2全部可指挥军队(海陆空超武除要塞) -3全部陆军 -4全部海军
    //buildPolicy 符合的军团id -1全部
    public boolean getIfHaveArmyForRegion(int region, int type, int legionIndex) {
        if (regionHexagonMap.containsKey(region)) {
            IntArray hexagons = regionHexagonMap.get(region);
            BuildData build = getBuildDataByRegion(region);
            ArmyData army;

            switch (type) {
                case 5:
                    if (build != null && (build.getAirIndex1() != -1 || build.getAirIndex2() != -1 || build.getAirIndex3() != -1 || build.getAirIndex4() != -1)
                            && (legionIndex == -1 || build.getLegionIndex() == legionIndex)) {
                        return true;
                    }
                    break;
                case 7:
                    if (build != null && (build.getNulIndex1() != -1 || build.getNulIndex2() != -1 || build.getNulIndex3() != -1 || build.getNulIndex4() != -1) && (legionIndex == -1 || build.getLegionIndex() == legionIndex)) {
                        return true;
                    }
                    break;
                case -1:
                    if (build != null && (build.getAirIndex1() != -1 || build.getAirIndex2() != -1 || build.getAirIndex3() != -1 || build.getAirIndex4() != -1 || build.getNulIndex1() != -1 || build.getNulIndex2() != -1 || build.getNulIndex3() != -1 || build.getNulIndex4() != -1) && (legionIndex == -1 || build.getLegionIndex() == legionIndex)) {
                        return true;
                    }
                    for (int i = 0, iMax = hexagons.size; i < iMax; i++) {
                        army = getArmyDataByHexagon(hexagons.get(i));
                        if (army != null && ifHArmyDatasContainsKey(hexagons.get(i)) && (legionIndex == -1 || army.getLegionIndex() == legionIndex)) {
                            return true;
                        }
                    }
                    break;
                case -2:

                    if (build != null && (build.getAirIndex1() != -1 || build.getAirIndex2() != -1 || build.getAirIndex3() != -1 || build.getAirIndex4() != -1 || build.getNulIndex1() != -1 || build.getNulIndex2() != -1 || build.getNulIndex3() != -1 || build.getNulIndex4() != -1) && (legionIndex == -1 || build.getLegionIndex() == legionIndex)) {
                        return true;
                    }
                    for (int i = 0, iMax = hexagons.size; i < iMax; i++) {
                        army = getArmyDataByHexagon(hexagons.get(i));
                        if (army != null && ifHArmyDatasContainsKey(hexagons.get(i)) && type != 6 && (legionIndex == -1 || army.getLegionIndex() == legionIndex)) {
                            return true;
                        }
                    }
                    break;
                case -3:
                    for (int i = 0, iMax = hexagons.size; i < iMax; i++) {
                        army = getArmyDataByHexagon(hexagons.get(i));
                        if (army != null && ifHArmyDatasContainsKey(hexagons.get(i)) && (legionIndex == -1 || army.getLegionIndex() == legionIndex)) {
                            return true;
                        }
                    }
                    break;
                case -4:
                    for (int i = 0, iMax = hexagons.size; i < iMax; i++) {
                        army = getArmyDataByHexagon(hexagons.get(i));
                        if (army != null && ifHArmyDatasContainsKey(hexagons.get(i)) && (type == 8 || type == 4) && (legionIndex == -1 || army.getLegionIndex() == legionIndex)) {
                            return true;
                        }
                    }
                    break;

                default://1步兵 2炮兵 3坦克 4船只  6要塞  8潜艇
                    for (int i = 0, iMax = hexagons.size; i < iMax; i++) {
                        army = getArmyDataByHexagon(hexagons.get(i));
                        if (army != null && ifHArmyDatasContainsKey(hexagons.get(i)) && getArmyDataByHexagon(hexagons.get(i)).getArmyType() == type && (legionIndex == -1 || army.getLegionIndex() == legionIndex)) {
                            return true;
                        }
                    }
            }

        }
        return false;
    }

    //兵种获得所有hexagon
    //空军获得build与单位有build的
    //超武获得build的
    public boolean setArmyListByRegion(int region, int legionIndex, Array<ArmyData> armyList, Array<ArmyData> navyList, Array<AirData> airList, Array<NulcleData> nulList) {
        boolean rs=false;
        if (armyList == null) {
            armyList = new Array<>();
        } else {
            armyList.clear();
        }
        if (navyList == null) {
            navyList = new Array<>();
        } else {
            navyList.clear();
        }
        if (airList == null) {
            airList = new Array<>();
        } else {
            airList.clear();
        }
        if (nulList == null) {
            nulList = new Array<>();
        } else {
            nulList.clear();
        }

        if (regionHexagonMap.containsKey(region)) {
            IntArray hexagons = regionHexagonMap.get(region);
            BuildData build = getBuildDataByRegion(region);
            ArmyData army;
            AirData air;
            NulcleData nul;
            if (build != null) {
                if (build.getAirIndex1() != -1 &&  (build.getLegionIndex() == legionIndex||isEditMode(true) )) {
                    air=airIDatas.get(build.getAirIndex1());
                    if(air!=null){  airList.add(air);}rs=true;
                }
                if (build.getAirIndex2() != -1 &&(build.getLegionIndex() == legionIndex||isEditMode(true) )) {
                    air=airIDatas.get(build.getAirIndex2());
                    if(air!=null){  airList.add(air);}rs=true;
                }
                if (build.getAirIndex3() != -1 &&  (build.getLegionIndex() == legionIndex||isEditMode(true) )) {
                    air=airIDatas.get(build.getAirIndex3());
                    if(air!=null){  airList.add(air);}rs=true;
                }
                if (build.getAirIndex4() != -1 &&  (build.getLegionIndex() == legionIndex||isEditMode(true) )) {
                    air=airIDatas.get(build.getAirIndex4());
                    if(air!=null){  airList.add(air);}rs=true;
                }
                if (build.getNulIndex1() != -1 &&  (build.getLegionIndex() == legionIndex||isEditMode(true) )) {
                    nul=nulcleIDatas.get(build.getNulIndex1());
                    if(nul!=null){  nulList.add(nul);}rs=true;
                }
                if (build.getNulIndex2() != -1 &&  (build.getLegionIndex() == legionIndex||isEditMode(true) )) {
                    nul=nulcleIDatas.get(build.getNulIndex2());
                    if(nul!=null){  nulList.add(nul);}rs=true;
                }
                if (build.getNulIndex3() != -1 &&  (build.getLegionIndex() == legionIndex||isEditMode(true) )) {
                    nul=nulcleIDatas.get(build.getNulIndex3());
                    if(nul!=null){  nulList.add(nul);}rs=true;
                }
                if (build.getNulIndex4() != -1 &&  (build.getLegionIndex() == legionIndex||isEditMode(true) )) {
                    nul=nulcleIDatas.get(build.getNulIndex4());
                    if(nul!=null){  nulList.add(nul);}rs=true;
                }
            }
            for (int i = 0, iMax = hexagons.size; i < iMax; i++) {
                army = getArmyDataByHexagon(hexagons.get(i));
                if (army != null  &&(army.getLegionIndex() == legionIndex||isEditMode(true) )) {
                    if (army.getArmyType() == 1||army.getArmyType() == 2||army.getArmyType() == 3||army.getArmyType() == 6) {
                        armyList.add(army);rs=true;
                    } else if (army.getArmyType() == 4||army.getArmyType() ==8) {
                        navyList.add(army);rs=true;
                    }else {
                        Gdx.app.error("setArmyListByRegion 错误数据", ""+army.getAllAttributes());
                    }
                    //查询单位是否有转载飞机且飞机可用.有则加入记录中
                    if(army.getAirCount()>0&& (army.getLegionIndex() == legionIndex||isEditMode(true) )){
                        if (army.airData1 != null ) { airList.add(army.airData1); rs=true; }
                        if (army.airData2 != null ) { airList.add(army.airData2); rs=true; }
                        if (army.airData3 != null ) { airList.add(army.airData3); rs=true; }
                        if (army.airData4 != null ) { airList.add(army.airData4); rs=true; }
                    }
                }
            }
        }
        return rs;
    }




    private boolean ifHArmyDatasContainsKey(int hexagon){
        ArmyData a=getArmyDataByHexagon(hexagon);
        if(a!=null&&a.getArmyHpNow()>0){
            return true;
        }else{
            return false;
        }
    }

    //army 被合并兵种, 只有一编兵种可以被合并
    private boolean ifCanMerge(ArmyData a1, ArmyData a2) {
        ArmyData mArmy=a1; ArmyData sArmy=a2;
        if (mArmy != null && sArmy != null && mArmy.getLegionIndex() == sArmy.getLegionIndex() && sArmy.hexagonIndex != mArmy.hexagonIndex /*&& (army.getUnitGroup() == 1 || sArmy.getUnitGroup() == 1)*/
                &&(mArmy.generalIndex==0||sArmy.generalIndex==0)&&mArmy.getAirCount()==0&&sArmy.getAirCount()==0&&mArmy.getNucleIndex()==-1&&sArmy.getNucleIndex()==-1&&mArmy.getEventIndex()==0&&sArmy.getEventIndex()==0
        )  {
            //单个兵种的组合
            if((a1.getUnitGroup()==1||a2.getUnitGroup()==1)&&a1.getUnitArmyId0()==a2.getUnitArmyId0()&&a1.getArmyHpNow()+a2.getArmyHpNow()<ComUtil.max(a1.getArmyHpMax(),a2.getArmyHpMax())){
                return true;
            }
            //组合部队的组合
            if(ifSystemEffective(23)){
                if(((mArmy.getArmyType()!=4&&!mArmy.isUnitGroup())&&sArmy.isUnitGroup())||(mArmy.isUnitGroup()&&(!sArmy.isUnitGroup()&&sArmy.getArmyType()!=4))){
                    return false;
                }
                if(a1.isUnitGroup()&&a2.isUnitGroup()){
                    if(a2.getUnitGroup()>a1.getUnitGroup()){
                        mArmy=a2;
                        sArmy=a1;
                    }
                }else if(!a1.isUnitGroup()&&!a2.isUnitGroup()){
                    if(a1.getUnitArmyId0()==a2.getUnitArmyId0()&&a2.getUnitGroup()>a1.getUnitGroup()){
                        mArmy=a2;
                        sArmy=a1;
                    }
                }
                boolean mu=mArmy.isUnitGroup();
                boolean su=sArmy.isUnitGroup();
                if(sArmy.ifHaveFeature(33)||mArmy.ifHaveFeature(33)){//支援
                    if(sArmy.isPlayer()){//玩家
                        if(  !mArmy.potionIsSea()&&!sArmy.potionIsSea()&&(mArmy.getHpRateF()<1f)||( sArmy.getHpRateF()<1f)){
                            return true;
                        }
                    }else {//ai
                        if (!mArmy.potionIsSea() && !sArmy.potionIsSea() && (mArmy.getHpRateF() < 0.5f) || (sArmy.getHpRateF() < 0.5f)) {
                            return true;
                        }
                    }
                }else  if(mu&&su){//组合部队
                    LegionData l=sArmy.getLegionData();

                    if(sArmy.getUnitGroup()+mArmy.getUnitGroup()<8){//不满的才能组建部队
                        if(sArmy.getArmyType()==4||sArmy.getArmyType()==8){
                            if(mArmy.getArmyType()==sArmy.getArmyType()){
                                return true;
                            }
                        }else if(sArmy.getArmyType()==1||sArmy.getArmyType()==2||sArmy.getArmyType()==3){
                            if(mArmy.getArmyType()==1||mArmy.getArmyType()==2||mArmy.getArmyType()==3){
                                return true;
                            }
                        }else if(sArmy.getArmyType()==6){
                            if(mArmy.getArmyType()==6){
                                return true;
                            }
                        }
                    }else if(sArmy.getUnitGroup()==1){
                        int tarmyId = sArmy.getUnitGroupArmyId(0);
                        for(int i=0;i<7;i++){
                            int sarmyId = mArmy.getUnitGroupArmyId(i);
                            if(sarmyId==0){continue;}
                            if(sarmyId==tarmyId){
                                int index = mArmy.getPotionForCanUpdUnitWealv(sarmyId);
                                if (index >-1) {
                                    return true;
                                }
                                index = mArmy.getPotionForCanUpdUnitGrouplv(sarmyId);
                                if (index> -1) {
                                    return true;
                                }
                            }
                        }
                        return false;
                    }
                }else{
                    if(sArmy.getUnitArmyId0() == mArmy.getUnitArmyId0()){
                        if(mArmy.canUpdUnitGroupGroupLv(0)){//可以升编
                            return true;
                        }else if(sArmy.getHpRateF()<0.5f||mArmy.getHpRateF()<0.5f){//可以疗伤,需半血以下
                            return true;
                        }
                        //ai之间当不显形时且有一个半血且在陆地上时可以合并
                    }else  if(!sArmy.isPlayer()&&roundState!=0&&!sArmy.potionIsSea()&&!mArmy.potionIsSea()&&sArmy.getArmyType()==mArmy.getArmyType()&& (sArmy.getHpRate()<50||mArmy.getHpRate()<50)&&sArmy.armyActor==null&&mArmy.armyActor==null){
                        return true;
                    }else if(sArmy.getGeneralIndex()==0&&sArmy.getArmyType()==4&&sArmy.getUnitGroup()==1&&ComUtil.ifValueBetween(sArmy.getUnitArmyId0(),1401,1405,true)&&mArmy.getArmyType()!=4&&mArmy.getArmyType()!=8&&mArmy.potionIsSea()){
                        if(mArmy.getTransportType()==0){
                            return true;
                        }else if(mArmy.getTransportType()+1400<sArmy.getUnitArmyId0()){
                            return true;
                        }else if(mArmy.getTransportType()+1400==sArmy.getUnitArmyId0()&&(sArmy.getHpRateF()<0.5f||mArmy.getHpRateF()<0.5f)){
                            return true;
                        }
                    }else if(mArmy.getGeneralIndex()==0&&mArmy.getArmyType()==4&&mArmy.getUnitGroup()==1&&ComUtil.ifValueBetween(mArmy.getUnitArmyId0(),1401,1405,true)&&sArmy.getArmyType()!=4&&sArmy.getArmyType()!=8&&sArmy.potionIsSea()){
                        if(sArmy.getTransportType()==0){
                            return true;
                        }else if(sArmy.getTransportType()+1400<=mArmy.getUnitArmyId0()){
                            return true;
                        }else if(sArmy.getTransportType()+1400==mArmy.getUnitArmyId0()&&(sArmy.getHpRateF()<0.5f||mArmy.getHpRateF()<0.5f)){
                            return true;
                        }
                    }
                }
            }

        }
        return false;
    }
    private boolean ifCanMerge(int hexagon, ArmyData army) {
        return ifCanMerge(getArmyDataByHexagon(hexagon),army);
    }

    //functionIndex
    //1001 升级指定建筑科技,强制升级,如果钱不够也会升级
    //1002 随机设置低于等级的城市的工业等级为x  0~goodsValue
    //1003 升级指定军团科技
    //1004 设计build的等级为0~bontyValue 的随机值 value的值: 是否优化所有城市  贸易,文化,交通,研究所,原料,电力,城市,工业,医院,城防,飞机厂,防空基地,秘密武器,军营
    //1005 设计legion的等级为0~bontyValue 的随机值 value的值:城市,工业,研究,能源,交通,士兵军衔,炮兵军衔,坦克军衔,要塞军衔,海军军衔,空军军衔,升级补给,城防升级,城市导弹升级,城市超武升级,军团金融升级,军团贸易规模,城市文化等级,航天科技,步兵卡库,装甲卡库,火炮卡库,海军卡库,空军卡库,超武卡库,导弹卡库,潜艇卡库,防御卡库,将领卡库,军校等级



    //2001 随机提高单位的武器等级
    //2002 提高指定军团的资源
    //2003 设定指定将领   bontyValue:数量
//3001  已取消 裂土分王 legionIndex无实际意义 bontyValue:int country,int internIndex,int capitalId,int tax,int res,int generalNum
//3002 已取消 更换国旗以及势力色  bontyValue: 更换的国旗,势力色4值

    private void buff(int legionIndex, int functionIndex, int count, int chance, String value) {
        if (count < 1) {
            count = 1;
        }
        int tempV=0;
        LegionData l=getLegionDataByLi(legionIndex);
        for (int i = 0; i < count; i++) {
            switch (functionIndex) {
                case 1001:
                   /* Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
                    while (it.hasNext()) {
                        IntMap.Entry<BuildData> c = it.next();
                        BuildData b=c.value;*/
                    for(int bi=0;bi<buildRDatas.size();bi++) {
                        BuildData b=buildRDatas.getByIndex(bi);
                        if (b != null&& b.getBuildType()!=2 && b.getLegionIndex() == legionIndex && ComUtil.ifGet(chance+l.getLevel()*10)) {
                            legion_UpdTech(legionDatas.get(legionIndex), b, ComUtil.getRandOne(value));
                        }
                    }
                    break;
                case 1002:
                 /*   Iterator<IntMap.Entry<BuildData>> itB1 = buildRDatas.iterator();
                    while (itB1.hasNext()) {
                        IntMap.Entry<BuildData> c = itB1.next();
                        BuildData b=c.value;*/
                    for(int bi=0;bi<buildRDatas.size();bi++) {
                        BuildData b=buildRDatas.getByIndex(bi);
                        tempV=ComUtil.getRandOne(value);
                        if (b != null&& b.getBuildType()!=2 && b.getLegionIndex() == legionIndex && b.getIndustryLvNow() <tempV && ComUtil.ifGet(chance+l.getLevel()*10)) {
                            b.setIndustryLvNow(tempV);
                        }
                    }
                    break;
                case 1003:
                    String[] techs=value.split(",");
                    for (int j = 0; j < techs.length; j++) {
                        if (l!=null&&ComUtil.isNumeric(techs[j])&&ComUtil.ifGet(chance+l.getLevel()*10)) {
                            legion_UpdTech(l, null,Integer.parseInt( techs[j]));
                        }
                    }
                    break;
                case 1004:
                  /*  Iterator<IntMap.Entry<BuildData>> itB2 = buildRDatas.iterator();
                    while (itB2.hasNext()) {
                        IntMap.Entry<BuildData> c = itB2.next();
                        BuildData b=c.value;*/
                    for(int bi=0;bi<buildRDatas.size();bi++) {
                        BuildData b=buildRDatas.getByIndex(bi);
                        if(b.ifSea()){
                            continue;
                        }
                        b.setCardLvByBuffValue(value);
                    }
                    break;
                case 1005:
                    for (LegionData legion : legionDatas) {
                        legion.setCardLvByBuffValue(value);
                    }
                    break;


                case 2001:
                    Iterator<IntMap.Entry<ArmyData>> itb = armyHDatas.iterator();
                    while (itb.hasNext()) {
                        ArmyData armyData=itb.next().value;
                        if (armyData != null && armyData.getLegionIndex() == legionIndex && ComUtil.ifGet(chance+l.getLevel()*10)) {
                            armyData.updUnitGroupWealLv(ComUtil.getRandOne(value),1);
                        }
                    }
                    break;

                case 2002:
                    float v=0;
                    if(ComUtil.isNumeric(value)){v=Integer.parseInt(value)*0.5f;}else {v=2.5f;}
                    if(worldData.getWorldMoney()==0){ l.addMoney((int) (500*v));}else {l.addMoney((int) (worldData.getWorldMoney()*v));}
                    if(worldData.getWorldIndustry()==0){ l.addIndustry((int) (200*v));}else {l.addIndustry((int) (worldData.getWorldIndustry()*v));}
                    if(worldData.getWorldTech()==0){ l.addTech((int) (100*v));}else {l.addTech((int) (worldData.getWorldTech()*v));}
                    if(worldData.getWorldFood()==0){ l.addFood((int) (500*v));}else {l.addFood((int) (worldData.getWorldFood()*v));}
                    if(worldData.getWorldMineral()==0){ l.addMineral((int) (200*v));}else {l.addMineral((int) (worldData.getWorldMineral()*v));}
                    if(getAge()>0){
                        if(worldData.getWorldOil()==0){ l.addOil((int) (300*v));}else {l.addOil((int) (worldData.getWorldOil()*v));}
                    }
                    break;
                case 2003:
                    int generalNum=1;
                    if(ComUtil.isNumeric(value)){generalNum=Integer.parseInt(value);}
                    createGeneralUnit(legionIndex,generalNum);
                    break;
                case 3001:
                    //创建军团 legionIndex无实际意义 bontyValue:int country,int internIndex,int capitalId,int tax,int res,int generalNumcreateCountry();
                  /*  String[] rs=value.split(",");
                    createCountry( Integer.parseInt(rs[0]),
                            getInternByCountry(Integer.parseInt(rs[1])),
                            Integer.parseInt(rs[2]),
                            Integer.parseInt(rs[3]),
                            Integer.parseInt(rs[4]),
                            Integer.parseInt(rs[5]));*/
                    break;
                case 3002:
                  /*  rs=value.split(",");
                    replaceFlagAndColor(legionIndex,Integer.parseInt(rs[0]),Integer.parseInt(rs[1]),
                            Integer.parseInt(rs[2]),Integer.parseInt(rs[3]),Integer.parseInt(rs[4]));*/
                    break;
            }
        }
    }
    //sCountry 为0则直接为玩家
    public void replaceFlagAndColor(int sCountry,int tCountry, int r, int g, int b, int a,boolean mustHaveRegion) {
        LegionData l=null;
        if(sCountry==0){
            l=getPlayerLegionData();
        }else{
           l= getLegionByCountry(sCountry,mustHaveRegion);
        }

        if(l!=null){
            l.setCountryId(tCountry);
            l.setRed(r);
            l.setGreen(g);
            l.setBlue(b);
            l.setAlpha(a);
            l.initVirAttribute();
        }

    }


    //初始化地图 创造单位
    private void createInitUnit(int round) {
        //boolean ifInPlayerRound=roundState==0&& game.sMapScreen!=null;
        int pIndex=masterData.playerLegionIndex;
        masterData.playerLegionIndex=0;
        playerLegionData=legionDatas.get(0);
        roundState=1;
        nextRoundReady(round);
        for(int i=0,iMax=legionDatas.size;i<iMax;i++){
            LegionData l=legionDatas.get(i);
            if(l==null||l.varRegionCount==0||l.getLegionIndex()==0){continue;}
            nextRoundAct(l,false);
        }
        nextRoundEnd(true);
        masterData.playerLegionIndex=pIndex;
        playerLegionData=legionDatas.get(pIndex);
        initState();
        dialogueDatas.clear();
        roundState=0;
    }

    public void updAllBuildActor(){
        for(int i=0;i<buildRDatas.size();i++){
            BuildData b=buildRDatas.getByIndex(i);
            if(b!=null){
                if(b.buildActor!=null){
                    b.buildActor.update();
                }
            }
        }
    }




    //创造将领单位, count 数量-1代表根据领土,将领上将
    private void createGeneralUnit(int legionIndex,  int count) {

        LegionData l=getLegionDataByLi(legionIndex);
        if(!l.ifCanRecruitGeneral()){
            return;
        }

        roundLegionIndex=l.getLegionIndex();
        roundCountryIndex=l.getCountryId();
       /* try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }*/
        //满将
        if(count<=0){
            count=l.getGeneralCardNum()-l.varGeneralNum;
        }
        tempArmyDataArray = getArmyListByLi(legionIndex);
        if(tempArmyDataArray.size==0){
            return;
        }else if(tempArmyDataArray.size<count){
            count= tempArmyDataArray.size;
        }
        int jMax= tempArmyDataArray.size,gr;
        for(int i=0;i<count;i++){
            for(int j=0;j<jMax;j++){
                ArmyData a= tempArmyDataArray.get(j);
                if(a!=null&&a.getGeneralIndex()==0&&a.getArmyType()!=6){
                    armyUpdForGeneral(a);
                    gr=a.getGeneralData().getRank();
                    a.setRankForValue(ComUtil.getRandom(3*(1+getAge()),gr));
                    if(a.getUnitGroup()<3){
                        a.updArmyGroup();
                        a.resetArmyHpMax();
                    }
                    break;
                }
            }
        }
    }

    private Array<ArmyData> getArmyListByLi(int legionIndex) {
        if(tempArmyDataArray ==null){
            tempArmyDataArray =new Array<ArmyData>();
        }else{
            tempArmyDataArray.clear();
        }

        Iterator<IntMap.Entry<ArmyData>> it = armyHDatas.iterator();
        while (it.hasNext()) {
            IntMap.Entry<ArmyData> c = it.next();
            ArmyData a=c.value;

            if(a!=null&&a.getLegionIndex()==legionIndex){
                tempArmyDataArray.add(a);
            }
        }
        tempArmyDataArray.shuffle();
        return tempArmyDataArray;
    }

    //检查历史buff
    /*private void checkHBuff() {
        for (XmlReader.Element hBuff : hBuffEs) {
            if (!compareGameTime(true,hBuff.getInt("year"), hBuff.getInt("month"))) {
              takeHBuffTIA1(hBuff.get("country","-1"),hBuff.getBoolean("ifPlayer",false),hBuff.getInt("eventId",0) ,hBuff.getInt("function", 0), hBuff.getInt("count", 0), hBuff.getInt("chance", 0), hBuff.get("value", "0"),true);
                hBuffEs.removeValue(hBuff, false);
            }
        }
    }*/
    //TODO  hevent的条件检查
    private void checkHEvent() {
        LegionData pl=getPlayerLegionData();
        for (XmlReader.Element eE : hEventEs) {
            String triggerType=eE.get("triggerType");
            boolean ifInTime=!compareGameTime(true,eE.getInt("year"), eE.getInt("month"))&&eE.getInt("chance")!=0;
            String triggerValue=eE.get("triggerValue");
            int triggerValueSplit=ComUtil.getCountByStrSplit(triggerValue);
            switch (triggerType){
                case "autoTriggerInTime"://自动触发 只要时间符合即触发
                    if (ifInTime) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "allIsEnemyInTime"://triggerValue 值为敌对国countryId,用","分割,当都是敌人的时候为true
                    if (ifInTime&&triggerValueSplit>0&&pl.allIsEnemyCountry(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "orIsEnemyInTime"://triggerValue 值为敌对国countryId,用","分割,当都是敌人的时候为true
                    if (ifInTime&&triggerValueSplit>0&&pl.orIsEnemyCountry(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "allIsCapitalInTime"://triggerValue 值为areaId
                    if (ifInTime&&triggerValueSplit>0&&allIsCapital(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "ifAllCountrysIsAgainstInTime"://triggerValue 值为counryId
                    if (ifInTime&&triggerValueSplit>1&&ifAllCountrysIsAgainstInTime(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "ifOrCountrysIsAgainstInTime"://triggerValue 值为counryId
                    if (ifInTime&&triggerValueSplit>1&&ifOrCountrysIsAgainstInTime(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "ifAllCountrysIsAllyInTime"://triggerValue 值为counryId
                    if (ifInTime&&triggerValueSplit>1&&ifAllCountrysIsAllyInTime(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "ifOrCountrysIsAllyInTime"://triggerValue 值为counryId
                    if (ifInTime&&triggerValueSplit>1&&ifOrCountrysIsAllyInTime(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "ifFirstCountrysIsAgainstOthersInTime"://triggerValue 值为counryId
                    if (ifInTime&&triggerValueSplit>1&& ifFirstCountrysIsAgainstOthersInTime(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "ifCountryCapitalIsAreaInTime"://triggerValue legion,area
                    if (ifInTime&&triggerValueSplit==2&& ifCountryCapitalIsAreaInTime(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "ifCountryCapitalIsSRRegionInTime"://triggerValue legion,srRegion
                    if (ifInTime&&triggerValueSplit==2&& ifCountryCapitalIsSRRegionInTime(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "orIsCapitalInTime"://triggerValue 值为areaId
                    if (ifInTime&&triggerValueSplit>0&&orIsCapital(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "orNotIsEnemyInTime"://triggerValue 值为目标国countryId,用","分割, 有一个只要不是敌人的时候就为true
                    if (ifInTime&&triggerValueSplit>0&&pl.orNotIsEnemy(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "allNotIsEnemyInTime"://triggerValue 值为目标国countryId,用","分割, 当都不是敌人的时候为true
                    if (ifInTime&&triggerValueSplit>0&&pl.allNotIsEnemy(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "isEnemyAndHaveAreaInTime"://triggerValue countryId,areaId 第一个值为countryId,后面的值为地名areaId,需判断countryId是否为敌对国,countryId是否有areaId,都满足时为true
                    if (ifInTime&&triggerValueSplit>1&&pl.isEnemyAndTargetHaveArea(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "isEnemyAndHaveSRRegionInTime"://triggerValue countryId,areaId 第一个值为countryId,后面的值为地名srregion,需判断countryId是否为敌对国,countryId是否有srregion,都满足时为true
                    if (ifInTime&&triggerValueSplit>1&&pl.isEnemyAndTargetHaveSRRegion(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "ifCountryHaveOrAreaInTime"://triggerValue countryId,areaId 第一个值为目标国的countryId,后面的值都为地名areaId,判断目标国是否拥有地名,满足时为true
                    if (ifInTime&&triggerValueSplit>1&& ifCountryHaveOrArea(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "ifCountryHaveAllAreaInTime"://triggerValue countryId,areaId 第一个值为目标国的countryId,后面的值都为地名areaId,判断目标国是否拥有地名,满足时为true
                    if (ifInTime&&triggerValueSplit>1&& ifCountryHaveAllArea(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "ifCountryHaveSRRegionInTime"://triggerValue countryId,areaId 第一个值为目标国的countryId,后面的值都为srregion,判断目标国是否拥有srregion,部分也算拥有,满足时为true
                    if (ifInTime&&triggerValueSplit>1&& ifCountryHaveSRRegion(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "ifOrAreaIsWarInTime"://triggerValue areaId 判断地名的区域是否是战斗状态
                    if (ifInTime&&triggerValueSplit>0&&ifOrAreasIsWar(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "ifAllAreaIsWarInTime"://triggerValue areaId 判断地名的区域是否是战斗状态
                    if (ifInTime&&triggerValueSplit>0&&ifAllAreasIsWar(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "ifAllSRRegionIsWarInTime"://triggerValue areaId 判断战略区域是否有战斗状态
                    if (ifInTime&&triggerValueSplit>0&& allSRRegionIsWar(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "ifOrSRRegionIsWarInTime"://triggerValue areaId 判断战略区域是否有战斗状态
                    if (ifInTime&&triggerValueSplit>0&& orSRRegionIsWar(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;
                case "ifCountryStabilityBetweenValueInTime"://triggerValue countryId,stabilityMin,stabilityMax 判断目标国的稳定度是否在两个值的区间
                    if (ifInTime&&triggerValueSplit==3&& ifCountryStabilityBetweenValue(triggerValue)) {
                        takeHEvent(eE,eE.getInt("chance",50));
                        hEventEs.removeValue(eE, false);
                    }
                    break;



                default:
                    if(ResDefaultConfig.ifDebug){
                        Gdx.app.log("this EventE not trigger:"+triggerType,eE.toString());
                    }
                    break;
            }
        }
    }
    //triggerValue countryId,stabilityMin,stabilityMax 判断目标国的稳定度是否在两个值的区间
    private boolean ifCountryStabilityBetweenValue(String triggerValue) {
        String[] strs = triggerValue.split(",");
        if (ComUtil.isNumeric(strs[0])&&ComUtil.isNumeric(strs[1])&&ComUtil.isNumeric(strs[2])) {
            int c=Integer.parseInt(strs[0]);
            LegionData l=getLegionDataByLi(c);
            if(l!=null&&ComUtil.ifValueBetween(l.getStability(),Integer.parseInt(strs[1]),Integer.parseInt(strs[2]),true)){
                return true;
            }
        }
        return false;
    }
    //triggerValue srregion 判断战略区域是否有战斗状态
    private boolean allSRRegionIsWar(String triggerValue) {
        String[] strs = triggerValue.split(",");
        int t=0;
        for (int i = 0; i < strs.length; i++) {
            if (ComUtil.isNumeric(strs[i])) {
                int srRegion=Integer.parseInt(strs[i]);
                if( srRegionMap.containsKey(srRegion)){
                    IntArray rs= srRegionMap.get(srRegion);
                    for(int j=0;j<rs.size;j++){
                        BuildData tb=getBuildDataByRegion(rs.get(j));
                        if(tb!=null){
                            if(!tb.isWar()){
                                return false;
                            }
                            t++;
                        }
                    }
                }
            }
        }
        if(t>0){
            return true;
        }
        return false;
    }
    //triggerValue srregion 判断战略区域是否有战斗状态
    private boolean orSRRegionIsWar(String triggerValue) {
        String[] strs = triggerValue.split(",");
        for (int i = 0; i < strs.length; i++) {
            if (ComUtil.isNumeric(strs[i])) {
                int srRegion=Integer.parseInt(strs[i]);
                if( srRegionMap.containsKey(srRegion)){
                    IntArray rs= srRegionMap.get(srRegion);
                    for(int j=0;j<rs.size;j++){
                        BuildData tb=getBuildDataByRegion(rs.get(j));
                        if(tb!=null&&tb.isWar()){
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
    //triggerValue areaId 判断地名的区域是否是战斗状态
    private boolean ifOrAreasIsWar(String triggerValue) {
        String[] strs = triggerValue.split(",");
        for (int i = 0; i < strs.length; i++) {
            if (ComUtil.isNumeric(strs[i])) {
                int areaId=Integer.parseInt(strs[i]);
                if(buildNameMap.containsKey(areaId)){
                    BuildData b=getBuildDataByRegion(buildNameMap.get(areaId,0));
                    if(b!=null&&b.isWar()){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    //triggerValue areaId 判断地名的区域是否是战斗状态
    private boolean ifAllAreasIsWar(String triggerValue) {
        String[] strs = triggerValue.split(",");
        int t=0;
        for (int i = 0; i < strs.length; i++) {
            if (ComUtil.isNumeric(strs[i])) {
                int areaId=Integer.parseInt(strs[i]);
                if(buildNameMap.containsKey(areaId)){
                    BuildData b=getBuildDataByRegion(buildNameMap.get(areaId,0));
                    if(b!=null){
                        if(!b.isWar()){
                            return false;
                        }
                        t++;
                    }
                }
            }
        }
        if(t>0){
            return true;
        }
        return false;
    }
    //triggerValue countryId,areaId 第一个值为目标国的countryId,后面的值都为srregion,判断目标国是否拥有srregion,部分也算拥有,满足时为true
    private boolean ifCountryHaveSRRegion(String triggerValue) {
        String[] strs = triggerValue.split(",");
        LegionData tl=null;
        if (ComUtil.isNumeric(strs[0])) {
            int c=Integer.parseInt(strs[0]);
            tl=getLegionByCountry(c,true);
        }else{
            return false;
        }
        if(tl!=null){
            for (int i = 1; i < strs.length; i++) {
                if (ComUtil.isNumeric(strs[i])) {
                    int srRegion=Integer.parseInt(strs[i]);
                    if( srRegionMap.containsKey(srRegion)){
                        IntArray rs= srRegionMap.get(srRegion);
                        for(int j=0;j<rs.size;j++){
                            BuildData tb=getBuildDataByRegion(rs.get(j));
                            if(tb!=null&&tb.getLegionIndex()==tl.getLegionIndex()){
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }
    //triggerValue countryId,areaId 第一个值为目标国的countryId,后面的值都为地名areaId,判断目标国是否拥有地名,满足时为true
    private boolean ifCountryHaveAllArea(String triggerValue) {
        String[] strs = triggerValue.split(",");
        LegionData tl=null;
        if (ComUtil.isNumeric(strs[0])) {
            int c=Integer.parseInt(strs[0]);
            tl=getLegionByCountry(c,true);
        }else{
            return false;
        }
        if(tl!=null){
            int t=0;
            for (int i = 1; i < strs.length; i++) {
                if (ComUtil.isNumeric(strs[i])) {
                    int c=Integer.parseInt(strs[i]);
                    if(buildNameMap.containsKey(c)){
                        BuildData b=getBuildDataByRegion(buildNameMap.get(c,0));
                        if(b!=null){
                            if(b.getLegionIndex()!=tl.getLegionIndex()){
                                return false;
                            }
                            t++;
                        }
                    }
                }
            }
            if(t>0){
                return true;
            }
        }
        return false;
    }
    //triggerValue countryId,areaId 第一个值为目标国的countryId,后面的值都为地名areaId,判断目标国是否拥有地名,满足时为true
    private boolean ifCountryHaveOrArea(String triggerValue) {
        String[] strs = triggerValue.split(",");
        LegionData tl=null;
        if (ComUtil.isNumeric(strs[0])) {
            int c=Integer.parseInt(strs[0]);
            tl=getLegionByCountry(c,true);
        }else{
            return false;
        }
        if(tl!=null){
            for (int i = 1; i < strs.length; i++) {
                if (ComUtil.isNumeric(strs[i])) {
                    int c=Integer.parseInt(strs[i]);
                    if(buildNameMap.containsKey(c)){
                        BuildData b=getBuildDataByRegion(buildNameMap.get(c,0));
                        if(b!=null&&b.getLegionIndex()==tl.getLegionIndex()){
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
    //triggerValue 值为capitaial
    private boolean orIsCapital(String triggerValue) {
        String[] strs = triggerValue.split(",");
        for (int i = 0; i < strs.length; i++) {
            if (ComUtil.isNumeric(strs[i])) {
                int areaId=Integer.parseInt(strs[i]);
                if(buildNameMap.containsKey(areaId)){
                    BuildData b=getBuildDataByRegion(buildNameMap.get(areaId,0));
                    if(b!=null&&b.isCapital()){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    //triggerValue 值为areaId 判断是否都是首都
    private boolean allIsCapital(String triggerValue) {
        String[] strs = triggerValue.split(",");
        int t=0;
        for (int i = 0; i < strs.length; i++) {
            if (ComUtil.isNumeric(strs[i])) {
                int areaId=Integer.parseInt(strs[i]);
                if(buildNameMap.containsKey(areaId)){
                    BuildData b=getBuildDataByRegion(buildNameMap.get(areaId,0));
                    if(b!=null){
                        if(!b.isCapital()){
                            return false;
                        }
                        t++;
                    }
                }
            }
        }
        if(t>0){
            return true;
        }
        return false;
    }
    //triggerValue counrty,area
    private boolean ifCountryCapitalIsAreaInTime(String triggerValue) {
        String[] strs = triggerValue.split(",");
        if(ComUtil.isNumeric(strs[0])&&ComUtil.isNumeric(strs[1])){
            int areaId=Integer.parseInt(strs[1]);
            if(areaId!=0&&buildNameMap.containsKey(areaId)){
                BuildData b=getBuildDataByRegion(buildNameMap.get(areaId,0));
                if(b!=null){
                   LegionData bl=b.getLegionData();
                   if(bl!=null&&bl.getCountryId()==Integer.parseInt(strs[0])){
                       return true;
                   }
                }
            }
        }
        return false;
    }


    //所有的国家都互相对立
    private boolean ifAllCountrysIsAgainstInTime(String triggerValue) {
        int t=0;
        String[] strs = triggerValue.split(",");
        for (int i = 0; i < strs.length; i++) {
            for(int j=0;j<strs.length;j++){
                if (i!=j&&ComUtil.isNumeric(strs[i])&&ComUtil.isNumeric(strs[j])) {
                    int c1=Integer.parseInt(strs[i]);
                    int c2=Integer.parseInt(strs[i]);
                    LegionData l1=getLegionByCountry(c1,true);
                    LegionData l2=getLegionByCountry(c2,true);
                    if(l1!=null&&l2!=null&&l1.varRegionCount>0&&l2.varRegionCount>0){
                        if(l1.getLegionIndex()!=l2.getLegionIndex()&&getForeignDegree(l1.getLegionIndex(),l2.getLegionIndex())!=-1){
                            return false;
                        }
                        t++;
                    }
                }
            }
        }
        if(t>0){
            return true;
        }
        return false;
    }
    //所有国家中只要有对立
    private boolean ifOrCountrysIsAgainstInTime(String triggerValue) {
        String[] strs = triggerValue.split(",");
        for (int i = 0; i < strs.length; i++) {
            for(int j=0;j<strs.length;j++){
                if (i!=j&&ComUtil.isNumeric(strs[i])&&ComUtil.isNumeric(strs[j])) {
                    int c1=Integer.parseInt(strs[i]);
                    int c2=Integer.parseInt(strs[i]);
                    LegionData l1=getLegionByCountry(c1,true);
                    LegionData l2=getLegionByCountry(c2,true);
                    if(l1!=null&&l2!=null&&l1.getLegionIndex()!=l2.getLegionIndex()&&getForeignDegree(l1.getLegionIndex(),l2.getLegionIndex())==-1){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    //所有国家都是同盟
    private boolean ifAllCountrysIsAllyInTime(String triggerValue) {
        int t=0;
        String[] strs = triggerValue.split(",");
        for (int i = 0; i < strs.length; i++) {
            for(int j=0;j<strs.length;j++){
                if (i!=j&&ComUtil.isNumeric(strs[i])&&ComUtil.isNumeric(strs[j])) {
                    int c1=Integer.parseInt(strs[i]);
                    int c2=Integer.parseInt(strs[i]);
                    LegionData l1=getLegionByCountry(c1,true);
                    LegionData l2=getLegionByCountry(c2,true);
                    if(l1!=null&&l2!=null){
                        if(l1.getLegionIndex()!=l2.getLegionIndex()&&getForeignDegree(l1.getLegionIndex(),l2.getLegionIndex())!=1){
                            return false;
                        }
                        t++;
                    }
                }
            }
        }
        if(t>0){
            return true;
        }
        return false;
    }
    //所有国家只要有同盟
    private boolean ifOrCountrysIsAllyInTime(String triggerValue) {

        String[] strs = triggerValue.split(",");
        for (int i = 0; i < strs.length; i++) {
            for(int j=0;j<strs.length;j++){
                if (i!=j&&ComUtil.isNumeric(strs[i])&&ComUtil.isNumeric(strs[j])) {
                    int c1=Integer.parseInt(strs[i]);
                    int c2=Integer.parseInt(strs[i]);
                    LegionData l1=getLegionByCountry(c1,true);
                    LegionData l2=getLegionByCountry(c2,true);
                    if(l1!=null&l2!=null&&l1.getLegionIndex()!=l2.getLegionIndex()&&getForeignDegree(l1.getLegionIndex(),l2.getLegionIndex())==1){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    //第一个国家国家与其他国家都是对立
    private boolean ifFirstCountrysIsAgainstOthersInTime(String triggerValue) {
        String[] strs = triggerValue.split(",");
        int c=Integer.parseInt(strs[0]);
        LegionData sl=getLegionByCountry(c,true);
        if(sl!=null){
            int t=0;
            for (int i = 1; i < strs.length; i++) {
                if (ComUtil.isNumeric(strs[i])) {
                    int c1=Integer.parseInt(strs[i]);
                    LegionData tl=getLegionByCountry(c1,true);
                    if(tl!=null){
                        if(getForeignDegree(sl.getLegionIndex(),tl.getLegionIndex())!=-1){
                            return false;
                        }
                        t++;
                    }
                }
            }
            if(t>0){
                return true;
            }
        }
        return false;
    }

    //triggerValue counrty,sr
    private boolean ifCountryCapitalIsSRRegionInTime(String triggerValue) {
        String[] strs = triggerValue.split(",");
        if(ComUtil.isNumeric(strs[0])&&ComUtil.isNumeric(strs[1])){
            int li=Integer.parseInt(strs[0]);
            LegionData l=getLegionDataByLi(li);
            if(l!=null){
                BuildData b=l.getCapital();
                if(b!=null&&b.getStrategicRegion()==Integer.parseInt(strs[1])){
                    return true;
                }
            }
        }
        return false;
    }

    public void takePlayerHEventAndRemove(int eventId, int chance){
        XmlReader.Element eE=null;
        for(XmlReader.Element e: hEventEs){
            if(e.getInt("id",0)==eventId){
                eE=e;
                break;
            }
        }
        if(eE!=null){
            takeHEvent(eE,chance);
            hEventEs.removeValue(eE,false);
        }
    }

    public void takeHEvent(int eventId, int chance,boolean ifForce){
        if(!ifForce&&hEventIDatas.contains(eventId)){
            return;
        }
        XmlReader.Element eE=game.gameConfig.getDEF_HEVENT().getElementById(eventId);
        if(eE!=null){
            takeHEvent(eE,chance);
        }
    }

    //101 对应4 选择事件
    private void takeHEvent(XmlReader.Element eE, int chance) {
        if(ComUtil.ifGet(chance)){
            int title=eE.getInt("title");
            if(title!=4&&eE.getInt("effectCountry")==getPlayerLegionData().getCountryId()){//普通事件 和战斗事件的触发
                executeHEvent(eE);
                return;
            }else if((chance==101&&title==4)){//4选择事件 查看脚本触发的chance是否是默认的101
                addPromptData(game.gameMethod.getPromptStrT(46,0),game.gameMethod.getPromptStrT(46,1,"event_treaty_"+eE.getInt("id")),"",12,-1,-1,eE.getInt("id"),-1,false);
                return;
            }else if(title==5){
                executeHEvent(eE);
                return;
            }
        }
    }

    //执行事件
    private void executeHEvent(XmlReader.Element eE) {
        LegionData l=getLegionByCountry(eE.getInt("effectCountry"),eE.getBoolean("ifHaveRegion",true));
        if(l==null){
            return;
        }
        addTriggerHEventIndex(eE.getInt("id"));
        String[] foregions = eE.get("effectForegion").split(",");
        int liA=-1,liB=-1;int favor; ForeignData f=null;int stability=0;
        //根据影响关系国判断筛选
        if(Integer.parseInt(foregions[0])!=0) {
            int count= foregions.length/3;
            LegionData l1=null;
            for(int i=0;i<count;i++){
                if(i*3>foregions.length||i*3+1>foregions.length||i*3+2>foregions.length){
                    break;
                }
                liA=Integer.parseInt(foregions[i*3]);
                liB=Integer.parseInt(foregions[i*3+1]);
                l1=getLegionByCountry(liA,true);
                if(liA!=0&&l1!=null&&l1.getInternIndex()==0){
                    return;
                }
                l1=getLegionByCountry(liB,true);
                if(liB!=0&&l1!=null&&l1.getInternIndex()==0){
                    return;
                }
            }
        }
        String countryStr=game.gameMethod.getStrValueT("country_name_"+eE.getInt("effectCountry"));
        String title=game.gameMethod.getStrValueT("event_title_"+eE.getInt("title"),countryStr);
        String content=game.gameMethod.getStrValueT("event_content_"+eE.getInt("content"));

        StringBuilder effect=new StringBuilder();
        boolean ifPlayer=ComUtil.ifHaveValueInStr(countryStr,getPlayerLegionData().getCountryId());
        if(ifPlayer){
            int money=eE.getInt("effectMoney",0);
            int industry=eE.getInt("effectIndustry",0);
            int food=eE.getInt("effectFood",0);
            int tech=eE.getInt("effectTech",0);
            int tax=eE.getInt("effectTax",0);

            if(money!=0){
                l.addMoney(money);
                effect.append(game.gameMethod.getStrValueT("resource_name_money",money>0?"+"+money:money));
            }
            if(industry!=0){
                l.addIndustry(industry);
                if(effect.length>0){effect.append(",");}
                effect.append(game.gameMethod.getStrValueT("resource_name_industry",industry>0?"+"+industry:industry));
            }
            if(food!=0){
                l.addFood(food);
                if(effect.length>0){effect.append(",");}
                effect.append(game.gameMethod.getStrValueT("resource_name_food",food>0?"+"+food:food));
            }
            if(tech!=0){
                l.addTech(tech);
                if(effect.length>0){effect.append(",");}
                effect.append(game.gameMethod.getStrValueT("resource_name_tech",tech>0?"+"+tech:tech));
            }
            if(tax!=0){
                l.addTaxBonus(tax);
                if(effect.length>0){effect.append(",");}
                effect.append(game.gameMethod.getStrValueT("resource_name_tax",tax>0?"+"+tax:tax));
            }
        }

        if(Integer.parseInt(foregions[0])==0){
            addPromptData(title,content,effect.toString(),liA,liB,false);
        }else {
            int count= foregions.length/3;

            for(int i=0;i<count;i++){
                LegionData la=getLegionByCountry(Integer.parseInt(foregions[i*3]),true);
                if(la!=null){
                    liA=la.getLegionIndex();
                    if(Integer.parseInt(foregions[i*3+1])==0){
                        f=getForeignData(liA,liA);
                        liB=liA;
                    }else {
                        LegionData lb=getLegionByCountry(Integer.parseInt(foregions[i*3+1]),true);
                        if(lb!=null){
                            liB=lb.getLegionIndex();
                            f=getForeignData(liA,liB);
                        }
                    }
                    if(f!=null){
                        favor=Integer.parseInt(foregions[i*3+2]);
                        f.addFavor(favor);
                        if(ifPlayer){
                            if(effect.length>0){effect.append(",");}
                            if(liB==liA){
                                effect.append(game.gameMethod.getStrValueT("event_effect_stability",game.gameMethod.getStrValueT("country_name_"+getCountry(liA)),favor>0?"+"+favor:favor,f.getFavorValue()));
                            }else {
                                effect.append(game.gameMethod.getStrValueT("event_effect_foreign",game.gameMethod.getStrValueT("country_name_"+getCountry(liA)),game.gameMethod.getStrValueT("country_name_"+getCountry(liB)),favor>0?"+"+favor:favor,f.getFavorValue()));
                            }
                        }
                    }
                }

            }
            addPromptData(title,content,effect.toString(),liA,liB,false);
            /*String  effectStr=effect.toString();
            if(content.length()>=effectStr.length()){
                addPromptData(title,content,effectStr,liA,liB,false);
            }else{
                addPromptData(title,effectStr,content,liA,liB,false);
            }*/

        }
    }
    public LegionData getLegionByCountry(int country,boolean mustHaveRegion) {
        if(mustHaveRegion){
            for(LegionData l:legionDatas){
                if(l!=null&&l.varRegionCount>0&&l.getCountryId()==country){
                    return l;
                }
            }
        }else{
            for(LegionData l:legionDatas){
                if(l!=null&&l.getCountryId()==country){
                    return l;
                }
            }
        }
        Gdx.app.error("no legion ",country+"");
        return null;
    }

    public int getLegionIndexByCountry(int country) {
        if(country<0){
            return -1;
        }
        for(LegionData l:legionDatas){
            if(l.getCountryId()==country){
                return l.getLegionIndex();
            }
        }
        Gdx.app.error("no legion ",country+"");
        return -1;
    }






    //ai 自动合并残血兵种id
    private void ai_MergeLegionUnit(int region) {

        //所有兵
        tempArmyDataArray.clear();
        IntArray hexagons = regionHexagonMap.get(region);
        int h, i, j;
        int li = getLegionIndexByHexagon(region);

        for (i = 0; i < hexagons.size; i++) {
            h = hexagons.get(i);
            ArmyData tArmyData= getArmyDataByHexagon(h);
            if ( tArmyData!= null &&tArmyData.getLegionIndex() == li&&tArmyData.canUpdUnitGroupGroupLv(0)) {
                j = armyCanMerge(tArmyData,tempArmyDataArray);
                if (j != -1) {
                    ArmyData army = tempArmyDataArray.removeIndex(j);
                    if (army_Merge(tArmyData, army)) {
                    }
                } else if(tArmyData.getUnitGroup()==1||tArmyData.getArmyMorale()<game.resGameConfig.unitMoraleMinLimit||tArmyData.getHpRate()<game.resGameConfig.unitHpRateMergeLimit){
                    tempArmyDataArray.add(tArmyData);
                }
            }
        }
    }

    public int armyCanMerge(ArmyData army, Array<ArmyData> tempArmyDataArray) {
        for (int i = 0; i < tempArmyDataArray.size; i++) {
            if (ifCanMerge(army, tempArmyDataArray.get(i))) {
                return i;
            }
        }
        return -1;
    }

    //所有国家的所有国土边缘地块
    public IntMap<IntArray> getLegionBordersTIA1() {
        //遍历所有国家的所有国土边缘地块
        IntMap<IntArray> legionBorders = new IntMap<>();

        for (Fb2Map.MapHexagon h : hexagonDatas) {
            if (ifBorderHexagonTIA1(h.getHexagonIndex())) {
                LegionData legion = legionDatas.get(getRegionId(h.getHexagonIndex()));
                if (legion.getInternIndex() != 0) {
                    if (legionBorders.containsKey(legion.getLegionIndex())) {
                        legionBorders.get(legion.getLegionIndex()).add(h.getHexagonIndex());
                    } else {
                        IntArray lb = new IntArray();
                        lb.add(h.getHexagonIndex());
                        legionBorders.put(legion.getLegionIndex(), lb);
                    }
                }
            }
        }
        return legionBorders;
    }

    private boolean ifBorderHexagonTIA1(int hexagon) {
        IntArray tempIntArray1=  getAroundIdsById(hexagon, 0, ifLoop, game.tempUtil.getTempIntArray());
        int li = hexagonDatas.get(getRegionId(hexagon)).getLegionIndex();
        for (int i = 0; i < tempIntArray1.size; i++) {
            int tempId=tempIntArray1.get(i);
            if (hexagonDatas.get(tempId).getRegionId() != hexagonDatas.get(hexagon).getRegionId() &&
                    hexagonDatas.get(getRegionId(tempId)).getLegionIndex() != li
            ) {
                game.tempUtil.disposeTempIntArray(tempIntArray1);
                return true;
            }
        }
        game.tempUtil.disposeTempIntArray(tempIntArray1);
        return false;
    }

    /*public void initConnectDatas() {
        if(connectDatas==null){
            connectDatas = new IntMap<>();
        }else{
            connectDatas.clear();
        }
        ObjectMap<Integer, IntArray> tempConnectDatas = new ObjectMap<Integer, IntArray>();

        int i = 0,iMax,j;HexagonData h,mapBin;
        for (int m=0,mMax=hexagonDatas.size;m<mMax;m++) {
            mapBin=hexagonDatas.get(m);
            if (mapBin.getRegionId() != -1) {
                if (!tempConnectDatas.containsKey(mapBin.getRegionId())) {
                    tempConnectDatas.put(mapBin.getRegionId(), new IntArray());
                }
                //List<Integer> aroundIds = getAroundIdById(i, aroundType, tempRs); //int id, int direct, boolean ifLoop,  IntArray rsIds
                IntArray tempIntArray1=  getAroundIdsById(mapBin.getHexagonIndex(), 0, ifLoop, game.tempUtil.getTempIntArray());
                for ( i=0,iMax=tempIntArray1.size;i<iMax;i++) {
                    j=tempIntArray1.get(i);
                    if(!ifGridIsPass(j)){
                        break;
                    }
                    h=hexagonDatas.get(j);
                    if (j != -1 && j < hexagonDatas.size && h.getRegionId() != -1 && h.getRegionId() != mapBin.getRegionId() && !tempConnectDatas.get(mapBin.getRegionId()).contains(h.getRegionId())) {
                        tempConnectDatas.get(mapBin.getRegionId()).add(h.getRegionId());
                        if (!tempConnectDatas.containsKey(h.getRegionId())) {
                            tempConnectDatas.put(h.getRegionId(), new IntArray());
                        }
                        if (!tempConnectDatas.get(h.getRegionId()).contains(h.regionId)) {
                            tempConnectDatas.get(h.getRegionId()).add(h.regionId);
                        }
                    }
                }
            }
        }


        //将旧的转化为新的格式
        Iterator<ObjectMap.Entry<Integer, IntArray>> it = tempConnectDatas.iterator();
        //int c=0;
        while (it.hasNext()) {
            ObjectMap.Entry<Integer, IntArray> itB=it.next();
            IntArray xs=itB.value;
            int[] x=new int [xs.size];
            for(int n=0,nMax=xs.size;n<nMax;n++){
                x[n]=xs.get(n);
            }
            connectDatas.put(itB.key,x);
            //c++;
        }
        tempConnectDatas.clear();
        tempConnectDatas=null;

    }*/

    public void initConnectDatas() {
        if(connectDatas==null){
            connectDatas = new IntMap<>();
        }else{
            connectDatas.clear();
        }

        IntMap<IntArray> rs = new IntMap<>();
        IntArray tempRs = game.tempUtil.getTempIntArray();
        //List<Integer> repeatIdsList=new ArrayList<>();//排斥列

        int i = 0;
        Fb2Map.MapHexagon h;
        for (Fb2Map.MapHexagon mapBin : hexagonDatas) {
            if (mapBin.getRegionId() != -1) {
                if (!rs.containsKey(mapBin.getRegionId())) {
                    rs.put(mapBin.getRegionId(), new IntArray());
                }
                // tempRs.clear();
                tempRs = getAroundIdsById(mapBin.getHexagonIndex(), 0,ifLoop, tempRs);
                for (int r=0,rMax=tempRs.size;r<rMax;r++) {
                    int id=tempRs.get(r);
                    h=getHexagonData(id);
                    if (h!=null && h.getRegionId() != -1 &&h.getRegionId() != mapBin.getRegionId() && !rs.get(mapBin.getRegionId()).contains(h.getRegionId())) {
                        rs.get(mapBin.getRegionId()).add(h.getRegionId());
                        if (!rs.containsKey(h.getRegionId())) {
                            rs.put(h.getRegionId(), new IntArray());
                        }
                        if (!rs.get(h.getRegionId()).contains(h.getRegionId())) {
                            rs.get(h.getRegionId()).add(h.getRegionId());
                        }
                    }
                    if(h!=null&&h.getRegionId()==-1){
                        Gdx.app.error("hexagonData is error",h.getAllAttributes());
                    }
                }
            }
        }



        //int c=0;
        if(buildRDatas!=null&&buildRDatas.size()>0){
      /*      Iterator<IntMap.Entry<BuildData>> itb = buildRDatas.iterator();
            while (itb.hasNext()) {
                BuildData b=itb.next().value;*/
            for(int bi=0;bi<buildRDatas.size();bi++) {
                BuildData b=buildRDatas.getByIndex(bi);
                IntArray cI=rs.get(b.getRegionId());
                if(cI!=null){
                    ConnectData c=new ConnectData(b.getRegionId());
                    c.setRegionConnectCount(cI.size);
                    for(int t=0,tMax=cI.size;t<tMax;t++){
                        c.setConnectValue(t+1,cI.get(t));
                    }
                    connectDatas.put(c.getRegionMainIndex(),c);
                }
            }
        }else{
            Iterator<IntMap.Entry<IntArray>> it = rs.iterator();
            while (it.hasNext()) {
                IntMap.Entry<IntArray> itB=it.next();
                IntArray cI=itB.value;
                ConnectData c=new ConnectData(itB.key);
                c.setRegionConnectCount(cI.size);
                for(int t=0,tMax=cI.size;t<tMax;t++){
                    c.setConnectValue(t+1,cI.get(t));
                }
                connectDatas.put(c.getRegionMainIndex(),c);
                //c++;
            }
        }



        rs.clear();
        //tempRs.clear();
        game.tempUtil.disposeTempIntArray(tempRs);
        rs=null;
        tempRs=null;
    }

    public boolean ifHaveArmy(int hexagon,boolean ifPlayer) {
        if (ifHArmyDatasContainsKey(hexagon)) {
            ArmyData army = getArmyDataByHexagon(hexagon);
            if (army != null) {
                if(ifPlayer){
                    if(army.armyActor!=null){
                        return true;
                    }else {
                        return false;
                    }
                }else{
                    return true;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    //判断某个单位是否可以移动到某处
    //如果是单位,则会显示问题
    public boolean ifMovePass(ArmyData army, int hexagon) {
        Boolean ifPlayer=army.playerCanCommand();
        ArmyData a=getArmyDataByHexagon(hexagon);

        if(hexagon==15466){
            int s=0;
        }
        if(ifPlayer){
            if (a != null&&a.armyActor!=null) {
                return false;
            }
        }else{
            if (a!= null) {
                return false;
            }
        }

        Fb2Map.MapHexagon h=getHexagonData(hexagon);
        if(h==null||h.getBlockType()==-1){
            return false;
        }
        BuildData build = getBuildDataByRegion(hexagon);
        if (build!=null) {
            int fd=getForeignDegree(build.getLegionIndex(),army.getLegionIndex());
            if(army.isPlayer()){//玩家是否可以占领非敌对建筑
                if(!ifSystemEffective(6)&&fd!=-1){
                    return false;
                }
            }else if(build.getLegionIndex()!=army.getLegionIndex()&&!ifCanAtk(build.getLegionIndex(),army.getLegionIndex())){
                return false;
            }
            if (build.getLegionIndex() != army.getLegionIndex() && build.getCityHpNow() != 0) {
                return false;
            }
            if(!army.isPlayer()&&build.getLegionData().getInternIndex()==0&&build.getLegionIndex()!=0){
                return false;
            }
        }
        if (army.getArmyType() == 4 || army.getArmyType() == 8) {
            if (hexagonDatas.get(hexagon).getBlockType() != 1) {
                return false;
            }
        }

        return true;
    }
    //
    public boolean ifHaveCanAtkEnemy(int mLi, int targetHexagon,boolean ifPlayer) {
        ArmyData targetArmy = getArmyDataByHexagon(targetHexagon);
        if (targetArmy != null&&targetArmy.getArmyHpNow()>0 ) {
            if(ifPlayer){
                if((roundState==2||roundState==3)&&mLi==masterData.getPlayerLegionIndex()){
                    ForeignData f=getForeignData(mLi,targetArmy.getLegionIndex());
                    if(f!=null&&f.getForeignType()>0){
                        if(ifSystemEffective(18)){
                            return true;
                        }
                    }
                }
                if(ifCanAtk(mLi,targetArmy.getLegionIndex())&&targetArmy.armyActor!=null){
                    return true;
                }
                if(ifSystemEffective(5)&&(roundState==0||(roundState==4))&&mLi==masterData.getPlayerLegionIndex()
                        &&!targetArmy.isPlayer()
                        &&targetArmy.armyActor!=null&&targetArmy.getLegionData().getSuzerainLi()!=masterData.getPlayerLegionIndex()){
                    return true;
                }
            }else {
                if(ifCanAtk(mLi,targetArmy.getLegionIndex())){
                    return true;
                }
            }
        }
        BuildData build = getBuildDataByRegion(targetHexagon);
        if (build!=null) {

            if(build.getCityHpNow()> 0){
                if(ifCanAtk(mLi,build.getLegionIndex())){
                    return true;
                }
                if((roundState==2||roundState==3)&&mLi==masterData.getPlayerLegionIndex()){
                    ForeignData f=getForeignData(mLi,build.getLegionIndex());
                    if(f!=null&&f.getForeignType()>0){
                        if(ifPlayer&&ifSystemEffective(18)){
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }


    public boolean ifHaveCanAtkEnemy( ArmyData army,int hexagon,boolean ifPlayer) {
        ArmyData ta=getArmyDataByHexagon(hexagon);
        if(ta!=null&&army.canAttack(ta)&&ta.ifHaveFeature(17)&&(!army.ifHaveFeature(23)&&!army.ifHaveFeature(18))&&getBuildDataByRegion(hexagon)==null&&getFacilityDataByHexagon(hexagon)==null&&!ifSea(army.getHexagonIndex())){
            return false;
        }else if(army.ifHaveFeature(17)&& !ifSea(hexagon)){
            return false;
        }
        return ifHaveCanAtkEnemy(army.getLegionIndex(),hexagon,ifPlayer);
    }

    public boolean ifHaveCanAtkTarget(ArmyData army,int targetHexagon ) {
        if(army.ifHaveFeature(17)&& !ifSea(targetHexagon)){
            return false;
        }
        int li=army.getLegionIndex();
        ArmyData targetArmy = getArmyDataByHexagon(targetHexagon);
        if (targetArmy != null&&targetArmy.getArmyHpNow()>0 ) {
            if(targetArmy.ifHaveFeature(17)&&!army.ifHaveFeature(23)&&getBuildDataByRegion(targetHexagon)==null&&getFacilityDataByHexagon(targetHexagon)==null&& !ifSea(army.getHexagonIndex())){
                return false;
            }else if(ifCanAtk(li, targetArmy.getLegionIndex())){
                return true;
            }
        }
        BuildData build = getBuildDataByRegion(targetHexagon);
        if (build!=null) {
            if (ifCanAtk(li, build.getLegionIndex()) && build.getCityHpNow() != 0) {
                return true;
            }
        }
        return false;
    }


    private boolean ifHaveEnemyInRangeTIA1(int hexagon, int li, int rangeMin, int rangeMax, boolean ifSea,boolean ifPlayer) {
        IntArray tempIntArray1=game.tempUtil.getTempIntArray();
        // tempIntArray1.clear();
        getRangePostion(hexagon, rangeMin, rangeMax, ifSea, tempIntArray1);
        int id;
        for (int i = 0; i < tempIntArray1.size; i++) {
            id = tempIntArray1.get(i);
            if (ifHaveCanAtkEnemy(li,id, ifPlayer)) {
                game.tempUtil.disposeTempIntArray(tempIntArray1);
                return true;
            }
        }
        game.tempUtil.disposeTempIntArray(tempIntArray1);
        return false;
    }

    //direct :1↖ 2↑ 3↗ 4↙ 5↓ 6↘
    private int getIdForDirectRange(int id, int direct, int range) {
        if(direct==0){
            return id;
        }

        //判断处于哪个边
        int y = (int) id / masterData.getWidth();
        int x = id - y * masterData.getWidth();
        boolean ifParity = (x & 1) == 1;
        if (ifParity) {
            switch (direct) {
                case 1:
                    return GameMap.getId(x - range, y - range / 2, masterData.getWidth());
                case 2:
                    return GameMap.getId(x, y - range, masterData.getWidth());
                case 3:
                    return GameMap.getId(x + range, y - range / 2, masterData.getWidth());
                case 4:
                    return GameMap.getId(x - range, y + (range + 1) / 2, masterData.getWidth());
                case 5:
                    return GameMap.getId(x, y + range, masterData.getWidth());
                case 6:
                    return GameMap.getId(x + range, y + (range + 1) / 2, masterData.getWidth());
            }
        } else {
            switch (direct) {
                case 1:
                    return GameMap.getId(x - range, y - (range + 1) / 2, masterData.getWidth());
                case 2:
                    return GameMap.getId(x, y - range, masterData.getWidth());
                case 3:
                    return GameMap.getId(x + range, y - (range + 1) / 2, masterData.getWidth());
                case 4:
                    return GameMap.getId(x - range, y + range / 2, masterData.getWidth());
                case 5:
                    return GameMap.getId(x, y + range, masterData.getWidth());
                case 6:
                    return GameMap.getId(x + range, y + range / 2, masterData.getWidth());
            }
        }
        return -1;
    }


    //判断一个坐标的id是否符合
    public boolean ifGridIsPass(int id) {
        if(id<0||id>masterData.getHeight()*masterData.getWidth()){
            return false;
        }
        int x = GameMap.getHX(id, masterData.getWidth());
        int y = GameMap.getHY(id, masterData.getWidth());

        if (ifLoop) {
            if (y < 0 || y >= masterData.getHeight() || x * y > masterData.getWidth() * masterData.getHeight() || x * y < 0) {
                return false;
            }
        } else {
            if (x < 0 || x >= masterData.getWidth() || y < 0 || y >= masterData.getHeight() || x * y > masterData.getWidth() * masterData.getHeight() || x * y < 0) {
                return false;
            }
        }
        return true;
    }





    //目标位置在进攻范围内
    public boolean ifInRange(int hexagon, int targetHexagon, int minRange, int maxRange, boolean ifOnlySea){
        if(hexagon==targetHexagon&&minRange<=1){
            if(ifOnlySea){
                if(ifSea(hexagon)){
                    return true;
                }
            }else {
                return true;
            }
        }
        int rangeCount = maxRange - minRange + 1;
        //获取左上角值
        //  1↖ 2↑ 3↗ 4↙ 5↓ 6↘
        int[] srd = ResDefaultConfig.Map.GRID_RANGE_SORT_ARRAY;
        int range, grid;

        for (int j = 0, jMax = rangeCount; j < jMax; j++) {
            range = minRange + j;
            grid = getIdForDirectRange(hexagon, 1, range);
            for (int i = 0; i <  srd.length; i++) {
                for (int k = 0, kMax = range; k < kMax; k++) {
                    grid = getIdForDirectRange(grid, srd[i], 1);
                    if(ifOnlySea){
                        if(grid==targetHexagon&&ifSea(grid)){
                            return true;
                        }
                    }else {
                        if(grid==targetHexagon){
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    public IntArray getCanAtkPotionTIA1(ArmyData army,int hexagon ,int minRange, int maxRange, IntArray rs) {
        /*if (rs == null) {
            rs = new IntArray();
        } else {
            rs.clear();
        }*/
        rs.add(1);
        IntArray tempIntArray1=game.tempUtil.getTempIntArray();
        tempIntArray1= getRangePostion(hexagon, minRange, maxRange, army.getIfOnlySeaForTarget(), tempIntArray1);
        rs.clear();
        boolean ifPlayer=army.playerCanCommand();
        for (int i = 0; i < tempIntArray1.size; i++) {
            int id=tempIntArray1.get(i);
            if (ifHaveCanAtkEnemy( army,id, ifPlayer)) {//红色
                rs.add( id);
            }
        }
        game.tempUtil.disposeTempIntArray(tempIntArray1);
        return rs;
    }


    public IntArray getCanAtkPotionTIA1(ArmyData army, int minRange, int maxRange, IntArray rs) {
        /*if (rs == null) {
            rs = new IntArray();
        } else {
            rs.clear();
        }*/
        rs.add(1);
        IntArray tempIntArray1=game.tempUtil.getTempIntArray();
        tempIntArray1= getRangePostion(army.getHexagonIndex(), minRange, maxRange, army.getIfOnlySeaForTarget(), tempIntArray1);
        rs.clear();
        boolean ifPlayer=army.playerCanCommand();
        for (int i = 0; i < tempIntArray1.size; i++) {
            int id=tempIntArray1.get(i);
            if (ifHaveCanAtkEnemy( army,id, ifPlayer)) {//红色
                rs.add( id);
            }
        }
        game.tempUtil.disposeTempIntArray(tempIntArray1);
        return rs;
    }


    private IntArray getRangePostion(int id, int minRange, int maxRange, boolean ifSea, IntArray rs) {
        /*if (rs == null) {
            rs = new IntArray();
        } else {
            rs.clear();
        }*/
        int rangeCount = maxRange - minRange + 1;
        //获取左上角值
        //  1↖ 2↑ 3↗ 4↙ 5↓ 6↘
        int[] srd = {3, 6, 5, 4, 1, 2};
        int range, grid;

        for (int j = 0, jMax = rangeCount; j < jMax; j++) {
            range = minRange + j;
            grid = getIdForDirectRange(id, 1, range);
            for (int i = 0; i <  srd.length; i++) {
                for (int k = 0, kMax = range; k < kMax; k++) {
                    grid = getIdForDirectRange(grid, srd[i], 1);
                    if (grid > 0 && grid < hexagonDatas.size && ifGridIsPass(grid)) {
                        if (ifSea && ifSea(grid)) {
                            rs.add(grid);
                        } else {
                            rs.add(grid);
                        }
                    }
                }
            }
        }
        return rs;
    }

    public int getCoast(int hexagon){
        if (hexagon>=0&&hexagon<hexagonDatas.size&&hexagonDatas.get(hexagon).getIfCoast()>0) {
            return hexagonDatas.get(hexagon).getIfCoast();
        }
        return -1;
    }

    public boolean ifCoast(int hexagon) {
        if (hexagon>=0&&hexagon<hexagonDatas.size&&hexagonDatas.get(hexagon).getIfCoast()!= 0) {
            return true;
        }
        return false;
    }
    //海军可占领地块
    public boolean ifSeaArea(int hexagon) {
        if (hexagonDatas.get(hexagon).getBlockType() == 1) {
            return true;
        }
        BuildData b=getBuildDataByRegion(hexagon);
        //考虑到部分海军射程不够,所以不加沿海城市
        if(b!=null&&(b.buildType==2||b.buildType==1)){
            return true;
        }
        return false;
    }




    /*public void addUpdColorRegion(int i) {
        if (!updColorRegions.contains(i)) {
            updColorRegions.add(i);
        }
    }*/
    /*public void addUpdColorRegionByLi(int li) {
        for(BuildData b: buildRDatas.values()){
            if(b!=null&&b.getLegionIndex()==li){
                addUpdColorRegion(b.getRegionId());
            }
        }
    }*/

    //当目标是某个坐标时的朝向
    private int getDirectForHexagon(int h1, int h2){
        // int h1 = a.getHexagonIndex();
        int w1 = GameMap.getHX(h1, masterData.getWidth());
        int w2 = GameMap.getHX(h2, masterData.getWidth());
        if (w1 > w2) {
            return 0;
        }else{
            return 1;
        }
    }

    private void setDirect(ArmyData a, int h2) {
        int h1 = a.getHexagonIndex();
        int w1 = GameMap.getHX(h1, masterData.getWidth());
        int w2 = GameMap.getHX(h2, masterData.getWidth());
        int direct=a.getDirect(h2);
        //如果值大于10则右,否则左,个位数 1↖ 2↑ 3↗ 4↙ 5↓ 6↘
        if (w1 > w2) {
            a.setArmyDirectionValue(direct);//左
        } else if (w1 < w2) {
            a.setArmyDirectionValue(10+direct);//右
        }else{
            a.setArmyDirectionValue(a.getArmyDirection()*10+direct);
        }
    }

    private void setFogByRegionTIA3(int region) {
        if(masterData.ifFog==0){
            return;
        }
        if (regionHexagonMap.containsKey(region)) {
            IntArray rh = regionHexagonMap.get(region);
            boolean ifFog = ifAllyByLi(getLegionIndexByRegion(region), masterData.playerLegionIndex);//true 可见 false不可见
            for (int i = 0; i < rh.size; i++) {
                if (ifFog) {
                    hexagonDatas.get(rh.get(i)).setIfFog(1);
                }
            }
            /*if (ifFog) {
                for (int i = 0; i < rh.size; i++) {
                    if (ifHArmyDatasContainsKey(rh.get(i))) {
                        ArmyData a = armyHDatas.get(rh.get(i));
                        if (ifAllyByLi(a.getBuildPolicy(), masterData.playerLegionIndex)) {
                            setFogTIA3(rh.get(i), a.getSearchRange(), a.getBuildPolicy());
                        }
                    }
                }
            }*/
        }
    }

    private void setFogTIA3(int hexagon, int range, int li) {
        //如果所处地块与玩家是同盟的话,不需要绘制
        if (ifAllyByLi(getLegionIndexByRegion(hexagon), masterData.playerLegionIndex)) {
            return;
        }
        IntArray tempIntArray3=game.tempUtil.getTempIntArray();
        boolean ifFog = ifAllyByLi(li, masterData.playerLegionIndex);//true 可见 false不可见
        getRangePostion(hexagon, 1, range, true, tempIntArray3);
        for (int i = 0; i < tempIntArray3.size; i++) {
            int tempId=tempIntArray3.get(i);
            if (ifFog) {
                hexagonDatas.get(tempId).setIfFog(1);
            }
        }
        game.tempUtil.disposeTempIntArray(tempIntArray3);
    }

    private void updWorldInfo() {
        this.worldData.worldAge = game.gameMethod.getAgeByYear(getNowYear());
        int money = 0, industry = 0, food = 0, tech = 0,mineral=0,oil=0;

        for (int i=0;i<legionDatas.size;i++) {
            LegionData l=legionDatas.get(i);
            money = l.incomeMoney + money;
            industry = l.incomeIndustry + industry;
            food = l.incomeFood + food;
            tech = l.incomeTech + tech;
            mineral=l.incomeMineral+mineral;
            oil=l.incomeOil+oil;
        }
        this.worldData.setWorldMoney(money / legionDatas.size);
        this.worldData.setWorldIndustry(industry / legionDatas.size);
        this.worldData.setWorldFood(food / legionDatas.size);
        this.worldData.setWorldTech(tech / legionDatas.size);
        this.worldData.setWorldMineral(mineral / legionDatas.size);
        this.worldData.setWorldOil(oil / legionDatas.size);
    }

    //刷新贸易数据
    public void refreshTrade() {
        if(tradeDatas==null||tradeDatas.size==0){
            return;
        }
        //如果世界金钱是0
        if(worldData.getWorldMoney()==0){
            updWorldInfo();
        }
        int goodsType, goodsValue, price, rate;
        int lastGT = 0, lastGV = 0;
        for (int i=0;i<legionDatas.size;i++) {
            LegionData l=legionDatas.get(i);
            lastGT = 0;
            lastGV = 0;
            //如果上期未销售出去,返还贸易结果
            TradeData t = tradeDatas.get(l.legionIndex);
            if (t.getTradeChance() > 0) {
                lastGT = t.goodsType;
                lastGV = t.goodsValue;
            }
            int refreshC=4;
            if(getAge()>0){
                refreshC++;
            }
            goodsType = (l.legionIndex + masterData.roundNow) % refreshC;
            goodsValue = ComUtil.limitValue(l.getLegionTradeValue(goodsType), 0, worldData.getWorldPrice(goodsType));
            if(goodsValue>game.resGameConfig.tradeResMax){goodsValue=game.resGameConfig.tradeResMax;}
            if(l.getInternIndex()==0){
                goodsValue = goodsValue*ComUtil.getRandom(50,200)/100;
            }

            if (goodsValue > 0) {
                t.setGoodsType(goodsType);
                t.setGoodsValue(goodsValue);
                t.setPriceType(ComUtil.getRandom(0,refreshC,goodsType) );
                rate = ComUtil.limitValue((l.getFinancialLvMax()+ 1) * game.resGameConfig.addTradeChanceForLegionFinancialLv + ComUtil.getRandom(0, 30), 20, 100);
                price = worldData.getPrice(goodsType, t.getPriceType(), goodsValue, rate);
                if(price>game.resGameConfig.tradeResMax){price=game.resGameConfig.tradeResMax;}
                if(price==0){price=1;}
                t.setTradeChance(rate);
                t.setPriceValue(price);
                l.reduceIncome(goodsType, goodsValue);
            } else {
                t.setTradeChance(0);
            }
            if (lastGV > 0) {
                l.addIncome(lastGT, lastGV);
            }
        }
    }


    //返回好感度,如果是0说明没有,如果是正数说明成功,否则失败
    public int legion_Trade(LegionData l, TradeData t,int extraChance) {
        if (l.tradeCount == 0) {
            return 0;
        }
        int chance = t.getTradeChance()+getAge()*10+l.getFinancialLvMax()*3+extraChance;
        ForeignData f = getForeignData(l.getLegionIndex(), t.getLegionIndex());
        boolean ifPlayer=(l.getLegionIndex()==masterData.playerLegionIndex||t.getLegionIndex()==masterData.playerLegionIndex);

        if (ifAllyByLi(l.getLegionIndex(), t.getLegionIndex())) {
            chance = chance + ComUtil.limitValue(f.getRealFavor() /3,10,30);
        }else{
            chance = chance + ComUtil.limitValue(f.getRealFavor() /3,5,20);
        }
        LegionData tL = legionDatas.get(t.getLegionIndex());
        int fa = 0;
        int faRate=1;
        if(ifPlayer){
            faRate=1;
        }else {
            faRate=ComUtil.getRandom(1,3);
        }
        //  chance=chance+f.getCivilSpecFavor();
        if (ComUtil.ifGet(chance)) {
            if(roundState==0){t.setTradeChance(0);}
            l.reduceIncome(t.priceType, t.priceValue);
            tL.addIncome(t.priceType, t.priceValue);
            //交易成功额外获得一倍资源奖励
            l.addIncome(t.goodsType, t.goodsValue* game.resGameConfig.tradeSuccessRewardRate);
            tL.reduceIncome(t.goodsType, t.goodsValue);
            fa = ComUtil.getRandom(1, 3);
            fa=fa*faRate;
            f.addFavor(fa);
            l.tradeCount = l.tradeCount - 1;
            if((l.getLegionIndex()==masterData.playerLegionIndex||tL.getLegionIndex()==masterData.playerLegionIndex)&&(l.getLegionIndex()!=tL.getLegionIndex())){
                PromptData p=new PromptData();
                p.setTitle(game.gameMethod.getPromptStrT(1,0));
                if(l.getLegionIndex()==masterData.playerLegionIndex){
                    p.setContent(game.gameMethod.getPromptStrT(1,1, tL.legionName));
                    p.setLi(l.getLegionIndex());
                    p.setLi2(tL.getLegionIndex());
                }else {
                    p.setContent(game.gameMethod.getPromptStrT(1,1,l.legionName));
                    p.setLi(tL.getLegionIndex());
                    p.setLi2(l.getLegionIndex());
                }
                p.setEffect(game.gameMethod.getPromptStrT(1,2,fa,f.getFavorValue()));
                promptDatas.add(p);
            }
            return fa;
        } else {//贸易失败环节
            boolean ifDefault=true;
            chance=50;
            //贸易如果失败则有额外的{0}%机率获得物资而不是损失物资
            if((l.isPlayer()|| tL.isPlayer())&&l.getLegionIndex()!=tL.getLegionIndex()&&ifHaveSpirit(22)){
                //默认是交易方损失
                chance=chance+getSpiritValue(22);
                //如果玩家是贸易方,则概率翻转
                if(l.isPlayer()){
                    chance=100-chance;
                }
            }
            if (ComUtil.ifGet(chance)) {//交易方损失
                l.reduceIncome(t.priceType, t.priceValue);
                tL.addIncome(t.priceType, t.priceValue);
                ifDefault=false;
            } else {//贸易方损失
                l.addIncome(t.goodsType, t.goodsValue);
                tL.reduceIncome(t.goodsType, t.goodsValue);
                ifDefault=true;
            }
            fa = ComUtil.getRandom(2, 5)*faRate;
            f.reduceFavor(fa);
            if(roundState==0){t.setTradeChance(0);}
            l.tradeCount = l.tradeCount - 1;
            if(ifPlayer&&(l.getLegionIndex()!=tL.getLegionIndex())){
                PromptData p=new PromptData();
                p.setTitle(game.gameMethod.getPromptStrT(2,0));
                String defaultStr;
                if(ifDefault){
                    defaultStr=l.legionName;
                }else {
                    defaultStr= tL.legionName;
                }
                if(l.getLegionIndex()==masterData.playerLegionIndex){
                    p.setContent(game.gameMethod.getPromptStrT(2,1,defaultStr, tL.legionName));
                    p.setLi(l.getLegionIndex());
                    p.setLi2(tL.getLegionIndex());
                }else {
                    p.setContent(game.gameMethod.getPromptStrT(2,1,defaultStr,l.legionName));
                    p.setLi(tL.getLegionIndex());
                    p.setLi2(l.getLegionIndex());
                }
                p.setEffect(game.gameMethod.getPromptStrT(2,2,-fa,f.getFavorValue()));
                promptDatas.add(p);
            }
            return -fa;
        }
    }

    //通过 文化相性来计算 额外的成功率
    //TODO


    public ForeignData getForeignData(int liA) {
        /*int index;
        int liB = masterData.playerLegionIndex;
        if (liA <= liB) {
            index = liA * legionDatas.size - ComUtil.getIntervalSum(0, liA) + liB;
        } else {
            index = liB * legionDatas.size - ComUtil.getIntervalSum(0, liB) + liA;
            ;
        }
        return foreignDatas.get(index);*/
        return getForeignData(liA,masterData.playerLegionIndex);
    }
    //注意如果是附属国与宗主国,则正常取值
    // 如果是附属国与其他国,则取其宗主国与该国外交
    public ForeignData getForeignData(int liA, int liB) {
        return getForeignData(liA,liB,legionDatas.size);
    }
    //注意如果是附属国与宗主国,则正常取值
    // 如果是附属国与其他国,则取其宗主国与该国外交
    public ForeignData getForeignData(int liA, int liB,int legionSize) {
        /**/if(foreignDatas==null||foreignDatas.size==0||liA>=legionDatas.size||liB>=legionDatas.size||liA<0||liB<0){
            return null;
        }
        int index;
        LegionData a=legionDatas.get(liA);
        LegionData b=legionDatas.get(liB);
        if(a.getSuzerainLi()!=0&&a.getSuzerainLi()!=liB&&a.getSuzerainLi()!=b.getSuzerainLi()){
            liA=a.getSuzerainLi();
        }
        if(b.getSuzerainLi()!=0&&b.getSuzerainLi()!=liA&&a.getSuzerainLi()!=b.getSuzerainLi()){
            liB=b.getSuzerainLi();
        }
        if (liA <= liB) {
            index = liA * legionSize - ComUtil.getIntervalSum(0, liA) + liB;
        } else {
            index = liB * legionSize - ComUtil.getIntervalSum(0, liB) + liA;
        }
        if (index<0||index>=foreignDatas.size) {
            Gdx.app.error("getForeignDataError",liA+":"+liB+":"+legionSize);
        }
        return foreignDatas.get(index);
    }

    public ForeignData getForeignData(Array<ForeignData> foreignDatas,int liA, int liB) {
        return getForeignData(foreignDatas,liA,liB,legionDatas.size);
    }

    public ForeignData getForeignData(Array<ForeignData> foreignDatas,int liA, int liB,int legionSize){
        /**/if(foreignDatas==null||foreignDatas.size==0||liA>=legionDatas.size||liB>=legionDatas.size||liA<0||liB<0){
            return null;
        }
        int index;
        LegionData a=legionDatas.get(liA);
        LegionData b=legionDatas.get(liB);
        if(a.getSuzerainLi()!=0&&a.getSuzerainLi()!=liB&&a.getSuzerainLi()!=b.getSuzerainLi()){
            liA=a.getSuzerainLi();
        }
        if(b.getSuzerainLi()!=0&&b.getSuzerainLi()!=liA&&a.getSuzerainLi()!=b.getSuzerainLi()){
            liB=b.getSuzerainLi();
        }
        if (liA <= liB) {
            index = liA * legionSize - ComUtil.getIntervalSum(0, liA) + liB;
        } else {
            index = liB * legionSize - ComUtil.getIntervalSum(0, liB) + liA;
        }
        if (index<0||index>=foreignDatas.size) {
            Gdx.app.error("getForeignDataError",liA+":"+liB+":"+legionSize);
        }
        return foreignDatas.get(index);
    }

    //
    private TradeData getTargetTrade(LegionData l,boolean ifHavePlayer) {
        for (int i = 0, iMax = tradeDatas.size; i < iMax; i++) {
            TradeData t = tradeDatas.get(i);
            if(!ifHavePlayer&&t.isPlayer()){
                continue;
            }
            ForeignData f = getForeignData(t.legionIndex, l.getLegionIndex());
            if (t.getTradeChance() > 0 && t.legionIndex != l.getLegionIndex() && f.getFavorValue() > 30
                    && l.canTrade(t.getPriceType(), t.getPriceValue())
            ) {
                return t;
            }
        }
        return null;
    }
    //legionA 盟主,legionB 邀请加入的军团  ifExchange是否容许交换盟主
    public boolean ifLegionCanAlly(LegionData legionA, LegionData legionB){
        if (legionA==null||legionB==null||legionB.getLegionIndex() == 0||legionA.getLegionIndex()==0||legionA.getSuzerainLi()!=0||legionB.getSuzerainLi()!=0) {
            return false;
        }

        ForeignData f1=getForeignData(legionA.getLegionIndex(),legionB.getLegionIndex());
        if(f1.getDiplomaticAttitude()==3){
            return false;
        }
        LegionData aliLegion,  joliLegion;//判断 如果b军团的实力全面压倒a,则交换盟主
        aliLegion=legionA;
        joliLegion=legionB;
        //检查盟主的盟国与加入国是否有敌视的,有则取消
        for(int i=0;i<legionDatas.size;i++){
            LegionData l=legionDatas.get(i);
            if(l.getLegionIndex()!=joliLegion.getLegionIndex()&&l.getLegionIndex()!=aliLegion.getLegionIndex()&&getForeignDegree(l.getLegionIndex(),aliLegion.getLegionIndex())==1){
                if(getForeignDegree(l.getLegionIndex(),joliLegion.getLegionIndex())==-1){
                    if(aliLegion.isPlayer()||joliLegion.isPlayer()){
                       return false;
                    }else if(l.isPlayer()){
                        return false;
                    }
                    return false;
                }
            }
        }
        return true;
    }

    //legionA 盟主,legionB 邀请加入的军团  ifExchange是否容许交换盟主
    public boolean legion_AllianceTIA1(LegionData legionA, LegionData legionB,boolean ifExchange) {
        if (legionA==null||legionB==null||legionB.getLegionIndex() == 0||legionA.getLegionIndex()==0||legionA.getSuzerainLi()!=0||legionB.getSuzerainLi()!=0) {
            return false;
        }

        ForeignData f1=getForeignData(legionA.getLegionIndex(),legionB.getLegionIndex());
        if(f1.getDiplomaticAttitude()==3){
            return false;
        }


        LegionData aliLegion,  joliLegion;//判断 如果b军团的实力全面压倒a,则交换盟主
        if(ifExchange){
            if(legionB.varRegionCount>legionA.varRegionCount&&legionB.incomeMoney>legionA.incomeMoney){
                aliLegion=legionB;
                joliLegion=legionA;
            }else {
                aliLegion=legionA;
                joliLegion=legionB;
            }
        }else{
            aliLegion=legionA;
            joliLegion=legionB;
        }
        //检查盟主的盟国与加入国是否有敌视的,有则取消
        for(int i=0;i<legionDatas.size;i++){
            LegionData l=legionDatas.get(i);
            if(l.getLegionIndex()!=joliLegion.getLegionIndex()&&l.getLegionIndex()!=aliLegion.getLegionIndex()&&getForeignDegree(l.getLegionIndex(),aliLegion.getLegionIndex())==1){
                if(getForeignDegree(l.getLegionIndex(),joliLegion.getLegionIndex())==-1){
                    if(aliLegion.isPlayer()||joliLegion.isPlayer()){
                        addPromptData(game.gameMethod.getPromptStrT(84,0),
                                game.gameMethod.getPromptStrT(84,1,aliLegion.legionName,joliLegion.legionName,l.legionName),
                                "",aliLegion.getLegionIndex(),joliLegion.getLegionIndex(),false);
                    }else if(l.isPlayer()){
                        addPromptData(game.gameMethod.getPromptStrT(85,0),
                                game.gameMethod.getPromptStrT(85,1,aliLegion.legionName,joliLegion.legionName),
                                "",aliLegion.getLegionIndex(),joliLegion.getLegionIndex(),false);
                    }
                    return false;
                }
            }
        }

        boolean ifRelevancy=false;//是否扩展
        if(joliLegion.getLegionIndex()==joliLegion.getInternIndex()){
            ifRelevancy=true;
        }



      /*  boolean ifLoad=aliLegion.getBuildPolicy()==masterData.getPlayerLegionIndex()||joliLegion.getBuildPolicy()==masterData.getPlayerLegionIndex()
                ||aliLegion.getSuzerainLi()==masterData.getPlayerLegionIndex()||joliLegion.getSuzerainLi()==masterData.getPlayerLegionIndex();
*/

        int sIntern = joliLegion.internIndex;
        int pIntern=getPlayerLegionData().getInternIndex();
        boolean ifDraw=false;
        IntArray tempIntArray1=game.tempUtil.getTempIntArray();
        if(sIntern==pIntern||aliLegion.getInternIndex()==pIntern){
            //addUpdColorRegionByLi(joliLegion.getLegionIndex());
            ifDraw=true;
            updArmyActorByLegionIndex(joliLegion.getLegionIndex());
        }

        f1.setForeignType(2);
        f1.setForeignValue(10+Math.abs(legionA.varRegionCount-legionB.varRegionCount));
        if(ifRelevancy){
            for (int i=0;i<legionDatas.size;i++) {
                LegionData l=legionDatas.get(i);
                if(l.getInternIndex()==0||l.getLegionIndex()==0||l.getInternIndex()==getPlayerLegionData().getInternIndex()||l.getSuzerainLi()==masterData.getPlayerLegionIndex()){
                    continue;
                }
                if (l.getSuzerainLi() == joliLegion.legionIndex) {
                    l.setInternIndex(aliLegion.getInternIndex());
                    if(!tempIntArray1.contains(l.getCountryId())){tempIntArray1.add(l.getCountryId());}
                } else if (l.getLegionIndex() == joliLegion.getLegionIndex()) {
                    l.setInternIndex(aliLegion.getInternIndex());
                    if(l.getSuzerainLi()!=0){
                        l.setSuzerainLi(0);
                    }
                    if(!tempIntArray1.contains(l.getCountryId())){tempIntArray1.add(l.getCountryId());}
                } else {
                    ForeignData f = getForeignData(joliLegion.getLegionIndex(), l.getLegionIndex());
                    if (f!=null&&f.getFavorValue() > 70 || sIntern == l.internIndex) {
                        if (ComUtil.ifGet(f.getFavorValue())&&f.getDiplomaticAttitude()!=3) {
                            l.setInternIndex(aliLegion.getInternIndex());
                            if(!tempIntArray1.contains(l.getCountryId())){tempIntArray1.add(l.getCountryId());}
                        /*if(ifDraw){
                            addUpdColorRegionByLi(l.getLegionIndex());
                        }*/
                        } else {
                            int favor=ComUtil.getRandom(5, 15);
                            f.reduceFavor(favor);
                            if(f.isPlayer()){
                                if(joliLegion.legionIndex==masterData.playerLegionIndex){//因为玩家加入联盟,某国对我们发出警告
                                    addPromptData(game.gameMethod.getPromptStrT(55,0),
                                            game.gameMethod.getPromptStrT(55,1,l.legionName,aliLegion.legionName),
                                            game.gameMethod.getPromptStrT(55,2,l.legionName,favor),l.getLegionIndex(),masterData.playerLegionIndex,false);
                                }else if(f.getFavorValue()>game.resGameConfig.allianceEventFavorLimit){//邀请玩家加入某国联盟
                                    if(l==null||l.getSuzerainLi()!=0||getPlayerLegionData().getInternIndex()==l.getInternIndex()||getPlayerLegionData().getLegionIndex()==l.getSuzerainLi()){
                                        continue;
                                    }
                                    if(!ifLegionCanAlly(joliLegion,l)){continue;}
                                    addPromptData(game.gameMethod.getPromptStrT(37,0),game.gameMethod.getPromptStrT(37,1,joliLegion.legionName),"",3,joliLegion.getLegionIndex(),-1,-1,-1,false);
                                }
                            }
                        }
                    }
                };
            }
        }else{
            joliLegion.setInternIndex(aliLegion.getInternIndex());
        }

        if(ifNeedRecordPrompt(legionA.legionIndex)|| ifNeedRecordPrompt(legionB.legionIndex)){
            if(!ifRelevancy){
                game.tempUtil.disposeTempIntArray(tempIntArray1);
                //String title,String content,String effect,int li1,int li2
                addPromptData(game.gameMethod.getPromptStrT(80,0),
                        game.gameMethod.getPromptStr(80,1,aliLegion.legionName,joliLegion.legionName),
                        "",legionA.getLegionIndex(), legionB.getLegionIndex() ,false );
            }else if(tempIntArray1.size>0){
                //int campLi=aliLegion.getInternIndex();
                // LegionData campL=aliLegion;
                LegionData  campL=aliLegion.getInternLegionData();
                if(ifExchange){
                    int  campLi=legion_resetCampLegion(aliLegion.getInternIndex());
                    campL=getLegionDataByLi(campLi);
                }

                String countryName=game.gameMethod.getPromptStrByCountry(tempIntArray1,4);
                addPromptData(game.gameMethod.getPromptStrT(7,0),
                        game.gameMethod.getStrValueT("prompt_detail_7",countryName,aliLegion.legionName,campL.legionName ),
                        game.gameMethod.getPromptStrT(7,2,campL.legionName,campL.getAllForce()), legionA.getLegionIndex(), legionB.getLegionIndex(),false  );
                game.tempUtil.disposeTempIntArray(tempIntArray1);
                checkTask(true,legionA.getLegionIndex(),9,1);
                //每增加一个盟国或附属国将会获得额外的{0}税率和军团稳定度
                if(ifHaveSpirit(13)
                        &&(legionA.getInternIndex()==getPlayerLegionData().getInternIndex()
                        ||legionB.getInternIndex()==getPlayerLegionData().getInternIndex())){
                    int v=getSpiritValue(13);
                    getPlayerLegionData().addTaxBonus(v);
                    getPlayerLegionData().addStability(v);
                }

            }/*else {
                game.tempUtil.disposeTempIntArray(tempIntArray1);
                addPromptData(game.gameMethod.getPromptStrT(4,0),
                        game.gameMethod.getPromptStrT(4,1,"country_name_"+aliLegion.getCountryId()),
                        game.gameMethod.getPromptStrT(4,2),aliLegion.getLegionIndex(),aliLegion.getLegionIndex());
            }*/
        }
        return true;
    }

    //重置阵营盟主
    private int legion_resetCampLegion(int internIndex) {
        int campLi=0;
        int campForce=0;
        for(int i=0;i<legionDatas.size;i++){
            LegionData l=legionDatas.get(i);
            if(l.getInternIndex()==internIndex&&l.getSuzerainLi()==0){
                if(l.getAllArmySumNum()+l.incomeMoney>campForce){
                    campLi=l.getLegionIndex();
                    campForce=l.getAllArmySumNum()+l.incomeMoney;
                }
            }
        }
        if(campLi!=0&&campLi!=internIndex){
            for(int i=0;i<legionDatas.size;i++){
                LegionData l=legionDatas.get(i);
                if(l.getInternIndex()==internIndex&&l.getSuzerainLi()==0){
                    l.setInternIndex(campLi);
                }
            }
        }else {
            return internIndex;
        }
        return campLi;
    }

    //ifRelevancy  true 则被宣战的国家关系好的也会做出对应反应 false 则只会清空好感度
    public boolean legion_DeclareWar(LegionData liA, LegionData liB,boolean ifRelevancy) {
        // 玩家自动宣战bug
        if((liA.getLegionIndex()==masterData.getPlayerLegionIndex()||liA.getSuzerainLi()!=0)&&roundState!=0){
            return false;
        }
        ForeignData f1=getForeignData(liA.getLegionIndex(),liB.getLegionIndex());
        //处于互不侵犯的玩家不会被宣战
        if(liB.isPlayer()&&f1.getForeignType()==1){
            return false;
        }
        if(liB.isPlayer()&&chiefData!=null){
            if(chiefData.getWarSupport()<30){
                chiefData.setWarSupport(30);
            }else{
                chiefData.addWarSupport(10);
            }
        }
        boolean isAlly=ifAllyByLi(liA.getLegionIndex(),liB.getLegionIndex());
        boolean ifLoad=(liA.getLegionIndex()==masterData.getPlayerLegionIndex()||liB.getLegionIndex()==masterData.getPlayerLegionIndex()
                ||liA.getSuzerainLi()==masterData.getPlayerLegionIndex()||liB.getSuzerainLi()==masterData.getPlayerLegionIndex())&& getForeignDegree(liA.getLegionIndex(),liB.getLegionIndex())!=-1;
        IntArray tempIntArray1=game.tempUtil.getTempIntArray();
        if (liB.getLegionIndex() == 0) {
            return false;
        }
        int  victimLi=liB.getLegionIndex();
        if(ifAllyByLi(liA.getLegionIndex(),liB.getLegionIndex())){
            if(liA.getLegionIndex()==liA.getInternIndex()){
                legion_Independent(liB);
                victimLi=liB.getLegionIndex();
            }else if(liB.getLegionIndex()==liB.getInternIndex()){
                legion_Independent(liA);
                victimLi=liA.getLegionIndex();
            }else {
                if(ComUtil.ifGet(50)){
                    legion_Independent(liA); victimLi=liA.getLegionIndex();
                }else{
                    legion_Independent(liB); victimLi=liB.getLegionIndex();
                }
            }
        }
        //如果是玩家对签订了互不侵犯的国家宣战
        if((f1.getForeignType()==1||f1.getDiplomaticAttitude()==2)&&ifRelevancy&&liA.isPlayer()){
            liB.setTechByLegionData(liA,false,masterData.getGameDifficulty());
            liB.addTaxBonus(liA.getTaxBonus());
            liB.addStability(liA.getStability());
            liB.addMoney(liA.incomeMoney);
            liB.addIndustry(liA.incomeIndustry);
            liB.addTech(liA.incomeTech);
            liB.addFood(liA.incomeFood);
            liB.setLegionRound(0);
            liA.setTaxBonus(liA.getTaxBonus()/2);
            addPromptData(game.gameMethod.getPromptStrT(72,0),
                    game.gameMethod.getPromptStr(72,1,liB.legionName),
                    game.gameMethod.getPromptStrT(72,2,liB.legionName),liA.getLegionIndex(),liB.getLegionIndex(),false);
            f1.setDiplomaticAttitude(3);
        }
        if(ifRelevancy){
            f1.setForeignType(-1);
            f1.setForeignValue(0);

            if(liA.isPlayer()){
                GeneralData g=getMaxRankGeneralData(liB.getLegionIndex(),true);
                if(g!=null){
                    // int countryId,GeneralData g,int dialogueIdType,String value
                    addDialogueData(liB.getCountryId(),g,17,"",true);
                    legion_intensifyUnity(liB,(masterData.getGameDifficulty()+liB.getLevel())/2+1);
                }
            }
        }else{//只是脱离联盟
            f1.setForeignType(0);
            f1.setForeignValue(0);
        }
        int sIntern = liA.getInternIndex();
        int jIntern = liB.getInternIndex();
        int vMoney = 0;
        int vLiInterIndex = 0;
        boolean ifDraw=false;
        int pIntern=getPlayerLegionData().getInternIndex();
        if(sIntern==pIntern||jIntern==pIntern){
            getForeignData(liA.getLegionIndex(),liB.getLegionIndex()).reduceFavor(ComUtil.getRandom(50,70));
            //addUpdColorRegionByLi(liB.getLegionIndex());
            if(liA.getLegionIndex()==masterData.playerLegionIndex){
                updArmyActorByLegionIndex(liB.getLegionIndex());
            }else {
                updArmyActorByLegionIndex(liA.getLegionIndex());
            }
            ifDraw=true;
        }//查询出非选战国的关系最好的,然后加盟
        for (int i=0;i<legionDatas.size;i++) {
            LegionData l=legionDatas.get(i);
            ForeignData f = getForeignData(liB.getLegionIndex(), l.getLegionIndex());
            if (getForeignDegree(l.getLegionIndex(),liA.getLegionIndex())!=1 &&   !l.ifPlayerAlly() && l.internIndex != 0 && f.getFavorValue() > 70 && sIntern != l.internIndex&&l.isFreeSovereignCountry()) {
                if (l.incomeMoney > vMoney) {
                    vMoney = l.incomeMoney;
                    vLiInterIndex = l.internIndex;
                    break;
                }
            }
        }
        if (liB.incomeMoney < vMoney) {
            jIntern = vLiInterIndex;
        }

        if(jIntern!=0){
            if(ifRelevancy){
                for (int i=0;i<legionDatas.size;i++) {
                    LegionData l=legionDatas.get(i);
                    if(l.getLegionIndex() == liA.getLegionIndex()||l.getLegionIndex() == liB.getLegionIndex() ){
                        continue;
                    }
                    ForeignData f = getForeignData(victimLi, l.getLegionIndex());
                    if ( f.getFavorValue() > 50 && ComUtil.ifGet(f.getFavorValue())) {

                        ForeignData pF=getForeignData(l.getLegionIndex(),liA.getLegionIndex());
                        ForeignData pF2=getForeignData(l.getLegionIndex(),jIntern);
                        pF.reduceFavor(ComUtil.getRandom(0,f.getFavorValue()));
                        if(pF.getFavorValue()<50&&l.isFreeSovereignCountry()&&!liA.isPlayerCamp()&&pF2.getFavorValue()>50&&ComUtil.ifGet(pF2.getFavorValue())  ){
                            l.setInternIndex(jIntern);
                        }else if(pF.isAlly()&&ComUtil.ifGet(100-liA.getStability()/2)){
                            if(ComUtil.ifGet(100-pF.getFavorValue())){
                                legion_Independent(l);
                            }else if(pF2.getFavorValue()>50&&ComUtil.ifGet(pF2.getFavorValue())){
                                l.setInternIndex(jIntern);
                            }
                        }
                /*if(ifDraw){
                    addUpdColorRegionByLi(l.getLegionIndex());
                }*/
                        if(ifLoad){
                            if(!tempIntArray1.contains(l.getCountryId())){tempIntArray1.add(l.getCountryId());}
                        }
                    }
                }
            }
            if(getPlayerLegionData()!=null&&getPlayerLegionData().internIndex==jIntern&&liB.getInternIndex()!=getPlayerLegionData().internIndex){
                addPromptData(game.gameMethod.getPromptStrT(67,0),
                        game.gameMethod.getPromptStr(67,1,liA.legionName,liB.legionName),"",liA.getLegionIndex(),masterData.playerLegionIndex,false);
                ifLoad=false;
            }
            liB.setInternIndex(jIntern);
        }


        if(ifLoad){
            if(tempIntArray1.contains(liB.getCountryId())){tempIntArray1.removeValue(liB.getCountryId());}
            if(isAlly){//如果之前是盟友,则是断交
                if(tempIntArray1.size>0){
                    String countryName=game.gameMethod.getPromptStrByCountry(tempIntArray1,4);
                    game.tempUtil.disposeTempIntArray(tempIntArray1);
                    addPromptData(game.gameMethod.getPromptStrT(62,0),
                            game.gameMethod.getPromptStr(62,1,liA.legionName,liB.legionName,countryName),
                            game.gameMethod.getPromptStrT(62,2),liA.getLegionIndex(),liB.getLegionIndex(),false);
                }else {
                    game.tempUtil.disposeTempIntArray(tempIntArray1);
                    addPromptData(game.gameMethod.getPromptStrT(63,0),
                            game.gameMethod.getPromptStr(63,1,liA.legionName,liB.legionName),
                            game.gameMethod.getPromptStrT(63,2),liA.getLegionIndex(),liB.getLegionIndex(),false);
                }
            }else {
                if(tempIntArray1.size>0){
                    String countryName=game.gameMethod.getPromptStrByCountry(tempIntArray1,4);
                    game.tempUtil.disposeTempIntArray(tempIntArray1);
                    addPromptData(game.gameMethod.getPromptStrT(6,0),
                            game.gameMethod.getPromptStr(6,1,liA.legionName,liB.legionName,countryName),
                            game.gameMethod.getPromptStrT(6,2),liA.getLegionIndex(),liB.getLegionIndex(),false);
                }else {
                    game.tempUtil.disposeTempIntArray(tempIntArray1);
                    addPromptData(game.gameMethod.getPromptStrT(15,0),
                            game.gameMethod.getPromptStr(15,1,liA.legionName,liB.legionName),
                            game.gameMethod.getPromptStrT(15,2),liA.getLegionIndex(),liB.getLegionIndex(),false);
                }
            }

        }
        return true;
    }


    private void addLegionConfidence(int li,int v){
        if(!ifSystemEffective(0)){
            return;
        }
        ForeignData f=getForeignData(li,li);
        if(f!=null&&f.getFavorValue()>0&&f.getFavorValue()<100){
            f.addFavor(v);
        }
    }

    private int getRandomLegionIndexByFavorBetweenIntervalTIA1(int masterLegionli,int a,int b,boolean ifLap,boolean ifPlayer){
        if(a==-1||b==-1){
            return 0;
        }
        IntArray tempIntArray1=game.tempUtil.getTempIntArray();
        for(int i=0,iMax=legionDatas.size;i<iMax;i++){
            if(i!=masterLegionli){
                ForeignData f=getForeignData(masterLegionli,i);
                if(ComUtil.ifValueBetween(masterLegionli,a,b,ifLap)){
                    if(ifPlayer){
                        tempIntArray1.add(i);
                    }else{
                        if(i!=masterData.playerLegionIndex){
                            tempIntArray1.add(i);
                        }
                    }
                }
            }
        }
        int rs=0;
        if(tempIntArray1.size>0){
            rs=tempIntArray1.random();
        }
        game.tempUtil.disposeTempIntArray(tempIntArray1);
        return rs;
    }

    public LegionData getLegionDataByHexagon(int hexagon){
        int li=getLegionIndexByHexagon(hexagon);
        if(li>=0&&li<legionDatas.size){
            return legionDatas.get(li);
        }else {
            return null;
        }
    }

    //添加将军
    private void armyUpdForGeneral(ArmyData a){
        if(a.getArmyType()==6||a.getArmyType()==7){
            return;
        }
        if(!a.isPlayer()&&a.getArmyType()!=4&&a.getArmyType()!=8){
            int t1=ComUtil.getRandom(0,a.getLegionData().getNavyLvMax()/2+getAge());
            int t2=ComUtil.getRandom(0,getPlayerLegionData().getNavyLvMax()/2+getAge());
            a.setTransportType(ComUtil.max(t1,t2)+1);
        }

        LegionData l=a.getLegionData();
        //
        if(a.getGeneralIndex()!=0||
                l.varGeneralNum>=l.getGeneralCardNum()
        ){
            return;
        }
        checkTask(true,a.getLegionIndex(),2,1);

        int generalType=DefDAO.getGeneralTypeByArmyType(getAge(),a.armyType);
        XmlReader.Element gE=  getCanRecruitGeneralE(generalType,l.getCountryId());
        // Gdx.app.log("armyUpdForGeneral",a.getArmyType()+":"+l.getCountryId()+":"+gE);
        if(gE==null){
            gE=  getCanRecruitGeneralE(0,l.getCountryId());
        }
        GeneralData g;
        if(gE!=null&&gE.getInt("id",0)!=0){
            g=new GeneralData().initForRecruitGeneral(a.getLegionIndex(),gE, getNowYear());
            generalIDatas.put(g.getGeneralIndex(),g);
            a.addGeneral(g);
            generalIds.add(gE.getInt("id",0));
            legionAddVarGeneralNum(a.getLegionIndex());
            //1步兵2炮兵3坦克4海军5空军  0不限制 -1陆军 步炮坦

            generalEs.removeValue(gE,false);
        }else {
            int id=getRandomGeneralId(l.getRGeneralId());
            g=new GeneralData().initForRandomGeneral(l,id,generalType);

            generalIDatas.put(g.getGeneralIndex(),g);
            a.addGeneral(g);
        }
        /*if(DefDAO.ifArmyTypeEqualGeneralType(a.getArmyType(),gE.getInt("type",0))){
            a.randomUpdUnitGroupLv(gE.getInt("ability",0));
        }*/
        if(a.isPlayer()&&g.getState()==0){
            LegionData pl=getPlayerLegionData();
            addDialogueData(pl.countryId,g,1,pl.legionName,true);
        }
        if (a.getGeneralIndex() != 0) {
            l.varGeneralNum += 1;
            l.varGeneralCost += ComUtil.limitValue(a.getFoodCost()/2 ,10,255) *getMilitaryCostRate();
        }
        if(a.armyActor!=null){
            a.armyActor.update();
        }
        boolean ifReset= a.ifUnitHaveSkill(120)&&a.getGeneralIndex()!=0;
        if(a.ifHaveSkill(79)){
            a.resetSkill();
            a.drawSkill(79);
        }
        if(ifSystemEffective(21)){
            a.updSkillForRank();
        }
        if(ifReset){
            a.setArmyRank(1);
            a.resetArmyHpMax();
            a.resetState();
            a.removeSkill(120);
        }
        if(l.ifLegionFeature(31)){
            BuildData b=  a.getBuildData();
            if(b!=null){
                b.restoreArmyState(l.getLegionFeatureEffect(31));
            }
        }
    }
    private void airUpdForGeneral(AirData a){
        checkTask(true,a.getLegionIndex(),2,1);
        LegionData l=legionDatas.get(a.getLegionIndex());
        XmlReader.Element gE=  getCanRecruitGeneralE(5,l.getCountryId());

        if(gE!=null&&gE.getInt("id",0)!=0){
            GeneralData g=new GeneralData().initForRecruitGeneral(a.getLegionIndex(),gE,getNowYear());
            generalIDatas.put(g.getGeneralIndex(),g);
            a.addGeneral(g);
            int gType=gE.getInt("type",-1);
            /*if((gType==5||gType==0)){
              //  a.randomUpdAirAbility(gE.getInt("ability"));
            }*/
            generalIds.add(gE.getInt("id",0));
            legionAddVarGeneralNum(a.getLegionIndex());
            generalEs.removeValue(gE,false);
        }else {
            int id=getRandomGeneralId(l.getRGeneralId());
            GeneralData g=new GeneralData().initForRandomGeneral(l,id,5);
            generalIDatas.put(g.getGeneralIndex(),g);
            a.addGeneral(g);
        }
        if (a.getGeneralIndex() != 0) {
            l.varGeneralNum += 1;
            l.varGeneralCost += ComUtil.limitValue(a.getFoodCost()/2 ,10,255) *getMilitaryCostRate();
        }
        boolean ifReset=  a.ifUnitHaveSkill(120)&&a.getGeneralIndex()!=0;
        if(a.ifHaveSkill(79)){
            a.resetSkill();
            a.drawSkill(79);
        }
        if(ifSystemEffective(21)){
            a.updSkillForRank();
        }
        if(ifReset){
            int hpMax=a.getAirHpMax()*(100+a.getAirRank()*10)/100;
            a.setAirHpMax(hpMax);
            a.setAirRank(1);
            a.resetState();
            a.removeSkill(120);
        }
    }

    public void armyUpdForGeneral(ArmyData a,XmlReader.Element gE){
        if(a.getArmyType()==6||a.getArmyType()==7){
            return;
        }
        if(!a.isPlayer()&&a.getArmyType()!=4&&a.getArmyType()!=8){
            int t1=ComUtil.getRandom(0,a.getLegionData().getNavyLvMax()/2+getAge());
            int t2=ComUtil.getRandom(0,getPlayerLegionData().getNavyLvMax()/2+getAge());
            a.setTransportType(ComUtil.max(t1,t2)+1);
        }

        LegionData l=a.getLegionData();
        //
        if(a.getGeneralIndex()!=0||
                l.varGeneralNum>=l.getGeneralCardNum()
        ){
            return;
        }
        checkTask(true,a.getLegionIndex(),2,1);


        // XmlReader.Element gE=  getCanRecruitGeneralE(generalType,l.getCountryId());
        // Gdx.app.log("armyUpdForGeneral",a.getArmyType()+":"+l.getCountryId()+":"+gE);
        if(gE==null){
            gE=  getCanRecruitGeneralE(0,l.getCountryId());
        }
        GeneralData g;
        if(gE!=null&&gE.getInt("id",0)!=0){
            g=new GeneralData().initForRecruitGeneral(a.getLegionIndex(),gE, getNowYear());
            generalIDatas.put(g.getGeneralIndex(),g);
            a.addGeneral(g);
            generalIds.add(gE.getInt("id",0));
            legionAddVarGeneralNum(a.getLegionIndex());
            //1步兵2炮兵3坦克4海军5空军  0不限制 -1陆军 步炮坦
            /*if(DefDAO.ifArmyTypeEqualGeneralType(a.getArmyType(),gE.getInt("type",0))){
                a.randomUpdArmyWealv(gE.getInt("ability",0));
            }*/
            generalEs.removeValue(gE,false);
        }else {
            int generalType=DefDAO.getGeneralTypeByArmyType(getAge(),a.armyType);
            int id=getRandomGeneralId(l.getRGeneralId());
            g=new GeneralData().initForRandomGeneral(l,id,generalType);

            generalIDatas.put(g.getGeneralIndex(),g);
            a.addGeneral(g);
        }
        if(a.isPlayer()&&g.getState()==0){
            LegionData pl=getPlayerLegionData();
            addDialogueData(pl.countryId,g,1,pl.legionName,true);
        }
        if(a.armyActor!=null){
            a.armyActor.update();
        }
        boolean ifReset=  a.ifUnitHaveSkill(120)&&a.getGeneralIndex()!=0;
        if(a.ifHaveSkill(79)){
            a.resetSkill();
            a.drawSkill(79);
        }
        if(ifSystemEffective(21)){
            a.updSkillForRank();
        }
        if(ifReset){
            a.setArmyRank(1);
            a.resetArmyHpMax();
            a.resetState();
            a.removeSkill(120);
        }
    }
    public void airUpdForGeneral(AirData a, XmlReader.Element gE){
        checkTask(true,a.getLegionIndex(),2,1);
        LegionData l=legionDatas.get(a.getLegionIndex());
        // XmlReader.Element gE=  getCanRecruitGeneralE(5,l.getCountryId());

        if(gE!=null&&gE.getInt("id",0)!=0){
            GeneralData g=new GeneralData().initForRecruitGeneral(a.getLegionIndex(),gE,getNowYear());
            generalIDatas.put(g.getGeneralIndex(),g);
            a.addGeneral(g);
            int gType=gE.getInt("type",-1);
            /*if(gType==5||gType==0){
                a.randomUpdAirAbility(gE.getInt("ability"));
            }*/
            generalIds.add(gE.getInt("id",0));
            legionAddVarGeneralNum(a.getLegionIndex());
            generalEs.removeValue(gE,false);
        }else {
            int id=getRandomGeneralId(l.getRGeneralId());
            GeneralData g=new GeneralData().initForRandomGeneral(l,id,5);
            generalIDatas.put(g.getGeneralIndex(),g);
            a.addGeneral(g);
        }
        boolean ifReset=  a.ifUnitHaveSkill(120)&&a.getGeneralIndex()!=0;
        if(a.ifHaveSkill(79)){
            a.resetSkill();
            a.drawSkill(79);
        }
        if(ifSystemEffective(21)){
            a.updSkillForRank();
        }
        if(ifReset){
            int hpMax=a.getAirHpMax()*(100+a.getAirRank()*10)/100;
            a.setAirHpMax(hpMax);
            a.setAirRank(1);;
            a.resetState();
            a.removeSkill(120);
        }
    }

    //armyType 1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇
    //generalType  1步兵 2炮兵 3坦克 4船 5空军
   /* private boolean ifSameType(int armyType,int generalType){
        if(armyType==generalType){
            return true;
        }else if(4==generalType&&(armyType==4||armyType==8)){
            return true;
        }
        return false;
    }*/
    //generalType 0 全选
    private  XmlReader.Element getCanRecruitGeneralE(int generalType,int countryId){
        // int generalType=DefDAO.getGeneralTypeByArmyType(getAge(),armyType);
        if(generalType==-1){
            return null;
        }
        generalEs.shuffle();
        for(XmlReader.Element g:generalEs){
          /* if(ComUtil.ifHaveValueInStr(g.get("country"),countryId)){
               Gdx.app.log("getCanRecruitGeneralE1",armyType+":"+countryId);
           }
           if(generalType==g.getInt("type",0)){
               Gdx.app.log("getCanRecruitGeneralE2",armyType+":"+countryId);
           }*/
            if((ComUtil.ifHaveValueInStr(g.get("country"),countryId))&&(generalType==g.getInt("type",0)||generalType==0)&&compareGameTime(false,g.getInt("service"),0)&&compareGameTime(true,g.getInt("death", 0), 0)&&!generalIds.contains(g.getInt("id",0)) ){
                return g;
            }
        }
        return null;
    }


    private int getRandomGeneralId(int rGeneralId) {
        XmlReader.Element e=game.gameConfig.getDEF_RGENERAL().getElementById(rGeneralId);
        if(e!=null){
            return ComUtil.getRandom(0,(e.getInt("count",1)-1));
        }
        return 0;
    }

    private void general_Replace(GeneralData g,boolean ifRecord){

        LegionData l;String oldGeneralNameStr,newGeneralNameStr;int oldGeneralState;

        oldGeneralState= g.getState();
        oldGeneralNameStr=g.getGeneralName();
        l=g.getLegionData();
                    /*if(g.legionIndex==masterData.playerLegionIndex){
                        int i=2;
                    }*/
        XmlReader.Element gE=  getCanRecruitGeneralE(g.getType(),l.getCountryId());
        if(gE==null){
            gE=  getCanRecruitGeneralE(0,l.getCountryId());
        }

        if(gE!=null){
            g.setGeneralId(gE.getInt("id",0));
            g.setState(0);
            int r=Math.abs(gE.getInt("death")-getNowYear())*masterData.getRoundForYear();
            r=r==0?ComUtil.getRandom(10,30):r;
            g.setRestLife(r);
            newGeneralNameStr=g.getGeneralName();
            Gdx.app.log("general_Replace",oldGeneralNameStr+":"+newGeneralNameStr);
            if(ifRecord&&oldGeneralState==0&&l.getLegionIndex()==masterData.playerLegionIndex&&!oldGeneralNameStr.equals(newGeneralNameStr)){
                addPromptData(game.gameMethod.getPromptStrT(23,0),
                        game.gameMethod.getPromptStrT(23,1,oldGeneralNameStr,newGeneralNameStr),
                        game.gameMethod.getPromptStrT(23,2),g.getLegionIndex(),g.getLegionIndex(),false);
            }
            if(g.legionIndex==masterData.playerLegionIndex&&roundState!=0){
                addDialogueData(l.getCountryId(),g,1,l.legionName,true);
            }
            generalIds.add(g.getGeneralId());
            g.resetImageName();
        }else {
            g.setGeneralId(getRandomGeneralId(l.getRGeneralId()));
            g.setState(1);
            g.setRestLife(ComUtil.getRandom(10,30));
            if(ifRecord&&oldGeneralState==0&&l.getLegionIndex()==masterData.playerLegionIndex){
                addPromptData(game.gameMethod.getPromptStrT(24,0),
                        game.gameMethod.getPromptStrT(24,1,oldGeneralNameStr),
                        game.gameMethod.getPromptStrT(24,2),g.getLegionIndex(),g.getLegionIndex(),false);
            }
            g.resetImageName();
        }


        //  g.setRestLife(0);
        //  LegionData l=legionDatas.get(g.getBuildPolicy());

    }

    private void checkGeneral(){
        Iterator<IntMap.Entry<GeneralData>> itG = generalIDatas.iterator();
        while (itG.hasNext()) {
            GeneralData g=itG.next().value;
            if(g!=null){
                g.setRestLife(g.getRestLife()-1);
                //g.setRestLife(0);
                if(g.getRestLife()<=0){
                    checkTask(true,g.getLegionIndex(),8,1);
                    general_Replace(g,true);
                }
            }
        }
    }



    // 当玩家占领一个ai的城市时,对这个ai进行补偿,补偿资源差的1/5
    private void ai_resBalanceByPlayerOccup(LegionData aiL){
        if(aiL.getLegionIndex()==masterData.playerLegionIndex){return;}
        //Gdx.app.log("aiBlance 1",aiL.getAllAttributes());
        LegionData p=  getPlayerLegionData();
        int diff=masterData.getGameDifficulty()+1;
        int money= (int) (Math.abs(aiL.getMoney()-p.getMoney())* game.resGameConfig.aiIncomeBlanceRate*diff);
        int industry= (int) (Math.abs(aiL.getIndustry()-p.getIndustry())* game.resGameConfig.aiIncomeBlanceRate*diff);
        int tech= (int) (Math.abs(aiL.getTech()-p.getTech())* game.resGameConfig.aiIncomeBlanceRate*diff);
        int food= (int) (Math.abs(aiL.getFood()-p.getFood())* game.resGameConfig.aiIncomeBlanceRate*diff);
        aiL.addMoney(money*ComUtil.limitValue(masterData.playerRebirth,1,10));
        aiL.addIndustry(industry*ComUtil.limitValue(masterData.playerRebirth,1,10));
        aiL.addTech(tech*ComUtil.limitValue(masterData.playerRebirth,1,10));
        aiL.addFood(food*ComUtil.limitValue(masterData.playerRebirth,1,10));
        Gdx.app.log("ai_resBalanceByPlayerOccup 2",aiL.getAllAttributes());
        GeneralData g=getMaxRankGeneralData(aiL.getLegionIndex(),true);
        if(g!=null){
            addDialogueData(aiL.getCountryId(),g,22,"",true);
        }
    }

    private void initState(){
        //updColorRegions.clear();
       /* Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
        while (it.hasNext()) {
            IntMap.Entry<BuildData> c = it.next();
            BuildData b=c.value;*/
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            b.setBuildStatus(0);
            b.setBuildRound(0);
            b.setCityHpNow(b.getCityHpMax());
            b.setBuildPolicy(0);
        }
        for(LegionData l:legionDatas){
            l.setLegionRound(0);
            l.setMoney(worldData.getWorldMoney());
            l.setIndustry(worldData.getWorldIndustry());
            l.setTech(worldData.getWorldTech());
            l.setFood(worldData.getWorldFood());
            l.varBattleRegions.clear();
        }
        Iterator<IntMap.Entry<ArmyData>> itB1 = armyHDatas.iterator();
        while (itB1.hasNext()) {
            IntMap.Entry<ArmyData> c = itB1.next();
            ArmyData a=c.value;

            if(a!=null){
                a.setArmyRound(0);
                a.setIfAttack(0);
                a.setIfMove(0);
                a.setArmyHpNow(a.getArmyHpMax());
                //  a.setNucleIndex(-1);
                a.setHinge(0);
                a.setStandyRound(0);
                a.setSkillLv1(0);
                a.setTargetRegion(-1);
            }
        }
        Iterator<IntMap.Entry<AirData>> it3 = airIDatas.iterator();
        while (it3.hasNext()) {
            IntMap.Entry<AirData> c = it3.next();
            AirData a=c.value;
            if(a==null||a.getAirHpNow()==0){continue;}
            a.setAirRound(0);
            a.setAirHpMax(a.getAirHpNow());
            //  a.setArmyHexagon(-1);
            a.setTargetRegion(-1);
        }
    }

    public int getInternByCountry(int country){
        for(LegionData l:legionDatas){
            if(l.getCountryId()==country){
                return l.getInternIndex();
            }
        }
        return 0;
    }
    //updRegionType 0强制变更 1变更所有控制国是internIndex的 2变更所有同盟国
    public int createCountry(int countryId,int internIndex,int suzcountry,int capitalId,int tax,int res,int generalNum,int eventId,int updRegionType,String updRegionStr,boolean ifChangeAll){
        XmlReader.Element country = game.gameConfig.getDEF_COUNTRY().e.getChildrenByName("country").get(countryId);
        LegionData l=getLegionByCountry(countryId,true);
        if(l==null){
            l=getLegionByCountry(countryId,false);
        }
        int li;
        if(l==null){
            l = new LegionData();
            li=legionDatas.size;
            legionDatas.add(l);
            l.setLegionIndex(li);
            l.setCountryId(countryId);
            l.setSuzerainLi(0);
            l.setTargetAreaZone(country.getInt("targetArea",0));
            l.setMedal(country.getInt("medal",0));
            l.setLifeBonus(100);
            l.setRGeneralId(country.getInt("randomGeneralId",0));
            l.setRed(country.getInt("r"));
            l.setGreen(country.getInt("g"));
            l.setBlue(country.getInt("b"));
            l.setAlpha(country.getInt("a"));
            l.varBattleRegions=new IntArray();

            Color c = new Color(l.red / 255f, l.green / 255f, l.blue / 255f, l.alpha / 255f);
            //Gdx.app.log("legionColor","li:"+l.getBuildPolicy()+" c:"+l.getCountryId()+" r:"+l.red+" g:"+l.green+" b:"+l.blue+" a:"+l.alpha);
            legionColors.add(c);

            c = new Color(l.red / 255f, l.green / 255f, l.blue / 255f, l.alpha / 255f);
            GameUtil.changeBright(c, 0.5f);
            legionFogColors.add(c);
            Array<ForeignData> fDs=new Array<>();
            //生成贸易数据
            TradeData t = new TradeData();
            t.initTradeData();
            t.setTradeIndex(tradeDatas.size);
            t.setLegionIndex(li);
            tradeDatas.add(t);
            //生成新的外交数据
            if(foreignDatas!=null&&foreignDatas.size>0){
                for (int i1=0,iMax1=legionDatas.size;i1<iMax1;i1++) {
                    LegionData l1=legionDatas.get(i1);
                    for (int i = l1.getLegionIndex(); i < iMax1; i++) {
                        ForeignData f = new ForeignData();
                        f.setSourceLegionIndex(l1.legionIndex);
                        f.setTargetLegionIndex(legionDatas.get(i).legionIndex);
                        //如果是新的,则随机默认赋值
                        if(f.sourceLegionIndex==li||f.targetLegionIndex==li){
                            f.setFavorValue(initToGetFavorByLi(f.sourceLegionIndex, f.targetLegionIndex));
                        }else {
                            f.setFavorValue(getForeignData(f.sourceLegionIndex, f.targetLegionIndex,li).getFavorValue());
                        }
                        fDs.add(f);
                    }
                }
                //替换数据
                this.foreignDatas=fDs;
            }

        }
        li=l.getLegionIndex();

        if (internIndex == 0) {
            l.setInternIndex(l.getLegionIndex());
        } else {
            LegionData l1=getLegionByCountry(internIndex,true);
            if(l1==null){
                l1=getLegionByCountry(internIndex,false);
            }
            if(l1!=null){
                l.setInternIndex(l1.getInternIndex());
            }else{
                l.setInternIndex(l.getLegionIndex());
            }
        }
        LegionData InternLegion=getLegionDataByLi(l.getInternIndex());


        l.setTaxBonus(tax);
        l.addMoney((int) (res*game.resGameConfig.moneyIncomeRate));
        l.addIndustry((int) (res*game.resGameConfig.industryIncomeRate));
        l.addFood((int) (res*game.resGameConfig.foodIncomeRate));
        l.addTech((int) (res*game.resGameConfig.techIncomeRate));
        l.addMineral((int) (res*game.resGameConfig.mineralIncomeRate));
        l.addOil((int) (res*game.resGameConfig.oilIncomeRate));


        l.initVirAttribute();

        if(suzcountry!=0){
            LegionData sl=getLegionByCountry(suzcountry,true);
            if(sl==null){
                sl=getLegionByCountry(suzcountry,false);
            }
            if(sl!=null){
                l.setSuzerainLi(sl.getLegionIndex());
            }
        }
        //从history中获取叛乱地盘
        //  Fb2History historyDAO = game.getGameFramework().getHistory(masterData.getHistoryId());
        //  Array<Fb2History.HistoryData> hDs=historyDAO.getHistoryDatas(countryId,getNowYear(),null);


        String[] regionStrs=updRegionStr.split(",");
        //修改地盘属性,兵种等
        for(String str:regionStrs){
            if(!ComUtil.isNumeric(str)){
                continue;
            }
            int region=Integer.parseInt(str);
            if(buildRDatas.containsKey(region)){
                if(updRegionType==0){
                    setRegionAllLegionIndex(region,li,ifChangeAll);
                }else if(updRegionType==1){
                    if(internIndex!=0&&InternLegion!=null){
                        BuildData b=getBuildDataByRegion(region);
                        if(b!=null&&(b.getSuzLegionIndex()==InternLegion.getLegionIndex())){
                            setRegionAllLegionIndex(region,li,ifChangeAll);
                        }
                    }
                }else if(updRegionType==2){
                    if(internIndex!=0&&InternLegion!=null){
                        BuildData b=getBuildDataByRegion(region);
                        if(b!=null&&ifAllyByLi(b.getLegionIndex(),InternLegion.getLegionIndex())){
                            setRegionAllLegionIndex(region,li,ifChangeAll);
                        }
                    }
                }
            }
        }
        if(capitalId!=0){
            l.setCapitalId(capitalId);
        }else if (country.getInt("capital") > 0) {
            l.setCapitalId(country.getInt("capital"));
        }
        if(l.getCapital()==null){
            resetCapital(l);
        }

        createGeneralUnit(li,generalNum);
        // historyDAO=null;
        if(eventId!=0){
            takeHEvent(eventId,100,true);
        }
        return li;
    }

    //设置玩家
    public void setPlayerLegionIndex(int legionIndex){
        promptDatas.clear();
        dialogueDatas.clear();
        if(masterData.getPlayerLegionIndex()==0&&chiefData!=null){
            chiefData.setLiteracy(0);
        }
        //如果是征服,初始设置玩家
        LegionData pl=getLegionDataByLi(legionIndex);
        playerLegionData=pl;
        if(pl==null){return;}
        masterData.setPlayerLegionIndex(legionIndex);
        if(masterData.playerMode==0){
            initChief();
        }else{
            masterData.ifChief=0;
        }

        if(legionIndex==0){
            masterData.ifChief=0;
        }
        if(spiritMap!=null){
            spiritMap.clear();
        }else{
            if(ifSystemEffective(16)){
                spiritMap=new IntIntMap();
            }
        }
        if(ifSystemEffective(16)){
            int spiritId=game.gameConfig.getDEF_COUNTRY().getElementById(pl.getCountryId()).getInt("spiritId",-1);
            if(spiritId!=-1){
                addSpiritId(spiritId,false);
            }
        }


        if(masterData.getPlayerMode()==0){
            if(masterData.getRoundNow()==0){
                setPlayerAmbition(100);
                updAllRTask();
            }
        }else{
            taskDatas.clear();
        }
        if(masterData.getPlayerMode()==2){
            initAllFogByRegion();
            initLegionMode();
        }else{
            initAllFog();
        }

        if(generalIDatas.size>0){
            generalIDatas.get(0).setLegionIndex(legionIndex);
        }
        //如果是新世界,自动设置敌对
        if(masterData.getGameEpisode() ==99){
            for(LegionData l:legionDatas){
                if(l.getLegionIndex()!=legionIndex&&l.getInternIndex()!=0){
                    if(getForeignDegree(l.getLegionIndex(),legionIndex)==-1){
                        ForeignData f=getForeignData(l.getLegionIndex(),legionIndex);
                        f.setFavorValue(f.getFavorValue()-ComUtil.getRandom(0,50));
                        f.setForeignType(-1);
                    }
                }
            }
        }else if(masterData.getVictoryType()==2){
            initForFreeStarcraftMode();
        }
        for(LegionData l:legionDatas){
            if(!l.ifPlayerAlly()){
                if(masterData.getGameDifficulty()!=0){
                    l.setTaxBonus(DefDAO.getRateByDifficut(l.getTaxBonus(),masterData.getGameDifficulty()));
                }
            }else {
                BuildData b=getBuildDataByRegion(l.getCapitalId());
                if(b!=null&&b.buildActor!=null){
                    b.buildActor.updPoint();
                }
            }
        }
     /*   Iterator<IntMap.Entry<BuildData>> itb = buildRDatas.iterator();
        while (itb.hasNext()) {
            BuildData b=itb.next().value;*/
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if(b!=null&&b.getBuildActor()!=null){
                b.getBuildActor().update();
            }
        }
        if(ifSystemEffective(17)){
            refreshTrade();
        }
        ifNeedDrawViewMap=true;
        //resetAllArmyUnitGroup();
        initAllArmyDataVirAttribute();
        worldData.resetAgeTech();
    }



    public void  checkAge(){
        int age=getAge()+1;
        /*for(XmlReader.Element ageE:ageEs){
            age=ageE.getInt("id",0);
            if(age>getAge()){
                if (ifIsGameTime(ageE.getInt("beginYear"),1)) {
                    worldData.setWorldAge(age);
                    //  Gdx.app.log("升级时代",worldDatas.get(0).getWorldAge()+":"+getNowYear());
                }else if(getPlayerLegionData().getSumTechLv()>=ageE.getInt("reqSumTechLv",0)&&getPlayerLegionData().getMaxTechLv()>=ageE.getInt("reqMaxTechLv",0)&&getPlayerLegionData().getTechLvMax()>=ageE.getInt("reqTechLv",0)     ){
                    worldData.setWorldAge(age);
                }
            }
        }*/
        XmlReader.Element ageE=game.gameConfig.getDEF_AGE().getElementById(age);
        if(ageE!=null){
            if (ifIsGameTime(ageE.getInt("beginYear"),1)) {
                worldData.setWorldAge(age);
                setAllLegionTechByPlayerTech(false);
                //  Gdx.app.log("升级时代",worldDatas.get(0).getWorldAge()+":"+getNowYear());
            }else if(getPlayerLegionData().getSumTechLv()>=ageE.getInt("reqSumTechLv",0)&&getPlayerLegionData().getMaxTechLv()>=ageE.getInt("reqMaxTechLv",0)&&getPlayerLegionData().getTechLvMax()>=ageE.getInt("reqTechLv",0)     ){
                worldData.setWorldAge(age);
                setAllLegionTechByPlayerTech(false);
            }
        }

    }

    public void resetPLegionRank(){
        if(playerInfo==null){
            playerInfo=new PlayerInfo();
        }else {
            playerInfo.clear();
        }


        for(int i=0;i<legionDatas.size;i++){
            LegionData l=getLegionDataByLi(i);
            if(l.armyArrays==null){
                l.armyArrays=new Array<>();
            }else{
                l.armyArrays.clear();
            }
            if(l.buildArrays==null){
                l.buildArrays=new Array<>();
            }else{
                l.buildArrays.clear();
            }
            if(l.varBattleRegions==null){
                l.varBattleRegions=new IntArray();
            }else{
                l.varBattleRegions.clear();
            }
            l.varRegionCount=0;
            l.varMilitaryValue=0;
            l.varColonyCount =0;
            l.varAllyCount=0;
            if(l.getSuzerainLi()!=0){
                l.getSuzerainLegionData().varColonyCount +=1;
                // l.setTaxBonus(ComUtil.getRandom(50,l.getTaxBonus()));
            }else {
                for(int j=0;j<legionDatas.size;j++){
                    LegionData l1=legionDatas.get(j);
                    if(l1.getLegionIndex()==l.getInternIndex()){
                        l.varAllyCount++;
                    }
                }
            }
            if(l.borderLegionIndexs!=null){
                l.borderLegionIndexs.clear();
            }else{
                l.borderLegionIndexs=new IntArray();
            }
        }

       /* Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
        while (it.hasNext()) {
            IntMap.Entry<BuildData> c = it.next();
            BuildData b=c.value;*/
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            LegionData bl=b.getLegionData();
            if(bl!=null&&b.getLegionIndex()>=0&&!b.ifSea()){
                bl.updVarRegionCount();
            }
            b.setBorderLi(false,bl.borderLegionIndexs);
            bl.buildArrays.add(b);
            if (b.cityHpNow == b.cityHpMax) {
                if (bl.varBattleRegions.contains(b.getRegionId())) {
                    bl.varBattleRegions.removeValue(b.getRegionId());
                }
            }
            if (b.getBuildStatus() >0 && !bl.varBattleRegions.contains(b.getRegionId())) {
                bl.varBattleRegions.add(b.getRegionId());
            }
        }
        Iterator<IntMap.Entry<ArmyData>> itB1 = armyHDatas.iterator();
        while (itB1.hasNext()) {
            IntMap.Entry<ArmyData> c = itB1.next();
            ArmyData a=c.value;
            if(a!=null&&a.getArmyHpNow()>0){
                /*if(a.getHexagonIndex()==19912){
                    int s=0;
                }*/
                LegionData al=a.getLegionData();
                al.armyArrays.add(a);
                al.updVarMilitaryValue(a.getFoodCost());
                BuildData b=a.getBuildData();
                if(!a.isPlayer()&&b!=null&&(b.ifBorderLi(masterData.getPlayerLegionIndex(),true)||b.isPlayer())){
                    playerInfo.borderPlayerRegionUnits.add(a);
                }
                if(!b.isPlayer()&&b.getBuildRound()==0&&!b.ifSea()&&b.getCityHpNow()>0&&!playerInfo.borderPlayerRegionBuilds.contains(b,false)){
                    playerInfo.borderPlayerRegionBuilds.add(b);
                }
            }
        }
        //重新计算playerInfo的内容
        LegionData p=getPlayerLegionData();
        for(int i=0;i<legionDatas.size;i++){
            LegionData l=getLegionDataByLi(i);
            l.resetPopulationMax();
            GameMethod.resetLegionCanBuildCardE(l, publicLegionCardEs);
            if (l.getLegionIndex()!=p.getLegionIndex()&&l.getInternIndex()!=0) {
                if(l.incomeMoney>p.incomeMoney){
                    playerInfo.incomeRank+=1;
                }
                if(l.varRegionCount>p.varRegionCount){
                    playerInfo.regionRank+=1;
                }
                if(l.getAllArmySumNum()>p.getAllArmySumNum()){
                    playerInfo.militaryRank+=1;
                }
                if(l.suzerainLi==masterData.playerLegionIndex){
                    playerInfo.dependency.add(l.getCountryId());
                }else if(l.getInternIndex()==p.getInternIndex()){
                    playerInfo.allyCountrys.add(l.getCountryId());
                }
                playerInfo.worldProgress=(p.varRegionCount+1)*100/(allRegionCount+1);
            }

        }
        if(chiefData!=null){
            chiefData.initVarAttribute();
        }
    }




    public String getPlayerInfo(){


        LegionData l=getPlayerLegionData();
        if(masterData.getPlayerMode()==0){
            return game.gameMethod.getStrValueT("prompt_chiefinfo",
                    getPlayerAmbitionValue(),
                    getChiefReputation(),
                    getChiefHarmony(),
                    getChiefWarSupport(),
                    l.getPopEfficency(),
                    l.getAllArmySumNum(),
                    l.getStability(),playerInfo.worldProgress,
                    getWorldNervous()
            );
        }else{
            return game.gameMethod.getStrValueT("prompt_conquestinfo",
                    playerInfo.incomeRank,
                    playerInfo.regionRank,
                    playerInfo.militaryRank,
                    game.gameMethod.getPromptStrByCountry(playerInfo.allyCountrys,4),
                    game.gameMethod.getStrValueT(l.getSuzerainStr()),game.gameMethod.getPromptStrByCountry(playerInfo.dependency,4),l.getTradeCount(),l.getTaxBonus()/3,l.getStability(),playerInfo.worldProgress);

        }

        /*StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 258; i++) {
            buf.append("hei" + i).append("\n");
        }
        return buf.toString();
        */


    }

    //一个地块用亮色还是 深色
    public boolean ifRegionIsColor(int hexagon){
        int region=getRegionId(hexagon);
        if(region!=-1&&ifAllyPlayerByRegion(hexagon)&&hexagonDatas.get(region).getBlockType()!=1){
            return true;
        }
        return false;
    }

    public boolean addDialogueData(ArmyData army,int dialogueIdType,String value){
        if(army.canCreateRDialogue()) {
            GeneralData g=army.getGeneralData();
            return  addDialogueData(army.getCountryId(), g, dialogueIdType, value,true);
        }
        return false;
    }

    //添加副官的提示
    public boolean addAssistantDialogueData(String value,boolean ifHidOther){
        return  addDialogueData(getPlayerLegionData().countryId, generalIDatas.get(0), 0, value,ifHidOther);
    }


    //添加对话 dialogueIdType是0 则 v代表dialogueId
    //dialogueIdType 0:剧情对话 1将领晋升 v我方 2将领杀敌 3阵亡 4补充 5占领建筑 6求援 7秒杀 v敌人 8.占领首都 v敌人
    public boolean addDialogueData(int countryId,GeneralData g,int dialogueIdType,String value,boolean ifHidOther){
        if(!ifSystemEffective(12)&&dialogueIdType!=0){
            return false;
        }
        if(g.getState()==1||ComUtil.isEmpty(value)) {
            return false;
        }
        if(dialogueIdType!=0){
            if(dialogueGenerals.contains(g.getGeneralId())){
                return false;
            }else{
                dialogueGenerals.add(g.getGeneralId());
            }
        }
        if(dialogueDatas.size< game.resGameConfig.rDialogueMaxInRound){
            XmlReader.Element dE=game.gameConfig.getDEF_RDIALOGUE().getElementById(dialogueIdType);
            if(dE!=null&&ComUtil.ifGet(dE.getInt("chance",100))){
                String dialogueContent=null;
                if(dialogueIdType==0){
                    if(ComUtil.isNumeric(value)){
                        dialogueContent=game.gameMethod.getDialogueStr(dialogueIdType,Integer.parseInt(value),"");
                    }else {
                        dialogueContent=value;
                    }
                }else{
                    dialogueContent=game.gameMethod.getDialogueStr(dialogueIdType,ComUtil.getRandom(1, dE.getInt("count",1)),value);
                }
                DialogueData d=new DialogueData();
                d.setCountryId(countryId);
                d.setGeneralId(g.getGeneralId());
                d.setGeneralImageName(g.getGeneralImageName());
                d.setDialogueContent(dialogueContent);
                d.setGeneralState(g.getState());
                dialogueDatas.add(d);
                if(game.sMapScreen!=null&&!game.sMapScreen.ifEnd&&roundState==0&&/*masterData.getGameStatu()==1&&*/!game.sMapScreen.getWindowGroups().get(ResDefaultConfig.Class.SMapScreenIntroductionGroupId).isVisible()){
                    game.sMapScreen.showGeneralDialogueGroup(ifHidOther);
                }
                return true;
            }
        }
        return false;
    }

    public void initStarDialogue(){
        GeneralData g=null,g0=null;
        Iterator<IntMap.Entry<GeneralData>> itG = generalIDatas.iterator();
        while (itG.hasNext()) {
            GeneralData tg=itG.next().value;
            if(tg.getGeneralIndex()==0){//情报官
                g0=tg;
            }else if(tg!=null&&tg.getLegionIndex()==masterData.playerLegionIndex){
                g=tg;break;
            }
        }
        if(g==null){
            g=g0;
        }
        if(g!=null){
            LegionData l=getPlayerLegionData();
            addDialogueData(l.getCountryId(),g,12,l.legionName,true);
        }
    }







    private void event_worldHelp(LegionData legionData){
        int v1,v2,v3,v4;
        v1=ComUtil.limitValue( worldData.worldMoney-legionData.incomeMoney,0,999);
        if(v1>0){  legionData.addMoney(v1);}else{ v1=0;}
        v2= ComUtil.limitValue(worldData.worldIndustry-legionData.incomeIndustry,0,999);
        if(v2>0){  legionData.addIndustry(v2);}else{ v2=0;}
        v3= ComUtil.limitValue(worldData.worldTech-legionData.incomeTech,0,999);
        if(v3>0){  legionData.addTech(v3);}else{ v3=0;}
        v4= ComUtil.limitValue(worldData.worldFood -legionData.incomeFood,0,999);
        if(v4>0){  legionData.addFood(v4);}else{ v4=0;}
        if(legionData.getLegionIndex()==masterData.playerLegionIndex&&(v1>0||v2>0||v3>0||v4>0)){
            addPromptData(game.gameMethod.getPromptStrT(22,0),
                    game.gameMethod.getPromptStrT(22,1),
                    game.gameMethod.getPromptStrT(22,2,v1,v2,v3,v4),masterData.playerLegionIndex,masterData.playerLegionIndex,true);
        }

    }
    private void event_techBreach(LegionData legion) {
        boolean rs=   legion.getLegionRound()>0;
        legion.setLegionRound(0);
        if(rs&&legion.getLegionIndex()==masterData.playerLegionIndex){
            addPromptData(game.gameMethod.getPromptStrT(28,0),
                    game.gameMethod.getPromptStrT(28,0),
                    game.gameMethod.getPromptStrT(28,0,""),masterData.playerLegionIndex,masterData.playerLegionIndex,true);
        }
    }

    private void event_incomeBumper(LegionData legion,int minV,int maxV) {
        int money=legion.incomeMoney*ComUtil.getRandom(minV,maxV)/100;
        int industry=legion.incomeIndustry*ComUtil.getRandom(minV,maxV)/100;
        int tech=legion.incomeTech*ComUtil.getRandom(minV,maxV)/100;
        int food=legion.incomeFood*ComUtil.getRandom(minV,maxV)/100;

        legion.addMoney(money);
        legion.addIndustry(industry);
        legion.addTech(tech);
        legion.addFood(food);
        if(legion.getLegionIndex()==masterData.playerLegionIndex){
            addPromptData(game.gameMethod.getPromptStrT(34,0),
                    game.gameMethod.getPromptStrT(34,1,money,industry,tech,food),
                    game.gameMethod.getPromptStrT(34,2,""),masterData.playerLegionIndex,masterData.playerLegionIndex,true);
        }
    }


    private void event_incomeReduce(LegionData legion,int min,int max) {
        legion.setMoney(legion.getMoney()*ComUtil.getRandom(min,max)/100  );
        legion.setIndustry(legion.getIndustry()*ComUtil.getRandom(min,max)/100  );
        legion.setTech(legion.getTech()*ComUtil.getRandom(min,max)/100  );
        legion.setFood(legion.getFood()*ComUtil.getRandom(min,max)/100  );
        if(legion.getLegionIndex()==masterData.playerLegionIndex){
            addPromptData(game.gameMethod.getPromptStrT(29,0),
                    game.gameMethod.getPromptStrT(29,1),
                    game.gameMethod.getPromptStrT(29,2,""),masterData.playerLegionIndex,masterData.playerLegionIndex,true);
        }
    }
    private void event_nituralDisaster(LegionData legion,int chance,String args) {
        //  Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
        boolean rs=false;
        StringBuilder builder=new StringBuilder("\n");
       /* while (it.hasNext()) {
            BuildData b = it.next().value;*/
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if(b!=null&&b.getLegionIndex()==legion.getLegionIndex()&&ComUtil.ifGet(chance)){
                builder.appendLine(b.getRegionAreaStr());
                b.randomReduceTech(ComUtil.getRandom(1,3),1);rs=true;
                b.addCityStability(ComUtil.getRandomByStr(args));
                b.setCityTax(b.getCityTax()+ComUtil.getRandomByStr(args));
                break;
            }
        }
        if(rs&&legion.getLegionIndex()==masterData.playerLegionIndex){
            addPromptData(game.gameMethod.getPromptStrT(30,0),
                    game.gameMethod.getPromptStrT(30,1,builder.toString()),
                    game.gameMethod.getPromptStrT(30,2,""),masterData.playerLegionIndex,masterData.playerLegionIndex,true);
        }
    }

    private void event_plague(LegionData legion, int chance,String args) {
        //Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
        boolean rs=false;
        StringBuilder builder=new StringBuilder("\n");
        /*while (it.hasNext()) {
            BuildData b = it.next().value;
        */ for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if(b!=null&&b.getLegionIndex()==legion.getLegionIndex()&&ComUtil.ifGet(chance/2)){
                builder.appendLine(b.getRegionAreaStr());
                rs=plagueRegion(b.getRegionId());
                break;
            }
        }
        if(rs&&legion.getLegionIndex()==masterData.playerLegionIndex){
            addPromptData(game.gameMethod.getPromptStrT(31,0),
                    game.gameMethod.getPromptStrT(31,1,builder.toString()),
                    game.gameMethod.getPromptStrT(31,2,""),masterData.playerLegionIndex,masterData.playerLegionIndex,true);
        }
    }

    private void event_regionRebellion(int legionIndex) {
        // Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
        boolean rs=false;
        StringBuilder builder=new StringBuilder("\n");
        /*while (it.hasNext()) {
            BuildData b = it.next().value;*/
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if(b.getLegionIndex()==legionIndex&&b.getCityStability()<30&&ComUtil.ifGet(b.getCityStability())){
                rs=rebelRegion(b.getRegionId());
                builder.appendLine(b.getRegionAreaStr());
                break;
            }
        }
        if(rs&&legionIndex==masterData.playerLegionIndex){
            addPromptData(game.gameMethod.getPromptStrT(33,0),
                    game.gameMethod.getPromptStrT(33,1,builder.toString()),
                    game.gameMethod.getPromptStrT(33,2,""),masterData.playerLegionIndex,masterData.playerLegionIndex,true);
        }


    }

    //对某个区域执行瘟疫,当前血量减半
    private boolean plagueRegion(int regionId) {
        BuildData b=getBuildDataByRegion(regionId);
        b.setCityHpNow(b.getCityHpNow()/2);
        b.setCityStability(b.getCityStability()/2);
        IntArray rs=  regionHexagonMap.get(regionId);
        boolean s=false;
        for(int i=0;i<rs.size;i++){
            ArmyData a=getArmyDataByHexagon(rs.get(i));
            if(a!=null){
                a.setArmyHpNow(a.getArmyHpNow()/2);
                a.setArmyMorale(a.getArmyMorale()/2);
                s=true;
            }
        }
        return s;
    }


    private boolean rebelRegion(int regionId) {
        BuildData b=getBuildDataByRegion(regionId);
        b.setCityHpNow(b.getCityHpNow()/2);
        b.setLegionIndex(0);
        IntArray rs=  regionHexagonMap.get(regionId);
        boolean s=false;
        for(int i=0;i<rs.size;i++){
            ArmyData a=getArmyDataByHexagon(rs.get(i));
            if(a!=null){
                a.setLegionIndex(0);
                a.setArmyHpNow(a.getArmyHpMax());
                s=true;
            }
            Fb2Map.MapHexagon h=getHexagonData(rs.get(i));
            if(h.getLegionIndex()!=0&&h.getLegionIndex()!=-1){
                h.setLegionIndexValue(0);
            }
        }
        return s;
    }

    //TODO  执行事件
    private void excuteREvent(LegionData legion, XmlReader.Element eventE){

        switch (eventE.getInt("id")){
            case 0:event_worldHelp(legion);break;
            case 1:event_techBreach(legion);break;
            case 2:event_incomeReduce(legion,eventE.getInt("minV"),eventE.getInt("maxV"));break;
            case 3:event_nituralDisaster(legion,eventE.getInt("randomChance"),eventE.get("args"));break;
            case 4:event_plague(legion,eventE.getInt("randomChance"),eventE.get("args"));break;
            case 5:event_foreignSplit(legion.getLegionIndex());break;
            case 6:event_regionRebellion(legion.getLegionIndex());break;
            case 7:event_incomeBumper(legion,eventE.getInt("minV"),eventE.getInt("maxV"));
        }
    }



    //外交恶化
    private void event_foreignSplit(int legionIndex) {
        boolean rs=false;
        StringBuilder builder=new StringBuilder("\n");
        for(LegionData l:legionDatas){
            if(l.getLegionIndex()!=legionIndex&&l.getInternIndex()!=0){
                if(ifAllyByLi(l.getLegionIndex(),legionIndex)){
                    builder.appendLine(l.legionName);
                    ForeignData f=getForeignData(l.getLegionIndex(),legionIndex);
                    f.setFavorValue(f.getFavorValue()-ComUtil.getRandom(5,20));
                    rs=true;
                }
            }
        }
        if(rs&&legionIndex==masterData.playerLegionIndex){
            addPromptData(game.gameMethod.getPromptStrT(32,0),
                    game.gameMethod.getPromptStrT(32,1,builder.toString()),
                    game.gameMethod.getPromptStrT(32,2,""),masterData.playerLegionIndex,masterData.playerLegionIndex,true);
        }
    }



   /* public int getLegionCivilSpecPoor(int lia,int lib){
        int c1=legionDatas.get(lia).getCivilSpec();
        int c2=legionDatas.get(lib).getCivilSpec();
        return  (ComUtil.min(Math.abs(c1-c2),ComUtil.min(Math.abs(c1+180-c2),Math.abs(c2+180-c1))));
    }*/


    //获得文化关系给予的好感度修正  9~-9




    public static void main(final String[] args) {
        testLegionCivilSpecPoor();
    }

    //好感度测试
    private static void testLegionCivilSpecPoor(){
        int [] cs={10,15,25,40,45,35,50,60,75,90,105,120,135,150,165,175,0};
        String [] cs2={"美国","英国","法国","北欧","德国","意大利","东欧","俄罗斯","土耳其","沙特","伊朗","印度","中国","韩日","东南亚","拉美","葡西"};


        for(int i=0;i<cs.length;i++){
            for(int j=0;j<cs.length;j++){
                int s=getLegionCivilSpecFavor(cs[i],cs[j]);
                System.out.println(cs2[i]+"_"+cs2[j]+" :"+s);
            }
        }
    }
    public static int getLegionCivilSpecFavor(int c1,int c2){
        // int c1=legionDatas.get(lia).getCivilSpec();
        // int c2=legionDatas.get(lib).getCivilSpec();
        return  (45-(Math.min(Math.abs(c1-c2),Math.min(Math.abs(c1+180-c2),Math.abs(c2+180-c1)))))/5;
    }

    public boolean checkRegionCanLegionMerge(LegionData legionA, LegionData legionB){
        if(legionA!=null&&legionB!=null&&(legionA.getCountryId()==legionB.getCountryId()||(legionA.varRegionCount*3<legionB.varRegionCount)||(legionB.varRegionCount*3<legionA.varRegionCount))){
            return true;
        }
        return false;
    }

    public boolean checkRegionCanLegionMerge(int li,int li2){
        return checkRegionCanLegionMerge(getLegionDataByLi(li),getLegionDataByLi(li2));
    }

    //如果是玩家请求合并,则以玩家为主体,否则 legionA主导国,legionB被合并国
    public boolean legion_Merge(LegionData legionA, LegionData legionB,boolean ifExchange) {
      /* if(legionA.getBuildPolicy()==legionB.getBuildPolicy()){
           return;
       }*/

        ForeignData f=getForeignData(legionA.getLegionIndex(),legionB.getLegionIndex());
        if(f.getDiplomaticAttitude()==3&&!f.isSuzerain()){
            return false;
        }

        boolean ifLoad=legionA.getLegionIndex()==masterData.getPlayerLegionIndex()||legionB.getLegionIndex()==masterData.getPlayerLegionIndex()
                ||legionA.getSuzerainLi()==masterData.getPlayerLegionIndex()||legionB.getSuzerainLi()==masterData.getPlayerLegionIndex();


        int masterLi=0;int mergeLi=0;
        if(ifExchange){
            if(legionA.incomeMoney>=legionB.incomeMoney||legionA.varRegionCount>=legionB.varRegionCount){
                masterLi=legionA.getLegionIndex();
                mergeLi=legionB.getLegionIndex();
            }else {
                masterLi=legionB.getLegionIndex();
                mergeLi=legionA.getLegionIndex();
            }
        }else{
            masterLi=legionA.getLegionIndex();
            mergeLi=legionB.getLegionIndex();
        }



        if(masterLi==masterData.playerLegionIndex||mergeLi==masterData.playerLegionIndex){
            masterData.playerLegionIndex=masterLi;
            playerLegionData=legionDatas.get( masterData.playerLegionIndex);
        }


        legionDatas.get(mergeLi).setInternIndex(0);
        legionDatas.get(mergeLi).setSuzerainLi(0);
        legionDatas.get(mergeLi).setCapitalId(-1);

        if(ifLoad){
            updArmyActorByLegionIndex(mergeLi);
        }

        /*for(StrategicData s:strategicDatas){
            if(s.getLegionIndex()==mergeLi){
                s.setLegionIndex(masterLi);
            }
        }*/
        Iterator<IntMap.Entry<GeneralData>> itG = generalIDatas.iterator();
        while (itG.hasNext()) {
            GeneralData g=itG.next().value;
            if(g==null){continue;}
            if(g.getLegionIndex()==mergeLi){
                g.setLegionIndex(masterLi);
            }
        }
      /*  Iterator<IntMap.Entry<BuildData>> itB1 = buildRDatas.iterator();
        while (itB1.hasNext()) {
            IntMap.Entry<BuildData> c = itB1.next();
            BuildData b=c.value;*/
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if(b.getLegionIndex()==mergeLi){
                b.setLegionIndex(masterLi);
            }
        }
        Iterator<IntMap.Entry<AirData>> it = airIDatas.iterator();
        while (it.hasNext()) {
            IntMap.Entry<AirData> c = it.next();
            AirData a=c.value;
            if(a==null){continue;}
            if(a.getLegionIndex()==mergeLi){
                a.setLegionIndex(masterLi);
            }
        }
        Iterator<IntMap.Entry<ArmyData>> it1 = armyHDatas.iterator();
        while (it1.hasNext()) {
            IntMap.Entry<ArmyData> a = it1.next();
            if(a.value!=null&&a.value.getLegionIndex()==mergeLi){
                a.value.setLegionIndex(masterLi);
            }
        }

        Iterator<IntMap.Entry<FortData>> it4 = fortHDatas.iterator();
        while (it4.hasNext()) {
            IntMap.Entry<FortData> c = it4.next();
            FortData t=c.value;

            if(t==null){continue;}
            if(t.getLegionIndex()==mergeLi){
                t.setLegionIndex(masterLi);
            }
        }

        Iterator<IntMap.Entry<InternData>> it5 = internIDatas.iterator();
        while (it5.hasNext()) {
            IntMap.Entry<InternData> c = it5.next();
            InternData i=c.value;
            if(i==null){continue;}
            if(i.getLegionIndex()==mergeLi){
                i.setLegionIndex(masterLi);
            }
            if(i.getInternIndex()==mergeLi){
                i.setInternIndex(masterLi);
            }
        }
        for(Fb2Map.MapHexagon t:hexagonDatas){
            if(t.getLegionIndex()==mergeLi){
                t.setLegionIndexValue(masterLi);
            }
        }
        //addUpdColorRegionByLi(masterLi);
        if(ifNeedRecordPrompt(legionA.legionIndex)|| ifNeedRecordPrompt(legionB.legionIndex)){
            addPromptData(game.gameMethod.getPromptStrT(10,0),
                    game.gameMethod.getPromptStrT(10,1,legionA.legionName,legionB.legionName),
                    game.gameMethod.getPromptStrT(10,2,legionDatas.get(masterLi).legionName),legionA.getLegionIndex(),legionB.getLegionIndex(),false);
            initCardNumAndCost();
        }

        return true;

       /* Iterator<Integer,BuildData> it = buildRDatas.iterator();
        while (it.hasNext()) {
            IntIntMap.Entry c = it.next();


        }*/


    }




    public String legion_Riot(LegionData legionData,LegionData sl, String effect) {
        if(0==legionData.getLegionIndex()){
            return null;
        }
        if(ifSystemEffective(4)&&sl!=null&&sl.getLegionIndex()!=masterData.getPlayerLegionIndex()&&legionData.isPlayer()&&legionData.getStability()<30&&ComUtil.ifGet(sl.getStability()-legionData.getStability()+legionData.getStability())){
            ForeignData f=getForeignData(legionData.getLegionIndex(),sl.getLegionIndex());
            if(f!=null&&f.getDiplomaticAttitude()!=3){
                createLegionInvite(sl.getLegionIndex());
            }
        }
        int riotChance=ComUtil.limitValue(100-legionData.getStability(),20,80);
        // riotChance=100;
        for(LegionData l:legionDatas){
            if(l.getInternIndex()!=0&&l.getSuzerainLi()==legionData.getLegionIndex()&&ComUtil.ifGet(riotChance/10+(100-l.getSuzerainFaver())/15)){
                legion_Independent(l);
            }
        }
        if(riotChance>0){
            boolean ifLoad=legionData.getLegionIndex()==masterData.getPlayerLegionIndex()
                    ||legionData.getSuzerainLi()==masterData.getPlayerLegionIndex();
            String countryStr=legionData.legionName;
            legionData.reduceStability(riotChance/2);
            int captial=legionData.getCapitalId();
            int li=legionData.getLegionIndex();
          /*  Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
            while (it.hasNext()) {
                IntMap.Entry<BuildData> c = it.next();
                BuildData b=c.value;*/
            for(int bi=0;bi<buildRDatas.size();bi++) {
                BuildData b=buildRDatas.getByIndex(bi);
                if(b.getLegionIndex()==li&&b.getRegionId()!=captial&&( ComUtil.ifGet(riotChance))||ComUtil.ifGet(100-b.getCityStability())){
                    b.setCityHpNowByRate(b.getHpRate()-ComUtil.getRandom(10,30));
                    if(b.isPlayer()){
                        b.setBuildStatus(3);
                    }else if(ifAllyPlayerByLi(b.getLegionIndex())){
                        b.setBuildStatus(2);
                    }else {
                        b.setBuildStatus(1);
                    }
                    /*if(getArmyDataByHexagon(b.getRegionId())==null&&!b.isCapital()&&roundState!=1){
                        b.setLegionIndex(0);
                    }*/
                    b.setCityTax(b.getCityTax()/2);
                    b.setCityStability(b.getCityStability()/2);
                    //addUpdColorRegion(b.getRegionId());
                    riotChance--;
                }
                if(riotChance<=0){
                    break;
                }
            }
            Iterator<IntMap.Entry<ArmyData>> itB1 = armyHDatas.iterator();
            while (itB1.hasNext()) {
                IntMap.Entry<ArmyData> a = itB1.next();
                if(a.value!=null&&a.value.getLegionIndex()==li&& ComUtil.ifGet(riotChance)){
                    a.value.setArmyHpNowByRate(ComUtil.getRandom(10,90));
                }
                if(riotChance<=0){
                    break;
                }
            }
            if(effect!=null&&ifLoad){
                return game.gameMethod.getStrValueT(effect,countryStr,riotChance);
            }else {
                if(ComUtil.ifGet(game.resGameConfig.rEventChance)&& ifNeedRecordPrompt(legionData.legionIndex)){
                    addPromptData(game.gameMethod.getPromptStrT(25,0,countryStr),
                            game.gameMethod.getPromptStrT(25,1,countryStr),
                            game.gameMethod.getPromptStrT(25,2,countryStr),legionData.getLegionIndex(),legionData.getLegionIndex(),false);
                }
                return null;
            }
        }else {
            return null;
        }


    }


    public int getNewGeneralIndex(){
        int index=0;
        while (generalIDatas.containsKey(index)){
            index++;
            if(!generalIDatas.containsKey(index)){
                return index;
            }
        }
        return index;
    }
    public int getNewNulcleIndex(){
        int index=0;
        while (nulcleIDatas.containsKey(index)){
            index++;
            if(!nulcleIDatas.containsKey(index)){
                return index;
            }
        }
        return index;
    }
    public int getNewAirIndex(){
        int index=0;
        while (airIDatas.containsKey(index)){
            index++;
            if(!airIDatas.containsKey(index)){
                return index;
            }
        }
        return index;
    }


    /*public int getNewArmyIndex(){
        int index=0;
        Iterator<IntMap.Entry<ArmyData>> it = armyHDatas.iterator();
        while (it.hasNext()) {
            IntMap.Entry<ArmyData> c = it.next();
            ArmyData a=c.value;
            if(a!=null){
                if(!armyHDatas.containsKey(index)){
                    return index;
                }else {
                    index++;
                }
            }
        }
        return index;
    }*/


    public void legion_Independent(LegionData l) {
        if(l.suzerainLi>0) {
            boolean ifReset = false;
            int resetLi = 0;
            if (l.getSuzerainLi() == masterData.playerLegionIndex) {
                resetLi = l.getLegionIndex();
                ifReset = true;
            } else if (l.getLegionIndex() == masterData.playerLegionIndex) {
                resetLi = l.getSuzerainLi();
                ifReset = true;
            }

            ForeignData f = getForeignData(l.legionIndex, l.suzerainLi);
            if(f.getDiplomaticAttitude()==2){
                int s=0;
            }


            LegionData suzLegion = l.getSuzerainLegionData();
            f.setFavorValue(f.getFavorValue() / 2);
            l.setStability(l.getStability() * 2);
            if (ifReset) {
                //addUpdColorRegionByLi(resetLi);
                updArmyActorByLegionIndex(resetLi);
            }
            if (ifNeedRecordPrompt(l.legionIndex)) {
                addPromptData(game.gameMethod.getPromptStrT(19, 0, l.legionName),
                        game.gameMethod.getPromptStrT(19, 1, l.legionName, suzLegion.legionName),
                        game.gameMethod.getPromptStrT(19, 2, suzLegion.legionName),l.getLegionIndex(),suzLegion.getLegionIndex(),false);

            }
        }
        l.suzerainLi=0;
        l.taxBonus=l.getTaxBonus()*2;
        l.internIndex=l.legionIndex;
        l.setStability(l.getStability()*2);
        if(l.isPlayer()){
            ifNeedDrawViewMap=true;
        }

    }

    public void updArmyActorByLegionIndex(int li){
        Iterator<IntMap.Entry<ArmyData>> it = armyHDatas.iterator();
        while (it.hasNext()) {
            IntMap.Entry<ArmyData> c = it.next();
            ArmyData a=c.value;

            if(a!=null&&a.armyActor!=null&&a.getLegionIndex()==li){
                a.armyActor.update();
            }
        }
    }


    public void army_ActToTarget(ArmyData a,boolean  ifMerge){
        int  movement = a.getMovement();
        if(movement==0||a.getArmyRound()>0){return;}
        int direct;int hexagon;
        boolean ifSea,limitSea=true,ifAct=false,ifAlly=ifAllyPlayerByLi(a.getLegionIndex());
        LegionData legion=a.getLegionData();
        if (a.getArmyType() == 4 || a.getArmyType() == 8) {
            ifSea = true;
            limitSea=false;
        } else {
            ifSea = false;
        }
        if (a.getArmyType() == 4 || a.getArmyType() == 8) {
            ifSea = true;
        } else {
            ifSea = false;
        }
        if (movement > 0&&a.getIfMove()==0) {
            direct = getDirect(a.getHexagonIndex(), a.targetRegion);
            // 如果有物资
            {
                IntIntMap tempIntIntMap2=game.tempUtil.getTempIntIntMap();
                //获取可以行动的位置
                getPotionForArmyCanActTIIM1(a, a.getHexagonIndex(),0, ifMerge,false,tempIntIntMap2,!ifSystemEffective(22));

                Iterator<IntIntMap.Entry> it = tempIntIntMap2.iterator();

                //1.优先占领建筑
                while (it.hasNext()) {
                    IntIntMap.Entry c = it.next();
                    if (c.value == 13&&a.canMove(c.key)) {
                        addLegionConfidence(a.getLegionIndex(), 1);
                        //移动到此处直接占领
                        if(a.armyActor!=null&&(a.getTargetRegion()==getRegionId(c.key)||direct == getDirect(a.getHexagonIndex(), c.key))){
                            a.armyActor.moveHexagon(c.key);
                        }else {
                            army_Move(a, c.key);
                        }
                        ifAct=true;
                        break;
                    }
                }

                if (!ifAct && (ComUtil.ifGet(a.getMergeChance()) )) {//合并
                    it = tempIntIntMap2.iterator();
                    while (it.hasNext()) {
                        IntIntMap.Entry c = it.next();
                        if (c.value == 7) {
                            if (army_Merge(a, getArmyDataByHexagon(c.key))) {
                                ifAct = true;
                                break;
                            }
                        }
                    }
                }

                if (!ifAct) {//邻近进攻
                    it = tempIntIntMap2.iterator();
                    while (it.hasNext()) {
                        IntIntMap.Entry c = it.next();
                        if (c.value == 25&&(a.getTargetRegion()==getRegionId(c.key)||direct == getDirect(a.getHexagonIndex(), c.key))) {
                            army_Attack(a, c.key);
                            ifAct = true;
                            break;
                        }
                    }
                }
                if (!ifAct) {
                    it = tempIntIntMap2.iterator();
                    //2.进攻
                    while (it.hasNext()) {
                        IntIntMap.Entry c = it.next();
                        if (c.value == 18&&a.canMove(c.key)&&(a.getTargetRegion()==getRegionId(c.key)||direct == getDirect(a.getHexagonIndex(), c.key))) {
                            if(a.armyActor!=null){
                                a.armyActor.moveHexagon(c.key);
                            }else {
                                army_Move(a, c.key);
                            }
                            int target = getTargetEnemyByRangeTIA1(a);
                            if (target >= 0) {
                                army_Attack(a, target);
                            }
                            ifAct = true;
                            break;
                        }
                    }
                }
                if (!ifAct) {
                    it = tempIntIntMap2.iterator();
                    //3.移动到最远距离
                    hexagon = getRecentHexagon(legion.ifPlayerAlly()?-1:a.getLegionIndex(),a.getHexagonIndex(),a.targetRegion, tempIntIntMap2, a.getIfSeaForMove());
                    if (hexagon >= 0 && hexagon < hexagonDatas.size&&a.canMove(hexagon)) {
                        if(a.armyActor!=null){
                            a.armyActor.moveHexagon(hexagon);
                        }else {
                            army_Move(a, hexagon);
                        }
                        ifAct = true;
                    } else {
                        //休息
                        army_Standby(a);
                    }

                }
                game.tempUtil.disposeTempIntIntMap(tempIntIntMap2);
                a.addArmyRound(1);
            }/* else {
                //如果没有物资,则会有持续掉血的效果
                tempMoveIntArray = getArmyMovablePostionTIIM1(a.getHexagonIndex(), a.getLegionIndex(), movement, direct, tempMoveIntArray, ifSea, limitSea);
                hexagon = getTargetHexagonForAllyTIA1(tempMoveIntArray, a.getLegionIndex(), ifSea);
                if (hexagon != -1) {//移动
                    if(a.armyActor!=null){
                        a.armyActor.moveHexagon(hexagon);
                    }else {
                        army_Move(a, hexagon);
                    }
                }
                if (ifAlly) {
                    a.setArmyMoraleChange(ComUtil.getRandom(1,ResConfig.Game.unitMoraleChangeValueMax)*-1);
                } else {
                    if (a.armyActor!=null) {
                        a.setArmyMoraleChange(ComUtil.getRandom(1,ResConfig.Game.unitMoraleChangeValueMax)*-1);
                        a.setAirGoodsNow(a.getAirGoodsMax()/2);
                    }else {
                        a.setAirGoodsNow(a.getAirGoodsMax());
                    }
                }
                a.addArmyRound(1);
            }*/
        } else if(a.getIfAttack()==0){
            hexagon = getTargetEnemyByRangeTIA1(a);
            if (hexagon >= 0) {
                army_Attack(a, hexagon);
                ifAct = true;
            } else {
                army_Standby(a);
            }
            a.addArmyRound(1);
        }

        if(!ifAct){
            if(a.armyActor!=null&&a.isPlayer()){
                a.armyActor.update();
            }
        }


        if(a.getArmyType()==6){
            a.setTargetRegion(-1);
            if(a.armyActor!=null&&a.isPlayer()){
                a.armyActor.update();
            }
        }
        if(a.getRegionId()==a.getTargetRegion()&&a.ifAllyRegion()){
            a.setTargetRegion(-1);
        }
    }

    public boolean air_Move(AirData air,int region){
        BuildData ob=air.getBuildData();
        BuildData b=getBuildDataByRegion(region);
        if(b!=null&&b.getAirCount()<4){
            if(b.setAirIndex(air.getAirIndex())){
                if(air.getSourceBuildData()!=null){
                    air.getSourceBuildData().removeAirIndex(air.airIndex);
                }
                if(air.armyData!=null){
                    air.armyData.removeAirIndex(air.getAirIndex());
                    air.armyData=null;
                }
                air.setRegionId(region);
                if(ob.buildActor!=null&&(roundState==0||(roundState==4&&(b.isPlayer()||ob.isPlayer()||air.isPlayer())))){
                    ob.buildActor.update();
                }
                if (b.buildActor!=null&&(roundState==0||(roundState==4&&(b.isPlayer()||ob.isPlayer()||air.isPlayer())))) {
                    b.buildActor.update();
                }
                if(ifAllyPlayerByLi(air.getLegionIndex())&&(roundState==0||(roundState==4&&(b.isPlayer()||ob.isPlayer()||air.isPlayer())))) {
                    effectStage.drawEffect(air.getAirId(),ob.getRegionId(),region,1f);
                }
                air.setIfMove(1);
                if(getAge()>0&&air.isPlayer()&& ifSystemEffective(2)){
                    air.getLegionData().addOil(-air.getAirRank());
                    if(game.sMapScreen!=null){
                        game.sMapScreen.updResourceForPlayer();
                    }
                }
                return true;
            }
        }
        return false;
    }

    //特殊飞机 1501 侦查 1502 拦截 1503拦截,护航
    //1504,1506 轰炸 1505 运输 1507 完全侦查

    public boolean air_Attack(AirData air,int targetHexagon){
        if (air.getAirRound()!=0||air.getAirGoodsNow()<1) { return false; }
        if(roundState==1||!ifGridIsPass(targetHexagon)){
            return false;
        }
        LegionData al=air.getLegionData();
        if(air.isPlayer()&& ifSystemEffective(3)){
            al.addIndustry(-air.getAirRank());
            if(game.sMapScreen!=null){
                game.sMapScreen.updResourceForPlayer();
            }
        }
        int targetRegion=getRegionId(targetHexagon);
        BuildData targetBuild=getBuildDataByRegion(targetRegion);
        BuildData sBuild=getBuildDataByRegion(air.getRegionId());

        //护航机
        AirData escortAir=null;
       /* if(air.ifHaveAirFeature(28)){
            escortAir=air;
        }else if(sBuild!=null){
            escortAir= sBuild.getEscortAir(air.getHexagon());
        }*/
        escortAir=   air.getEscortAir(targetHexagon);
        boolean rs=false;
        boolean  ifRecordDamage = air.playerCanCommand();
        boolean  ifDrawAir =ifRecordDamage;
        float damageTime=0.7f;
        float addDamageTime=0.3f;



        if(targetBuild!=null){
            if(air.triggerSkill(107)){
                air.drawSkill(107);
            }else{
                AirData defendAir=targetBuild.getInterceptorAir();
                if(air.ifHaveAirFeature(28)&&defendAir!=null){//空战
                    airToAirCombat(escortAir,defendAir,targetRegion,ifRecordDamage,ifDrawAir);
                    if(air==null){
                        return true;
                    }
                    air.setIfAttack(1);
                }
                defendAir=targetBuild.getInterceptorAir();
                //拦截
                if(defendAir!=null){
                    defendAir.setAirGoodsNow(defendAir.getAirGoodsNow()-1);
                    airToAirCombat(defendAir,escortAir,targetRegion,ifRecordDamage,ifDrawAir);
                }
            }
        }


        if(air==null){
            return true;
        }

        ArmyData targetArmy=getArmyDataByHexagon(targetHexagon);
        if( air.ifHaveAirFeature(29)){//轰炸
            if (air.getNucleIndex()!=-1) {
                NulcleData n=air.getAirNulData();
                if(n!=null){
                    nul_Bomber(n,targetHexagon,ifDrawAir);
                    nul_Death(n.getNucleIndex());
                    air.setNucleIndex(-1);
                }
            }
            if(ifDrawAir){
                if(targetHexagon!=-1){ effectStage.drawEffect(air.getAirId(),air.getRegionId(),targetHexagon,1f);}
                else{ effectStage.drawEffect(air.getAirId(),air.getRegionId(),targetRegion,1f);}
                ifDrawAir=false;
            }
            if(targetHexagon==-1){   return false;}
            if(air.triggerSkill(45)){
                air_SplashAttack(air,targetHexagon,1,1f,air.getSkillEffect(45)/100f,ifRecordDamage,damageTime,addDamageTime);
                air.updKill(air.getExp());
                air.drawSkill(45);
                if(targetArmy!=null){
                    setDirect(targetArmy,air.getRegionId());
                    if(!air.triggerSkill(107)){
                        //被袭击的兵种的回击
                        if(escortAir!=null){//如果有护航机,则对来袭飞机的护航机进行进攻
                            armyToAirStrike(targetArmy,escortAir,ifRecordDamage,ifDrawAir,damageTime);
                            damageTime=damageTime+addDamageTime;
                            ifDrawAir=false;
                        }else{//否则对来袭的轰炸机进行交战
                            armyToAirStrike(targetArmy,air,ifRecordDamage,ifDrawAir,damageTime);
                            damageTime=damageTime+addDamageTime;
                            ifDrawAir=false;
                        }
                    }else{
                        air.drawSkill(107);
                    }
                }
                air.setIfAttack(1);
            }else{
                if(targetArmy!=null){
                    setDirect(targetArmy,air.getRegionId());
                    //int  damage = GameUtil.getDamageForArmy(game, air, targetArmy,damageTime);
                    int  damage = GameUtil.getDamageForUnit(game, air, targetArmy,targetArmy.getBuildData(),true,damageTime);
                  int exp=ComUtil.limitValue(damage*(1+targetArmy.getExp())/air.getMinAttack(),1,targetArmy.getExp());
                    air.updKill(exp);
                    if(targetBuild!=null&&targetBuild.getCityHpNow()>0&&!targetBuild.ifEnergyOverload()){
                        damage=damage* (100-targetBuild.getMissileLvNow()*game.resGameConfig.missileLvDefenAirRate)/100;
                    }
                    if(ifRecordDamage){
                        targetArmy.createActor();
                        effectStage.drawUnitHp(targetHexagon,-damage,damageTime);
                        targetArmy.drawStrike( "generalStrike",damageTime);
                        damageTime=damageTime+addDamageTime;
                    }
                    rs=true;
                    exp=ComUtil.limitValue(damage*(1+air.getExp())/targetArmy.getUnitGroupAvgAttack(0),1,air.getExp());
                    targetArmy.updKill(exp,false);
                    air.setIfAttack(1);
                    if(targetArmy.injured(damage,targetArmy.getHexagonIndex())){
                        int fd=getForeignDegree(air.getLegionIndex(),targetArmy.getLegionIndex());
                        if(ifSystemEffective(0)){
                            addLegionConfidence(air.getLegionIndex(),1);
                            addLegionConfidence(targetArmy.getLegionIndex(),-1);
                        }

                        checkTask(air.getGeneralIndex()>0,air.getLegionIndex(),3,1);
                        checkTask(fd==-1,air.getLegionIndex(),6,1);
                        checkTask(targetArmy.getArmyMorale()<20,air.getLegionIndex(),17,1);

                        checkTask(fd==-1,air.getLegionIndex(),18,1);
                        int kill=targetArmy.getUnitGroup()+targetArmy.getArmyRank();
                        if(targetArmy.ifHaveSkill(39)){
                            kill+=targetArmy.getArmyKills()/2;
                            targetArmy.drawSkill(39);
                        }
                        air.updKill(kill);
                        army_Death(targetArmy.getHexagonIndex(),roundState==0||((targetArmy.isPlayer()||air.isPlayer())&&roundState==4));
                    }else if(!air.triggerSkill(107)){
                        //被袭击的兵种的回击
                        if(escortAir!=null){//如果有护航机,则对来袭飞机的护航机进行进攻
                            armyToAirStrike(targetArmy,escortAir,ifRecordDamage,ifDrawAir,damageTime);
                            damageTime=damageTime+addDamageTime;
                            ifDrawAir=false;
                        }else{//否则对来袭的轰炸机进行交战
                            armyToAirStrike(targetArmy,air,ifRecordDamage,ifDrawAir,damageTime);
                            damageTime=damageTime+addDamageTime;
                            ifDrawAir=false;
                        }
                    }else{
                        air.drawSkill(107);
                    }
                }
                if(air!=null&&targetBuild!=null&&targetBuild.getCityHpNow()>0&&ifCanAtk(air.getLegionIndex(),targetBuild.getLegionIndex())){//对建筑进行轰炸
                   // int  damage = GameUtil.getDamageForBuild(game, air, targetBuild);
                    int  damage = GameUtil.getDamageForUnit(game, air, targetBuild,targetBuild,true,0);
                    int exp=ComUtil.limitValue(damage*(1+targetBuild.getExp())/air.getMinAttack(),1,targetBuild.getExp());
                    air.updKill(exp);
                    if(targetArmy!=null&&targetBuild.getCityHpNow()>0&&!targetBuild.ifEnergyOverload()){
                        damage=damage* (100-targetBuild.getMissileLvNow()*game.resGameConfig.missileLvDefenAirRate)/100;
                    }
                    targetBuild.beAttackForAir(damage,ResDefaultConfig.Effect.effect_generalStrike,damageTime);
                    air.setIfAttack(1);
                }
            }
        }

        if(air==null){
            return true;
        }
        if(targetBuild!=null&& air.ifHaveAirFeature(32)&&!ifAllyByLi(air.getLegionIndex(),targetBuild.getLegionIndex())){//干扰
            tactic_SpreadRumors(targetRegion,air.getAirRank()+5,false);
            if(ifDrawAir){
                effectStage.drawEffect(air.getAirId(),air.getHexagon(),targetRegion,1f);
            }
            air.setIfAttack(1);
            ifDrawAir=false;
        }
        if(targetBuild!=null&& air.ifHaveAirFeature(30)&&!ifAllyByLi(air.getLegionIndex(),targetBuild.getLegionIndex())){//侦查
            tactic_SpyingMessage(targetRegion,air.getAirRank(),false);
            if(ifDrawAir){
                effectStage.drawEffect(air.getAirId(),air.getHexagon(),targetRegion,1f);
            }
            air.setIfAttack(1);
            ifDrawAir=false;
        }

        //结果
        if(air.getIfAttack()==1){
            air.setAirGoodsNow(air.getAirGoodsNow()-1);
            rs= true;
        }
        if(air.triggerSkill(66)){
            air.setIfAttack(0);
            air.drawSkill(66);
        }else if(air.triggerSkill(14)){
            air.setIfAttack(0);
            air.drawSkill(14);
        }
        if(air.triggerSkill(78)){
            air.setIfMove(0);
            air.drawSkill(78);
        }
        if(air.triggerSkill(109)){
            air.addAirHpByRate(air.getSkillEffect(109));
            air.drawSkill(109);
        }
        return rs;
    }
    public void air_SplashAttack(AirData air,int hexagon,int rangeCount,float attackRate,  float splashDamageRate ,boolean ifRecordDamage,float damageTime,float addDamageTime){
        int range,grid;int rs;

        int[] srd = ResDefaultConfig.Map.GRID_RANGE_SORT_ARRAY;

        //动画时间
        //  float damageTime=2f;
        // float addDamageTime=0.02f;
        BuildData areaBuild=getBuildDataByRegion(getRegionId(hexagon));
        //核心伤害
        rs=hexagon_airBomber(areaBuild,air,hexagon,attackRate,ifRecordDamage,damageTime,addDamageTime);

        if(splashDamageRate<=0){
            splashDamageRate=1f;
        }

        //扩散伤害
        for (int j = 1, jMax = rangeCount; j <= jMax; j++) {
            range = j;
            grid = getIdForDirectRange(hexagon, 1, range);
            for (int i = 0; i <  srd.length; i++) {
                for (int k = 0, kMax = range; k < kMax; k++) {
                    grid = getIdForDirectRange(grid, srd[i], 1);
                    rs=hexagon_airBomber(areaBuild,air,hexagon,  attackRate* splashDamageRate/j,ifRecordDamage,damageTime,addDamageTime);
                }
            }
        }
    }
    private int hexagon_airBomber(BuildData areaBuild,AirData air,int hexagon,float attackRate,boolean ifRecordDamage,float damageTime,float addDamageTime) {
        ArmyData targetArmy=getArmyDataByHexagon(hexagon);
        BuildData targetBuild=getBuildDataByRegion(hexagon);
        if(targetArmy==null&&targetBuild==null){
            return 0;
        }
        int damage=0;
        if(targetArmy!=null){
            //damage = GameUtil.getDamageForArmy(game, air, targetArmy,damageTime);
            damage = GameUtil.getDamageForUnit(game, air, targetArmy,targetBuild==null?targetArmy.getBuildData():targetBuild,true,damageTime);
            if(targetBuild!=null&&targetBuild.getCityHpNow()>0&&!targetBuild.ifEnergyOverload()){
                damage=damage* (100-targetBuild.getMissileLvNow()*game.resGameConfig.missileLvDefenAirRate)/100;
            }
            if(ifRecordDamage){
                targetArmy.createActor();
                effectStage.drawUnitHp(hexagon,-damage,damageTime);
                targetArmy.drawStrike( "generalStrike",damageTime);
                damageTime=damageTime+addDamageTime;
            }
            if(targetArmy.injured(damage,targetArmy.getHexagonIndex())){
                int fd=getForeignDegree(air.getLegionIndex(),targetArmy.getLegionIndex());
                if(ifSystemEffective(0)){
                    addLegionConfidence(air.getLegionIndex(),1);
                    addLegionConfidence(targetArmy.getLegionIndex(),-1);
                }

                checkTask(air.getGeneralIndex()>0,air.getLegionIndex(),3,1);
                checkTask(fd==-1,air.getLegionIndex(),6,1);
                checkTask(targetArmy.getArmyMorale()<20,air.getLegionIndex(),17,1);

                checkTask(fd==-1,air.getLegionIndex(),18,1);
                int kill=targetArmy.getUnitGroup()+targetArmy.getArmyRank();
                if(targetArmy.ifHaveSkill(39)){
                    kill+=targetArmy.getArmyKills()/2;
                    targetArmy.drawSkill(39);
                }
                air.updKill(kill);
                army_Death(targetArmy.getHexagonIndex(),roundState==0||((targetArmy.isPlayer()||air.isPlayer())&&roundState==4));
                air.setIfAttack(1);
            }
        }
        if(air!=null&&targetBuild!=null&&targetBuild.getCityHpNow()>0&&ifCanAtk(air.getLegionIndex(),targetBuild.getLegionIndex())){//对建筑进行轰炸
           // damage = GameUtil.getDamageForBuild(game, air, targetBuild);
            damage = GameUtil.getDamageForUnit(game, air, targetBuild,targetBuild,true,0);
            if(targetArmy!=null&&targetBuild.getCityHpNow()>0&&!targetBuild.ifEnergyOverload()){
                damage=damage* (100-targetBuild.getMissileLvNow()*game.resGameConfig.missileLvDefenAirRate)/100;
            }
            targetBuild.beAttackForAir(damage,ResDefaultConfig.Effect.effect_generalStrike,damageTime);
        }
        return damage;
    }



    private boolean ifCanMove(int hexagon){
        BuildData build=getBuildDataByRegion(hexagon);
        if(build!=null&&build.getCityHpNow()!=0){
            return false;
        }
        ArmyData army=getArmyDataByHexagon(hexagon);
        if(army!=null){
            return false;
        }
        return true;
    }

    //空对空作战
    private void airToAirCombat(AirData airData1,AirData airData2,int hexagon,boolean ifRecordDamage,boolean ifDrawAir){
        //boolean ifStrike=false;
        int damage;
        AirData a1,a2;
        float damageTime=0;
        float addDamageTime=0.5f;
        BuildData tAreaRegion=getBuildDataByRegion(getRegionId(hexagon));
        if(airData1.getActLv()>=airData2.getActLv()){
            a1=airData1; a2=airData2;
        }else {
            a2=airData1;a1=airData2;
        }

        //damage = (int) (GameUtil.getDamageForAir(game, a1, a2,tAreaRegion) * game.resGameConfig.buildSaveInjuryRatio);
        damage = (int) (GameUtil.getDamageForUnit(game, a1, a2,tAreaRegion,ifDrawAir,0) * game.resGameConfig.buildSaveInjuryRatio);
       int exp=ComUtil.limitValue(damage*(1+a2.getExp())/a1.getAvgAttack(),1,a2.getExp());
        a1.updKill(exp);
        if (ifRecordDamage) {
            effectStage.drawUnitHp(hexagon,-damage,damageTime);
            damageTime=damageTime+addDamageTime;
        }
        if(ifDrawAir){
            effectStage.drawEffect(a1.getAirId(),a1.getRegionId() ,hexagon,1f);
        }


        if (a2.injured(damage)) {//受伤死亡
            addLegionConfidence(a2.getLegionIndex(),1);
            addLegionConfidence(a2.getLegionIndex(),-1);
            int kill=a2.getExp();
            if(a2.ifHaveSkill(39)){
                kill+=a2.getAirKills()/2;
                a2.drawSkill(39);
            }
            if(a2.ifHaveSkill(115)){
                int effect=a2.getSkillEffect(115);
                a1.randomReduceSkillLv(effect);
                a2.drawSkill(115);
            }
            if(a2.ifHaveSkill(60)){
                a1.setAirHpNow(a1.getAirHpNow()*(100- a2.getSkillEffect(60)));
                a2.drawSkill(60);
            }
            a1.updKill(kill);

            if(a1.ifHaveSkill(18)){
                tactic_SpyingMessage(a1.getRegionId(),a1.getSkillLv(18),a1.getLegionIndex(),roundState==0||((a1.isPlayer()||a2.isPlayer())&&roundState==4));
                a1.drawSkill(18);
            }
            air_Death(a2);

            if(a1.ifHaveSkill(122)){//消灭敌军后可以再次移动
                a1.setIfMove(0);
                a1.drawSkill(122);
            }
            a1.setAirMoraleChange(ComUtil.getRandom( game.resGameConfig.unitMoraleChangeValueMax/2, game.resGameConfig.unitMoraleChangeValueMax));

        } else{
           // damage = (int) (GameUtil.getDamageForAir(game, a2, a1,tAreaRegion) * game.resGameConfig.buildSaveInjuryRatio);
            damage = (int) (GameUtil.getDamageForUnit(game, a2, a1,tAreaRegion,ifDrawAir,0) * game.resGameConfig.buildSaveInjuryRatio);
            exp=ComUtil.limitValue(damage*(1+a1.getExp())/a2.getAvgAttack(),1,a1.getExp());
            a2.updKill(exp);
            if (ifRecordDamage) {
                effectStage.drawUnitHp(hexagon,-damage,damageTime);
                damageTime=damageTime+addDamageTime;
                effectStage.drawEffect(a2.getAirId(),a2.getRegionId() ,hexagon,1f);
            }
            if (a1.injured(damage)) {//受伤死亡
                addLegionConfidence(a2.getLegionIndex(),1);
                addLegionConfidence(a2.getLegionIndex(),-1);
                int kill=a1.getExp();
                if(a1.ifHaveSkill(39)){
                    kill+=a1.getAirKills()/2;
                    a1.drawSkill(39);
                }
                if(a1.ifHaveSkill(115)){
                    int effect=a1.getSkillEffect(115);
                    a2.randomReduceSkillLv(effect);
                    a1.drawSkill(115);
                }
                if(a1.ifHaveSkill(60)){
                    a2.setAirHpNow(a2.getAirHpNow()*(100- a1.getSkillEffect(60)));
                    a1.drawSkill(60);
                }
                a2.updKill(kill);
                if(a2.ifHaveSkill(18)){
                    tactic_SpyingMessage(a2.getRegionId(),a2.getSkillLv(18),a2.getLegionIndex(),roundState==0||((a1.isPlayer()||a2.isPlayer())&&roundState==4));
                    a2.drawSkill(18);
                }
                air_Death(a1);

                if(a2.ifHaveSkill(122)){//消灭敌军后可以再次移动
                    a2.setIfMove(0);
                    a2.drawSkill(122);
                }
                a2.setAirMoraleChange(ComUtil.getRandom( game.resGameConfig.unitMoraleChangeValueMax/2, game.resGameConfig.unitMoraleChangeValueMax));
            }
        }
    }
    //陆军对空军反击
    private void armyToAirStrike(ArmyData army, AirData air,boolean ifRecord,boolean ifDrawAir,float damageTime) {
      //  int   damage = (int) (GameUtil.getDamageForArmyToAir(game, army, air) * game.resGameConfig.buildSaveInjuryRatio);
        int   damage = (int) (GameUtil.getDamageForUnit(game, army, air,army.getBuildData(),true,0) * game.resGameConfig.buildSaveInjuryRatio);
       int exp=ComUtil.limitValue(damage*(1+air.getExp())/army.getUnitGroupAvgAttack(0),1,air.getExp());
        army.updKill(exp,false);
        if (air.injured(damage)) {//受伤死亡
            addLegionConfidence(army.getLegionIndex(),1);
            addLegionConfidence(army.getLegionIndex(),-1);
            int kill=air.getExp();
            if(air.ifHaveSkill(39)){
                kill+=air.getAirKills()/2;
                air.drawSkill(39);
            }
            if(air.ifHaveSkill(115)){
                int effect=air.getSkillEffect(115);
                army.randomReduceSkillLv(effect);
                air.drawSkill(115);
            }
            if(air.ifHaveSkill(60)){
                army.setArmyHpNow(army.getArmyHpNow()*(100- air.getSkillEffect(60)));
                air.drawSkill(60);
            }
            army.updKill(kill,true);
            if(army.ifHaveSkill(18)){
                tactic_SpyingMessage(army.getRegionId(),army.getSkillLv(18),army.getLegionIndex(),((army.isPlayer()||air.isPlayer())&&roundState==4));
                air.drawSkill(18);
            }
            air_Death(air);

            if(army.ifHaveSkill(122)){//消灭敌军后可以再次移动
                army.setIfMove(0);
                air.drawSkill(122);
            }
            army.setArmyMoraleChange(ComUtil.getRandom( game.resGameConfig.unitMoraleChangeValueMax/2, game.resGameConfig.unitMoraleChangeValueMax));
        }
        if(ifRecord){
            effectStage.drawUnitHp(army.getHexagonIndex(),-damage,damageTime);
        }
        if(ifDrawAir){
            effectStage.drawEffect(air.getAirId(),air.getRegionId(),army.getHexagonIndex(),1f);
        }

    }


    private int getCanMoveRandomHexagon(int targetRegion) {
        IntArray hs=regionHexagonMap.get(targetRegion);
        for(int i=0;i<hs.size;i++){
            if(ifCanMove(hs.get(i))){
                return hs.get(i);
            }
        }
        return -1;
    }

    //获取一个目标指向  目标区域targetRegion 位置在region的单位
    private ArmyData getRandomArmyDataToRegion(int region,int targetRegion) {
        IntArray hs=regionHexagonMap.get(region);
        for(int i=0;i<hs.size;i++){
            ArmyData a=getArmyDataByHexagon(hs.get(i));
            if(a!=null&&a.getTargetRegion()==targetRegion){
                return a;
            }
        }
        return null;
    }

    //根据游戏得出飞机目标
    public int getTargetArmyHexagonByAir(AirData air,int targetRegion){
        //  tempIntArray2.clear();
        IntArray hexagons=regionHexagonMap.get(targetRegion);
        hexagons.shuffle();
        boolean ifPlayer=air.playerCanCommand();
        //hexagons.insert(0,targetRegion);
        for(int i=0;i<hexagons.size;i++){
            if(ifInRange(air.getRegionId(),hexagons.get(i),air.getMinRange(),air.getMaxRange(),false)&&(ifHaveCanAtkEnemy(air.getLegionIndex(),hexagons.get(i),ifPlayer))){
                /*if(!tempIntArray2.contains(hexagons.get(i))){
                    tempIntArray2.add(hexagons.get(i));
                }*/
                return hexagons.get(i);
            }
           /* if(i>=count){
                return;
            }*/
        }
        return -1;
    }



    public AirData getAirData(int airIndex){
        if(airIDatas.containsKey(airIndex)){
            return airIDatas.get(airIndex);
        }
        return null;
    }
    public NulcleData getNulData(int nulIndex){
        if(nulcleIDatas.containsKey(nulIndex)){
            return nulcleIDatas.get(nulIndex);
        }
        return null;
    }

    //TODO 伤害绘制
    //ifDraw  是否绘制伤害

    private void nul_Bomber(NulcleData nul,int hexagon,boolean ifDraw) {
        checkTask(true,nul.getLegionIndex(),32,1);
        XmlReader.Element nulE=game.gameConfig.getDEF_ARMY().getElementById(nul.getNuclearId());
        //获得伤害
        int maxDamage=game.gameMethod.getUnitDamage(nul.getLegionData(),nul.getBuildData(),nul.getNuclearId(),1);
        int minDamage=game.gameMethod.getUnitDamage(nul.getLegionData(),nul.getBuildData(),nul.getNuclearId(),-1);
        int rangeCount=nulE.getInt("maxAtkrange");

        //TODO 绘制爆炸效果
        if(ifDraw){
            effectStage.effectDAO.darwEffect(ResDefaultConfig.Effect.effect_gas, hexagon, 0, 0, 0, 0f, false);
            getGame().playSound(ResDefaultConfig.Sound.毒气);
        }
        nul_Bomber(nul.getNuclearId(),nul.getLegionIndex(),hexagon,rangeCount,minDamage,maxDamage,ifDraw);
    }

    private void nul_Bomber(ArmyData nul,int hexagon,boolean ifDraw) {
        checkTask(true,nul.getLegionIndex(),32,1);
        XmlReader.Element nulE=game.gameConfig.getDEF_ARMY().getElementById(nul.getUnitArmyId0());
        //获得伤害
        int maxDamage=game.gameMethod.getUnitDamage(nul.getLegionData(),nul.getBuildData(),nul.getUnitArmyId0(),1);
        int minDamage=game.gameMethod.getUnitDamage(nul.getLegionData(),nul.getBuildData(),nul.getUnitArmyId0(),-1);
        int rangeCount=nulE.getInt("maxAtkrange");

        if(ifDraw){
            effectStage.effectDAO.darwEffect(ResDefaultConfig.Effect.effect_gas, hexagon, 0, 0, 0, 0f, false);
            getGame().playSound(ResDefaultConfig.Sound.毒气);
        }
        nul_Bomber(nul.getUnitArmyId0(),nul.getLegionIndex(),hexagon,rangeCount,minDamage,maxDamage,ifDraw);
    }



    private void nul_Bomber(int neclearId,int liN,int hexagon,int rangeCount,int minDamage,int maxDamage,boolean ifDraw){
        int range,grid;int rs;
        int sjDamage=(maxDamage-minDamage)/rangeCount;
        int[] srd = ResDefaultConfig.Map.GRID_RANGE_SORT_ARRAY;

        //动画时间
        float damageTime=0f;
        float addDamageTime=0.3f;

        //核心伤害
        rs=hexagon_NulBomber(neclearId,liN,hexagon,maxDamage,damageTime+addDamageTime);
        //TODO 绘制伤害
        if(ifDraw&&rs>0){
            effectStage.effectDAO.darwEffect(ResDefaultConfig.Effect.effect_gas, hexagon, 0, 0, 0, damageTime, false);
            getGame().playSound(effectStage,ResDefaultConfig.Sound.毒气,damageTime);
            effectStage.drawUnitHp(hexagon,-rs,damageTime);
            damageTime=damageTime+addDamageTime;

        }

        //扩散伤害
        for (int j = 1, jMax = rangeCount; j <= jMax; j++) {
            range = j;
            grid = getIdForDirectRange(hexagon, 1, range);
            for (int i = 0; i <  srd.length; i++) {
                for (int k = 0, kMax = range; k < kMax; k++) {
                    grid = getIdForDirectRange(grid, srd[i], 1);
                    rs=hexagon_NulBomber(neclearId,liN,grid,minDamage+(j-1)*sjDamage,damageTime+addDamageTime);
                    //TODO 绘制伤害
                    if(ifDraw&&rs>0){
                        effectStage.effectDAO.darwEffect(ResDefaultConfig.Effect.effect_gas, hexagon, 0, 0, 0, damageTime, false);
                        getGame().playSound(effectStage,ResDefaultConfig.Sound.毒气,damageTime);
                        effectStage.drawUnitHp(grid,-rs,damageTime);
                        damageTime=damageTime+addDamageTime;
                    }
                }
            }
        }
    }

    //溅射伤害,该伤害不会反击
    public void army_SplashAttack(ArmyData army,int hexagon,int rangeCount,float attackRate,  float splashDamageRate, boolean ifDraw,float damageTime,float addDamageTime){
        int range,grid;int rs;

        int[] srd = ResDefaultConfig.Map.GRID_RANGE_SORT_ARRAY;

        //动画时间
        BuildData areaBuild=getBuildDataByRegion(getRegionId(hexagon));
        //核心伤害
        hexagon_unitBomber(areaBuild,army,hexagon,attackRate,ifDraw,damageTime,addDamageTime);


        if(splashDamageRate<=0){
            splashDamageRate=1f;
        }

        //扩散伤害
        for (int j = 1, jMax = rangeCount; j <= jMax; j++) {
            range = j;
            grid = getIdForDirectRange(hexagon, 1, range);
            for (int i = 0; i <  srd.length; i++) {
                for (int k = 0, kMax = range; k < kMax; k++) {
                    grid = getIdForDirectRange(grid, srd[i], 1);
                    hexagon_unitBomber(areaBuild,army,hexagon,  attackRate* splashDamageRate/j,ifDraw,damageTime,addDamageTime*j);
                }
            }
        }
    }
    private int hexagon_unitBomber(BuildData areaBuild,ArmyData army,int hexagon,float attackRate,boolean ifRecordDamage,float damageTime,float addDamageTime) {
        ArmyData tArmy=getArmyDataByHexagon(hexagon);
        BuildData tBuild=getBuildDataByRegion(hexagon);
        int  damage=0;
        if(tArmy==null&&tBuild==null){
            return damage;
        }
        boolean ifRound=false;

        if(tArmy!=null){
            ifRound=roundState==0||(roundState==4&&(army.isPlayer()||tArmy.isPlayer()));
            int foreignDegree=getForeignDegree(tArmy.getLegionIndex(),army.getLegionIndex());
          //  damage = (int) (GameUtil.getDamageForArmy(game, army, tArmy,areaBuild,damageTime) * game.resGameConfig.buildSaveInjuryRatio*attackRate);
            damage = (int) (GameUtil.getDamageForUnit(game, army, tArmy,areaBuild,true,damageTime) * game.resGameConfig.buildSaveInjuryRatio*attackRate);
            if(masterData.getPlayerMode()!=2&&!tArmy.inMountain()&&army.getArmyHpNow()>tArmy.getArmyHpNow()&&tArmy.getGeneralIndex()==0&&  army.ifHaveFeature(16)&&army.triggerFeature(16)&&hexagonCanDash(army.getHexagonIndex(),hexagon,5002)&&ComUtil.ifGet(army.getArmyRank()* game.resGameConfig.unityFeatureChanceForLv)){
                damage=99999;;
                army.drawFeature(16);
            }
            boolean ifRCC=false;
            if (ifRecordDamage) {
                effectStage.drawUnitHp( tArmy.getHexagonIndex(),-damage,damageTime);
                damageTime=damageTime+addDamageTime;
                ifRCC=true;
            }
            setDirect(tArmy, army.getHexagonIndex());
            if (tArmy.injured(damage,army.getHexagonIndex())) {//受伤死亡
                checkTask(army.getGeneralIndex()>0,army.getLegionIndex(),3,1);
                checkTask(foreignDegree==-1,army.getLegionIndex(),6,1);
                checkTask(army.getHpRateF()<0.3f&&foreignDegree==-1,army.getLegionIndex(),10,1);
                checkTask(tArmy.getArmyMorale()<20&&foreignDegree==-1,army.getLegionIndex(),17,1);
                checkTask(army.ifHaveFeature(5),army.getLegionIndex(),22,1);
                checkTask(army.getUnitWealv0Value()>=tArmy.getUnitWealv0Value()&&foreignDegree==-1,army.getLegionIndex(),23,1);

                if(tArmy.ifHaveSkill(115)){
                    int effect=tArmy.getSkillEffect(115);
                    army.randomReduceSkillLv(effect);
                    tArmy.drawSkill(115);
                }
                if(tArmy.ifHaveSkill(60)){
                    army.setArmyHpNow(army.getArmyHpNow()*(100- tArmy.getSkillEffect(60)));
                    tArmy.drawSkill(60);
                }
                if(tArmy.ifHaveSkill(99)){
                    army.setArmyMorale(army.getArmyMorale()/2);
                    tArmy.drawSkill(99);
                }
                if(tArmy.triggerSkill(68)&&army.getGeneralIndex()==0&&army.getHexagonIndex()!=army.getRegionId()){
                    army.setLegionIndex(tArmy.getLegionIndex());
                    tArmy.drawSkill(68);
                }
                addLegionConfidence(tArmy.getLegionIndex(),-1);
                addLegionConfidence(army.getLegionIndex(),1);
                int kill=tArmy.getExp();
                if(tArmy.ifHaveSkill(39)){
                    kill+=tArmy.getArmyKills()/2;
                    tArmy.drawSkill(39);
                }
                army.updKill(kill,true);
                if((army.getGeneralIndex()!=0||tArmy.getGeneralIndex()!=0)&& ifSystemEffective(21)){
                    if(army.getArmyType()==3||army.getArmyType()==8||army.getArmyType()==6){ // 1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇
                        tactic_FearAround(army);
                    }else{
                        tactic_IncentiveAround(army);
                    }
                }
                if(tArmy.triggerSkill(93)&&tArmy.getUnitArmyId0()!=1101){//被摧毁后一定{1}%率逃出一个步兵,并继承大部分能力
                    tArmy.setUnitArmyId0(1101);
                    if(tArmy.armyActor!=null){
                        tArmy.armyActor.update();
                    }
                    tArmy.drawSkill(93);
                }else {
                    army_Death(tArmy.getHexagonIndex(),ifRound);
                }
                if(army.ifHaveSkill(18)){
                    tactic_SpyingMessage(army.getRegionId(),army.getSkillLv(18),army.getLegionIndex(),ifRound);
                    army.drawSkill(18);
                }
                if(army.ifHaveSkill(122)){//消灭敌军后可以再次移动
                    army.setIfMove(0);
                    army.drawSkill(122);
                }
                army.setArmyMoraleChange(tArmy.getUnitWealv0Value()*ComUtil.getRandom( game.resGameConfig.unitMoraleChangeValueMax/2, game.resGameConfig.unitMoraleChangeValueMax));

                addDialogueData(army, 2, "");
                //进攻消灭对方,如果对方的地块类型与我方一样且不是建筑且没有战壕且符合armyType则移动到目标地点
                if(masterData.getPlayerMode()!=2&&!isMountain(hexagon)&&army.canMove(hexagon)&& (ifRCC||army.triggerSkill(12)||army.triggerSkill(123)||( army.ifHaveFeature(7)&&(ComUtil.ifGet(army.getArmyRank()* game.resGameConfig.unityFeatureChanceForLv)||army.triggerFeature(7))))&&hexagonCanDash(army.getHexagonIndex(),hexagon,5001)){
                    army_Move(army,hexagon);
                    tactic_FearAround(army);
                    if(army.ifHaveSkill(12)){
                        army.drawSkill(12);
                    }else if(army.ifHaveSkill(123)){
                        army.drawSkill(123);
                    }else if(army.ifHaveFeature(7)){
                        army.drawFeature(7);
                    }
                }
                if(army.ifHaveFeature(13)&&army.triggerFeature(13)){
                    army.setIfAttack(0);
                    army.drawFeature(13);
                }
                if(army.ifHaveFeature(14)&&army.triggerFeature(14)){
                    army.setIfMove(0);
                    army.drawFeature(14);
                }
            }
        }


        if(tBuild!=null){

            ifRound=roundState==0||(roundState==4&&(army.isPlayer()||tBuild.isPlayer()));
            //伤害建筑
           // damage = (int) (GameUtil.getDamageForBuild(game, army, tBuild) * game.resGameConfig.buildSaveInjuryRatio*attackRate);
            damage = (int) (GameUtil.getDamageForUnit(game, army, tBuild,tBuild,true,0) * game.resGameConfig.buildSaveInjuryRatio*attackRate);
            if (ifRecordDamage) {
                effectStage.drawUnitHp( tBuild.getRegionId(),-damage,damageTime);
                damageTime=damageTime+addDamageTime;
            }
            tBuild.beAttack(army,damage,damageTime);

            if(ifSystemEffective(12)){
                if(tBuild.getLegionIndex()==masterData.playerLegionIndex){
                    GeneralData  g=tBuild.getGeneralData();
                    if(g!=null){
                        if(tBuild.isCapital()&&tBuild.getBuildName()!=0){
                            addDialogueData(tBuild.getCountryId(),g,11,tBuild.areaName,true);
                        }else if(army.getLegionData().getInternIndex()!=0){
                            addDialogueData(tBuild.getCountryId(),g,9,army.getLegionData().legionName,true);
                        }
                    }
                }else if(army.canCreateRDialogue()&&tBuild.getBuildName()!=0){
                    GeneralData   g=army.getGeneralData();
                    addDialogueData(army.getCountryId(),g,10,tBuild.areaName,true);
                }
            }
        }



        return damage;
    }

    private boolean isMountain(int hexagon) {
        Fb2Map.MapHexagon h=getHexagonData(hexagon);
        if(h!=null&&h.getBackTile()==5){
            return true;
        }
        return false;
    }


    //核武器伤害无视普通单位防御,只有建筑和建筑上的单位可以受到减免
    //nulclearId 判断是不是为1701(催泪弹不对建筑造成伤害)
    private int hexagon_NulBomber(int nulclearId,int li,int hexagon, int damage,float damageTime) {
        ArmyData a=getArmyDataByHexagon(hexagon);
        BuildData b=getBuildDataByRegion(hexagon);
        if(a==null&&b==null){
            return 0;
        }
        boolean ifC=ifAllyPlayerByLi(li);

        //对建筑造成伤害
        if(b!=null){
            damage=(100-(b.getNuclearLvNow()* game.resGameConfig.reduceNulDamageByNulLvRate))*damage/100;
        }
        if(a!=null){
            if(a.injured(damage,a.getHexagonIndex())){
                army_Death(a.getHexagonIndex(),roundState==0||(roundState==4&&(a.isPlayer()||ifC)));
            }else {
                if(ifC&&a.armyActor==null){
                    a.createActor();
                }
                a.setArmyMorale(a.getArmyMorale()/2);
            }
            /*if(a.armyActor!=null){
                effectStage.drawUnitHp(a.getHexagonIndex(),damage,damageTime);
                a.armyActor.update();
            }*/
        }
        if(b!=null){
            b.beNulclearAttack(nulclearId,li,damage, damageTime);
        }
        return damage;
    }

    //设置开场动画
    public IntArray setRoundBegionArrowAnimation(SMapGameStage stage,IntArray rs){
        //region集合  tempIntArray1
        if(rs==null){
            rs=new IntArray();
        }else{
            rs.clear();
        }

        Iterator<IntMap.Entry<ArmyData>> it = armyHDatas.iterator();
        while (it.hasNext()) {
            ArmyData a= it.next().value;
            if(a.armyActor!=null&&a.getTargetRegion()!=-1){
                if(ifAllyPlayerByRegion(a.getTargetRegion())&&!rs.contains(a.getTargetRegion())){
                    rs.add(a.getTargetRegion());
                }
                stage.showTempArrow(a.getHexagonIndex(),a.getTargetRegion());
            }
        }
        return rs;
    }




    //城市执行方针
    //返回结果  true,资源足够,继续执行,false 资源不够,不再执行
    private boolean build_ExcutePolicy(StringBuilder build,LegionData l, BuildData b) {
        int cardId;
        boolean ifRecord=build!=null;


        if(b.ifHunger()&&legion_UpdTech(l, b, 2005)){
            if(ifRecord){ build.appendLine(game.gameMethod.getStrValueT("prompt_execute_2",b.getRegionAreaStr(),game.gameMethod.getCardName(l,b,2005,0)));};
            return payCardPrice(l, b, 2005,true);
        }else  if(b.ifEnergyOverload()&&legion_UpdTech(l, b, 2006)){
            if(ifRecord){ build.appendLine(game.gameMethod.getStrValueT("prompt_execute_2",b.getRegionAreaStr(),game.gameMethod.getCardName(l,b,2006,0)));};
            return payCardPrice(l, b, 2006,true);
        }else  if(b.getCityLvNow()==0&&legion_UpdTech(l, b, 2007)){
            if(ifRecord){ build.appendLine(game.gameMethod.getStrValueT("prompt_execute_2",b.getRegionAreaStr(),game.gameMethod.getCardName(l,b,2007,0)));};
            return  payCardPrice(l, b, 2007,true);
        }
        //hexagons.insert(0,targetRegion);

        //是否自动招募军队
        if(b.getBuildPolicy()==3){
            if(b.getBuildStatus()!=0&&b.ifBorderRegionWar()){
                cardId = getBuildCardIdTIA1(l, b, false, -3,true);
                if (ai_RecruitUnit(l, b, cardId,-1)) {
                    // if(ifLog)   Gdx.app.log("AutoRecruitArmy",b.getRegionId()+":"+cardId);
                    if(ifRecord){
                        build.appendLine(game.gameMethod.getStrValueT("prompt_execute_1",b.getRegionAreaStr(),"card_name_"+cardId));
                    }
                    return  (payCardPrice(l, b, cardId,true));
                }
            }
            if(masterData.getPlayerMode()<2){
                IntArray hexagons=regionHexagonMap.get(b.getRegionId());
                hexagons.shuffle(); ArmyData a;
                for(int i=0;i<hexagons.size;i++){
                    a=getArmyDataByHexagon(hexagons.get(i));
                    if(a!=null&&a.getLegionIndex()==b.getLegionIndex()&&a.isElite(game.resGameConfig.playerBuildAutoUpdUnitLvLimit)&&a.legionCanUpdLv()){
                        int potion= a.randomUpdUnitGroupLv(1);
                        if(potion>=0){
                            if(ifRecord){
                                if(a.isUnitGroup()){
                                    build.appendLine(game.gameMethod.getStrValueT("prompt_execute_5",b.getRegionAreaStr(),"card_name_"+a.getUnitGroupArmyId(potion)));
                                }else{
                                    build.appendLine(game.gameMethod.getStrValueT("prompt_execute_5",b.getRegionAreaStr(),"card_name_"+a.getUnitArmyId0()));
                                }
                            }
                            return  (payCardPrice(l, b, a.getUnitArmyId0(),true));
                        }
                        potion= a.randomUpdArmyWealv(1);
                        if(potion>=0){
                            if(ifRecord){
                                build.appendLine(game.gameMethod.getStrValueT("prompt_execute_5",b.getRegionAreaStr(),"card_name_"+a.getUnitGroupArmyId(potion)));
                                if(a.isUnitGroup()){
                                    build.appendLine(game.gameMethod.getStrValueT("prompt_execute_5",b.getRegionAreaStr(),"card_name_"+a.getUnitGroupArmyId(potion)));
                                }else{
                                    build.appendLine(game.gameMethod.getStrValueT("prompt_execute_5",b.getRegionAreaStr(),"card_name_"+a.getUnitArmyId0()));
                                }
                            }
                            return  (payCardPrice(l, b, a.getUnitArmyId0(),true));
                        }
                    }
                }
            }

        }
        //确定建造顺序

        //自动建造交通要道
        if(b.getBuildPolicy()==1){
            cardId=b.getBuildCardIdForTactical();
            if(cardId!=-1&&!GameMethod.cardIfMax(game,l,b,cardId)&&!GameMethod.buildCardIfLock(game,l,b,cardId)){
                if(legion_UpdTech(l,b,cardId)){
                    if(ifRecord){
                        build.appendLine(game.gameMethod.getStrValueT("prompt_execute_2",b.getRegionAreaStr(),game.gameMethod.getCardName(l,b,cardId,0)));
                    }
                    return  (payCardPrice(l, b, cardId,true));
                }else {
                    return false;
                }
            }

        }



        int[] buildIds=DefDAO.getBuildIdsForBuildPolicy(game,b.getBuildPolicy(),b.getBuildPolicy());
        if(buildIds!=null){
            ComUtil.shuffle(buildIds);
            for(int i=0;i<buildIds.length;i++){
                cardId=buildIds[i];
                if(!GameMethod.cardIfMax(game,l,b,cardId)&&!GameMethod.buildCardIfLock(game,l,b,cardId)){
                    if(legion_UpdTech(l,b,cardId)){
                        if(ifRecord){
                            build.appendLine(game.gameMethod.getStrValueT("prompt_execute_2",b.getRegionAreaStr(),game.gameMethod.getCardName(l,b,cardId,0)));
                        }
                        return  (payCardPrice(l, b, cardId,true));
                    }else {
                        return false;
                    }
                }else if(ifSystemEffective(22)&& payCardPrice(l,b,2015,false)){
                    if(b.getTransportLvNow()==0){
                        if(!GameMethod.buildCardIfLock(game,b.getLegionData(),b,2003)){
                            legion_UpdTech(b.getLegionData(),b,2003);
                        }
                    }else if(ai_buildRailway(b)){
                        b.addBuildRound(1);
                    }else if(b.getCityLvNow()>b.getTransportLvNow() &&!GameMethod.buildCardIfLock(game,b.getLegionData(),b,2003)){
                        legion_UpdTech(b.getLegionData(),b,2003);
                    }
                }
            }

            //是否自动招募超武
            if(b.ifAutoRecruitNuclear()){
                cardId = getBuildCardIdTIA1(l, b, false, 7,true);
                if (ai_RecruitUnit(l, b, cardId,-1)) {
                    if(ifRecord){
                        build.appendLine(game.gameMethod.getStrValueT("prompt_execute_3",b.getRegionAreaStr(),"card_name_"+cardId));
                    }
                    return  (payCardPrice(l, b, cardId,true));
                }
            }

            //是否自动建造飞弹
            //boolean ifAutoRecruitMissile=b.ifAutoRecruitMissile();
            if(b.ifAutoRecruitMissile()){
                int hexagon=getCanUpdMissileHexagon(b.getRegionId(),b.getLegionIndex());
                if(hexagon==-1){
                    if (ai_RecruitUnit(l, b, 1606,-1)) {
                        if(ifRecord){
                            build.appendLine(game.gameMethod.getStrValueT("prompt_execute_4",b.getRegionAreaStr(),"card_name_1606"));
                        }
                        return  (payCardPrice(l, b, 1606,true));
                    }
                }else {//升级此单位
                    ArmyData army=getArmyDataByHexagon(hexagon);
                    if(army.updWeaLv()){
                        b.addBuildRound(1);
                        if(ifRecord){
                            build.appendLine(game.gameMethod.getStrValueT("prompt_execute_5",b.getRegionAreaStr(),"card_name_"+army.getUnitArmyId0()));
                        }
                    }
                    return true;
                }
            }
        }
        return true;
    }


    private boolean build_ExcuteChiefBuildPolicy(StringBuilder build,LegionData l, BuildData b) {
        int cardId;
        boolean ifRecord=build!=null;
        //确定建造顺序
        if(b.getBuildPolicy()==0&&chiefData!=null){
            //LegionData l, BuildData b, Boolean ifMaxLv, int cardType,boolean limitArmyCardBuy
            cardId=getBuildCardIdTIA1(l,b,false, chiefData.getBuildTypeByBuildLaw() ,false);//
            if(cardId!=-1&&!GameMethod.cardIfMax(game,l,b,cardId)&&!GameMethod.buildCardIfLock(game,l,b,cardId)){
                if(legion_UpdTech(l,b,cardId)){
                    if(ifRecord){
                        build.appendLine(game.gameMethod.getStrValueT("prompt_execute_2",b.getRegionAreaStr(),game.gameMethod.getCardName(l,b,cardId,0)));
                    }
                    return  (payCardPrice(l, b, cardId,true));
                }else {
                    return false;
                }
            }
        }else {
            if(b.getBuildPolicy()==1){
                cardId=b.getBuildCardIdForTactical();
                if(cardId!=-1&&!GameMethod.cardIfMax(game,l,b,cardId)&&!GameMethod.buildCardIfLock(game,l,b,cardId)){
                    if(legion_UpdTech(l,b,cardId)){
                        if(ifRecord){
                            build.appendLine(game.gameMethod.getStrValueT("prompt_execute_2",b.getRegionAreaStr(),game.gameMethod.getCardName(l,b,cardId,0)));
                        }
                        return  (payCardPrice(l, b, cardId,true));
                    }else {
                        return false;
                    }
                }
            }
            int[] buildIds=DefDAO.getBuildIdsForBuildPolicy(game,b.getBuildPolicy(),b.getBuildPolicy());
            if(buildIds!=null){
                ComUtil.shuffle(buildIds);
                 for(int i=0;i<buildIds.length;i++){
                    cardId=buildIds[i];
                    if(!GameMethod.cardIfMax(game,l,b,cardId)&&!GameMethod.buildCardIfLock(game,l,b,cardId)){
                        if(legion_UpdTech(l,b,cardId)){
                            if(ifRecord){
                                build.appendLine(game.gameMethod.getStrValueT("prompt_execute_2",b.getRegionAreaStr(),game.gameMethod.getCardName(l,b,cardId,0)));
                            }
                            return  (payCardPrice(l, b, cardId,true));
                        }else {
                            return false;
                        }
                    }
                }

                //是否自动招募超武
                if(b.ifAutoRecruitNuclear()){
                    cardId = getBuildCardIdTIA1(l, b, false, 7,true);
                    if (ai_RecruitUnit(l, b, cardId,-1)) {
                        if(ifRecord){
                            build.appendLine(game.gameMethod.getStrValueT("prompt_execute_3",b.getRegionAreaStr(),"card_name_"+cardId));
                        }
                        return  (payCardPrice(l, b, cardId,true));
                    }
                }

                //是否自动建造飞弹
                //boolean ifAutoRecruitMissile=b.ifAutoRecruitMissile();
                if(b.ifAutoRecruitMissile()){
                    int hexagon=getCanUpdMissileHexagon(b.getRegionId(),b.getLegionIndex());
                    if(hexagon==-1){
                        if (ai_RecruitUnit(l, b, 1606,-1)) {
                            if(ifRecord){
                                build.appendLine(game.gameMethod.getStrValueT("prompt_execute_4",b.getRegionAreaStr(),"card_name_1606"));
                            }
                            return  (payCardPrice(l, b, 1606,true));
                        }
                    }else {//升级此单位
                        ArmyData army=getArmyDataByHexagon(hexagon);
                        if(army.updWeaLv()){
                            b.addBuildRound(1);
                            if(ifRecord){
                                build.appendLine(game.gameMethod.getStrValueT("prompt_execute_5",b.getRegionAreaStr(),"card_name_"+army.getUnitArmyId0()));
                            }
                        }


                        return true;
                    }
                }
            }

        }






        return true;
    }



    private int getCanUpdMissileHexagon(int regionId,int li) {
        IntArray hexagons=regionHexagonMap.get(regionId);
        hexagons.shuffle(); ArmyData a;
        //hexagons.insert(0,targetRegion);
        for(int i=0;i<hexagons.size;i++){
            a=getArmyDataByHexagon(hexagons.get(i));
            if(a!=null&&a.getLegionIndex()==li&&a.ifHaveFeature(5)&&a.getArmyRound()==0&&a.unitGroup6Lv < game.resGameConfig.unitAbilityLvMax){
                return hexagons.get(i);
            }
        }
        return -1;
    }

    public void fort_build(int fortId,int hexagon,int li,int buildLv){
        //不能在核心建造工事
        if(buildRDatas.containsKey(hexagon)){
            int s=0;
            return;
        }
        Fb2Map.MapHexagon mapHexagon=getHexagonData(hexagon);
        LegionData l=getLegionDataByLi(li);
        if(l!=null){
            if(fortId==5005){
                if(buildLv<l.getFortLvMax()){
                    buildLv=l.getFortLvMax();
                }
            }else if(buildLv<l.getFortLvMax()/2){
                buildLv=l.getFortLvMax()/2;
            }
        }
        if(fortHDatas.containsKey(hexagon)){
            FortData f=fortHDatas.get(hexagon);
            f.init(fortId,hexagon,li,buildLv);//
            mapHexagon.fortData=f;
            if(mapHexagon.getIfFog()==1&&f.fortActor==null&&game.sMapScreen!=null){
                game.sMapScreen.smapGameStage.createFortActor(f);
                game.sMapScreen.hidUnitBackButton();
            }
        }else {
            FortData f=new FortData( fortId,hexagon,li,buildLv);
            fortHDatas.put(hexagon,f);
            mapHexagon.fortData=f;
            if(mapHexagon.getIfFog()==1&&f.fortActor==null&&game.sMapScreen!=null){
                game.sMapScreen.smapGameStage.createFortActor(f);
                game.sMapScreen.hidUnitBackButton();
            }
        }

        //army.addArmyRound(1);
        ArmyData a=getArmyDataByHexagon(hexagon);
        if(a==null){
            a=getArmyDataByHexagon(getRegionId(hexagon));
        }
        if(a!=null&&a.getLegionIndex()==li){
            a.addArmyRound(1);
        }else{
            BuildData b=getBuildDataByRegion(getRegionId(hexagon));
            if(b!=null&&b.getLegionIndex()==li){
                b.addBuildRound(1);
            }
        }
    }




    public void refreshTask(int refreshPotion){
        getPlayerLegionData().reduceTradeCount();
        updRTask(taskDatas.get(refreshPotion));
        //taskDatas.set(refreshPotion,updRTask(taskDatas.get(refreshPotion)) );
    }

    //任务最多只有五个.
    public TaskData updRTask(  TaskData t){

        Array<XmlReader.Element>  rtaskEs=game.gameConfig.getDEF_RTASK().e.getChildrenByName("rtask");
        XmlReader.Element task=null;
        int age=getAge();
        do{
            task=rtaskEs.random();
            if(getRoundProgress()>=task.getInt("starProgress") &&age>=task.getInt("age") ){
                int taskType=task.getInt("type");//0全部 1王者 2霸者
                if(getPlayerLegionData()==null||getPlayerAmbition()==100&&taskType!=0){
                    break;
                }else if(getPlayerAmbition()<100&&(taskType==0||taskType==1)){
                    break;
                }else if(getPlayerAmbition()>100&&(taskType==0||taskType==2)){
                    break;
                }
            }
        }while(true);
        if(t==null){
            t=new TaskData();
        }
        t.setTaskIndex(task.getInt("id"));
        int baseLv=task.getInt("baseLv");
        int maxLv=task.getInt("maxLv");
        int lv=ComUtil.getRandom(baseLv,maxLv)-baseLv+1;
        if(getPlayerLegionData()!=null&&getPlayerAmbition()==100){
            lv=1;
        }
        t.setTaskLv(lv);
        t.setCountNow(0);
        t.setCountMax(task.getInt("lvValue")*(t.getTaskLv()-1)+baseLv);
        t.setStar(task.getInt("star"));
        t.setTaskType(0);
        t.setBontyType(ComUtil.getRandom(0,3));//0 金钱 1工业 2技术 3原料
        t.setBontyValue( getTaskBonty(t.getBontyType(), task.getInt("bountyRate")+task.getInt("addBountyRateForLv")*(t.getTaskLv()-1)   ) );
        t.setTaskRound(task.getInt("round")+t.getTaskLv());
        if(getPlayerLegionData()!=null&&lv==1&&getPlayerAmbition()==100){
            t.setTaskRound(999);
        }
        t.initVirAttribute();
        return t;
    }






    //
    private int getTaskBonty(int bontyType, int rate) {
        int v=0;
        switch (bontyType){
            case 0:v= worldData.getWorldMoney()*rate/100;break;
            case 1:v= worldData.getWorldIndustry()*rate/100;break;
            case 2:v= worldData.getWorldTech()*rate/100;break;
            case 3:v= worldData.getWorldFood()*rate/100;break;
        }
        if(v<=0){
            v=1;
        }
        return v;
    }

    //获得游戏进度 值为 0-100  代表回合
    public int getRoundProgress() {
        return (masterData.getRoundNow()+1)*100/(masterData.getRoundMax()+1);
    }

    public int getConquestQuickResult(){
        int rs=0;
        if(masterData.getBtlType()==0){
            for(int i=0;i<5;i++){
                if(checkConquestTask(i+1)){//全部领土掌握且控制不少于15快区域
                    rs++;
                }
            }
            if(rs>0&& getRoundProgress()>10){
                rs=Math.min(rs,masterData.getGameDifficulty()+2);
            }
        }
        return rs;
    }

    //检查是否有符合的任务,有则返回,否则为null
    private TaskData getTask(int taskId){
        for(int i=0;i<taskDatas.size;i++){
            TaskData t=taskDatas.get(i);
            if(t.getTaskIndex()==taskId){
                return t;
            }
        }
        return null;
    }

    //其他一些外部条件需要在外部检测  li检测军团id, recordCount  每次记录的次数
    public void checkTask(boolean ifok,int li,int taskId,int recordCount){
        if(!ifok){
            return;
        }
        if(masterData.getPlayerMode()==0&&li==masterData.getPlayerLegionIndex()){
            TaskData t=getTask(taskId);
            if(t!=null&&t.getTaskRound()>0&&t.getTaskType()!=2){
                t.addTaskCount(recordCount);
            }
        }
    }

    //检查玩家资源是否满足  资源类任务prompt条件
    public void checkPlayerResource() {

        //任务14  检查资源的n项是否清0
        LegionData l=getPlayerLegionData();
        TaskData t= getTask(14);
        int i=0;
        if(t!=null){
            if(l.getMoney()<l.incomeMoney*0.1f){i++;}
            if(l.getIndustry()==l.incomeIndustry*0.1f){i++;}
            if(l.getTech()==l.incomeTech*0.1f){i++;}
            if(l.getFood()==l.incomeFood*0.1f){i++;}
            t.setCountNow(i);
        }

        //检查万邦来朝条件
        t= getTask(28);
        if(t!=null){
            int v=0;
            for( i=0;i<legionDatas.size;i++){
                if(ifAllyPlayerByLi(i)){
                    v++;
                }
            }
            t.setCountNow(v);
        }
    }



    //设置所有单位的主要属性变成value
    public void updUnitLv(int li, int value) {
        Iterator<IntMap.Entry<ArmyData>> it = armyHDatas.iterator();
        while (it.hasNext()) {
            ArmyData army= it.next().value;
            if(army!=null&&army.getLegionIndex()==li){
                army.setUnitGroup1Lv(value);
                army.setUnitGroup2Lv(value);
                army.setUnitGroup3Lv(value);
                army.setUnitGroup4Lv(value);
                army.setUnitGroup5Lv(value);
                army.setUnitGroup6Lv(value);
            }
        }
    }



    //设置所有空军的主要属性变为value
    public void updAirLv(int li, int value) {
        Iterator<IntMap.Entry<AirData>> it = airIDatas.iterator();
        while (it.hasNext()) {
            AirData a= it.next().value;
            if(a.getLegionIndex()==li){
                a.setAckLv(value);
                a.setDefLv(value);
                a.setSpyLv(value);
                a.setSupLv(value);
                a.setActLv(value);
                a.setWeaLv(value);
            }
        }
    }

    //设置所有建筑的主要属性变为value
    public void updBuildLv(int li, int value) {
      /*  Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
        while (it.hasNext()) {
            BuildData b= it.next().value;*/
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if(b.getLegionIndex()==li){
                b.setCityLvNow(value);
                b.setIndustryLvNow(value);
                b.setFoodLvNow(value);
                b.setTechLvNow(value);
                b.setEnergyLvNow(value);
                b.setTransportLvNow(value);
                b.setArmyLvNow(value);
                b.setAirLvNow(value);
                b.setSupplyLvNow(value);
                b.setDefenceLvNow(value);
                b.setMissileLvNow(value);
                b.setNuclearLvNow(value);
                b.setCultureLvNow(value);
                b.setTradeLvNow(value);
            }
        }
    }

    //设置所有军团的主要属性变为value
    public void updLegionLv(LegionData l, int value) {
        l.setCityLvMax(value);
        l.setIndustLvMax(value);
        l.setTechLvMax(value);
        l.setEnergyLvMax(value);
        l.setTransportLvMax(value);
        l.setInfantryLvMax(value);
        l.setCannonLvMax(value);
        l.setTankLvMax(value);
        l.setFortLvMax(value);
        l.setNavyLvMax(value);
        l.setAirLvMax(value);
        l.setSupplyLvMax(value);
        l.setDefenceLvMax(value);
        l.setMissileLvMax(value);
        l.setNuclearLvMax(value);
        l.setFinancialLvMax(value);
        l.setTradeLvMax(value);
        l.setCultureLvMax(value);
        l.setMiracleNow(value);
        l.setMilitaryAcademyLv(value);
        l.setInfantryCardMax(value);
        l.setArmorCardMax(value);
        l.setArtilleryCardMax(value);
        l.setNavyCardMax(value);
        l.setAirCardMax(value);
        l.setNuclearCardMax(value);
        l.setMissileCardMax(value);
        l.setSubmarineCardMax(value);
        l.setDefenceCardMax(value);
        l.setGeneralCardMax(value);
    }



    //重置所有状态
    public void resetAllState(LegionData l) {
        Iterator<IntMap.Entry<ArmyData>> it = armyHDatas.iterator();
        while (it.hasNext()) {
            ArmyData a= it.next().value;
            if(a.getLegionIndex()==l.getLegionIndex()){
                a.setArmyRound(0);
                a.setIfMove(0);
                a.setIfAttack(0);
                a.setArmyHpNowFull();
                //  a.setAirGoodsNow(a.getAirGoodsMax());
                if(a.getArmyMorale()<game.resGameConfig.resetUnitMoraleMax){
                    a.setArmyMorale(game.resGameConfig.resetUnitMoraleMax);
                }

            }
        }
        Iterator<IntMap.Entry<AirData>> itAir = airIDatas.iterator();
        while (itAir.hasNext()) {
            AirData air= itAir.next().value;
            if(air.getLegionIndex()==l.getLegionIndex()){
                air.setAirRound(0);
                air.setAirHpNow(air.getAirHpMax());
                air.setIfAttack(0);
                air.setIfMove(0);
                air.setAirGoodsNow(air.getAirGoodsMax());
                //   air.setAirGoodsNow(air.getAirGoodsMax());
                if(air.getAirMorale()<game.resGameConfig.resetUnitMoraleMax){
                    air.setAirMorale(game.resGameConfig.resetUnitMoraleMax);
                }
            }
        }
      /*  Iterator<IntMap.Entry<BuildData>> itB = buildRDatas.iterator();
        while (itB.hasNext()) {
            BuildData b= itB.next().value;*/
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if(b.getLegionIndex()==l.getLegionIndex()){
                b.setBuildRound(0);
                b.setCityHpNow(b.getCityHpMax());
                b.setEnergyLvToAfford();
            }
        }
    }

    //友军和附属超级友好
    public void setSuperFirendly(int li,int value) {
        for (int i=0;i<legionDatas.size;i++) {
            ForeignData f=getForeignData(li,i);
            if(f.getFavorValue()>50||ifAllyByLi(li,i)){
                f.addFavor(50);
            }
        }
    }

    //设置全部
    public void whosYourDaddy(LegionData l,int value) {
        updLegionLv(l,value);
        resetAllState(l);
        updUnitLv(l.getLegionIndex(),value);
        updAirLv(l.getLegionIndex(),value);
        updBuildLv(l.getLegionIndex(),value);
        setSuperFirendly(l.getLegionIndex(),value);
    }

    // 强征 通过降低稳定度,来提高本回合该城市的产出
    public void tactic_ImposeTax(int region,int lv,boolean ifDraw){
        BuildData b=getBuildDataByRegion(region);
        if(lv>10){lv=10;}
        int v=ComUtil.getRandom(3,lv);

        if(b.isWar()){
            b.addCityStability(-v* game.resGameConfig.tactic_ImposeTax_cityStability*2);
            b.setCityTax(b.getCityTax()+v* game.resGameConfig.tactic_ImposeTax_cityTax);
        }else{
            b.addCityStability(-v* game.resGameConfig.tactic_ImposeTax_cityStability);
            b.setCityTax(b.getCityTax()+v* game.resGameConfig.tactic_ImposeTax_cityTax*2);
        }
        if(ifDraw&&(roundState==0||(roundState==4&&b.isPlayer()))){
            effectStage.drawFace(region,3);
        }
    }
    // 鼓舞 提升本区域中所有部队的士气
    public void tactic_Inspiring(int region,int lv,boolean ifDraw){
        BuildData b=getBuildDataByRegion(region);
        if(lv>10){lv=10;}
        int v=ComUtil.getRandom(3,lv)* game.resGameConfig.tactic_Inspiring_unityMorale;
        boolean isWar=b.isWar();
        if(isWar){
            v=v*2;
        }
        IntArray hs= regionHexagonMap.get(region);
        ArmyData a;
        for(int i=0;i<hs.size;i++){
            a=getArmyDataByHexagon(hs.get(i));
            if(a!=null&&a.getLegionIndex()==b.getLegionIndex()){
                if(isWar){
                    a.setArmyMoraleChange(v);
                }else{
                    a.setArmyMoraleChange(v, game.resGameConfig.resetUnitMoraleMax);
                }
            }
        }
        b.updAllAirMorale(v);
        b.changeCityStability(ComUtil.getRandom(1,lv)* game.resGameConfig.cityStabilityChangeRate);

        if(ifDraw&&roundState==0){
            effectStage.drawEffect(2,region,-1,0.5f);
        }
    }

    //急行 增加一个单位移动到另一个区域的距离
    public void tactic_QuickTravel(int hexagon ,int targetRegion,int lv,boolean ifDraw){
        ArmyData a=getArmyDataByHexagon(hexagon);
        BuildData b=a.getBuildData();
        if(a!=null&&b!=null){
            IntIntMap tempIntIntMap2=game.tempUtil.getTempIntIntMap();
            if(b.isWar()){
                getPotionForArmyCanActTIIM1(a, a.getHexagonIndex(),lv/2,false,false, tempIntIntMap2,true);
            }else{
                getPotionForArmyCanActTIIM1(a, a.getHexagonIndex(),lv,false,false, tempIntIntMap2,true);
            }
            int h = getRecentHexagon(-1,hexagon,targetRegion, tempIntIntMap2, a.getIfSeaForMove());
            game.tempUtil.disposeTempIntIntMap(tempIntIntMap2);
            if (h >= 0 && h < hexagonDatas.size&&a.canMove(h)) {
                army_Move(a, h);
            }
        }
        army_Standby(a);
        //a.addArmyRound(1);
        if(b.isWar()){
            int oldHp=a.getArmyHpNow();
            a.resetState();
            a.setArmyHpNow(oldHp);
        }else{
            a.resetState();
        }

    }

    //将该区域所有可行动单位移动到邻近区域,不消耗单位的行动状态
    public void tactic_QuickLegionTravel(int sRegion, int tRegion, int lv, boolean ifDraw) {
        BuildData sbuild=getBuildDataByRegion(sRegion);
        BuildData tBuild=getBuildDataByRegion(tRegion);
        Array<ArmyData> armys=sbuild.getCanActLegionUnitTAA(0);
        if(armys.size>0){
            legionUnit_Act(sbuild,tBuild,armys,false);
        }
    }

    //空运
    public void tactic_AirFreightForLegionUnit(int sRegion,int tRegion,int lv,boolean ifDraw) {
        BuildData sbuild = getBuildDataByRegion(sRegion);
        BuildData tBuild = getBuildDataByRegion(tRegion);
        if (sbuild != null && tBuild != null) {
            Array<ArmyData> armys = sbuild.getCanActLegionUnitTAA(0);
            if (armys.size > 0) {
                legionUnit_Act(sbuild, tBuild, armys, true);
                if (ifDraw && roundState == 0) {
                    effectStage.drawEffect(1505, sRegion, tRegion, 1f);
                }
            }
        }
    }


    // 散谣 一定几率使敌对目标区域内的部队行动回合+1
    public void tactic_SpreadRumors(int region,int lv,boolean ifDraw){
        BuildData b=getBuildDataByRegion(region);
        if(lv>10){lv=10;}
        int c=0;
        if(b.isWar()){
            c=ComUtil.getRandom(1,lv* game.resGameConfig.tactic_SpreadRumors_chance*2);
        }else{
            c=ComUtil.getRandom(1,lv* game.resGameConfig.tactic_SpreadRumors_chance);
        }
        IntArray hs= regionHexagonMap.get(region);
        ArmyData a;int s=0;
        for(int i=0;i<hs.size;i++){
            a=getArmyDataByHexagon(hs.get(i));
            if(a!=null&&ComUtil.ifGet(c)&&a.getArmyRound()==0){
                a.addArmyRound(1);
                s++;
            }
            if(s>lv){
                break;
            }
        }
        b.changeCityStability(-ComUtil.getRandom(1,lv)* game.resGameConfig.cityStabilityChangeRate);
        if(ifDraw&&roundState==0){
            effectStage.drawEffect(4,region,-1,0.5f);
        }
    }
    //使目标区域的所有敌方单位有几率士气下降,如果目标区域处于战斗状态下则降低士气的效果翻倍
    public void tactic_SpyingMessageForLegionUnit(int region, int lv, boolean ifDraw){
        BuildData b=getBuildDataByRegion(region);
        if(lv>10){lv=10;}
        int c=ComUtil.getRandom(3,lv)* game.resGameConfig.tactic_SpyingMessage_chance;
        IntArray hs= regionHexagonMap.get(region);
        ArmyData a;int s=0;
        Boolean isWar=b.isWar();
        for(int i=0;i<hs.size;i++){
            a=getArmyDataByHexagon(hs.get(i));
            if(a!=null&&ifAllyByLi(b.getLegionIndex(),a.getLegionIndex())&&ComUtil.ifGet(c)){
                if(a.armyActor==null){
                    a.createActor();
                }
                if(isWar){
                    a.setArmyMoraleChange(-ComUtil.getRandom(game.resGameConfig.airScoutForMoraleChangeMax/2, game.resGameConfig.airScoutForMoraleChangeMax *2));
                }else{
                    a.setArmyMoraleChange(-ComUtil.getRandom(game.resGameConfig.airScoutForMoraleChangeMax/2, game.resGameConfig.airScoutForMoraleChangeMax));
                }
            }
        }
        if(ifDraw&&roundState==0){
            effectStage.drawEffect(5,region,-1,0.5f);
        }
    }


    // 间谍 获得目标区域内的视野
    public void tactic_SpyingMessage(int region,int lv,boolean ifDraw){
        BuildData b=getBuildDataByRegion(region);
        if(lv>10){lv=10;}
        int c=ComUtil.getRandom(3,lv)* game.resGameConfig.tactic_SpyingMessage_chance;
        IntArray hs= regionHexagonMap.get(region);
        ArmyData a;int s=0;
        Boolean isWar=b.isWar();
        for(int i=0;i<hs.size;i++){
            a=getArmyDataByHexagon(hs.get(i));
            if(a!=null&&a.armyActor==null&&ComUtil.ifGet(c)){
                a.createActor();
                s++;
                if(isWar){
                    a.setArmyMoraleChange(-ComUtil.getRandom(game.resGameConfig.airScoutForMoraleChangeMax/2, game.resGameConfig.airScoutForMoraleChangeMax *2));
                }else{
                    a.setArmyMoraleChange(-ComUtil.getRandom(game.resGameConfig.airScoutForMoraleChangeMax/2, game.resGameConfig.airScoutForMoraleChangeMax));
                }
            }
            if(s>lv){
                break;
            }
        }
        if(ifDraw&&roundState==0){
            effectStage.drawEffect(5,region,-1,0.5f);
        }
    }
    //与li敌对的兵种
    public void tactic_SpyingMessage(int region,int lv,int li,boolean ifDraw){
        BuildData b=getBuildDataByRegion(region);
        if(b==null){
            return;
        }
        if(lv>10){lv=10;}
        int c=ComUtil.getRandom(3,lv)* game.resGameConfig.tactic_SpyingMessage_chance;
        IntArray hs= regionHexagonMap.get(region);
        ArmyData a;int s=0;
        Boolean isWar=b.isWar();
        for(int i=0;i<hs.size;i++){
            a=getArmyDataByHexagon(hs.get(i));
            if(a!=null&&!ifAllyByLi(li,a.getLegionIndex())&&ComUtil.ifGet(c)){
                if(roundState==0&&a.armyActor==null){
                    a.createActor();
                }
                s++;
                if(isWar){
                    a.setArmyMoraleChange(-ComUtil.getRandom(game.resGameConfig.airScoutForMoraleChangeMax/2, game.resGameConfig.airScoutForMoraleChangeMax *2));
                }else{
                    a.setArmyMoraleChange(-ComUtil.getRandom(game.resGameConfig.airScoutForMoraleChangeMax/2, game.resGameConfig.airScoutForMoraleChangeMax));
                }
            }
            if(s>lv){
                break;
            }
        }
        if(ifDraw&&roundState==0){
            effectStage.drawEffect(5,region,-1,0.5f);
        }
    }
    // 应急 随机降低城市的某个设施等级,以获得足够的电力供应
    public void tactic_EmergencyPower(int region,int lv,boolean ifDraw){
        BuildData b=getBuildDataByRegion(region);
        if(lv>10){lv=10;}
        int v=(10-ComUtil.getRandom(1,lv))/2;
        b.randomReduceTechUntilEnergyAffordTIA3(v);
        if(ifDraw&&roundState==0){
            effectStage.drawEffect(6,region,-1,0.5f);
        }
    }
    //戒严 增加城市稳定度
    public void tactic_MartialLaw(int region,int lv,boolean ifDraw){
        BuildData b=getBuildDataByRegion(region);
        if(lv>10){lv=10;}
        int v=ComUtil.getRandom(3,lv);
        if(!b.isWar()){
            v=v*2;
        }
        b.addCityStability(v* game.resGameConfig.tactic_MartialLaw_cityStability);
        if(ifDraw&&roundState==0){
            effectStage.drawEffect(7,region,-1,0.5f);
        }
        b.setInfluenceLi(0);
    }
    // 强行军 使一个行动过的单位再次行动
    public void tactic_ActAgain(int hexagon,int lv,boolean ifDraw){
        ArmyData army=getArmyDataByHexagon(hexagon);
        if(army!=null){
            army.setArmyRound(0);
            army.setIfAttack(0);
            army.setIfMove(0);
            if(lv>10){lv=10;}
            int v=ComUtil.getRandom(3,lv);
            army.addArmyHpByRate(v);
        }
        if(ifDraw&&roundState==0){
            effectStage.drawEffect(8,hexagon,-1,0.5f);
        }
    }

    //使该区域的所有单位有几率再次行动,如果该区域处于作战状态,则这个几率会降低
    public void tactic_ActAgainForLegionUnit(int region,int lv,boolean ifDraw) {
        IntArray hs = regionHexagonMap.get(region);
        int c = ComUtil.getRandom(3, lv) * game.resGameConfig.tactic_againActForLegion_chance;
        if (getBuildDataByRegion(region).isWar()) {
            c = c / 2;
        }
        for (int i = 0; i < hs.size; i++) {
            ArmyData army = getArmyDataByHexagon(hs.get(i));
            if (army != null && army.getArmyRound()>0&& ComUtil.ifGet(c)) {
                army.setArmyRound(0);
                army.setIfAttack(0);
                army.setIfMove(0);
                if (ifDraw && roundState == 0) {
                    effectStage.drawEffect(8, army.getHexagonIndex(), -1, 0.5f);
                }
            }
        }
    }


    // 急救 快速恢复单位的血量
    public void tactic_FirstAid(int hexagon,int lv,boolean ifDraw){
        ArmyData army=getArmyDataByHexagon(hexagon);
        int hp=0;
        BuildData build=army.getBuildData();
        if(army!=null&&build!=null){
            if(lv>10){lv=10;}
            int v=ComUtil.getRandom(2,lv)* game.resGameConfig.tactic_FirstAid_hpRate;
            if(!build.isWar()){
                v=v*2;
            }
            hp=army.addArmyHpByRate(v);
        }
        if(ifDraw&&roundState==0){
            effectStage.drawEffect(9,hexagon,-1,0.5f);
            effectStage.drawUnitHp(army.getHexagonIndex(),hp,2f);
        }
    }
    public void tactic_RepairBuild(int region,int lv,boolean ifDraw){
        BuildData b=getBuildDataByRegion(region);
        if(lv>10){lv=10;}
        int v=ComUtil.getRandom(3,lv)* game.resGameConfig.tactic_RepairBuild_hpRate;
        if(!b.isWar()){
            v=v*2;
        }
        IntArray hs= regionHexagonMap.get(region);
        ArmyData a;
        for(int i=0;i<hs.size;i++){
            a=getArmyDataByHexagon(hs.get(i));
            if(a!=null&&a.getArmyType()==6){
                a.addArmyHpByRate(v);
            }
        }
        int hp=b.repairByRate(v);
        if(ifDraw&&roundState==0){
            effectStage.drawEffect(9,region,-1,0.5f);
            effectStage.drawUnitHp(b.getRegionId(),hp,2f);
        }
    }
    // 空运 将指定单位空运到目标区域
    public void tactic_AirFreight(int hexagon,int targetHexagon,int lv,boolean ifDraw){
        ArmyData army=getArmyDataByHexagon(hexagon);
        if(army!=null){
            // int targetHexagon=getCanMoveRandomHexagon(targetRegion);
            int targetRegion=getRegionId(targetHexagon);
            if(ifDraw&&roundState==0){
                if(targetHexagon!=-1){ effectStage.drawEffect(1505,army.getRegionId(),targetHexagon,1f);}
                else{ return;}
            }

            if(army.canMove(targetHexagon)){
                if(army.armyActor==null){
                    if(ifAllyPlayerByRegion(targetRegion)){
                        army.createActor();
                        army.armyActor.moveHexagon(targetHexagon);
                    }else {
                        army_Move(army,targetHexagon);
                    }
                }else {
                    army.armyActor.moveHexagon(targetHexagon);
                }
            }
        }
    }


    // 爆破 对目标区域的城市一定比例伤害
    public void tactic_Bombardment(int sourceRegion,int targetRegion,int lv,boolean ifDraw){
        BuildData tb=getBuildDataByRegion(targetRegion);
        if(lv>10){lv=10;}
        int damage=ComUtil.getRandom(3,lv)* game.resGameConfig.tactic_Bombardment_damageRate*tb.getCityHpMax()/100;
        if(!tb.ifHaveGarrison()){
            damage=damage*2;
        }
        tb.beAttack(0,damage);
        if(ifDraw&&roundState==0){
            effectStage.drawEffect(10,sourceRegion,-1,0.3f);
            effectStage.drawUnitHp(targetRegion,-damage,2.0f);
        }
    }
    // 自毁 对城市一定范围内所有单位造成严重伤害
    public void tactic_NuclearBlasting(int region,int lv,boolean ifDraw){
        BuildData b=getBuildDataByRegion(region);
        if(lv>10){lv=10;}
        int v=lv* game.resGameConfig.tactic_NuclearBlasting_damage+b.getCityHpNow();
        //nul_Bomber(int neclearId,int liN,int hexagon,int rangeCount,int minDamage,int maxDamage,boolean ifDraw);
        if(ifDraw&&roundState==0){
            effectStage.drawEffect(11,region,-1,0.3f);
        }
        nul_Bomber(0,b.getLegionIndex(),region,lv/3,v/2,v,ifDraw);
    }
    // 预备役 一定几率使本区域内低等级单位的等级+1
    public void tactic_MilitaryTraining(int region,int lv,boolean ifDraw){
        if(lv>10){lv=10;}
        int v=ComUtil.getRandom(1,lv)/2+1;
        BuildData b=getBuildDataByRegion(region);
        Boolean ifWar=b.isWar();
        IntArray hs= regionHexagonMap.get(region);
        ArmyData a;
        int c=0;
        for(int i=0;i<hs.size;i++){
            a=getArmyDataByHexagon(hs.get(i));
            if(a!=null&&a.getArmyRank()<v&&a.getArmyHpNow()==a.getArmyHpMax()){
                if(ifWar){
                    a.setRankForValue(2);
                }else{
                    a.setRankForValue(1);
                }
            }
        }
        if(ifDraw&&roundState==0){
            effectStage.drawEffect(12,region,-1,0.5f);
        }

    }

    //自动内政
    public String autoPlayerRegionBuild(){
        LegionData l=getPlayerLegionData();
        l.addMoney(worldData.getWorldMoney()*l.getTradeCount()/100);
        l.setTradeCount(0);
        if(l.getMoney()==0){
            return "";
        }
        //  Iterator<IntMap.Entry<BuildData>> itb = buildRDatas.iterator();
        int buildPolicy;
        StringBuilder builder=new StringBuilder();



     /*   while (itb.hasNext()) {
            BuildData b=itb.next().value;*/
        Array<BuildData> bs=game.tempUtil.getTempArray();
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if(b.getBuildRound()==0&&b.isPlayer()&&!b.ifSea()&&!b.isWar()&&b.getBuildPolicy()>0){
                bs.add(b);
            }
        }
        bs.shuffle();
        for(int i=0;i<bs.size;i++){
            BuildData b=bs.get(i);
            if(build_ExcuteChiefBuildPolicy(builder,l,b)){
                b.addBuildRound(1);
                if(l.getMoney()<=0){
                    game.tempUtil.disposeTempArray(bs);
                    return builder.toString();
                }
                b.getBuildActor().update();
            }
        }
        game.tempUtil.disposeTempArray(bs);



        /*itb = buildRDatas.iterator();
        while (itb.hasNext()) {
            BuildData b=itb.next().value;*/

        bs=game.tempUtil.getTempArray();

        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if(b.getBuildRound()==0&&b.isPlayer()&&!b.ifSea()&&!b.isWar()){
                bs.add(b);
            }
        }
        bs.shuffle();
        for(int i=0;i<bs.size;i++){
            BuildData b=bs.get(i);
            buildPolicy=b.getBuildPolicy();
            if(buildPolicy==0){
                b.setBuildPolicy(ComUtil.getRandom(1,3));
            }
            Boolean rs=build_ExcutePolicy(builder,l,b);
            b.setBuildPolicy(buildPolicy);
            if(rs){
                b.addBuildRound(1);
                if(l.getMoney()<=0){
                    game.tempUtil.disposeTempArray(bs);
                    return builder.toString();
                }
            }
        }
        game.tempUtil.disposeTempArray(bs);

        return builder.toString();
    }

    public boolean ifCanAutoPlayerRegionBuild(){

        if(!getPlayerLegionData().ifAllResourceGreaterThanValue(0)||masterData.getIfHaveAutoBuild()==1){
            return false;
        }

    /*    Iterator<IntMap.Entry<BuildData>> itb = buildRDatas.iterator();
        while (itb.hasNext()) {
            BuildData b=itb.next().value;*/
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if(b.getBuildRound()==0&&b.isPlayer()){
                return true;
            }
        }
        return false;
    }

    //重置区域洲际
    private void resetZone(){
        /*if(masterData.getPlayerMode()!=0){
            return;
        }*/
        XmlIntDAO area= game.gameConfig.getDEF_STRATEGICREGION();
     /*   Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
        while (it.hasNext()) {
            IntMap.Entry<BuildData> c = it.next();
            BuildData b=c.value;*/
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            XmlReader.Element xE=area.getElementById(b.getStrategicRegion());
            if(xE!=null){
                b.setAreaZone(xE.getInt("zone",0));
            }
        }
    }





    //处理交互选择 返回的类型为是否打断继续的进程 TODO
    //ifPrompt 是否提示
    public  boolean executeDiplomacySelected(PromptData p,boolean select,boolean ifPrompt){
        if(game.sMapScreen==null){
            return false;
        }
        if(p.type==0){
            return false;
        }
        LegionData pl,l1,l2;
        pl=getPlayerLegionData();
        l1=getLegionDataByLi(p.li);
        l2=getLegionDataByLi(p.li2);
        ForeignData f1=null;
        ForeignData f2=null;
        if(l1!=null){
            f1=getForeignData(l1.getLegionIndex());
        }
        if(l2!=null){
            f2=getForeignData(l2.getLegionIndex());
        }
        int f=0;

        //-1作废  0正常 1接收援助 2提供资源 3要求结盟 4行为支持 5加盟请求 6获得附属 7关系缓和 8要求投降 9获得支持 10 调解关系 11国家合并 12条约触发 13提议稳定度 14提议自动内政 15 scrpit触发 16提高税率 17互不侵犯 18飞机移动 19弹头移动 20索要领土 21要求领土 22解散空军 23解散陆军 24升级玩家选中空中单位的武器等级 25 升级玩家选中陆军单位的武器等级 26选中空军单位上将 27选中陆军单位上将   28求和 29升级编制并扣钱  30升级单位能力 31升级飞机能力  32提高飞机物资 33邀请玩家  34武力索要领土 35武力要求领土
        switch (p.type){
            case 1://value 资源类型 value2 资源数值
                //li 资源来源国 li2 空缺
                //true 给予资源,好感度提高 false 好感度降低
                if(select){
                    String tempV=null;
                    switch (p.value) {
                        case 0:
                            pl.addMoney(p.value2);
                            tempV=game.gameMethod.getStrValueT("resource_name_money",p.value2);
                            break;
                        case 1:
                            pl.addIndustry(p.value2);
                            tempV=game.gameMethod.getStrValueT("resource_name_industry",p.value2);
                            break;
                        case 2:
                            pl.addTech(p.value2);
                            tempV=game.gameMethod.getStrValueT("resource_name_tech",p.value2);
                            break;
                        case 3:
                            pl.addFood(p.value2);
                            tempV=game.gameMethod.getStrValueT("resource_name_food",p.value2);
                            break;
                    }


                    if(pl.getLegionIndex()==l1.getSuzerainLi()){
                        //玩家是宗主国 附属国朝贡
                        f=-ComUtil.getRandom(10,15);
                      if(ifPrompt){  addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_30",l1.legionName,tempV),true);};
                    }else if(pl.getSuzerainLi()==l1.getLegionIndex()){
                        //给予援助的是宗主国 宗主国赏赐
                        f=ComUtil.getRandom(5,15);
                        if(ifPrompt){ addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_5",l1.legionName,tempV),true);};
                    }else{//普通国的赠予
                        f=ComUtil.getRandom(5,10);
                        if(ifPrompt){ addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_5",l1.legionName,tempV),true);};
                    }
                    f1.addFavor(f);
                    game.sMapScreen.updResourceForPlayer();
                }else{
                    if(pl.getLegionIndex()==l1.getSuzerainLi()){
                        //玩家是宗主国 附属国朝贡
                        f=ComUtil.getRandom(5,10);
                        if(ifPrompt){  addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_31",l1.legionName),true);};
                    }else if(pl.getSuzerainLi()==l1.getLegionIndex()){
                        //给予援助的是宗主国 宗主国赏赐
                        f=-ComUtil.getRandom(10,15);
                        if(ifPrompt){  addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_6",l1.legionName),true);};
                    }else{//普通国的赠予
                        f=-ComUtil.getRandom(5,10);
                        if(ifPrompt){ addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_6",l1.legionName),true);};
                    }
                    f1.addFavor(f);
                }
                break;
            case 2://value 资源类型 value2 资源数值
                //li 资源提供国 li2 空缺
                //true 减少资源,好感度提高 false 好感度降低
                if(select){
                    String tempV=null;
                    int tempInt=-1;
                    switch (p.value) {
                        case 0:
                            if(pl.getMoney()<p.value2){
                                f1.addFavor(-ComUtil.getRandom(5,10));
                                if(ifPrompt) {  addAssistantDialogueData(game.gameMethod.getStrValue("prompt_dialogue_8",l1.legionName),true);};
                                return false;
                            }

                            pl.addMoney(-p.value2);
                            l1.addMoney(p.value2);
                            tempV=game.gameMethod.getStrValueT("resource_name_money",p.value2);
                            break;
                        case 1:
                            if(pl.getIndustry()<p.value2){f1.addFavor(-ComUtil.getRandom(5,10));
                                if(ifPrompt){ addAssistantDialogueData(game.gameMethod.getStrValue("prompt_dialogue_8",l1.legionName),true);};
                                return false;
                            }
                            pl.addIndustry(-p.value2);
                            l1.addIndustry(p.value2);
                            tempV=game.gameMethod.getStrValueT("resource_name_industry",p.value2);
                            break;
                        case 2:
                            if(pl.getTech()<p.value2){f1.addFavor(-ComUtil.getRandom(5,10));
                                if(ifPrompt){   addAssistantDialogueData(game.gameMethod.getStrValue("prompt_dialogue_8",l1.legionName),true);};
                                return false;
                            }
                            pl.addTech(-p.value2);
                            l1.addTech(p.value2);
                            tempV=game.gameMethod.getStrValueT("resource_name_tech",p.value2);
                            break;
                        case 3:
                            if(pl.getFood()<p.value2){f1.addFavor(-ComUtil.getRandom(5,10));
                                if(ifPrompt){  addAssistantDialogueData(game.gameMethod.getStrValue("prompt_dialogue_8",l1.legionName),true);};
                                return false;
                            }
                            pl.addFood(-p.value2);
                            l1.addFood(p.value2);
                            tempV=game.gameMethod.getStrValueT("resource_name_food",p.value2);
                            break;
                        default:
                            if(ifPrompt){ addAssistantDialogueData(game.gameMethod.getStrValue("prompt_dialogue_8",l1.legionName),true);};
                            return false;
                    }
                    f1.addFavor(ComUtil.getRandom(5,10));
                    if(ifPrompt) {  addAssistantDialogueData(game.gameMethod.getStrValue("prompt_dialogue_7",l1.legionName,tempV),true);};
                    game.sMapScreen.updResourceForPlayer();

                }else{
                    f1.addFavor(-ComUtil.getRandom(5,15));
                    if(ifPrompt) { addAssistantDialogueData(game.gameMethod.getStrValue("prompt_dialogue_9",l1.legionName),true);};
                }
                break;
            case 3://li 要求结盟国 li2 空缺
                //true 两国结盟 false 联盟所有成员与玩家好感度降低
                if(select){
                    legion_AllianceTIA1(l1,pl,false);
                    f1.addFavor(ComUtil.getRandom(5,15));
                    if(ifPrompt){  addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_10",l1.legionName),true);};
                }else{
                    for(LegionData l:legionDatas){
                        if(ifAllyByLi(l1.getLegionIndex(),l.getLegionIndex())&&!ifAllyPlayerByLi(l.getLegionIndex())){
                            f2=getForeignData(l.getLegionIndex());
                            f2.addFavor(-ComUtil.getRandom(5,15));
                        }
                    }
                    if(ifPrompt){  addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_11",l1.legionName),true);};
                }
                break;
            case 4: //li 要求支持国 li2 针对国
                //true 与支持国好感度提高,与针对国好感度降低 false 与支持国好感度降低
                if(select){
                    f1.addFavor(ComUtil.getRandom(10,20));
                    f2.addFavor(-ComUtil.getRandom(20,40));
                    if(ifPrompt){  addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_12",l1.legionName,l2.legionName),true);};
                    if(f2.getForeignType()==1){
                        f2.setForeignType(0);
                        f2.setForeignValue(0);
                    }
                }else{
                    f1.addFavor(-ComUtil.getRandom(10,20));
                    if(ifPrompt){ addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_14",l1.legionName),true);};
                }
                break;
            case 5://li 加盟请求来源国 li2 空缺
                //true 加入玩家联盟 false 好感度降低
                if(select){
                    legion_AllianceTIA1(pl,l1,false);
                    f1.addFavor(ComUtil.getRandom(5,15));
                    if(ifPrompt){  addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_15",l1.legionName),true);};
                }else{
                    f1.addFavor(-ComUtil.getRandom(10,20));
                        if(ifPrompt){  addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_16",l1.legionName),true);};
                }
                break;
            case 6: //li 附属请求来源国 li2 空缺
                //true 成为玩家附属 false 亡国
                if(select){
                    legion_responsive(l1,pl,roundState==0);
                    f1.addFavor(ComUtil.getRandom(5,15));
                    if(ifPrompt){  addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_17",l1.legionName),true);};
                }else{
                    f1.addFavor(-ComUtil.getRandom(10,20));
                        if(ifPrompt){addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_18",l1.legionName),true);};
                }
                break;
            case 7://li关系缓和国
                //true 好感度提高 false 好感度降低
                if(select){
                    f1.addFavor(ComUtil.getRandom(5,20));
                    if(ifPrompt){ addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_13", l1.legionName),true);};
                    if(f1.getForeignType()==-1){ f1.setForeignType(1);f1.addLeagueLeftRound(5);}
                }else{
                    f1.addFavor(-ComUtil.getRandom(10,30));
                        if(ifPrompt){addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_14", l1.legionName),true);};
                    if(f1.getForeignType()==1){ f1.setForeignType(0);f1.setForeignValue(0);}
                }
                break;
            case 8: //li 要求投降国
                //true 我方并入敌方,指挥权变更 false 玩家失败亡国
                if(select){
                    legion_Merge(l1,pl,false);
                    if(ifPrompt){addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_19",l1.legionName),true);};
                }else{
                    f1.addFavor(-ComUtil.getRandom(20,30));
                        if(ifPrompt){ addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_20",l1.legionName),true);};
                }
                break;
            case 9://li 获得支持国 li2 针对国
                //true 与支持国好感度提高 支持国与针对国好感度降低 false 与支持国好感度降低
                if(select){
                    f1.addFavor(ComUtil.getRandom(10,40));
                    f2=getForeignData(l1.getLegionIndex(),l2.getLegionIndex());
                    f2.addFavor(-ComUtil.getRandom(10,50));
                    if(ifPrompt){ addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_21",l1.legionName,l2.legionName),true);};
                }else{
                    f1.addFavor(-ComUtil.getRandom(20,30));
                        if(ifPrompt){ addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_14",l1.legionName),true);};
                }
                break;
            case 10://li 关系协调国 li2 敌对国
                //true 与协调国,针对国好感度提高 false 与协调国,针对国好感度降低
                if(select){
                    f1.addFavor(ComUtil.getRandom(25,50));
                    f2.addFavor(ComUtil.getRandom(20,50));
                    if(f2.getForeignType()==-1){
                        f2.setForeignType(1);
                        f2.addLeagueLeftRound(5);
                    }
                    if(ifPrompt){ addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_22",l1.legionName,l2.legionName),true);};
                }else{
                    f1.addFavor(-ComUtil.getRandom(15,30));
                    f2.addFavor(-ComUtil.getRandom(10,30));
                        if(ifPrompt){ addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_23",l1.legionName),true);};
                }
                break;
            case 11://li 合并请求国 li2 合并后主导国
                //true 合并 false 两国关系降低
                if(select){
                    legion_Merge(pl,l1,false);
                    if(ifPrompt){  addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_24",l1.legionName),true);};
                }else{
                    f1.addFavor(-ComUtil.getRandom(15,30));
                        if(ifPrompt){  addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_25",l1.legionName),true);};
                }
                break;
            case 12://value 条约id
                //true 执行条约 false 玩家稳定度降低
                XmlReader.Element eE=game.gameConfig.getDEF_HEVENT().getElementById(p.value);
                if(select){
                    takeHEvent(eE,101);
                    hEventEs.removeValue(eE, false);
                    if(ifPrompt){ addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_26","event_treaty_"+p.value),true);};
                }else{
                    pl.reduceStability(ComUtil.getRandom(5,pl.getStability()/3));
                        if(ifPrompt){ addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_27","event_treaty_"+p.value),true);};
                }
                break;
            case 13:
                if(select){
                    switch (p.value) {
                        case 0:
                            pl.addMoney(-pl.incomeMoney/2);
                            break;
                        case 1:
                            pl.addIndustry(-pl.incomeIndustry);
                            break;
                        case 2:
                            pl.addTech(-pl.incomeTech);
                            break;
                        case 3:
                            pl.addFood(-pl.incomeFood);
                            break;
                    }
                    pl.addStability(ComUtil.getRandom(10,pl.getStability()/2));
                    if(ifPrompt){ addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_28"),true);};
                }else{
                        if(ifPrompt){ addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_29"),true);};
                }
                break;
            case 14:
                if(select){
                    game.sMapScreen.autoOption();
                    masterData.setIfHaveAutoBuild(1);
                }else{
                    game.sMapScreen.next(true);
                    return true;
                }
                break;
            case 15:
                if(select){
                    if(p.value!=-1){
                        game.sMapScreen.executeEvent(p.value);
                    }
                }else{
                    if(p.value2!=-1){
                        game.sMapScreen.executeEvent(p.value2);
                    }
                }
                break;
            case 16:
                if(select){
                    pl.setStability(pl.getStability()/2);
                    pl.addTaxBonus(pl.getTaxBonus()*2);
                    if(ifPrompt){ addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_34"),true);};
                }else{
                        if(ifPrompt){  addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_29"),true);};
                }
                break;
            case 17:
                if(select){
                    if(f1.getForeignType()==1){
                        f1.setForeignValue(f1.getForeignValue()+10);
                    }else{
                        f1.setForeignType(1);
                        f1.setForeignValue(10);
                    }
                    if(ifPrompt){  addAssistantDialogueData(game.gameMethod.getStrValue("prompt_dialogue_36",l1.legionName,f1.getForeignValue()),true);};
                }else{
                        if(ifPrompt){  addAssistantDialogueData(game.gameMethod.getStrValueT("prompt_dialogue_29"),true); };
                }
                break;
            case 18://飞机移动
                if(select){
                    AirData airData=getAirData(p.value);
                    if(airData!=null){
                        int round=airData.getMoveNeedRound(p.value2);
                        air_Move(airData,p.value2);
                        airData.addAirRound(round);
                        if(ifSystemEffective(2)){
                            airData.getLegionData().addOil(-round);
                            if(game.sMapScreen!=null){
                                game.sMapScreen.updResourceForPlayer();
                            }
                        }
                    }
                }
                break;

            case 19://弹头移动
                if(select){
                    NulcleData nulData=getNulData(p.value);
                    if(nulData!=null){
                        int round=nulData.getMoveNeedRound(p.value2);
                        nul_Move(nulData,p.value2);
                        nulData.addNucleRound(round);
                        if(ifSystemEffective(2)){
                            nulData.getLegionData().addOil(-round);
                            if(game.sMapScreen!=null){
                                game.sMapScreen.updResourceForPlayer();
                            }
                        }
                    }
                }
                break;
            case 20://索取领土 政府提议向{0}索取区域{1} l1是player
                if(select){//
                    if(p.li==masterData.getPlayerLegionIndex()&&ComUtil.ifGet(100-l2.getStability())){
                        legion_exChangeSRRegion(p.li,p.li2,p.value,p.value2);
                    }else{
                        if(l1.isPlayer()){
                            addPromptData(game.gameMethod.getPromptStrT(78, 0, "strategicRegion_"+p.value2),
                                    game.gameMethod.getPromptStr(78, 1, l2.legionName),
                                    "",p.li2,p.li,true);
                        }else{
                            addPromptData(game.gameMethod.getPromptStrT(78, 0, "strategicRegion_"+p.value2),
                                    game.gameMethod.getPromptStr(78, 1, l1.legionName),
                                    "",p.li2,p.li,true);
                        }
                    }
                }
                break;

            case 21://被要求领土 {0}要求从我们这里获得在区域{1}上的领土 l2是player
                if(select){//
                    legion_exChangeSRRegion(p.li,p.li2,p.value,p.value2);
                }else{
                    //0中立 1盟友 2敌人
                    if(p.value!=1||l1.isCoreAreaSR(p.value2)||l2.isCoreAreaSR(p.value2)){//直接敌对
                        legion_separate(p.li,p.li2,20);
                    }
                    ForeignData f0=getForeignData(p.li,p.li2);
                    if(f0!=null){
                        f0.addFavor(ComUtil.getRandom(game.resGameConfig.reduceFavorWhenDiplomacyFail,game.resGameConfig.reduceFavorWhenDiplomacyFail/2));
                    }
                    addPromptData(game.gameMethod.getPromptStrT(79, 0, "strategicRegion_"+p.value2),
                            game.gameMethod.getPromptStr(79, 1, l2.legionName),
                            "",p.li2,p.li,true);
                }
                break;
            case 22://22解散玩家选中的空军
                if(select){
                    AirData airData=getAirData(p.value);
                    if(airData!=null){
                        checkTask(airData.getHpRateF()==1,masterData.playerLegionIndex,25,1);
                        airData.dissolve();
                    }
                }
                break;
            case 23://23解散玩家选中的陆军
                if(select){
                    ArmyData armyData=getArmyDataByHexagon(p.value);
                    if(armyData!=null){
                        checkTask(armyData.getHpRateF()==1,masterData.playerLegionIndex,25,1);
                        if(armyData.getUnitGroupSum()==1){
                            armyData.dissolve(true);
                        }else {
                            armyData.dissolveUnitGroupAndRestoreState(p.value2);
                        }
                    }
                }
                break;
            case 24://24升级玩家选中空中单位的武器等级
                if(select){
                    AirData airData=getAirData(p.value);
                    if(airData!=null){
                        if(!isEditMode(true)) {
                            airData.updUnitWealvAndPayRes(p.value2, 1);
                            BuildData b = airData.getBuildData();
                            if (b != null) {
                                effectStage.drawEffect(2, p.value, -1, 0.3f);
                                b.addBuildRound(1);
                                b.updAllActorUpdMarkByRegion();
                            }
                        }else{
                            airData.updAirAbilityLv(p.value2, 1);
                        }
                    }
                }
                break;
            case 25://25升级玩家选中陆军单位的武器等级
                if(select){
                    ArmyData armyData=getArmyDataByHexagon(p.value);
                    if(armyData!=null){
                        BuildData b =armyData.getBuildData();
                        if(!isEditMode(true)){
                            int armyId=armyData.getUnitGroupArmyId(p.value2);
                            if(armyId==0&&p.value2!=0){
                                armyId=armyData.getUnitGroupArmyId(0);
                            }
                            if(armyId!=0&&armyData.canUpdUnitGroupWealLv(p.value2)){
                                b.addBuildRound(1);
                                armyData.updUnitWealvAndPayRes(p.value2);
                            }
                        }else{
                            armyData.updUnitGroupWealLv(p.value2,1);
                        }
                        if(b!=null){
                            effectStage.drawEffect(2,b.getRegionId(),-1,0.3f);
                            b.updAllActorUpdMarkByRegion();
                        }
                    }
                }
                break;
            case 26://26选中空军单位上将
                if(select){
                    AirData airData=getAirData(p.value);
                    if(airData!=null){
                        airData.updForGeneral();
                        BuildData b =getBuildDataByRegion(p.value2);
                        if(b!=null){
                            if(!isEditMode(true)){
                                b.addBuildRound(1);
                            }
                            effectStage.drawEffect(2,p.value2,-1,0.3f);
                            b.updAllActorUpdMarkByRegion();
                        }
                    }
                }
                break;
            case 27://27选中陆军单位上将
                if(select){
                    ArmyData armyData = getArmyDataByHexagon(p.value);
                    if(armyData!=null){
                        armyData.updForGeneral();
                        BuildData b = getBuildDataByRegion(p.value2);
                        if (b != null) {
                            if(!isEditMode(true)){
                                b.addBuildRound(1);
                            }
                            effectStage.drawEffect(2, p.value2, -1, 0.3f);
                            b.updAllActorUpdMarkByRegion();
                        }
                    }
                }
                break;
            case 28://求和
                if(select){
                    legion_BegPeace(getLegionDataByLi(p.li),getLegionDataByLi(p.li2));
                }
                break;
            case 29://升级编制并扣钱
                if(select){
                    ArmyData armyData=getArmyDataByHexagon(p.value);
                    if(armyData!=null){
                        if(armyData.isUnitGroup()){
                            armyData.updUnitGroupAndPayRes(p.value2);
                        }else{
                            armyData.updWeaLv();
                            BuildData b =armyData.getBuildData();
                            if(b!=null){
                                if(!isEditMode(true)){
                                    b.addBuildRound(1);
                                }
                                armyData.updArmyGroup();
                                effectStage.drawEffect(2,b.getRegionId(),-1,0.3f);
                                b.updAllActorUpdMarkByRegion();
                            }
                        }
                    }
                }
                break;

            case 30://升级陆军能力
                if(select){
                    ArmyData armyData=getArmyDataByHexagon(p.value);
                    if(armyData!=null){
                        BuildData b=armyData.getBuildData();
                        if(b!=null){
                            armyData.setUnitGroupWealLv(p.value2,armyData.getUnitGroupWealLv(p.value2)+1,false);
                            if(!isEditMode(true)){
                                b.addBuildRound(1);
                            }
                            b.updAllActorUpdMarkByRegion();
                        }
                    }
                }
                break;
            case 31://升级空军能力
                if(select){
                    AirData airData=getAirData(p.value);
                    if(airData!=null){
                        BuildData b=airData.getBuildData();
                        if(b!=null){
                            switch (p.value2){
                                case 1:airData.setAckLv(airData.getAckLv()+1); break;
                                case 2:airData.setSpyLv(airData.getSpyLv()+1); break;
                                case 3:airData.setSupLv(airData.getSupLv()+1); break;
                                case 4:airData.setDefLv(airData.getDefLv()+1); break;
                                case 5:airData.setEngLv(airData.getEngLv()+1); break;
                                case 6:airData.setActLv(airData.getActLv()+1); break;
                            }
                            if(!isEditMode(true)){
                                b.addBuildRound(1);
                            }
                            b.updAllActorUpdMarkByRegion();
                        }
                    }
                }
            case 32://提升物资上限
                if(select){
                    AirData airData=getAirData(p.value);
                    if(airData!=null){
                        BuildData b=airData.getBuildData();
                        if(b!=null){
                            if(!isEditMode(true)){
                                b.addBuildRound(1);
                            }
                            airData.updGoodsMaxAndPayRes();
                            effectStage.drawEffect(2,b.getRegionId(),-1,0.3f);
                            b.updAllActorUpdMarkByRegion();
                        }
                    }
                }
                break;
            case 33://邀请玩家
                if(select){
                    LegionData l=getLegionDataByLi(p.getLi());
                    if(l!=null&&p.getLi()!=masterData.getPlayerLegionIndex()&&l.varRegionCount>0&&game.sMapScreen!=null){
                        game.sMapScreen.smapGameStage.setPlayerLegionIndex(l.getLegionIndex());
                    }
                }
                break;

            case 34://武力索取领土 政府提议用武力作为威胁,向{0}索取区域{1} l1是player
                if(select){//
                    if(p.li==masterData.getPlayerLegionIndex()&&ComUtil.ifGet(100-l2.getStability())){
                        legion_exChangeSRRegion(p.li,p.li2,p.value,p.value2);
                    }else{
                        legion_separate(p.li,p.li2,20);
                        ForeignData f0=getForeignData(p.li,p.li2);
                        if(f0!=null){
                            f0.setFavorValue(0);
                            f0.setForeignType(-1);
                            f0.setForeignValue(0);
                        }
                       if(l1.isPlayer()){
                            addPromptData(game.gameMethod.getPromptStrT(112, 0, "strategicRegion_"+p.value2),
                                    game.gameMethod.getPromptStr(112, 1, l2.legionName),
                                    "",p.li2,p.li,true);
                        }else{
                            addPromptData(game.gameMethod.getPromptStrT(112, 0, "strategicRegion_"+p.value2),
                                    game.gameMethod.getPromptStr(112, 1, l1.legionName),
                                    "",p.li2,p.li,true);
                        }
                    }
                }
                break;

            case 35://被武力威胁 要求领土 {0}用武力威胁我们,要求从我们这里获得在区域{1}上的领土 l2是player
                if(select){//
                    legion_exChangeSRRegion(p.li,p.li2,p.value,p.value2);
                }else{
                    //0中立 1盟友 2敌人
                    legion_separate(p.li,p.li2,20);
                    ForeignData f0=getForeignData(p.li,p.li2);
                    if(f0!=null){
                        f0.setFavorValue(0);
                        f0.setForeignType(-1);
                        f0.setForeignValue(0);
                    }
                    addPromptData(game.gameMethod.getPromptStrT(113, 0, "strategicRegion_"+p.value2),
                            game.gameMethod.getPromptStr(113, 1, l2.legionName),
                            "",p.li2,p.li,true);



                }
                break;
        }
        return false;
    }
    //创造军团邀请事件
    private void createLegionInvite(int li){
        LegionData l=getLegionDataByLi(li);
        if(l!=null&&li!=masterData.getPlayerLegionIndex()&&l.varRegionCount>0){
            addPromptData(game.gameMethod.getPromptStr(108,0,l.legionName),game.gameMethod.getPromptStr(108,1,l.legionName),"",33,li,li,-1,-1,false);
        }
    }

    //成为附属国 li1 成为附属的国家  li2 宗主国
    private void legion_responsive(LegionData li1, LegionData li2,boolean ifUpdate) {
        li1.setSuzerainLi(li2.getLegionIndex());
        li1.setInternIndex(li2.getInternIndex());
        if(ifUpdate){//必然是玩家阵营
            Iterator<IntMap.Entry<ArmyData>> it = armyHDatas.iterator();
            while (it.hasNext()) {
                ArmyData army = it.next().value;
                if(army.getLegionIndex()==li1.getLegionIndex()){
                    if(army.armyActor==null){
                        army.createActor();
                    }
                    army.armyActor.update();
                    army.setFogInSearchTIA3(true);
                }
            }
        /*    Iterator<IntMap.Entry<BuildData>> iB = buildRDatas.iterator();
            while (iB.hasNext()) {
                BuildData b=iB.next().value;*/
            for(int bi=0;bi<buildRDatas.size();bi++) {
                BuildData b=buildRDatas.getByIndex(bi);
                if(b.getLegionIndex()==li1.getLegionIndex()){
                    setFogByRegion(b.getRegionId(),1);
                }
            }
        }

        //每增加一个盟国或附属国将会获得额外的{0}税率和军团稳定度
        if(ifSystemEffective(16)&&ifHaveSpirit(13)
                &&li1.getSuzerainLi()==getPlayerLegionData().getLegionIndex()
                &&li2.getLegionIndex()==getPlayerLegionData().getLegionIndex()){
            int v=getSpiritValue(13);
            getPlayerLegionData().addTaxBonus(v);
            getPlayerLegionData().addStability(v);
        }

        if (ifNeedRecordPrompt(li1.legionIndex)|| ifNeedRecordPrompt(li2.legionIndex)) {
            addPromptData(game.gameMethod.getPromptStrT(18,0,li1.legionName),
                    game.gameMethod.getPromptStrT(18,1,li1.legionName,li2.legionName),
                    game.gameMethod.getPromptStrT(18,2),li1.getLegionIndex(),li2.getLegionIndex(),false);
        }
    }

    //玩家的维护关系
    private void legion_MaintainPlayer() {
        LegionData l=getPlayerLegionData();
        LegionData l2;
        int v1,v2;
        for(int i=0,iMax=legionDatas.size;i<iMax;i++){
            l2=legionDatas.get(i);
            ForeignData f=getForeignData(l.getLegionIndex(),l2.getLegionIndex());
            if(ifAllyByLi(l.getLegionIndex(),l2.getLegionIndex())){
                if(l.getLegionIndex()==l2.getLegionIndex()){//自身稳定度关系
                    if(!ifHaveSpirit(17)&&f.getFavorValue()<50){
                        addPromptData(game.gameMethod.getPromptStrT(47,0),game.gameMethod.getPromptStrT(47,1,getPlayerLegionData().getStability()),"",13,l.getLegionIndex(),-1,ComUtil.getRandom(0,3),-1,false);
                    }else if(l.getTaxBonus()<70){
                        addPromptData(game.gameMethod.getPromptStrT(66,0),game.gameMethod.getPromptStrT(66,1,getPlayerLegionData().getTaxBonus(),getPlayerLegionData().getStability()),"",16,masterData.playerLegionIndex,masterData.playerLegionIndex,-1,-1,false);
                    }
                }else if(l.getSuzerainLi()!=0&&l.getSuzerainLi()==l2.getLegionIndex()){//如果是附属关系
                    if(f.getFavorValue()<30&&ComUtil.ifGet(l2.getStability())){//接受援助
                        v1=ComUtil.getRandom(0,3);
                        v2=getTaskBonty(v1,l2.getTaxBonus()/10);
                        addPromptData(game.gameMethod.getPromptStrT(35,0),game.gameMethod.getPromptStrT(35,1,f.getFavorValue(),l2.legionName,game.gameMethod.getStrValueForResource(v1,v2)),"",1,l2.getLegionIndex(),-1,v1,v2,false);
                    }else if(f.getFavorValue()>40&&ComUtil.ifGet(30+l2.getStability()/2)){//提供援助
                        v1=ComUtil.getRandom(0,3);
                        v2=getTaskBonty(v1,l.getTaxBonus()/10);
                        addPromptData(game.gameMethod.getPromptStrT(36,0),game.gameMethod.getPromptStrT(36,1,l2.legionName,f.getFavorValue(),game.gameMethod.getStrValueForResource(v1,v2)),"",2,l2.getLegionIndex(),-1,v1,v2,false);
                    }
                }else if(l.getLegionIndex()==l2.getSuzerainLi()){//宗主关系
                    if(f.getFavorValue()<30&&ComUtil.ifGet(l.getStability())){//接受援助
                        v1=ComUtil.getRandom(0,3);
                        v2=getTaskBonty(v1,l2.getTaxBonus()/10);
                        addPromptData(game.gameMethod.getPromptStrT(36,0),game.gameMethod.getPromptStrT(36,1,l2.legionName,f.getFavorValue(),game.gameMethod.getStrValueForResource(v1,v2)),"",2,l2.getLegionIndex(),-1,v1,v2,false);

                    }else if(f.getFavorValue()>40&&ComUtil.ifGet(30+l2.getStability()/2)){//提供援助
                        v1=ComUtil.getRandom(0,3);
                        v2=getTaskBonty(v1,l.getTaxBonus()/10);
                        addPromptData(game.gameMethod.getPromptStrT(35,0),game.gameMethod.getPromptStrT(35,1,l2.legionName,f.getFavorValue(),game.gameMethod.getStrValueForResource(v1,v2)),"",1,l2.getLegionIndex(),-1,v1,v2,false);
                    }
                }else if(l.getInternIndex()==l2.getInternIndex()){//普通盟友关系
                    if(f.getFavorValue()<50){
                        v1=ComUtil.getRandom(0,3);
                        v2=getTaskBonty(v1,l2.getTaxBonus()/10);
                        addPromptData(game.gameMethod.getPromptStrT(36,0),game.gameMethod.getPromptStrT(36,1,l2.legionName,f.getFavorValue(),game.gameMethod.getStrValueForResource(v1,v2)),"",2,l2.getLegionIndex(),-1,v1,v2,false);
                    }
                }
            }
            if(l.getMoney()==0){//如果没钱,则跳出
                break;
            }
        }

    }

    /*private void initPotionById(){
        //float refx =0;float refy=0;
        //  float refx = armyMarkTR.getRefx();float refy= armyMarkTR.getRefy();
        int  x = (armyData.getHexagonIndex() % btl.masterData.getWidth()) + 1;
        int  y = (armyData.getHexagonIndex() / btl.masterData.getWidth()) + 1;
        sourceX= GameMap.getX_pxByHexagon(x,scale,0);
        sourceY=GameMap.getY_pxByHexagon(x,y,mapH_px,scale,0,true);
        //核心坐标
    }*/



    //
    private void initHexagonDataVirAttribute(){

        Fb2Map.MapHexagon h;
        TextureRegionDAO tt;int sx,sy;
        int mapH_px;
        // int mapTile_refX=12,mapTile_refY=18;
       // float mapTile_refX= ResDefaultConfig.Map.MAPTILE_REFX* ResDefaultConfig.Map.MAP_SCALE;
       // float mapTile_refY= ResDefaultConfig.Map.MAPTILE_REFY* ResDefaultConfig.Map.MAP_SCALE;/**/
        float mapTile_refX=0;
        float mapTile_refY=0;

        for(int i=0,iMax=hexagonDatas.size;i<iMax;i++){
            h=hexagonDatas.get(i);
            //h.ifDraw=false;
            if(h.getHexagonIndex()==h.getRegionId()){
                h.buildData=getBuildDataByRegion(h.getRegionId());
            }

            // sx=GameMap.getHexagonX1F();


            //sx_Px=GameMap.getHexagonX1F(sx,sy,1);
            //sy_Px=GameMap.getH_px(masterData.getWidth(), masterData.getHeight(), 1)-GameMap.getHexagonY1F(sx,sy,1);
            //sy_Px=GameMap.getHexagonY1F(sx,sy,1);

            //int  x = (armyData.getHexagonIndex() % btl.masterData.getWidth()) + 1;
            //int  y = (armyData.getHexagonIndex() / btl.masterData.getWidth()) + 1;
            sx=GameMap.getHX(i,masterData.getWidth())+1;
            sy=GameMap.getHY(i,masterData.getWidth())+1;
            mapH_px=GameMap.getH_px(masterData.getWidth(), masterData.getHeight(), 1);
            //因为地图的边缘相接部分并不是取最右,而是右数第二个坐标相接来实现地图循环
            h.source_x=GameMap.getX_pxByHexagon(sx,1,mapTile_refX);
            h.source_y=GameMap.getY_pxByHexagon(sx,sy,mapH_px,1,mapTile_refY,true);

            if(h.getBackTile()!=0){

                tt=game.getImgLists().getTextureByName(h.getBackTile()+"_"+h.getBackIdx());
                if(tt!=null){
                   /* st=new TextureRegionDAO();
                    st.setTextureRegionAndSize(tt.getTextureRegion());
                    st.setRefx((int) (sx_Px+((h.getBackRefX()+ tt.getRefx() ) *ResConfig.Map.MAP_SCALE)));
                    st.setRefy((int) (sy_Px+((h.getBackRefY()  + tt.getRefy())  *ResConfig.Map.MAP_SCALE)));
                   */ h.setTile1(tt);
                }
            }

            if(h.getForeTile()!=0){
                tt=game.getImgLists().getTextureByName(h.getForeTile()+"_"+h.getForeIdx());
                if(tt!=null){
                    /*st=new TextureRegionDAO();
                    st.setTextureRegionAndSize(tt.getTextureRegion());
                    st.setRefx((int) (sx_Px+((h.getForeRefX()  + tt.getRefx() ) *ResConfig.Map.MAP_SCALE)));
                    st.setRefy((int) (sy_Px+ ((h.getForeRefY()  + tt.getRefy() ) *ResConfig.Map.MAP_SCALE)));
                    */h.setTile2(tt);
                }
            }
            //h.regionBorder1=ifRegionBorder(h.getHexagonIndex(),1,false);
            //h.regionBorder2=ifRegionBorder(h.getHexagonIndex(),2,false);
            //h.regionBorder3=ifRegionBorder(h.getHexagonIndex(),3,false);

            // h.regionBorder1= ifCountryBorder(h.getHexagonIndex(),1,false);
            // h.regionBorder2= ifCountryBorder(h.getHexagonIndex(),2,false);
            // h.regionBorder3= ifCountryBorder(h.getHexagonIndex(),3,false);
        }
    }



    public void tempMethod(){
        //tempMethod_updSmapDataByNewMapBinDAO();
        GameMap.drawPixmapForCountryBorder();
    }


    //获得季节
    private int getSeason(int region){
        int y=GameMap.getHY(region,masterData.getWidth());
        int rfy=4;
        if(masterData.getRoundForYear()>0){
            rfy=masterData.getRoundForYear();
        }

        float s=masterData.getRoundNow()%rfy*1f;
        float p=s/rfy;
        int rs=1;
        if(mapbin!=null){
            if(mapbin.ifLat ==1){
                if(y<mapbin.lat60N){
                    return 4;
                }else if(y<mapbin.lat40N){
                    rs=4;
                }else if(y<mapbin.lat20N){
                    rs=1;
                }else if(y<mapbin.lat20S){
                    return 2;
                }else if(y<mapbin.lat40S){
                    rs=2;
                }else if(y<mapbin.lat60S){
                    rs=3;
                }else{
                    return 4;
                }
                if(p<0.25){
                    return rs;
                }else if(p<0.5){
                    rs=rs+1;
                    if(rs>4){rs=rs-4;}
                    return rs;
                }else if(p<0.75){
                    rs=rs+2;
                    if(rs>4){rs=rs-4;}
                    return rs;
                }else {
                    rs=rs+3;
                    if(rs>4){rs=rs-4;}
                    return rs;
                }
            }else if(mapbin.ifLat ==2){//TODO 好像没什么用



            }
        }

        return 1;
    }
    private int getRandomWeather(int climateZone,int season){
        XmlReader.Element cE=  game.gameConfig.getDEF_CZONE().getElementById(climateZone);
        switch (season){
            case 1:return ComUtil.getRandOne(cE.get("season1"));
            case 2:return ComUtil.getRandOne(cE.get("season2"));
            case 3:return ComUtil.getRandOne(cE.get("season3"));
            case 4:return ComUtil.getRandOne(cE.get("season4"));
        }
        return 0;
    }

    //重置天气
    private void resetWeather(){

        if(mapbin==null||(mapbin.ifLat ==0&&masterData.ifWeather==0)){
            return;
        }
        int season,weather;
        /*Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
        while (it.hasNext()) {
            IntMap.Entry<BuildData> c = it.next();
            BuildData b=c.value;*/
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if(b!=null){
                if(masterData.ifWeather==0){
                    season=   getSeason(b.getRegionId());
                    weather=getRandomWeather(b.getClimateZone() ,season);
                    b.setWeatherId(weather);
                }else{//TODO 设置季节
                    b.setWeatherId(0);
                }
            }
        }
    }

    //判断移动类型
    public int getHexagonCheckType(boolean ifArmy,boolean ifNavy,boolean ifAir){
        if(ifArmy){
            return 0;
        }
        if(ifNavy){
            if(!ifAir){
                return 1;
            }else{
                return 5;
            }
        }
        if(ifAir){
            return 4;
        }

        return -1;
    }


    //0无限制 1只指向海洋区域 2.只指向有空缺飞机的区域 3.只指向有空缺超武区域 4 我方区域和敌方有单位的区域 5 海洋区域或  我方区域和敌方有单位的区域
    public int checkHexagon(int hexagon,int limitType){
        if(hexagon==-1){
            return hexagon;
        }
        BuildData b=getBuildDataByRegion(hexagon);

        if(limitType==1&&!ifSea(hexagon)){//拦截海洋
            return -1;
        }else if(limitType==2&&b!=null&&!b.canRecruitAir()){
            return -1;
        }else if(limitType==3&&b!=null&&!b.canRecruitNul()){
            return -1;
        }else if(limitType==4&&b!=null){
            int fd=getForeignDegree(masterData.getPlayerLegionIndex(),b.getLegionIndex());
            if(fd!=1){
                if(!b.ifHaveLegionAllyUnit(true)){
                    return -1;
                }
            }else if(b.getLegionIndex()!=masterData.getPlayerLegionIndex()){
                return -1;
            }
        }else if(limitType==5){
            if(!ifSea(hexagon)){
                return -1;
            }
            int fd=getForeignDegree(masterData.getPlayerLegionIndex(),b.getLegionIndex());
            if(fd!=1){
                if(!b.ifHaveLegionAllyUnit(true)){
                    return -1;
                }
            }else if(b.getLegionIndex()!=masterData.getPlayerLegionIndex()){
                return -1;
            }
        }
        return hexagon;
    }

    //ifSea true 只查找目标是海洋的地块  false 则查全部
    private int getCanAttackTargetRegionTIA1(LegionData l, int nowRegion, int searchNum, boolean ifSea,int fd) {
        int li=l.getLegionIndex();
        int value;
        IntArray tempIntArray1=game.tempUtil.getTempIntArray();
        //首先遍历所有的核心地块和次要地块
        if(l.coreAreaRegions!=null){
            for (int i = 0; i < l.coreAreaRegions.size; i++) {
                int cr=l.coreAreaRegions.get(i);
                    BuildData b=getBuildDataByRegion(cr);
                    if(b!=null&&b.getLegionIndex()!=l.getLegionIndex()&&!tempIntArray1.contains(b.getRegionId())&&ifCanAtk(li, b.getLegionIndex())){
                        tempIntArray1.add(b.getRegionId());
                    }

            }
        }
        if(l.majorAreaRegions!=null){

            for (int i = 0; i < l.majorAreaRegions.size; i++) {

                    int cr=l.majorAreaRegions.get(i);
                    BuildData b=getBuildDataByRegion(cr);
                    if(b!=null&&b.getLegionIndex()!=l.getLegionIndex()&&!tempIntArray1.contains(b.getRegionId())&&ifCanAtk(li, b.getLegionIndex())){
                        tempIntArray1.add(b.getRegionId());
                    }

            }
        }

        //如果无
        if(tempIntArray1.size>0){
            value=tempIntArray1.random();
            game.tempUtil.disposeTempIntArray(tempIntArray1);
            return value;
        }


        // if(){return -1;}

        tempIntArray1.add(nowRegion);


        for (int i = 0; i < searchNum; i++) {
            for (int k = 0, kMax = tempIntArray1.size; k < kMax; k++) {
                if (buildRDatas.containsKey(tempIntArray1.get(k))) {
                    //int[]    c = getConnectData(tempIntArray1.get(k));

                    ConnectData c = getConnectData(tempIntArray1.get(k));
                    if (c != null) {
                        for (int j = 0, jMax = c.regionConnectCount; j < jMax; j++) {
                            value = c.getConnectValue(j + 1, 0);
                            if (!tempIntArray1.contains(value)) {
                                int li2= getLegionIndexByRegion(value);
                                if (ifCanAtk(li,li2)&&(getForeignDegree(li,li2)==fd||fd==-2)) {
                                    if (ifSea && hexagonDatas.get(value).getBlockType() == 1) {
                                        tempIntArray1.add(value);
                                    } else {
                                        tempIntArray1.add(value);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (tempIntArray1.size > 0) {
            value=tempIntArray1.random();
            game.tempUtil.disposeTempIntArray(tempIntArray1);
            return value;
        } else {
            game.tempUtil.disposeTempIntArray(tempIntArray1);
            return -1;
        }
    }




    //获得连接的地块  ifFog: -1 无所谓 0 不可见, 1 可见
    public int getRandomRegionForAllyTIA1(int li, int region,boolean ifSeaArea,boolean ifHaveSelf,int ifFog) {
        // if(){return -1;}

        int h,rs=-1;

        //int[] regions=getConnectData(region);
        ConnectData regions=getConnectData(region);

        if(regions==null){
            return -1;
        }
        IntArray tempIntArray=game.tempUtil.getTempIntArray();

        for(int i=0;i<regions.getRegionConnectCount();i++){
            // h=regions[i];
            h=regions.getConnectValue(i+1,0);
            if(h==-1){
            }else if (h!=-1&&ifAllyByLi(getLegionIndexByHexagon(h),li)) {
                if(!ifHaveSelf&&getLegionIndexByHexagon(h)==li){
                    continue;
                }
                if(ifSeaArea){
                    if(ifSeaArea(h)){
                        if(masterData.ifFog!=0&&ifFog!=-1){
                            if(hexagonDatas.get(h).getIfFog()==ifFog){
                                tempIntArray.add(h);
                            }
                        }else {
                            tempIntArray.add(h);
                        }
                    }
                }else {
                    if(masterData.ifFog!=0&&ifFog!=-1){
                        if(hexagonDatas.get(h).getIfFog()==ifFog){
                            tempIntArray.add(h);
                        }
                    }else {
                        tempIntArray.add(h);
                    }
                }
            }
        }


        if(tempIntArray.size>0){
            rs=tempIntArray.random();
            game.tempUtil.disposeTempIntArray(tempIntArray);
            return rs;
        }else {
            game.tempUtil.disposeTempIntArray(tempIntArray);
            return rs;
        }
    }

    //获得位置 对于区域中相邻的地块 25 敌人 6蓝 13建筑 8?  18黄 7合兵
    // type 0全部 1自己 2包含盟友 3敌人 4交通目标
    public IntIntMap getPotionForBorderRegionTIIM1( int region,int type, IntIntMap rs) {
        // if(){return rs;}
        rs.clear();
        //int[] c=getConnectData(region);
        ConnectData c=getConnectData(region);
        if(c==null){
            return rs;
        }
        int li=getLegionIndexByRegion(region);
        int bLi;
        int borderRegion;
        for(int i=0,iMas=c.getRegionConnectCount();i<iMas;i++){
            borderRegion=c.getConnectValue(i+1,0);
            if(borderRegion!=-1){
                bLi=getLegionIndexByRegion(borderRegion);
                switch (type){
                    case 0:
                        if(li==bLi){
                            rs.put(borderRegion,13);
                        }else if(ifAllyByLi(li,bLi)){
                            rs.put(borderRegion,6);
                        }else{
                            rs.put(borderRegion,25);
                        }
                        break;
                    case 1:
                        if(li==bLi){
                            rs.put(borderRegion,13);
                        }
                        break;
                    case 2:
                        if(ifAllyByLi(li,bLi)){
                            rs.put(borderRegion,6);
                        }
                        break;
                    case 3:
                        if(getForeignDegree(li,bLi)==-1){
                            rs.put(borderRegion,25);
                        }
                        break;
                    case 4://交通技能指向
                        if(ifAllyByLi(li,bLi)){
                            rs.put(borderRegion,10);
                        }
                        break;
                }
            }
        }
        return rs;
    }


    public int getRandomRegionCanAtkTIA1(int li,int hexagon, boolean ifSeaArea,boolean ifSelf) {
        //  if(){return -1;}
        IntArray tempIntArray1=game.tempUtil.getTempIntArray();
        int h,rs=1;
        //int[] regions=getConnectData(hexagon);
        ConnectData c=getConnectData(hexagon);
        /*if(ifHaveSelf){
            i=0;
        }*/
        if(c==null){return -1;}
        for(int i=0;i<c.getRegionConnectCount();i++){
            h=c.getConnectValue(i+1,0);
            if(h==-1){

            }else if (h!=-1&& ifCanAtk(li,getLegionIndexByHexagon(h))) {

                if(ifSeaArea){
                    if(ifSeaArea(h)){
                        tempIntArray1.add(h);
                    }
                }else {
                    tempIntArray1.add(h);
                }
            }
        }

        if(ifSelf){
            int region=getRegionId(hexagon);
            if(ifCanAtk(li,getLegionIndexByHexagon(region))){
                if(ifSeaArea){
                    if(ifSeaArea(region)){
                        tempIntArray1.add(region);
                    }
                }else {
                    tempIntArray1.add(region);
                }
            }
        }
        if(tempIntArray1.size>0){
            rs=tempIntArray1.random();
            game.tempUtil.disposeTempIntArray(tempIntArray1);
            return rs;
        }else {
            game.tempUtil.disposeTempIntArray(tempIntArray1);
            return -1;
        }
    }

    private int getRandomAroundRegionLegionIndex(int regionId, boolean ifEnemy) {
        // if(){return -1;}
        //int[] connect=  getConnectData(regionId);
        ConnectData c=getConnectData(regionId);

        if(c==null){
            return -1;
        }
        IntArray tempIntArray1=game.tempUtil.getTempIntArray();
        int rli=getLegionIndexByRegion(regionId),li;
        for(int i=0;i<c.getRegionConnectCount();i++){
            int r=c.getConnectValue(i+1,0);
            if(r>=0){
                li=getLegionIndexByHexagon(r);
                if(ifEnemy){
                    if(getForeignDegree(li,rli)==-1&&!tempIntArray1.contains(li)){
                        tempIntArray1.add(li);
                    }
                }else {
                    if(ifAllyByLi(li,rli)&&!tempIntArray1.contains(li)){
                        tempIntArray1.add(getRegionId(i));
                    }
                }
            }
        }
        //   game.tempUtil.disposeTempIntArray(tempIntArray2);
        if (tempIntArray1.size>0) {
            int rs=tempIntArray1.random();
            game.tempUtil.disposeTempIntArray(tempIntArray1);
            return rs;
        }
        game.tempUtil.disposeTempIntArray(tempIntArray1);
        return -1;
    }


    //获得连接的地块
    public int getRandomRegionForHaveEUnitTIA1(int li,int hexagon,boolean ifSeaArea,boolean ifSelf) {
        //  if(){return -1;}
        IntArray tempIntArray1=game.tempUtil.getTempIntArray();
        //int[] regions=getConnectData(hexagon);
        ConnectData c=getConnectData(hexagon);
        if(c==null){
            return -1;
        }
        int region=getRegionId(hexagon);
        int h,rs=1;
        if(ifSelf){
            rs=0;
        }
        for(int i=0;i<c.getRegionConnectCount();i++){
            h=c.getConnectValue(i+1,0);
            if(h==-1){

            }else if (h!=-1&& ifCanAtk(li,getLegionIndexByHexagon(h))&&haveEnemyInRegion(h)) {
                if(ifSeaArea){
                    if(ifSeaArea(h)){
                        tempIntArray1.add(h);
                    }
                }else {
                    tempIntArray1.add(h);
                }
            }
        }
        if(ifSelf&& ifCanAtk(li,getLegionIndexByHexagon(region))&&haveEnemyInRegion(region)){
            if(ifSeaArea){
                if(ifSeaArea(region)){
                    tempIntArray1.add(region);
                }
            }else {
                tempIntArray1.add(region);
            }
        }
        if(tempIntArray1.size>0){
            rs=tempIntArray1.random();
            game.tempUtil.disposeTempIntArray(tempIntArray1);
            return rs;
        }else {
            game.tempUtil.disposeTempIntArray(tempIntArray1);
            return -1;
        }
    }


    //地块连接信息
    public class ConnectData {

        public ConnectData(int region){
            initConnectData(region);
        }

        //bontyType 0,全部  1仅我方自己  2我方与友军  3仅友军 4敌方
        public IntArray addIntArrayByType(IntArray ids,int hexagon,int allyType){
            switch (allyType){
                case 0:  ids.add(hexagon);break;
                case 1:  if(getLegionIndexByHexagon(hexagon)==getLegionIndexByHexagon(regionMainIndex)){ ids.add(hexagon);};break;
                case 2:  if(ifAllyByHexagon(hexagon,regionMainIndex)){ ids.add(hexagon);};break;
                case 3:  if(ifAllyByHexagon(hexagon,regionMainIndex)&&getLegionIndexByHexagon(hexagon)!=getLegionIndexByHexagon(regionMainIndex)){ ids.add(hexagon);};break;
                case 4:  if(getForeignDegree(getLegionIndexByHexagon(hexagon),getLegionIndexByHexagon(regionMainIndex))==-1){ ids.add(hexagon);};break;
            }
            return ids;
        }



        public IntArray getIntArrayTIA2(int allyType,IntArray tempIntArray2){

            if(regionMinorIndex1!=-1){addIntArrayByType(tempIntArray2,regionMinorIndex1,allyType);}
            if(regionMinorIndex2!=-1){addIntArrayByType(tempIntArray2,regionMinorIndex2,allyType);}
            if(regionMinorIndex3!=-1){addIntArrayByType(tempIntArray2,regionMinorIndex3,allyType);}
            if(regionMinorIndex4!=-1){addIntArrayByType(tempIntArray2,regionMinorIndex4,allyType);}
            if(regionMinorIndex5!=-1){addIntArrayByType(tempIntArray2,regionMinorIndex5,allyType);}
            if(regionMinorIndex6!=-1){addIntArrayByType(tempIntArray2,regionMinorIndex6,allyType);}
            if(regionMinorIndex7!=-1){addIntArrayByType(tempIntArray2,regionMinorIndex7,allyType);}
            if(regionMinorIndex8!=-1){addIntArrayByType(tempIntArray2,regionMinorIndex8,allyType);}
            if(regionMinorIndex9!=-1){addIntArrayByType(tempIntArray2,regionMinorIndex9,allyType);}
            if(regionMinorIndex10!=-1){addIntArrayByType(tempIntArray2,regionMinorIndex10,allyType);}
            if(regionMinorIndex11!=-1){addIntArrayByType(tempIntArray2,regionMinorIndex11,allyType);}
            if(regionMinorIndex12!=-1){addIntArrayByType(tempIntArray2,regionMinorIndex12,allyType);}
            if(regionMinorIndex13!=-1){addIntArrayByType(tempIntArray2,regionMinorIndex13,allyType);}
            if(regionMinorIndex14!=-1){addIntArrayByType(tempIntArray2,regionMinorIndex14,allyType);}
            if(regionMinorIndex15!=-1){addIntArrayByType(tempIntArray2,regionMinorIndex15,allyType);}
            if(regionMinorIndex16!=-1){addIntArrayByType(tempIntArray2,regionMinorIndex16,allyType);}
            return tempIntArray2;
        }

        public boolean contain(int hexagon) {
            if (hexagon != -1 && (this.regionMinorIndex1 == hexagon ||
                    this.regionMinorIndex2 == hexagon ||
                    this.regionMinorIndex3 == hexagon ||
                    this.regionMinorIndex4 == hexagon ||
                    this.regionMinorIndex5 == hexagon ||
                    this.regionMinorIndex6 == hexagon ||
                    this.regionMinorIndex7 == hexagon ||
                    this.regionMinorIndex8 == hexagon ||
                    this.regionMinorIndex9 == hexagon ||
                    this.regionMinorIndex10 == hexagon ||
                    this.regionMinorIndex11 == hexagon ||
                    this.regionMinorIndex12 == hexagon ||
                    this.regionMinorIndex13 == hexagon ||
                    this.regionMinorIndex14 == hexagon ||
                    this.regionMinorIndex15 == hexagon ||
                    this.regionMinorIndex16 == hexagon)) {
                return true;
            }
            return false;
        }


        private int regionMainIndex;//主地区id

        public int getRegionMainIndex() {
            return regionMainIndex;
        }

        public void setRegionMainIndex(int regionMainIndex) {
            this.regionMainIndex = regionMainIndex;
        }

        private int regionConnectCount;//地块连接数

        public int getRegionConnectCount() {
            return regionConnectCount;
        }

        public void setRegionConnectCount(int regionConnectCount) {
            this.regionConnectCount = ComUtil.limitValue(regionConnectCount, 0, 65525);
        }

        private int regionMinorIndex1;//副地区id1

        public int getRegionMinorIndex1() {
            return regionMinorIndex1;
        }

        public void setRegionMinorIndex1(int regionMinorIndex1) {
            this.regionMinorIndex1 = regionMinorIndex1;
        }

        private int regionMinorIndex2;//副地区id2

        public int getRegionMinorIndex2() {
            return regionMinorIndex2;
        }

        public void setRegionMinorIndex2(int regionMinorIndex2) {
            this.regionMinorIndex2 = regionMinorIndex2;
        }

        private int regionMinorIndex3;//副地区id3

        public int getRegionMinorIndex3() {
            return regionMinorIndex3;
        }

        public void setRegionMinorIndex3(int regionMinorIndex3) {
            this.regionMinorIndex3 =regionMinorIndex3;
        }

        private int regionMinorIndex4;//副地区id4

        public int getRegionMinorIndex4() {
            return regionMinorIndex4;
        }

        public void setRegionMinorIndex4(int regionMinorIndex4) {
            this.regionMinorIndex4 =regionMinorIndex4;
        }

        private int regionMinorIndex5;//副地区id5

        public int getRegionMinorIndex5() {
            return regionMinorIndex5;
        }

        public void setRegionMinorIndex5(int regionMinorIndex5) {
            this.regionMinorIndex5 = regionMinorIndex5;
        }

        private int regionMinorIndex6;//副地区id6

        public int getRegionMinorIndex6() {
            return regionMinorIndex6;
        }

        public void setRegionMinorIndex6(int regionMinorIndex6) {
            this.regionMinorIndex6 =regionMinorIndex6;
        }

        private int regionMinorIndex7;//副地区id7

        public int getRegionMinorIndex7() {
            return regionMinorIndex7;
        }

        public void setRegionMinorIndex7(int regionMinorIndex7) {
            this.regionMinorIndex7 = regionMinorIndex7;
        }

        private int regionMinorIndex8;//副地区id8

        public int getRegionMinorIndex8() {
            return regionMinorIndex8;
        }

        public void setRegionMinorIndex8(int regionMinorIndex8) {
            this.regionMinorIndex8 = regionMinorIndex8;
        }

        private int regionMinorIndex9;//副地区id9

        public int getRegionMinorIndex9() {
            return regionMinorIndex9;
        }

        public void setRegionMinorIndex9(int regionMinorIndex9) {
            this.regionMinorIndex9 =regionMinorIndex9;
        }

        private int regionMinorIndex10;//副地区id10

        public int getRegionMinorIndex10() {
            return regionMinorIndex10;
        }

        public void setRegionMinorIndex10(int regionMinorIndex10) {
            this.regionMinorIndex10 =regionMinorIndex10;
        }

        private int regionMinorIndex11;//副地区id11

        public int getRegionMinorIndex11() {
            return regionMinorIndex11;
        }

        public void setRegionMinorIndex11(int regionMinorIndex11) {
            this.regionMinorIndex11 =regionMinorIndex11;
        }

        private int regionMinorIndex12;//副地区id12

        public int getRegionMinorIndex12() {
            return regionMinorIndex12;
        }

        public void setRegionMinorIndex12(int regionMinorIndex12) {
            this.regionMinorIndex12 = regionMinorIndex12;
        }

        private int regionMinorIndex13;//副地区id13

        public int getRegionMinorIndex13() {
            return regionMinorIndex13;
        }

        public void setRegionMinorIndex13(int regionMinorIndex13) {
            this.regionMinorIndex13 = regionMinorIndex13;
        }

        private int regionMinorIndex14;//副地区id14

        public int getRegionMinorIndex14() {
            return regionMinorIndex14;
        }

        public void setRegionMinorIndex14(int regionMinorIndex14) {
            this.regionMinorIndex14 = regionMinorIndex14;
        }

        private int regionMinorIndex15;//副地区id15

        public int getRegionMinorIndex15() {
            return regionMinorIndex15;
        }

        public void setRegionMinorIndex15(int regionMinorIndex15) {
            this.regionMinorIndex15 =regionMinorIndex15;
        }

        private int regionMinorIndex16;//副地区id16

        public int getRegionMinorIndex16() {
            return regionMinorIndex16;
        }

        public void setRegionMinorIndex16(int regionMinorIndex16) {
            this.regionMinorIndex16 = regionMinorIndex16;
        }

        //0无限制 1只指向海洋区域 2.只指向有空缺飞机的区域 3.只指向有空缺超武区域 4只指向陆地区域
        public int getConnectValue(int i,int limitType) {
            int rs=-1;
            switch (i) {
                case 0:
                    rs=regionMainIndex;break;
                case 1:
                    rs= regionMinorIndex1;break;
                case 2:
                    rs= regionMinorIndex2;break;
                case 3:
                    rs= regionMinorIndex3;break;
                case 4:
                    rs= regionMinorIndex4;break;
                case 5:
                    rs= regionMinorIndex5;break;
                case 6:
                    rs= regionMinorIndex6;break;
                case 7:
                    rs= regionMinorIndex7;break;
                case 8:
                    rs= regionMinorIndex8;break;
                case 9:
                    rs= regionMinorIndex9;break;
                case 10:
                    rs= regionMinorIndex10;break;
                case 11:
                    rs= regionMinorIndex11;break;
                case 12:
                    rs= regionMinorIndex12;break;
                case 13:
                    rs= regionMinorIndex13;break;
                case 14:
                    rs= regionMinorIndex14;break;
                case 15:
                    rs= regionMinorIndex15;break;
                case 16:
                    rs= regionMinorIndex16;break;
            }

            if(rs==-1){
                return rs;
            }
            if(limitType==1&&!ifSea(rs)){//拦截非海洋
                return -1;
            }else if(limitType==2&&!getBuildDataByRegion(rs).canRecruitAir()){
                return -1;
            }else if(limitType==3&&!getBuildDataByRegion(rs).canRecruitNul()){
                return -1;
            }if(limitType==4&&ifSea(rs)){//拦截海洋
                return -1;
            }
            return rs;
        }

        public boolean setConnectValue(int i,int rs) {
            switch (i) {
                case 0:
                    regionMainIndex= rs;break;
                case 1:
                    regionMinorIndex1= rs ;break;
                case 2:
                    regionMinorIndex2= rs ;break;
                case 3:
                    regionMinorIndex3= rs ;break;
                case 4:
                    regionMinorIndex4= rs ;break;
                case 5:
                    regionMinorIndex5= rs ;break;
                case 6:
                    regionMinorIndex6= rs ;break;
                case 7:
                    regionMinorIndex7= rs ;break;
                case 8:
                    regionMinorIndex8= rs ;break;
                case 9:
                    regionMinorIndex9= rs ;break;
                case 10:
                    regionMinorIndex10= rs ;break;
                case 11:
                    regionMinorIndex11= rs ;break;
                case 12:
                    regionMinorIndex12= rs ;break;
                case 13:
                    regionMinorIndex13= rs ;break;
                case 14:
                    regionMinorIndex14= rs ;break;
                case 15:
                    regionMinorIndex15= rs ;break;
                case 16:
                    regionMinorIndex16= rs ;break;
            }

            if(i>=0&&i<=16){
                return true;
            }else{
                return false;
            }


        }

        public void initConnectData(int region) {
            this.regionMainIndex = region;
            this.regionConnectCount = 0;
            this.regionMinorIndex1 = -1;
            this.regionMinorIndex2 = -1;
            this.regionMinorIndex3 = -1;
            this.regionMinorIndex4 = -1;
            this.regionMinorIndex5 = -1;
            this.regionMinorIndex6 = -1;
            this.regionMinorIndex7 = -1;
            this.regionMinorIndex8 = -1;
            this.regionMinorIndex9 = -1;
            this.regionMinorIndex10 = -1;
            this.regionMinorIndex11 = -1;
            this.regionMinorIndex12 = -1;
            this.regionMinorIndex13 = -1;
            this.regionMinorIndex14 = -1;
            this.regionMinorIndex15 = -1;
            this.regionMinorIndex16 = -1;
        }

        public boolean ifSameLegionIndex(int li) {
            int li2=getLegionIndexByHexagon(getRegionMainIndex());
            if(li!=li2){
                return false;
            }
            int h,v=0;
            for(int i=1;i<=regionConnectCount;i++){
                h=getConnectValue(i,0);
                if(h==-1){
                    v+=1;
                }else if (h!=-1&&getLegionIndexByHexagon(h)==li) {
                    v+=1;
                }
            }
            if(v==regionConnectCount){
                return true;
            }
            return false;
        }
        //获得连接的地块  ifFog: -1 无所谓 0 不可见, 1 可见
        public int getRandomRegionForAllyTIA1(int li, boolean ifSeaArea,boolean ifSelf,int ifFog) {

            int h;int i=1;
            if(ifSelf){
                i=0;
            }
            IntArray tempIntArray=game.tempUtil.getTempIntArray();
            for(;i<=regionConnectCount;i++){
                h=getConnectValue(i,0);
                if(h==-1){
                }else if (h!=-1&&ifAllyByLi(getLegionIndexByHexagon(h),li)) {
                    if(ifSeaArea){
                        if(ifSeaArea(h)){
                            if(masterData.ifFog!=0&&ifFog!=-1){
                                if(hexagonDatas.get(h).getIfFog()==ifFog){
                                    tempIntArray.add(h);
                                }
                            }else {
                                tempIntArray.add(h);
                            }
                        }
                    }else {
                        if(masterData.ifFog!=0&&ifFog!=-1){
                            if(hexagonDatas.get(h).getIfFog()==ifFog){
                                tempIntArray.add(h);
                            }
                        }else {
                            tempIntArray.add(h);
                        }
                    }
                }
            }
            if(tempIntArray.size>0){
                i=tempIntArray.random();
                game.tempUtil.disposeTempIntArray(tempIntArray);
                return i;
            }else {
                game.tempUtil.disposeTempIntArray(tempIntArray);
                return -1;
            }
        }




        //获得连接的地块
        public int getRandomRegionCanAtkTIA1(int li, boolean ifSeaArea, boolean ifSelf) {
            IntArray tempIntArray1=game.tempUtil.getTempIntArray();
            int h,i=1;
            if(ifSelf){
                i=0;
            }
            for(;i<=regionConnectCount;i++){
                h=getConnectValue(i,0);
                if(h==-1){

                }else if (h!=-1&& ifCanAtk(li,getLegionIndexByHexagon(h))) {
                    if(ifSeaArea){
                        if(ifSeaArea(h)){
                            tempIntArray1.add(h);
                        }
                    }else {
                        tempIntArray1.add(h);
                    }
                }
            }
            if(tempIntArray1.size>0){
                i=tempIntArray1.random();
                game.tempUtil.disposeTempIntArray(tempIntArray1);
                return i;
            }else {
                game.tempUtil.disposeTempIntArray(tempIntArray1);
                return -1;
            }
        }


        //获得连接的地块
        public int getRandomRegionForHaveEUnitTIA1(int li,boolean ifSeaArea,boolean ifSelf) {
            IntArray tempIntArray1=game.tempUtil.getTempIntArray();
            int h,i=1;
            if(ifSelf){
                i=0;
            }
            for(;i<=regionConnectCount;i++){
                h=getConnectValue(i,0);
                if(h==-1){

                }else if (h!=-1&& ifCanAtk(li,getLegionIndexByHexagon(h))&&haveEnemyInRegion(h)) {
                    if(ifSeaArea){
                        if(ifSeaArea(h)){
                            tempIntArray1.add(h);
                        }
                    }else {
                        tempIntArray1.add(h);
                    }
                }
            }
            if(tempIntArray1.size>0){
                i=tempIntArray1.random();
                game.tempUtil.disposeTempIntArray(tempIntArray1);
                return i;
            }else {
                game.tempUtil.disposeTempIntArray(tempIntArray1);
                return -1;
            }
        }


      /*  public int getEffectCityStabilityInRound(BuildData b) {
            IntArray  tempIntArray2=    getIntArrayTIA2(0,game.tempUtil.getTempIntArray());
            int v=b.getCultureLvNow();BuildData eb;
            for(int i:tempIntArray2.items){
                eb=getBuildDataByRegion(i);
                if(eb!=null){
                    if(ifAllyByLi(eb.getLegionIndex(),b.getLegionIndex())){
                        v+=b.getCultureLvNow();
                    }else {
                        v-=b.getCultureLvNow();
                    }
                }
            }
            game.tempUtil.disposeTempIntArray(tempIntArray2);
            return v;
        }*/

        public boolean ifBorderRegionWar(int li) {
            for(int i=1;i<=regionConnectCount;i++){
                BuildData b=getBuildDataByRegion(getConnectValue(i,0));
                if(b!=null&&b.getBuildStatus()!=0&&!ifAllyByLi(li,b.getLegionIndex())){
                    return true;
                }
            }
            return false;
        }

        public boolean addConnectRegion(int regionId) {
            boolean rs=false;
            if(regionConnectCount>=16||regionId==regionMainIndex||!ifGridIsPass(regionId)||contain(regionId)){
                return false;
            }
            rs=setConnectValue(regionConnectCount+1,regionId);
            regionConnectCount++;
            return rs;
        }

        public int getAllyConnectCount() {
            int rs=0;
            for(int i=1;i<=regionConnectCount;i++){
                int  h=getConnectValue(i,4);
                if (h!=-1&&ifAllyByHexagon(regionMainIndex,h)) {
                    rs++;
                }
            }
            return rs;
        }
        public int getSameSelfConnectCount() {
            int rs=0;
            int li=getLegionIndexByHexagon(regionMainIndex);
            for(int j=1;j<=regionConnectCount;j++){
                int  h=getConnectValue(j,4);
                if (h!=-1&&getLegionIndexByHexagon(h)==li) {
                    rs++;
                }
            }
            return rs;
        }
        //循环获取所有相连的connect
        public void getAllSameLiConnect(IntArray rs) {
            int oldSize;
            int li=getLegionIndexByHexagon(regionMainIndex);
            //第一部,先将自身加入
            for(int j=0;j<=regionConnectCount;j++){
                int  h=getConnectValue(j,4);
                if (!rs.contains(h)&&h!=-1&&getLegionIndexByHexagon(h)==li) {
                    rs.add(h);
                }
            }
            if(rs.size==0){
                return;
            }
            int lastIndex=0;
            //循环
            do{
                oldSize=rs.size;
                for(;lastIndex<oldSize;lastIndex++){
                    int id=rs.get(lastIndex);
                    ConnectData c=getConnectData(id);
                    if(c!=null&&li==getLegionIndexByHexagon(c.regionMainIndex)){
                        for(int j=1;j<=c.regionConnectCount;j++){
                            int  h=c.getConnectValue(j,4);
                            if (!rs.contains(h)&&h!=-1&&getLegionIndexByHexagon(h)==li&&!ifSea(h)) {
                                rs.add(h);
                            }
                        }
                    }
                }
            }while (oldSize!=rs.size);

        }


        public void getAllSeaConnect(IntArray rs) {
            int oldSize;
            int li=getLegionIndexByHexagon(regionMainIndex);
            //第一部,先将自身加入
            for(int j=0;j<=regionConnectCount;j++){
                int  h=getConnectValue(j,1);
                if (!rs.contains(h)&&h!=-1) {
                    rs.add(h);
                }
            }
            if(rs.size==0){
                return;
            }
            int lastIndex=0;
            //循环
            do{
                oldSize=rs.size;
                for(;lastIndex<oldSize;lastIndex++){
                    int id=rs.get(lastIndex);
                    ConnectData c=getConnectData(id);
                    if(c!=null&&li==getLegionIndexByHexagon(c.regionMainIndex)){
                        for(int j=1;j<=c.regionConnectCount;j++){
                            int  h=c.getConnectValue(j,1);
                            if (!rs.contains(h)&&h!=-1/*&&ifSea(h)*/) {
                                rs.add(h);
                            }
                        }
                    }
                }
            }while (oldSize!=rs.size);

        }
    }


    //政策信息
    public class ChiefData {

        private int playerAmbition;//野心度
        public int getPlayerAmbition(){
            return playerAmbition;
        }
        public void setPlayerAmbition(int playerAmbition){
            this.playerAmbition=ComUtil.limitValue(playerAmbition,0,200);
        }
        private int playerHarmony;//和谐度
        public int getPlayerHarmony(){ return ComUtil.limitValue(playerHarmony,0,100);}
        public void setPlayerHarmony(int playerHarmony){ this.playerHarmony=ComUtil.limitValue(playerHarmony,0,100);}
        private int powerStrategy;//国家政体
        public int getPowerStrategy(){ return powerStrategy;}
        public void setPowerStrategy(int powerStrategy){ this.powerStrategy =ComUtil.limitValue(powerStrategy,0,255);}
        private int nationalIdeas;//国家理念
        public int getNationalIdeas(){ return nationalIdeas;}
        public void setNationalIdeas(int nationalIdeas){ this.nationalIdeas=ComUtil.limitValue(nationalIdeas,0,255);}
        private int playerTax;//国家税率
        public int getPlayerTax(){ return playerTax;}
        public void setPlayerTax(int playerTax){ this.playerTax=ComUtil.limitValue(playerTax,0,255);}
        private int foreignPolicy;//外交方针
        public int getForeignPolicy(){ return foreignPolicy;}
        public void setForeignPolicy(int foreignPolicy){ this.foreignPolicy=ComUtil.limitValue(foreignPolicy,0,255);}
        private int foreignBudget;//外交预算
        public int getForeignBudget(){ return foreignBudget;}
        public void setForeignBudget(int foreignBudget){ this.foreignBudget=ComUtil.limitValue(foreignBudget,0,255);}
        private int militaryBudget;//军事预算
        public int getMilitaryBudget(){ return militaryBudget;}
        public void setMilitaryBudget(int militaryBudget){ this.militaryBudget=ComUtil.limitValue(militaryBudget,0,255);}
        private int trainingSystem;//训练制度
        public int getTrainingSystem(){ return trainingSystem;}
        public void setTrainingSystem(int trainingSystem){ this.trainingSystem=ComUtil.limitValue(trainingSystem,0,255);}
        private int theDraft;//征兵法案
        public int getTheDraft(){ return theDraft;}
        public void setTheDraft(int theDraft){ this.theDraft=ComUtil.limitValue(theDraft,0,255);}
        private int buildLaw;//建设法案
        public int getBuildLaw(){ return buildLaw;}
        public void setBuildLaw(int buildLaw){ this.buildLaw=ComUtil.limitValue(buildLaw,0,255);}
        private int industrialControl;//工业控制
        public int getIndustrialControl(){ return industrialControl;}
        public void setIndustrialControl(int industrialControl){ this.industrialControl=ComUtil.limitValue(industrialControl,0,255);}
        private int tradeBills;//贸易法案
        public int getTradeBills(){ return tradeBills;}
        public void setTradeBills(int tradeBills){ this.tradeBills=ComUtil.limitValue(tradeBills,0,255);}
        private int foreignInvestment;//外资法规
        public int getForeignInvestment(){ return foreignInvestment;}
        public void setForeignInvestment(int foreignInvestment){ this.foreignInvestment=ComUtil.limitValue(foreignInvestment,0,255);}
        private int newsSystem;//出版自由
        public int getNewsSystem(){ return newsSystem;}
        public void setNewsSystem(int newsSystem){ this.newsSystem=ComUtil.limitValue(newsSystem,0,255);}
        private int stabilisationPolicy;//维稳政策
        public int getStabilisationPolicy(){ return stabilisationPolicy;}
        public void setStabilisationPolicy(int stabilisationPolicy){ this.stabilisationPolicy=ComUtil.limitValue(stabilisationPolicy,0,255);}
        private int laborLaw;//劳动法案
        public int getLaborLaw(){ return laborLaw;}
        public void setLaborLaw(int laborLaw){ this.laborLaw=ComUtil.limitValue(laborLaw,0,255);}
        private int educationPolicy;//教育政策
        public int getEducationPolicy(){ return educationPolicy;}
        public void setEducationPolicy(int educationPolicy){ this.educationPolicy=ComUtil.limitValue(educationPolicy,0,255);}
        private int safetyRegulations;//安全规章
        public int getSafetyRegulations(){ return safetyRegulations;}
        public void setSafetyRegulations(int safetyRegulations){ this.safetyRegulations=ComUtil.limitValue(safetyRegulations,0,255);}
        private int securitySpend;//保障支出
        public int getSecuritySpend(){ return securitySpend;}
        public void setSecuritySpend(int securitySpend){ this.securitySpend=ComUtil.limitValue(securitySpend,0,255);}
        private int officialSalary;//官员工资
        public int getOfficialSalary(){ return officialSalary;}
        public void setOfficialSalary(int officialSalary){ this.officialSalary=ComUtil.limitValue(officialSalary,0,255);}
        private int officialSlavery;//奴隶许可
        public int getOfficialSlavery(){ return officialSlavery;}
        public void setOfficialSlavery(int officialSlavery){ this.officialSlavery=ComUtil.limitValue(officialSlavery,0,255);}
        private int literacy;//识字率
        public int getLiteracy(){ return literacy;}
        public void setLiteracy(int literacy){ this.literacy =ComUtil.limitValue(literacy,0,100);}
        private int reputation;//恶名
        public int getReputation(){ return reputation;}
        public void setReputation(int reputation){ this.reputation =ComUtil.limitValue(reputation,0,100);}
        private int warSupport;//战争支持度
        public int getWarSupport(){ return ComUtil.limitValue(warSupport,0,100);}
        public void setWarSupport(int warSupport){ this.warSupport =ComUtil.limitValue(warSupport,0,100);}
        private int literacyProgress;//识字率进度
        public int getLiteracyProgress(){ return literacyProgress;}
        public void setLiteracyProgress(int literacyProgress){ this.literacyProgress =ComUtil.limitValue(literacyProgress,0,255);}
        private int massesDemandType;//群众需求 不是是0
        public int getMassesDemandType(){ return massesDemandType;}
        public void setMassesDemandType(int massesDemandType){ this.massesDemandType =ComUtil.limitValue(massesDemandType,0,655525);}
        private int none7;
        public int getNone7(){ return none7;}
        public void setNone7(int none7){ this.none7 =ComUtil.limitValue(none7,0,255);}
        private int none8;//备用
        public int getNone8(){ return none8;}
        public void setNone8(int none8){ this.none8=ComUtil.limitValue(none8,0,255);}
        private int none9;//备用
        public int getNone9(){ return none9;}
        public void setNone9(int none9){ this.none9=ComUtil.limitValue(none9,0,255);}
        private int none10;//备用
        public int getNone10(){ return none10;}
        public void setNone10(int none10){ this.none10=ComUtil.limitValue(none10,0,255);}
        private int none11;//备用
        public int getNone11(){ return none11;}
        public void setNone11(int none11){ this.none11=ComUtil.limitValue(none11,0,255);}
        private int none12;//备用
        public int getNone12(){ return none12;}
        public void setNone12(int none12){ this.none12=ComUtil.limitValue(none12,0,255);}
        private int none13;//备用
        public int getNone13(){ return none13;}
        public void setNone13(int none13){ this.none13=ComUtil.limitValue(none13,0,255);}
        public void initChiefData() {
            this.playerAmbition=0;
            this.playerHarmony=0;
            this.powerStrategy =0;
            this.nationalIdeas=0;
            this.playerTax=0;
            this.foreignPolicy=0;
            this.foreignBudget=0;
            this.militaryBudget=0;
            this.trainingSystem=0;
            this.theDraft=0;
            this.buildLaw=0;
            this.industrialControl=0;
            this.tradeBills=0;
            this.foreignInvestment=0;
            this.newsSystem=0;
            this.stabilisationPolicy=0;
            this.laborLaw=0;
            this.educationPolicy=0;
            this.safetyRegulations=0;
            this.securitySpend=0;
            this.officialSalary=0;
            this.officialSlavery=0;
            this.literacy =0;
            this.reputation =0;
            this.warSupport =0;
            this.literacyProgress =0;
            this.massesDemandType =-1;
            this.none7 =0;
            this.none8=0;
            this.none9=0;
            this.none10=0;
            this.none11=0;
            this.none12=0;
            this.none13=0;
        }
        public void addReputation(int v){
            setReputation(reputation+v);
        }

        public void addWarSupport(int v){
            setWarSupport(warSupport+v);
        }

        //增加识字率,首先计算识字进度
        public void addLiteracy(int v){
            // setLiteracy(literacy*(100+v)/100);
            literacyProgress+=v;
            if(literacyProgress<0){
                literacyProgress=99;
                setLiteracy(getLiteracy()-1);
            }else if(literacyProgress>100){
                literacyProgress=0;
                setLiteracy(getLiteracy()+1);
            }
        }

        public int varHarmonyChange=0;//月政治点
        public int varLegionStabilityChange=0;//月稳定度
        public int varMoneyEfficiencyChange=0;//金钱效率
        public int varResEfficiencyChange=0;//资源效率
        public int varUnitRestoreEfficiencyChange=0;//部队恢复效率
        public int varUnitFoodCoastChange=0;//食物消耗
        public int vaAreaStabilityChange=0;//非战斗区域稳定度
        public int unitGetExtraSkillChance =0;//额外经验
        public int varBorderCountryFavor=0;//邻国好感度加成
        public int varAddExtraResChance=0;//增加额外资源的概率
        public int varAddExtraPopChance=0;//增加额外人口的几率
        public int varWarSupportChange=0;//战争支持度变化
        public int varPopulationChange=0;//人口修正

        public void initVarAttribute(){
            varHarmonyChange=0;//月政治点
            varLegionStabilityChange=0;//月稳定度
            varMoneyEfficiencyChange=0;//金钱效率
            varResEfficiencyChange=0;//资源效率
            varUnitRestoreEfficiencyChange=0;//部队恢复效率
            varUnitFoodCoastChange=0;//食物消耗
            vaAreaStabilityChange=0;//区域稳定度
            unitGetExtraSkillChance =0;
            varBorderCountryFavor=0;
            varAddExtraResChance=0;
            varAddExtraPopChance=0;
            varWarSupportChange=0;
            varPopulationChange=0;
             /*特殊属性

            9	区域部队的最低士气由首都的稳定度决定而不再是由该区域的稳定度决定
            10	附属国占领的地区将自动纳入到宗主国的势力圈
            11	外交成功将提高和谐度,外交失败将降低和谐度
            12	依据国家稳定度将会额外增加或减少收入
            13	民用设施价格降低{0}%
            14	招募军队价格降低{0}%
            15	发生叛乱的几率额外降低{0}%
            16	招募兵种时其所在区域稳定度增加
            17	本土获得的非金钱资源减半,但通过贸易,势力圈,附属国获得的非金钱资源加倍
            18	逐步与势力圈内的附属国提升好感度,好感度达到一定阶段时其必然独立且成为盟友
            19	部队以弱胜强时,获得额外比例的经验
            20	占领新的区域时国家稳定度增加,但是失去区域时国家稳定度也会减少
            21	部队的最高士气不再由国家稳定度决定
            22 战争支持度

            */


            Array<XmlReader.Element> pEs=game.gameConfig.getCONFIG_CHIEFBUFF().e.getChildrenByName("chiefBuff");
            int chiefType=0;
            for(int i=0;i<pEs.size;i++){
                XmlReader.Element pE=pEs.get(i);
                int chiefId=getChiefValue(pE.getInt("type",0));
                if(chiefId==pE.getInt("index",-1)){
                    varHarmonyChange+=(pE.getInt("harmonyChange",0));
                    varLegionStabilityChange+=(pE.getInt("stabilityChange",0));
                    varMoneyEfficiencyChange+=(pE.getInt("moneyChange",0));
                    int effect=pE.getInt("specialEffectValue",0);
                    switch (pE.getInt("specialEffectId",0)){
                        case 1://  1	区域稳定度{0}
                            vaAreaStabilityChange+=effect;
                            break;
                        case 2://  2	在我方区域休整时有{0}%几率获得额外经验,食物消耗{0}%
                            unitGetExtraSkillChance =effect;
                            varUnitFoodCoastChange+=effect;
                            break;
                        case 3://   3	部队修整恢复效率{0}%,食物消耗{0}%
                            varPopulationChange+=effect;
                            varUnitFoodCoastChange+=effect;
                            break;
                        case 4://   4	非金钱类收入{0}%
                            varResEfficiencyChange+=effect;
                            break;
                        case 5://   5	与邻国关系度{0}
                            varBorderCountryFavor+=effect;
                            break;
                        case 6://   6	有{0}%机率永久增加1点资源额外收入属性
                            varAddExtraResChance+=effect;
                            break;
                        case 7://   7	有{0}%机率永久增加1点额外人口
                            varAddExtraPopChance+=effect;
                            break;
                        case 8://   8	部队恢复效率{0}%
                            varUnitRestoreEfficiencyChange+=effect;
                            break;
                        case 22:
                            varWarSupportChange+=effect;
                            break;
                    }
                }
            }
        }


        public int getChiefValue(int ChiefType){
            switch (ChiefType){
                case 0: return playerHarmony;//和谐度
                case 1: return powerStrategy;//1=国家政体
                case 2: return nationalIdeas;//2=国家理念
                case 3: return playerTax;//3=国家税率
                case 4: return militaryBudget;//4=军事预算
                case 5: return foreignPolicy;//5=外交方针
                case 6: return foreignBudget;//6=外交预算
                case 7: return trainingSystem;//7=训练制度
                case 8: return theDraft;//8=征兵法案
                case 9: return buildLaw;//9=建设法案
                case 10: return industrialControl;//10=工业控制
                case 11: return tradeBills;//11=贸易法案
                case 12: return foreignInvestment;//12=外资法规
                case 13: return newsSystem;//13=新闻制度
                case 14: return stabilisationPolicy;//14=维稳政策
                case 15: return laborLaw;//15=劳动法案
                case 16: return safetyRegulations;//16=安全规章
                case 17: return educationPolicy;//17=教育政策
                case 18: return securitySpend;//18=保障支出
                case 19: return officialSalary;//19=官员工资
                case 20: return officialSlavery;//20=奴隶许可
            }
            return 0;
        }

        public int getChiefBuffId(int ChiefType){
            int chiefIndex=getChiefValue(ChiefType);
            XmlReader.Element xmlE=game.gameConfig.getChiefBuffXmlE(ChiefType,chiefIndex);
            if(xmlE!=null){
                return xmlE.getInt("id",-1);
            }
            return -1;
        }

        public void setChiefValue(int ChiefId,int value){
            switch (ChiefId){
                case 0: playerHarmony=value;//和谐度
                case 1: powerStrategy =value;//1=国家政体
                case 2: nationalIdeas=value;//2=国家理念
                case 3: playerTax=value;//3=国家税率
                case 4: militaryBudget=value;//4=军事预算
                case 5: foreignPolicy=value;//5=外交方针
                case 6: foreignBudget=value;//6=外交预算
                case 7: trainingSystem=value;//7=训练制度
                case 8: theDraft=value;//8=征兵法案
                case 9: buildLaw=value;//9=建设法案
                case 10: industrialControl=value;//10=工业控制
                case 11: tradeBills=value;//11=贸易法案
                case 12: foreignInvestment=value;//12=外资法规
                case 13: newsSystem=value;//13=新闻制度
                case 14: stabilisationPolicy=value;//14=维稳政策
                case 15: laborLaw=value;//15=劳动法案
                case 16: safetyRegulations=value;//16=安全规章
                case 17: educationPolicy=value;//17=教育政策
                case 18: securitySpend=value;//18=保障支出
                case 19: officialSalary=value;//19=官员工资
                case 20: officialSlavery=value;//20=奴隶许可
            }
        }

        /*chiefName_9_0=非军事化建设   9民用建筑卡 10军用建筑卡
                chiefName_9_1=民用设施建设
                chiefName_9_2=初步军事建设
                chiefName_9_3=部分军事建设
                chiefName_9_4=战时经济*/
        public int getBuildTypeByBuildLaw() {
            switch (getBuildLaw()) {
                case 0:return 9;
                case 1:if(ComUtil.ifGet(80)){return 9;}else{return 10;}
                case 2:if(ComUtil.ifGet(60)){return 9;}else{return 10;}
                case 3:if(ComUtil.ifGet(40)){return 9;}else{return 10;}
                case 4:return 10;
            }
            return 9;
        }

        public void exchangeForRound() {
            chiefData.playerHarmony+=chiefData.varHarmonyChange;

            playerLegionData.addStability(chiefData.varLegionStabilityChange);
            if(ComUtil.ifGet(chiefData.varAddExtraResChance)){
                playerLegionData.addExtraRes(ComUtil.getRandom(1,6),1);
            }
            int educationPolicy=chiefData.getEducationPolicy();
            switch (educationPolicy){
                case 0://仅精英受教育
                    if(chiefData.literacy<10){
                        chiefData.addLiteracy(ComUtil.getRandom(-5,3));
                    }
                    break;
                case 1://最低教育投资
                    if(chiefData.literacy<20) {
                        chiefData.addLiteracy(ComUtil.getRandom(-3, 4));
                    }
                    break;
                case 2://少量教育投资
                    if(chiefData.literacy<40){
                        chiefData.addLiteracy(ComUtil.getRandom(-1,5));
                    }
                    break;
                case 3://大量教育投资
                    if(chiefData.literacy<60){
                        chiefData.addLiteracy(ComUtil.getRandom(1,6));
                    }
                    break;
                case 4://最高教育投资
                    if(chiefData.literacy<100){
                        chiefData.addLiteracy(ComUtil.getRandom(2,7));
                    }
                    break;
            }


            if(ComUtil.ifGet(chiefData.varAddExtraPopChance)){
                playerLegionData.addExtraPopulation(1);
            }
        }

        public String getChiefInfoStr(int chiefType) {
            Array<XmlReader.Element> pEs=game.gameConfig.getCONFIG_CHIEFBUFF().e.getChildrenByName("chiefBuff");
            int chiefValue=getChiefValue(chiefType);
            XmlReader.Element xE=null;
            for(int i=0;i<pEs.size;i++){
                XmlReader.Element pE=pEs.get(i);
                if(pE.getInt("type",0)==chiefType&&pE.getInt("index")==chiefValue){
                    xE=pE;
                    break;
                }
            }
            if(xE!=null){
                int  v=xE.getInt("specialEffectValue",0);
                String str=game.gameMethod.getStrValue("chief_effect_"+chiefType+"_"+chiefValue,ComUtil.getSymbolNumer(v),v-game.resGameConfig.cityStabilityChangeLimit,v+game.resGameConfig.cityStabilityChangeLimit);
                return str;
            }
            return "";
        }
    }

    public void initChief() {
        if(masterData.ifChief==0||chiefData==null){
            masterData.ifChief=1;
            if(chiefData==null){
                chiefData=new ChiefData();
            }
        }
        LegionData l=getPlayerLegionData();
        XmlReader.Element cc=game.gameConfig.getCONFIG_CHIEFCONFIG(stageId).getElementById(l.countryId);
        if(cc==null){
            cc=game.gameConfig.getCONFIG_CHIEFCONFIG(stageId).getElementById(0);
        }
        chiefData.playerHarmony=cc.getInt("playerHarmony");
        chiefData.powerStrategy =cc.getInt("powerStrategy");
        chiefData.nationalIdeas=cc.getInt("nationalIdeas");
        chiefData.playerTax=cc.getInt("playerTax");
        chiefData.militaryBudget=cc.getInt("militaryBudget");
        chiefData.foreignPolicy=cc.getInt("foreignPolicy");
        chiefData.foreignBudget=cc.getInt("foreignBudget");
        chiefData.trainingSystem=cc.getInt("trainingSystem");
        chiefData.theDraft=cc.getInt("theDraft");
        chiefData.buildLaw=cc.getInt("buildLaw");
        chiefData.industrialControl=cc.getInt("industrialControl");
        chiefData.tradeBills=cc.getInt("tradeBills");
        chiefData.foreignInvestment=cc.getInt("foreignInvestment");
        chiefData.newsSystem=cc.getInt("newsSystem");
        chiefData.stabilisationPolicy=cc.getInt("stabilisationPolicy");
        chiefData.laborLaw=cc.getInt("laborLaw");
        chiefData.safetyRegulations=cc.getInt("safetyRegulations");
        chiefData.educationPolicy=cc.getInt("educationPolicy");
        chiefData.securitySpend=cc.getInt("securitySpend");
        chiefData.officialSalary=cc.getInt("officialSalary");
        chiefData.officialSlavery=cc.getInt("officialSlavery");
        chiefData.setLiteracy(cc.getInt("literacy",10));
        chiefData.warSupport=cc.getInt("warSupport");
    }

    //初始化设置
    public void initConquestForSynchronouMapByMapBin() {
        int age=getAge();
        initAllBuildData(age);
        if(generalIDatas.size==0){
            int generalIndex=0;
            GeneralData g=new GeneralData();
            //设置情报官
            g.setGeneralId(0);g.setState(0);
            generalIDatas.put(g.getGeneralIndex(),g);
        }

        XmlReader.Element defStage=game.gameConfig.getDEF_STAGE().getElementById(game.getStageId());
        //初始化将军
        createInitUnit(3+getAge());
        for(LegionData l:legionDatas){
            createGeneralUnit(l.getLegionIndex(),0);
        }
        initCardNumAndCost();
        //初始化兵种设置

        //执行三回合 ifInitRound
        updAllRTask();
        resetZone();
    }


    public int getCampForPlayer(int li){
        return getCampForPlayer(getLegionDataByLi(li));
    }


    //获得阵营 -1无势力 0中立偏敌对 1自己 2盟友  3敌人 4附属国 5宗主国 6中立偏友好
    public int getCampForPlayer(LegionData l) {
        LegionData pl=getPlayerLegionData();
        if(l==null||pl==null){
            return -1;
        }else if(ifNeutralCampByRegion(l)){
            return -1;
        }
        //  LegionData l= getLegionDataByHexagon(regionId);


        if(l.getLegionIndex()==pl.getLegionIndex()){
            return 1;
        }else if(l.getLegionIndex()==pl.getSuzerainLi()){
            return 5;
        }else if(pl.getLegionIndex()==l.getSuzerainLi()){
            return 4;
        } else if(ifAllyByLi(l.getLegionIndex(),masterData.getPlayerLegionIndex())){
            return 2;
        }else {
            if(foreignDatas==null||foreignDatas.size==0){
                if(pl.getInternIndex()!=l.getInternIndex()&&l.getLegionIndex()!=0 ){
                    return 3;
                }else{
                    return -1;
                }
            }else {
                ForeignData f = getForeignData(l.getLegionIndex());
                if (f.getFavorValue() > 50) {
                    return 6;
                } else if (f.getFavorValue() > 30) {
                    return 0;
                } else {
                    return 3;
                }
            }
        }
    }

    public boolean getIfNeedDrawViewMap(){
        return ifNeedDrawViewMap;
    }

    public int getLastUnitHexagon(){
        return lastUnitHexagon;
    }


    //更新hexagon的虚拟属性,更新两遍
    public  void updConnectHexagonVirAttribute(int regionId){
        //重绘区域
        ConnectData c=getConnectData(regionId);
        if(c!=null){
            for(int i=0;i<c.getRegionConnectCount();i++){
                updHexagonVirAttributeByRegion( c.getConnectValue(i+1,0));
            }
            for(int i=0;i<c.getRegionConnectCount();i++){
                updHexagonVirAttributeByRegion( c.getConnectValue(i+1,0));
            }
        }
    }

    private  void updHexagonVirAttributeByRegion(int regionId){
        IntArray hs= regionHexagonMap.get(regionId);
        if(hs==null){
            return;
        }
        IntArray s1=game.tempUtil.getTempIntArray();
        for(int i=0;i<hs.size;i++){
            Fb2Map.MapHexagon h=getHexagonData(hs.get(i));
            if(h!=null){
                h.updHexagonBorderAttribute();
                if(h.ifMoreCountryBorder){
                    s1.add(h.getHexagonIndex());
                }
            }
        }
        for(int i=0;i<s1.size;i++){
            int tId=s1.get(i);
            for(int d=1;d<=6;d++){
                int id=getBorderIdByDirect(tId,d);
                Fb2Map.MapHexagon h=getHexagonData(id);
                if(h!=null){
                    h.updHexagonBorderAttribute();
                }
            }
        }
        game.tempUtil.disposeTempIntArray(s1);
    }

    public void resetAllBuildType(){
       /* Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
        while (it.hasNext()) {
            IntMap.Entry<BuildData> c = it.next();
            BuildData b=c.value;*/
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            b.resetBuildType();
            if(b.buildActor!=null){
                b.updActor();
            }
        }
    }

    public void initAllBuildData(int extralLv){
        //初始化城市等级设置
       /* Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
        while (it.hasNext()) {
            BuildData b = it.next().value;*/
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if(b!=null){
                b.updBuildData(extralLv);
            }
        }
    }

    public void tempVoid(){
        Array<Fb2Map.MapHexagon> newHexagonDatas=new Array<>();
        int index=masterData.getWidth()*masterData.getHeight();
        for(int i=0;i<index;i++){
            newHexagonDatas.add(hexagonDatas.get(i));
        }
        this.hexagonDatas=newHexagonDatas;
    }


    //重置地图信息 当地图底图发生变化时,调用该方法
    public void resetMapData(boolean ifName){

        //int age=getAge();
        Fb2Map mapBin=game.getGameFramework().getMapDaoByMapId(masterData.mapId);
        if(mapBin==null||(mapBin!=null&&mapBin.mapHexagons.size!=hexagonDatas.size)){
            return;
        }
        int index=0;
        //同步hexagonData的信息
        for (Fb2Map.MapHexagon m : mapBin.mapHexagons) {
            if(m.getRegionId()==index){
                Fb2Map.MapHexagon hexagonData = hexagonDatas.get(index);
                hexagonData.setLegionIndexValue(getLegionIndexByRegion(m.getRegionId()));
            }
            index++;
        }

        index=0;
        /*for (MapBinDAO.MapHexagon m : mapBin.mapHexagons) {
            MapBinDAO.MapHexagon hexagonData = hexagonDatas.get(index);
            hexagonData.setBlockType(m.getBlockType());
            hexagonData.setBackTile(m.getBackTile());
            hexagonData.setBackIdx(m.getBackIdx());
            hexagonData.setBackRefX(m.getBackRefX());
            hexagonData.setBackRefY(m.getBackRefY());
            hexagonData.setForeTile(m.getForeTile());
            hexagonData.setForeIdx(m.getForeIdx());
            hexagonData.setForeRefX(m.getForeRefX());
            hexagonData.setForeRefY(m.getForeRefY());
            hexagonData.setTilePass(m.getTilePass());
            hexagonData.setIfCoast(m.ifCoast);
            hexagonData.setRegionId(m.getRegionId());
            hexagonData.setfClimateId(0);//m.getTempClimateId()
            hexagonData.setHexagonIndex(index);
            //  hexagonData.setLegionIndex(0);
            hexagonData.setIfFog(0);
            hexagonData.setfClimateZone(0);
            index++;
        }*/
        initRegionHexagonMapTIA1();
        initSRRegionMapTIA1();

        if(ifName){

            //同步region
            IntMap<BuildData> buildNameOs=new IntMap();
          /*  Iterator<IntMap.Entry<BuildData>> itB = buildRDatas.iterator();
            while (itB.hasNext()) {
                BuildData build=itB.next().value;*/
            for(int bi=0;bi<buildRDatas.size();bi++) {
                BuildData b=buildRDatas.getByIndex(bi);
                if(b!=null&&b.getBuildName()>0){
                    buildNameOs.put(b.getBuildName(),b);
                }
            }


            ZHIntMap<BuildData> buildRDatas =new ZHIntMap<>();
            for(int i=0;i<hexagonDatas.size;i++){
                Fb2Map.MapHexagon h=hexagonDatas.get(i);
                if(h.getRegionId()==i){
                    BuildData b=getBuildDataByRegion(h.getRegionId());
                    int areaId=-1;
                    Fb2Map.MapRegion regionData=mapBin.getMapRegion(h.getRegionId());
                    if(regionData!=null){
                        areaId=regionData.getAreaId();
                    }else {
                        areaId=-1;
                    }
                   /* if(areaId==121){
                        int sdf=0;
                    }*/
                    if(b!=null){
                        if(b.getRegionId()==b.getHexagonData().getRegionId()){
                            b.resetBuildType();
                            b.setBuildIndex(buildRDatas.size());
                        }
                        if(regionData!=null){
                            b.setDevelopLv(regionData.getDepLv()+getAge());
                            b.setOilLv(regionData.getOilLv()+getAge());
                            b.setMineralLv(regionData.getMineralLv()+getAge());
                            b.setFoodLvNow(regionData.getFoodLv()+getAge());
                        }
                    }else if(buildNameOs.containsKey(areaId)) {
                        b = buildNameOs.get(mapBin.getMapbin().get(h.getRegionId()).getregionAreaId());
                        if(b.isCapital()){
                            b.getLegionData().setCapitalId(h.getRegionId());
                        }
                        b.setRegionId(h.getRegionId());
                        b.resetBuildType();
                        b.setBuildIndex(buildRDatas.size());
                        if(regionData!=null){
                            b.setDevelopLv(regionData.getDepLv()+getAge());
                            b.setOilLv(regionData.getOilLv()+getAge());
                            b.setMineralLv(regionData.getMineralLv()+getAge());
                            b.setFoodLvNow(regionData.getFoodLv()+getAge());
                        }
                    }else {//重新生成build
                        b = new BuildData();
                        b.initBuildData();
                        b.setRegionId(h.getRegionId());
                        b.setBuildIndex(buildRDatas.size());
                        b.resetBuildType();
                        b.setLegionIndex(getLegionIndexByRegion(h.getRegionId()));
                        if(b.getBuildType()!=2) {
                            b.setCityLvNow(mapBin.getMapbin().get(b.getRegionId()).getRegionDepLv());
                        }
                        // b.setDevelopLv(ComUtil.limitValue(b.getCityLvNow()*2-ComUtil.getRandom(0,1),1,10));
                        if(regionData!=null){
                            b.setDevelopLv(regionData.getDepLv()+getAge());
                            b.setOilLv(regionData.getOilLv()+getAge());
                            b.setMineralLv(regionData.getMineralLv()+getAge());
                            b.setFoodLvNow(regionData.getFoodLv()+getAge());
                        }
                        b.setBuildName(mapBin.getMapbin().get(b.getRegionId()).getregionAreaId());
                        if (b.buildType == 2) {
                            b.setBuildWonder(0);
                        }else if (b.buildType == 1) {
                            b.setBuildWonder(3);//1金2木3水4火5土
                        } else {
                            int buildV = mapBin.getMapbin().get(b.getRegionId()).getRegionMineralLv();
                            if (buildV == 2 || buildV == 5) {
                                if (ComUtil.ifGet(70)) {
                                    b.setBuildWonder(4);
                                } else {
                                    b.setBuildWonder(5);
                                }
                            } else if (buildV == 1 || buildV == 4) {
                                if (ComUtil.ifGet(80)) {
                                    b.setBuildWonder(1);
                                } else {
                                    b.setBuildWonder(2);
                                }
                            } else if (buildV == 3) {
                                b.setBuildWonder(3);
                            } else if (buildV == 0) {
                                buildV = mapBin.getMapbin().get(b.getRegionId()).getRegionDepLv();
                                if (buildV > 4) {
                                    b.setBuildWonder(1);
                                } else if (buildV > 2 || b.buildName != 0) {
                                    if (ComUtil.ifGet(70)) {
                                        b.setBuildWonder(4);
                                    } else {
                                        b.setBuildWonder(5);
                                    }
                                } else {
                                    b.setBuildWonder(2);
                                }
                            }
                        }
                    }
                    if(mapBin.getMapbin().get(b.getRegionId())!=null){
                        b.setStrategicRegion(mapBin.getMapbin().get(b.getRegionId()).getRegionStrategicRegion());
                        b.setClimateZone(mapBin.getMapbin().get(b.getRegionId()).getRegionClimatZone());
                    }
                    h.setLegionIndexValue(b.getLegionIndex());
                    b.initVirAttribute();
                    buildRDatas.put(b.getRegionId(),b);
                }
            }
            this.buildRDatas=buildRDatas;
        }else{

            //同步region
            IntMap<BuildData> buildRegionOs=new IntMap();
           /* Iterator<IntMap.Entry<BuildData>> itB = buildRDatas.iterator();
            while (itB.hasNext()) {
                BuildData build=itB.next().value;*/
            for(int bi=0;bi<buildRDatas.size();bi++) {
                BuildData build=buildRDatas.getByIndex(bi);
                if(build!=null&&build.getBuildName()>0){
                    buildRegionOs.put(build.getRegionId(),build);
                }
            }


            ZHIntMap<BuildData> buildRDatas =new ZHIntMap<>();
            for(int i=0;i<hexagonDatas.size;i++){
                Fb2Map.MapHexagon h=hexagonDatas.get(i);
                if(h.getRegionId()==i){
                    BuildData b=getBuildDataByRegion(h.getRegionId());
                    int region=-1;
                    if(mapBin.getMapbin().get(h.getRegionId())!=null){
                        region=h.getRegionId();
                    }else {
                        region=-1;
                    }
                    Fb2Map.MapRegion regionData=mapBin.getMapRegion(h.getRegionId());
                    if(b!=null){
                        if(b.getRegionId()==b.getHexagonData().getRegionId()){
                            b.resetBuildType();
                            b.setBuildIndex(buildRDatas.size());
                            b.setBuildName(mapBin.getMapbin().get(b.getRegionId()).getregionAreaId());
                        }
                        if(regionData!=null){
                            b.setDevelopLv(regionData.getDepLv()+getAge());
                            b.setOilLv(regionData.getOilLv()+getAge());
                            b.setMineralLv(regionData.getMineralLv()+getAge());
                            b.setFoodLvNow(regionData.getFoodLv()+getAge());
                        }
                    }else if(buildRegionOs.containsKey(region)) {
                        b = buildRegionOs.get(h.getRegionId());
                        if(b.isCapital()){
                            b.getLegionData().setCapitalId(h.getRegionId());
                        }
                        b.setBuildName(mapBin.getMapbin().get(b.getRegionId()).getregionAreaId());
                        b.resetBuildType();
                        b.setBuildIndex(buildRDatas.size());
                        if(regionData!=null){
                            b.setDevelopLv(regionData.getDepLv()+getAge());
                            b.setOilLv(regionData.getOilLv()+getAge());
                            b.setMineralLv(regionData.getMineralLv()+getAge());
                            b.setFoodLvNow(regionData.getFoodLv()+getAge());
                        }
                    }else {//重新生成build
                        b = new BuildData();
                        b.initBuildData();
                        b.setRegionId(h.getRegionId());
                        b.setBuildIndex(buildRDatas.size());
                        b.resetBuildType();
                        b.setLegionIndex(getLegionIndexByRegion(h.getRegionId()));
                        if(b.getBuildType()!=2) {
                            b.setCityLvNow(mapBin.getMapbin().get(b.getRegionId()).getRegionDepLv());
                        }
                        // b.setDevelopLv(ComUtil.limitValue(b.getCityLvNow()*2-ComUtil.getRandom(0,1),1,10));
                        b.setBuildName(mapBin.getMapbin().get(b.getRegionId()).getregionAreaId());
                        if(regionData!=null){
                            b.setDevelopLv(regionData.getDepLv()+getAge());
                            b.setOilLv(regionData.getOilLv()+getAge());
                            b.setMineralLv(regionData.getMineralLv()+getAge());
                            b.setFoodLvNow(regionData.getFoodLv()+getAge());
                        }
                        if (b.buildType == 2) {
                            b.setBuildWonder(0);
                        }else if (b.buildType == 1) {
                            b.setBuildWonder(3);//1金2木3水4火5土
                        } else {
                            int buildV = mapBin.getMapbin().get(b.getRegionId()).getRegionMineralLv();
                            if (buildV == 2 || buildV == 5) {
                                if (ComUtil.ifGet(70)) {
                                    b.setBuildWonder(4);
                                } else {
                                    b.setBuildWonder(5);
                                }
                            } else if (buildV == 1 || buildV == 4) {
                                if (ComUtil.ifGet(80)) {
                                    b.setBuildWonder(1);
                                } else {
                                    b.setBuildWonder(2);
                                }
                            } else if (buildV == 3) {
                                b.setBuildWonder(3);
                            } else if (buildV == 0) {
                                buildV = mapBin.getMapbin().get(b.getRegionId()).getRegionDepLv();
                                if (buildV > 4) {
                                    b.setBuildWonder(1);
                                } else if (buildV > 2 || b.buildName != 0) {
                                    if (ComUtil.ifGet(70)) {
                                        b.setBuildWonder(4);
                                    } else {
                                        b.setBuildWonder(5);
                                    }
                                } else {
                                    b.setBuildWonder(2);
                                }
                            }
                        }
                    }
                    if(mapBin.getMapbin().get(b.getRegionId())!=null){
                        b.setStrategicRegion(mapBin.getMapbin().get(b.getRegionId()).getRegionStrategicRegion());
                        b.setClimateZone(mapBin.getMapbin().get(b.getRegionId()).getRegionClimatZone());
                    }
                    h.setLegionIndexValue(b.getLegionIndex());
                    b.initVirAttribute();
                    buildRDatas.put(b.getRegionId(),b);
                }
            }
            this.buildRDatas=buildRDatas;
        }
        resetZone();
    }


    public void btlInitForBlankConquest(){
        strategicDatas.clear();
        generalIDatas.clear();
        facilityHDatas.clear();
        nulcleIDatas.clear();
        airIDatas.clear();
        armyHDatas.clear();
        tradeDatas.clear();
        // resetMapData(false);
    }

    public MainGame getGame(){
        return game;
    }

    //添加触发过的事件
    public void addTriggerScriptIndex(int v){
        if(!scriptIDatas.contains(v)){
            scriptIDatas.add(v);
        }
    }


    public boolean addTriggerHEventIndex(int v){
        if(!hEventIDatas.contains(v)){
            hEventIDatas.add(v);
            return true;
        }
        return false;
    }

    public void checkResrource(){
        for(int i=0;i<legionDatas.size;i++) {
            LegionData l = legionDatas.get(i);
            if (l.getMoney() < 500) {
                l.setMoney(500);
            }
            if (l.getIndustry() < 250) {
                l.setIndustry(250);
            }
            if (l.getFood() < 1000) {
                l.setFood(1000);
            }
            if (l.getTech() < 125) {
                l.setTech(125);
            }
            if(l.getMineral()<250){
                l.setMineral(250);
            }
            if(getAge()>0&&l.getOil()<800){
                l.setOil(800);
            }
        }
    }

    public void checkCapital(){
        for(int i=0;i<legionDatas.size;i++){
            LegionData l=legionDatas.get(i);
            BuildData b=l.getCapital();
            if(b!=null){
                int lv=getAge()+1;
                if(b.getCityLvNow()<lv){
                    b.setCityLvNow(lv);
                }
                if(b.getCityTax()<50){
                    b.setCityTax(50);
                }
                if(b.getCityStability()<50){
                    b.setCityStability(50);
                }
                if(b.getCultureLvNow()<lv){
                    b.setCultureLvNow(lv);
                }
                if(b.getIndustryLvNow()<lv){
                    b.setIndustryLvNow(lv);
                }
                if(b.getFoodLvNow()<lv){
                    b.setFoodLvNow(lv);
                }
                if(b.getTechLvNow()<lv){
                    b.setTechLvNow(lv);
                }
                if(b.getDefenceLvNow()<lv){
                    b.setDefenceLvNow(lv);
                }
                if(b.getArmyLvNow()<lv){
                    b.setArmyLvNow(lv);
                }
            }
        }
    }


    public void logAllCountryBorder(){
        IntArray a=game.tempUtil.getTempIntArray();
        for(int i=0;i<hexagonDatas.size;i++){
            Fb2Map.MapHexagon h=hexagonDatas.get(i);
            if(!a.contains(h.countryBorder)){
                a.add(h.countryBorder);
            }
        }
        Gdx.app.log("logAllCountryBorder",a.toString());
        game.tempUtil.disposeTempIntArray(a);
    }


    //乞求合并  稳定度与税率减半,与签约国所属阵营变更为中立,脱离原有阵营并与之敌对,附属国独立或变为签约国的附属,如果稳定度过低将可能爆发叛乱
    //bl弱国 tl强国
    public boolean legion_BegPeace(LegionData begLegion,LegionData targetLegion){
        if(ifAllyByLi(begLegion.getLegionIndex(),targetLegion.getLegionIndex())){
            return false;
        }
        int tax=ComUtil.getRandom(begLegion.getTaxBonus()/3,begLegion.getTaxBonus());
        int stability=ComUtil.getRandom(begLegion.getStability()/3,begLegion.getStability());
        begLegion.reduceTaxBonus(tax);
        begLegion.reduceStability(stability);
        targetLegion.addTaxBonus(tax);
        targetLegion.addStability(stability);
        int round=ComUtil.limitValue(masterData.getRoundForYear()*2,5,20);

        if(begLegion.getCapital()==null||begLegion.getCapital().getLegionIndex()!=begLegion.getLegionIndex()){
            resetCapital(begLegion);
        }


        ForeignData fs=getForeignData(begLegion.getLegionIndex(),targetLegion.getLegionIndex());
        fs.setForeignType(1);
        fs.setForeignValue(round);
        int blIntern=begLegion.getInternIndex();
        int tlForce=targetLegion.getAllForce();

        for(int i=0;i<legionDatas.size;i++){
            LegionData l=legionDatas.get(i);
            if(l.getLegionIndex()==begLegion.getLegionIndex()){
                continue;
            }
            if(l.getSuzerainLi()==begLegion.getLegionIndex()&&ComUtil.ifGet(100-begLegion.getStability())){
                if(ComUtil.ifGet(l.getStability()/2)){
                    legion_Independent(l);
                }else{
                    l.setSuzerainLi(targetLegion.getLegionIndex());
                }
            }

            //原加盟国退出战争
            if(l.getLegionIndex()!=targetLegion.getLegionIndex()&&l.getLegionIndex()!=begLegion.getLegionIndex()&&l.getInternIndex()==blIntern) {
                ForeignData f = getForeignData(l.getLegionIndex(), targetLegion.getLegionIndex());
                if (f.getForeignType()==-1&&ComUtil.ifGet(f.getRealFavor())&&f.getDiplomaticRecognition() != -1 && f.getDiplomaticAttitude() != 3 && (!l.borderLegionIndexs.contains(targetLegion.getLegionIndex()) || l.getAllForce() < tlForce)) {
                    f.setForeignType(1);
                    f.setForeignValue(round);
                    if (begLegion.isPlayer() || targetLegion.isPlayer()) {
                        addPromptData(game.gameMethod.getPromptStrT(91, 0),
                                game.gameMethod.getPromptStr(91, 1, begLegion.legionName, targetLegion.legionName, l.legionName),
                                game.gameMethod.getPromptStr(91, 2), l.getLegionIndex(), targetLegion.getLegionIndex(),false);
                    }
                }

            }

            if(l.getInternIndex()==targetLegion.getInternIndex()){//缓和敌对国关系
                ForeignData f=getForeignData(l.getLegionIndex(),begLegion.getLegionIndex());
                if(f.getFavorValue()<30){
                    f.setFavorValue(ComUtil.getRandom(35,50));
                    f.setForeignType(1);
                    f.setForeignValue(round);
                }
            }
            //与原盟国关系紧张
            if(l.getLegionIndex()!=targetLegion.getLegionIndex()&&l.getLegionIndex()!=begLegion.getLegionIndex()&&ifAllyByLi(l.getLegionIndex(),begLegion.getLegionIndex())){
                ForeignData f=getForeignData(l.getLegionIndex(),begLegion.getLegionIndex());
                if(f.getFavorValue()>70){
                    f.setFavorValue(ComUtil.getRandom(35,50));
                    f.setForeignType(0);
                    f.setForeignValue(0);
                }
            }


            if(begLegion.getInternIndex()==begLegion.getLegionIndex()){//如果求和国是盟主
                if(l.getInternIndex()==begLegion.getInternIndex()){
                    l.setInternIndex(l.getLegionIndex());
                }
            }
        }
        begLegion.setInternIndex(begLegion.getLegionIndex());
        if(begLegion.getStability()<game.resGameConfig.rebellionChance){
            legion_Riot(begLegion,targetLegion,null);
        }
        if(begLegion.isPlayer()){
            addPromptData (game.gameMethod.getPromptStrT(68,0),
                    game.gameMethod.getPromptStr(68,1,targetLegion.legionName),
                    game.gameMethod.getPromptStr(68,2,targetLegion.legionName),begLegion.getLegionIndex(),targetLegion.getLegionIndex(),true);
        }else if(targetLegion.isPlayer()){
            addPromptData(game.gameMethod.getPromptStrT(69,0),
                    game.gameMethod.getPromptStr(69,1,begLegion.legionName),
                    game.gameMethod.getPromptStr(69,2,begLegion.legionName,targetLegion.legionName),targetLegion.getLegionIndex(),begLegion.getLegionIndex(),true);
        }else if(begLegion.ifPlayerAlly()||targetLegion.ifPlayerAlly()){
            addPromptData(game.gameMethod.getPromptStrT(70,0),
                    game.gameMethod.getPromptStr(70,1,begLegion.legionName,targetLegion.legionName),
                    game.gameMethod.getPromptStr(70,2,begLegion.legionName,targetLegion.legionName),targetLegion.getLegionIndex(),begLegion.getLegionIndex(),true);
        }
        return true;
    }
    public int getRealForgeinType(int legionIndex, int legionIndex2) {
        ForeignData f=getForeignData(legionIndex,legionIndex2);
        if(f!=null&&f.getForeignType()==0){
            return getForeignDegree(legionIndex,legionIndex2);
        }
        return f.getForeignType();
    }

    //委任处理决议
    //act  1接收援助 2提供资源 3要求结盟 4行为支持? 5加盟请求 6获得附属 7关系缓和 8要求投降 9获得支持? 10 调解关系? 11国家合并 13维护稳定度 16提高税收 17是否接受互保 18飞机移动 19核弹移动 20索要领土 21要求领土 28求和
    //-1作废  0正常 1接收援助 2提供资源 3要求结盟 4行为支持 5加盟请求 6获得附属 7关系缓和 8要求投降 9获得支持 10 调解关系 11国家合并 12条约触发 13提议稳定度 14提议自动内政 15 scrpit触发 16提高税率 17互不侵犯 18飞机移动 19弹头移动 20索要领土 21要求领土 22解散空军 23解散陆军 24升级玩家选中空中单位的武器等级 25 升级玩家选中陆军单位的武器等级 26选中空军单位上将 27选中陆军单位上将   28求和 29升级编制并扣钱  30升级单位能力 31升级飞机能力  32提高飞机物资 33邀请玩家

    //ForeignPolicy 0无 1苟存 2保守 3顺势 4平衡 5秩序 6强权
    /**
     * @param  p {@link #executeDiplomacySelected}
     */
    private void commissionResolution(PromptData p){
        /*if(p.getLi()!=masterData.playerLegionIndex&&p.getLi2()!=masterData.playerLegionIndex){
            return;
        }*/
        ForeignData f0=getForeignData(p.getLi(),p.getLi2());
        ForeignData f1=getForeignData(p.getLi());
        ForeignData f2=getForeignData(p.getLi2());
        LegionData pl=getPlayerLegionData();
        LegionData l1=getLegionDataByLi(p.getLi());
        LegionData l2=getLegionDataByLi(p.getLi());
        switch (getForeignPolicy()){
            case 0:
                break;
            case 1://苟存
                switch (p.getType()){
                    case 1://接受援助
                        if(f1==null){return;}
                        if(pl.getSuzerainLi()==l1.getLegionIndex()||l1.getSuzerainLi()==pl.getLegionIndex()){
                            if(pl.getSuzerainLi()==0){//玩家是宗主国
                                executeDiplomacySelected(p,false,false);
                            }else{//玩家是附属国
                                executeDiplomacySelected(p,true,false);
                            }
                        }else{
                            executeDiplomacySelected(p,true,false);
                        }
                        p.setType(-1);
                        break;
                    case 2://提供资源
                        if(f1==null){return;}
                        executeDiplomacySelected(p,true,false);
                        p.setType(-1);
                        break;
                    case 3://要求结盟
                        if(f1==null){return;}
                        if(pl.varRegionCount<l1.varRegionCount||pl.incomeMoney<l1.incomeMoney||pl.getAllArmySumNum()<l1.getAllArmySumNum()){
                            executeDiplomacySelected(p,true,true);
                        }else{
                            executeDiplomacySelected(p,false,true);
                        }
                        p.setType(-1);
                        break;
                    case 4://行为支持
                        if(f0==null){return;}
                        if(  (pl.varRegionCount<l1.varRegionCount||pl.incomeMoney<l1.incomeMoney||pl.getAllArmySumNum()<l1.getAllArmySumNum())&& (l2.varRegionCount<l1.varRegionCount&&l2.incomeMoney<l1.incomeMoney&&l2.getAllArmySumNum()<l1.getAllArmySumNum())    ){
                            executeDiplomacySelected(p,true,true);
                        }
                        p.setType(-1);
                        break;
                    case 5://加盟请求
                        if(f1==null){return;}
                        p.setType(-1);
                        break;
                    case 6://获得附属
                        if(f1==null){return;}
                        p.setType(-1);
                        break;
                    case 7://关系缓和
                        if(f1==null||f1.getForeignType()<0){return;}
                        executeDiplomacySelected(p,true,true);
                        p.setType(-1);
                        break;
                    case 9://获得支持
                        if(f0==null){return;}
                        if(l2.varRegionCount<l1.varRegionCount&&l2.incomeMoney<l1.incomeMoney&&l2.getAllArmySumNum()<l1.getAllArmySumNum()){
                            executeDiplomacySelected(p,true,true);
                        }
                        p.setType(-1);
                        break;
                    case 10://调解关系
                        if(f0==null){return;}
                        executeDiplomacySelected(p,true,true);
                        p.setType(-1);
                        break;
                    case 13://维护稳定度
                        executeDiplomacySelected(p,true,true);
                        p.setType(-1);
                        break;
                    case 16://提高税率
                        p.setType(-1);
                        executeDiplomacySelected(p,false,true);
                        break;
                    case 17://是否接受互保
                        if(f1==null){return;}
                        executeDiplomacySelected(p,true,true);
                        p.setType(-1);
                        break;
                    case 20://20索要领土
                        executeDiplomacySelected(p,false,true);
                        p.setType(-1);
                        break;
                    case 21://21被要求领土
                        executeDiplomacySelected(p,true,true);
                        p.setType(-1);
                        break;
                    case 28://28求和
                        executeDiplomacySelected(p,true,true);
                        p.setType(-1);
                        break;
                }
                break;
            case 2://保守
                switch (p.getType()){
                    case 1://接受援助
                        if(f1==null){return;}
                        if(pl.getSuzerainLi()==l1.getLegionIndex()||l1.getSuzerainLi()==pl.getLegionIndex()){
                            if(pl.getSuzerainLi()==0){//玩家是宗主国
                                executeDiplomacySelected(p,false,false);
                            }else{//玩家是附属国
                                executeDiplomacySelected(p,true,false);
                            }
                        }else{
                            executeDiplomacySelected(p,true,false);
                        }
                        p.setType(-1);
                        break;
                    case 2://提供资源
                        if(f0==null){return;}
                        if(f0.getRForgeinType()!=-1){
                            executeDiplomacySelected(p,true,false);
                        }else{
                            executeDiplomacySelected(p,false,false);
                        }
                        p.setType(-1);
                        break;
                    case 3://要求结盟
                        if(f0==null){return;}
                        p.setType(-1);
                        break;
                    case 4://行为支持
                        if(f0==null){return;}
                        p.setType(-1);
                        break;
                    case 5://加盟请求
                        if(f0==null){return;}
                        p.setType(-1);
                        break;
                    case 6://获得附属
                        if(f0==null){return;}
                        p.setType(-1);
                        break;
                    case 7://关系缓和
                        if(f1==null||f1.getForeignType()<0){return;}
                        executeDiplomacySelected(p,true,true);
                        p.setType(-1);
                        break;
                    case 9://获得支持
                        if(f0==null){return;}
                        p.setType(-1);
                        break;
                    case 10://调解关系
                        if(f0==null){return;}
                        executeDiplomacySelected(p,true,true);
                        p.setType(-1);
                        break;
                    case 13://维护稳定度
                        executeDiplomacySelected(p,true,true);
                        p.setType(-1);
                        break;
                    case 16://提高税率
                        executeDiplomacySelected(p,false,true);
                        p.setType(-1);
                        break;
                    case 17://是否接受互保
                        if(f1==null){return;}
                        executeDiplomacySelected(p,true,true);
                        p.setType(-1);
                        break;
                    case 20://20索要领土
                        executeDiplomacySelected(p,false,true);
                        p.setType(-1);
                        break;
                    case 21://21被要求领土
                        executeDiplomacySelected(p,true,true);
                        p.setType(-1);
                        break;
                    case 28://28求和
                        executeDiplomacySelected(p,true,true);
                        p.setType(-1);
                        break;
                }
                break;
            case 3://顺势
                switch (p.getType()){
                    case 1://接受援助
                        if(f1==null){return;}
                        executeDiplomacySelected(p,true,false);
                        p.setType(-1);
                        break;
                    case 2://提供资源
                        if(f0==null){return;}
                        if(pl.varRegionCount<l1.varRegionCount||pl.incomeMoney<l1.incomeMoney||pl.getAllArmySumNum()<l1.getAllArmySumNum()){
                            executeDiplomacySelected(p,true,false);
                        }else{
                            executeDiplomacySelected(p,false,false);
                        }
                        p.setType(-1);
                        break;
                    case 3://要求结盟
                        if(f0==null){return;}
                        if(pl.varRegionCount<l1.varRegionCount||pl.incomeMoney<l1.incomeMoney||pl.getAllArmySumNum()<l1.getAllArmySumNum()){
                            executeDiplomacySelected(p,true,true);
                        }else{
                            executeDiplomacySelected(p,false,true);
                        }
                        p.setType(-1);
                        break;
                    case 4://行为支持
                        if(f0==null){return;}
                        if(  (pl.varRegionCount<l1.varRegionCount||pl.incomeMoney<l1.incomeMoney||pl.getAllArmySumNum()<l1.getAllArmySumNum())&& (l2.varRegionCount<l1.varRegionCount&&l2.incomeMoney<l1.incomeMoney&&l2.getAllArmySumNum()<l1.getAllArmySumNum())    ){
                            executeDiplomacySelected(p,true,true);
                        }
                        p.setType(-1);
                        break;
                    case 5://加盟请求
                        if(f0==null){return;}
                        if(pl.varRegionCount<l1.varRegionCount||pl.incomeMoney<l1.incomeMoney||pl.getAllArmySumNum()<l1.getAllArmySumNum()){
                            executeDiplomacySelected(p,true,true);
                        }else{
                            executeDiplomacySelected(p,false,true);
                        }
                        p.setType(-1);
                        break;
                    case 6://获得附属
                        if(f0==null){return;}
                        executeDiplomacySelected(p,true,true);
                        p.setType(-1);
                        break;
                    case 7://关系缓和
                        if(f0==null){return;}
                        if(pl.varRegionCount<l1.varRegionCount||pl.incomeMoney<l1.incomeMoney||pl.getAllArmySumNum()<l1.getAllArmySumNum()){
                            executeDiplomacySelected(p,true,true);
                        }else{
                            executeDiplomacySelected(p,false,true);
                        }
                        p.setType(-1);
                        break;
                    case 9://获得支持
                        if(f0==null){return;}
                        if(l2.varRegionCount<l1.varRegionCount&&l2.incomeMoney<l1.incomeMoney&&l2.getAllArmySumNum()<l1.getAllArmySumNum()&&f1.getRForgeinType()!=-1){
                            executeDiplomacySelected(p,true,true);
                        }
                        p.setType(-1);
                        break;
                    case 10://调解关系
                        if(f0==null){return;}
                        if((pl.varRegionCount<l1.varRegionCount&&pl.incomeMoney<l1.incomeMoney&&pl.getAllArmySumNum()<l1.getAllArmySumNum())||(pl.varRegionCount<l2.varRegionCount&&pl.incomeMoney<l2.incomeMoney&&pl.getAllArmySumNum()<l2.getAllArmySumNum())){
                            executeDiplomacySelected(p,true,true);
                        }else{
                            executeDiplomacySelected(p,false,true);
                        }
                        p.setType(-1);
                        break;
                    case 13://维护稳定度
                        if(pl.getStability()<80){
                            executeDiplomacySelected(p,true,true);
                        }
                        p.setType(-1);
                        break;
                    case 16://提高税率
                        if(pl.getStability()>80){
                            executeDiplomacySelected(p,true,true);
                        }
                        p.setType(-1);
                        break;
                    case 17://是否接受互保
                        if(f1==null){return;}
                        if(pl.varRegionCount<l1.varRegionCount||pl.incomeMoney<l1.incomeMoney||pl.getAllArmySumNum()<l1.getAllArmySumNum()){
                            executeDiplomacySelected(p,true,true);
                        }else{
                            executeDiplomacySelected(p,false,true);
                        }
                        p.setType(-1);
                        break;
                    case 20://20索要领土
                        executeDiplomacySelected(p,(pl.varRegionCount>l1.varRegionCount||pl.incomeMoney>l1.incomeMoney||pl.getAllArmySumNum()>l1.getAllArmySumNum()),true);
                        p.setType(-1);
                        break;
                    case 21://21被要求领土
                        executeDiplomacySelected(p,(pl.varRegionCount<l1.varRegionCount||pl.incomeMoney<l1.incomeMoney||pl.getAllArmySumNum()<l1.getAllArmySumNum()),true);
                        p.setType(-1);
                        break;
                    case 28://28求和
                        executeDiplomacySelected(p,(pl.varRegionCount<l1.varRegionCount&&pl.incomeMoney<l1.incomeMoney&&pl.getAllArmySumNum()<l1.getAllArmySumNum()),true);
                        p.setType(-1);
                        break;
                }
                break;
            case 4://平衡
                switch (p.getType()){
                    case 1://接受援助
                        if(f1==null){return;}
                        if(pl.getSuzerainLi()==l1.getLegionIndex()||l1.getSuzerainLi()==pl.getLegionIndex()){
                            if(pl.getSuzerainLi()==0){//玩家是宗主国
                                executeDiplomacySelected(p,false,false);
                            }else{//玩家是附属国
                                executeDiplomacySelected(p,true,false);
                            }
                        }else{
                            executeDiplomacySelected(p,true,false);
                        }
                        p.setType(-1);
                        break;
                    case 2://提供资源
                        if(f0==null){return;}
                        if(f0.isAlly()){
                            executeDiplomacySelected(p,true,false);
                        }else{
                            executeDiplomacySelected(p,false,false);
                        }
                        p.setType(-1);
                        break;
                    case 3://要求结盟
                        if(f0==null){return;}
                        if(f0.getRForgeinType()!=-1){
                            executeDiplomacySelected(p,true,true);
                        }else{
                            executeDiplomacySelected(p,false,true);
                        }
                        p.setType(-1);
                        break;
                    case 4://行为支持
                        if(f0==null){return;}
                        if(f1.getRForgeinType()!=-1&&f2.getRForgeinType()<1){
                            executeDiplomacySelected(p,true,true);
                        }
                        p.setType(-1);
                        break;
                    case 5://加盟请求
                        if(f0==null){return;}
                        if(f0.getRForgeinType()!=-1){
                            executeDiplomacySelected(p,true,true);
                        }else{
                            executeDiplomacySelected(p,false,true);
                        }
                        p.setType(-1);
                        break;
                    case 6://获得附属
                        if(f0==null){return;}
                        executeDiplomacySelected(p,true,true);
                        p.setType(-1);
                        break;
                    case 7://关系缓和
                        if(f0==null){return;}
                        if(pl.varRegionCount<l1.varRegionCount||pl.incomeMoney<l1.incomeMoney||pl.getAllArmySumNum()<l1.getAllArmySumNum()){
                            executeDiplomacySelected(p,true,true);
                        }else{
                            executeDiplomacySelected(p,false,true);
                        }
                        p.setType(-1);
                        break;
                    case 9://获得支持
                        if(f0==null){return;}
                        if(f2.getRForgeinType()==1&&f1.getRForgeinType()!=-1){
                            executeDiplomacySelected(p,true,true);
                        }
                        p.setType(-1);
                        break;
                    case 10://调解关系
                        if(f0==null){return;}
                        if(f1.getRForgeinType()!=-1||f2.getRForgeinType()!=-1){
                            executeDiplomacySelected(p,true,true);
                        }else{
                            executeDiplomacySelected(p,false,true);
                        }
                        p.setType(-1);
                        break;
                    case 13://维护稳定度
                        if(pl.getStability()<80){
                            executeDiplomacySelected(p,true,true);
                        }
                        p.setType(-1);
                        break;
                    case 16://提高税率
                        if(pl.getStability()>80){
                            executeDiplomacySelected(p,true,true);
                        }
                        p.setType(-1);
                        break;
                    case 17://是否接受互保
                        if(f1==null){return;}
                        if(f1.getRForgeinType()!=-1){
                            executeDiplomacySelected(p,true,true);
                        }else{
                            executeDiplomacySelected(p,false,true);
                        }
                        p.setType(-1);
                        break;
                    case 20://20索要领土
                        executeDiplomacySelected(p,true,true);
                        p.setType(-1);
                        break;
                    case 21://21被要求领土
                        executeDiplomacySelected(p,false,true);
                        p.setType(-1);
                        break;
                    case 28://28求和
                        executeDiplomacySelected(p,false,true);
                        p.setType(-1);
                        break;
                }
                break;
            case 5://秩序
                switch (p.getType()){
                    case 1://接受援助
                        if(f1==null){return;}
                        if(pl.getSuzerainLi()==l1.getLegionIndex()||l1.getSuzerainLi()==pl.getLegionIndex()){
                            if(pl.getSuzerainLi()==0){//玩家是宗主国
                                executeDiplomacySelected(p,false,false);
                            }else{//玩家是附属国
                                executeDiplomacySelected(p,true,false);
                            }
                        }else{
                            executeDiplomacySelected(p,true,false);
                        }
                        p.setType(-1);
                        break;
                    case 2://提供资源
                        if(f0==null){return;}
                        if(f0.getRForgeinType()!=-1&&  (pl.varRegionCount>l1.varRegionCount||pl.incomeMoney>l1.incomeMoney||pl.getAllArmySumNum()>l1.getAllArmySumNum())){
                            executeDiplomacySelected(p,true,false);
                        }else{
                            executeDiplomacySelected(p,false,false);
                        }
                        p.setType(-1);
                        break;
                    case 3://要求结盟
                        if(f0==null){return;}
                        if(f0.getRForgeinType()!=-1&&  (pl.varRegionCount>l1.varRegionCount||pl.incomeMoney>l1.incomeMoney||pl.getAllArmySumNum()>l1.getAllArmySumNum())){
                            executeDiplomacySelected(p,true,true);
                        }else{
                            executeDiplomacySelected(p,false,true);
                        }
                        p.setType(-1);
                        break;
                    case 4://行为支持
                        if(f0==null){return;}
                        if(f1.getRForgeinType()!=-1&&(f2.getRForgeinType()==-1||  (l2.varRegionCount>l1.varRegionCount||l2.incomeMoney>l1.incomeMoney||l2.getAllArmySumNum()>l1.getAllArmySumNum()))){
                            executeDiplomacySelected(p,true,true);
                        }
                        p.setType(-1);
                        break;
                    case 5://加盟请求
                        if(f0==null){return;}
                        if(f0.getRForgeinType()!=-1&&  (pl.varRegionCount>l1.varRegionCount||pl.incomeMoney>l1.incomeMoney||pl.getAllArmySumNum()>l1.getAllArmySumNum())){
                            executeDiplomacySelected(p,true,true);
                        }else{
                            executeDiplomacySelected(p,false,true);
                        }
                        p.setType(-1);
                        break;
                    case 6://获得附属
                        if(f0==null){return;}
                        executeDiplomacySelected(p,true,true);
                        p.setType(-1);
                        break;
                    case 7://关系缓和
                        if(f0==null){return;}
                        if(f0.getRForgeinType()!=-1){
                            executeDiplomacySelected(p,true,true);
                        }else{
                            executeDiplomacySelected(p,false,true);
                        }
                        p.setType(-1);
                        break;
                    case 9://获得支持
                        if(f0==null){return;}
                        if(f2.getRForgeinType()==1&&f1.getRForgeinType()!=-1){
                            executeDiplomacySelected(p,true,true);
                        }
                        p.setType(-1);
                        break;
                    case 10://调解关系
                        if(f0==null){return;}
                        executeDiplomacySelected(p,true,true);
                        p.setType(-1);
                        break;
                    case 13://维护稳定度
                        if(pl.getStability()<90){
                            executeDiplomacySelected(p,true,true);
                        }
                        p.setType(-1);
                        break;
                    case 16://提高税率
                        if(pl.getStability()>90){
                            executeDiplomacySelected(p,true,true);
                        }
                        p.setType(-1);
                        break;
                    case 17://是否接受互保
                        if(f1==null){return;}
                        if(f1.getRForgeinType()!=-1){
                            executeDiplomacySelected(p,true,true);
                        }
                        p.setType(-1);
                        break;
                    case 20://20索要领土
                        executeDiplomacySelected(p,false,true);
                        p.setType(-1);
                        break;
                    case 21://21被要求领土
                        executeDiplomacySelected(p,false,true);
                        p.setType(-1);
                        break;
                    case 28://28求和
                        executeDiplomacySelected(p,true,true);
                        p.setType(-1);
                        break;
                }
                break;
            case 6://强权
                switch (p.getType()){
                    case 1://接受援助
                        if(f1==null){return;}
                        executeDiplomacySelected(p,true,false);
                        p.setType(-1);
                        break;
                    case 2://提供资源
                        if(f0==null){return;}
                        if(f0.isAlly()&&f0.getFavorValue()<50){
                            executeDiplomacySelected(p,true,false);
                        }else{
                            executeDiplomacySelected(p,false,false);
                        }
                        p.setType(-1);
                        break;
                    case 3://要求结盟
                        if(f0==null){return;}
                        if(f0.getRForgeinType()!=-1&&(pl.varRegionCount>l1.varRegionCount&&pl.incomeMoney>l1.incomeMoney&&pl.getAllArmySumNum()>l1.getAllArmySumNum())){
                            executeDiplomacySelected(p,true,true);
                        }else{
                            executeDiplomacySelected(p,false,true);
                        }
                        p.setType(-1);
                        break;
                    case 4://行为支持
                        if(f0==null){return;}
                        if(f1.getRForgeinType()>0&&f2.getRForgeinType()<1){
                            executeDiplomacySelected(p,true,true);
                        }
                        p.setType(-1);
                        break;
                    case 5://加盟请求
                        if(f0==null){return;}
                        if(f0.getRForgeinType()!=-1&&  (pl.varRegionCount>l1.varRegionCount&&pl.incomeMoney>l1.incomeMoney&&pl.getAllArmySumNum()>l1.getAllArmySumNum())){
                            executeDiplomacySelected(p,true,true);
                        }else {
                            executeDiplomacySelected(p,false,true);
                        }
                        p.setType(-1);
                        break;
                    case 6://获得附属
                        if(f0==null){return;}
                        executeDiplomacySelected(p,true,true);
                        p.setType(-1);
                        break;
                    case 7://关系缓和
                        if(f0==null){return;}
                        if(f0.getRForgeinType()!=-1&&  (pl.varRegionCount>l1.varRegionCount&&pl.incomeMoney>l1.incomeMoney&&pl.getAllArmySumNum()>l1.getAllArmySumNum())){
                            executeDiplomacySelected(p,true,true);
                        }else {
                            executeDiplomacySelected(p,false,true);
                        }
                        p.setType(-1);
                        break;
                    case 9://获得支持
                        if(f0==null){return;}
                        if(f2.getRForgeinType()==1&&f1.getRForgeinType()!=-1){
                            executeDiplomacySelected(p,true,true);
                        }
                        p.setType(-1);
                        break;
                    case 10://调解关系
                        if(f0==null){return;}
                        if(pl.varRegionCount>l2.varRegionCount&&pl.incomeMoney>l2.incomeMoney&&pl.getAllArmySumNum()>l2.getAllArmySumNum()){
                            executeDiplomacySelected(p,false,true);
                        }else{
                            executeDiplomacySelected(p,true,true);
                        }
                        p.setType(-1);
                        break;
                    case 13://维护稳定度
                        if(pl.getStability()<90){
                            executeDiplomacySelected(p,true,true);
                        }
                        p.setType(-1);
                        break;
                    case 16://提高税率
                        if(pl.getStability()>90){
                            executeDiplomacySelected(p,true,true);
                        }
                        p.setType(-1);
                        break;
                    case 17://是否接受互保
                        if(f1==null){return;}
                        executeDiplomacySelected(p,false,true);
                        p.setType(-1);
                        break;
                    case 20://20索要领土
                        executeDiplomacySelected(p,true,true);
                        p.setType(-1);
                        break;
                    case 21://21被要求领土
                        executeDiplomacySelected(p,false,true);
                        p.setType(-1);
                        break;
                    case 28://28求和
                        executeDiplomacySelected(p,false,true);
                        p.setType(-1);
                        break;
                }
                break;
        }
    }
    //委任处理关系
    private void commissionDiplomacy1(LegionData tl){
        if(tl==null){
            return;
        }
        ForeignData f=getForeignData(tl.getLegionIndex());
        if(f==null){  return; }
        LegionData pl=getPlayerLegionData();
        //2强于玩家 1等于玩家 0弱于玩家
        int lv=0;
        if(tl.incomeMoney>pl.incomeMoney&&tl.varRegionCount>pl.varRegionCount&&tl.getAllArmySumNum()>pl.getAllArmySumNum()){
            lv=2;
        }else if(tl.incomeMoney<pl.incomeMoney&&tl.varRegionCount<pl.varRegionCount&&tl.getAllArmySumNum()<pl.getAllArmySumNum()){
            lv=-1;
        }else{
            lv=0;
        }
        //0无 1同盟 2互不侵犯  -1敌对
        int rfType=f.getRForgeinType();
        int cardId=-1;
        Array<XmlReader.Element> haveCardEList=null;
        if(game.sMapScreen!=null){
            haveCardEList=game.sMapScreen.haveCardEList;
        }else{
            haveCardEList=new Array();
        }

        haveCardEList=GameMethod.getForeignCardE(this, getPlayerLegionData(), tl, pl.varLegionCanBuildCardE,haveCardEList);
        if(tl.ifPlayerAlly()){
            GameUtil.removeXmlEById(haveCardEList,3103);
        }

        switch (lv){
            case 0://弱于玩家
                switch (getForeignPolicy()){
                    //尽全国之物力，结强邦之欢心\n尽全力避免与其强大势力的冲突，甚至通过签订不平等条约的方式的方式来终止与强大势力发生冲突
                    case 1:
                        switch (rfType){
                            case 1://同盟
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv1CardIds);
                                break;
                            case 2://互不侵犯
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv0CardIds);
                                break;
                            case -1://敌对
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv0CardIds);
                                break;
                            default://中立
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv0CardIds);
                                break;
                        }
                        break;
                    //藏器于身，待时而动\n致力于保持自身的独立地位，不结盟，不表态，不结仇，甚至通过签订互保合约与邻国保持距离
                    case 2:
                        switch (rfType){
                            case 1://同盟
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv0CardIds);
                                break;
                            case 2://互不侵犯
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv0CardIds);
                                break;
                            case -1://敌对
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv0CardIds);
                                break;
                            default://中立
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv0CardIds);
                                break;
                        }
                        break;
                    //识时务者为俊杰\n积极主动的维护与强大势力的关系，忽视对弱小势力关系的维护，更倾向于加入强大势力所在的阵营，希望始终与强者保持步调的一致
                    case 3:
                        switch (rfType){
                            case 1://同盟
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv0CardIds);
                                break;
                            case 2://互不侵犯
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv0CardIds);
                                break;
                            case -1://敌对
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForEnemyInLv1CardIds);
                                break;
                            default://中立
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForEnemyInLv0CardIds);
                                break;
                        }
                        break;
                    //以直报怨，以德报德\n不主动挑起战争，但也不畏惧战争。会规划较多的精力在维护盟友关系上
                    case 4:
                        switch (rfType){
                            case 1://同盟
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv0CardIds);
                                break;
                            case 2://互不侵犯
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv0CardIds);
                                break;
                            case -1://敌对
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForEnemyInLv0CardIds);
                                break;
                            default://中立
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv0CardIds);
                                break;
                        }
                        break;
                    //和衷共济，扶弱抗强\n反对一切世界霸权，会对受到侵犯的弱小国家实行庇护。注重与盟友间的关系。希望能创建一个对所有国家都公平公正的国际秩序
                    case 5:
                        switch (rfType){
                            case 1://同盟
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv2CardIds);
                                break;
                            case 2://互不侵犯
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv2CardIds);
                                break;
                            case -1://敌对
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForEnemyInLv0CardIds);
                                break;
                            default://中立
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv2CardIds);
                                break;
                        }
                        break;
                    //弱肉强食，适者生存\n信奉弱肉强食，不畏惧任何势力的挑战，更多关注自身利益以及对盟友关系的较少维护，使得其可能遭到群起而攻
                    case 6:
                        switch (rfType){
                            case 1://同盟
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv0CardIds);
                                break;
                            case 2://互不侵犯
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv0CardIds);
                                break;
                            case -1://敌对
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForEnemyInLv0CardIds);
                                break;
                            default://中立
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForEnemyInLv0CardIds);
                                break;
                        }
                        break;
                }
                break;
            case 1://等于玩家
                switch (getForeignPolicy()){
                    //尽全国之物力，结强邦之欢心\n尽全力避免与其强大势力的冲突，甚至通过签订不平等条约的方式的方式来终止与强大势力发生冲突
                    case 1:
                        switch (rfType){
                            case 1://同盟
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv0CardIds);
                                break;
                            case 2://互不侵犯
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv0CardIds);
                                break;
                            case -1://敌对
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForBegPeaceCardIds);
                                break;
                            default://中立
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv0CardIds);
                                break;
                        }
                        break;
                    //藏器于身，待时而动\n致力于保持自身的独立地位，不结盟，不表态，不结仇，甚至通过签订互保合约与邻国保持距离
                    case 2:
                        switch (rfType){
                            case 1://同盟
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv0CardIds);
                                break;
                            case 2://互不侵犯
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv0CardIds);
                                break;
                            case -1://敌对
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv1CardIds);
                                break;
                            default://中立
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv0CardIds);
                                break;
                        }
                        break;
                    //识时务者为俊杰\n积极主动的维护与强大势力的关系，忽视对弱小势力关系的维护，更倾向于加入强大势力所在的阵营，希望始终与强者保持步调的一致
                    case 3:
                        switch (rfType){
                            case 1://同盟
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv0CardIds);
                                break;
                            case 2://互不侵犯
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv0CardIds);
                                break;
                            case -1://敌对
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForEnemyInLv2CardIds);
                                break;
                            default://中立
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv0CardIds);
                                break;
                        }
                        break;
                    //以直报怨，以德报德\n不主动挑起战争，但也不畏惧战争。会规划较多的精力在维护盟友关系上
                    case 4:
                        switch (rfType){
                            case 1://同盟
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv1CardIds);
                                break;
                            case 2://互不侵犯
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv1CardIds);
                                break;
                            case -1://敌对
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForEnemyInLv1CardIds);
                                break;
                            default://中立
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv1CardIds);
                                break;
                        }
                        break;
                    //和衷共济，扶弱抗强\n反对一切世界霸权，会对受到侵犯的弱小国家实行庇护。注重与盟友间的关系。希望能创建一个对所有国家都公平公正的国际秩序
                    case 5:
                        switch (rfType){
                            case 1://同盟
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv1CardIds);
                                break;
                            case 2://互不侵犯
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv0CardIds);
                                break;
                            case -1://敌对
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForEnemyInLv1CardIds);
                                break;
                            default://中立
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv0CardIds);
                                break;
                        }
                        break;
                    //弱肉强食，适者生存\n信奉弱肉强食，不畏惧任何势力的挑战，更多关注自身利益以及对盟友关系的较少维护，使得其可能遭到群起而攻
                    case 6:
                        switch (rfType){
                            case 1://同盟
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv0CardIds);
                                break;
                            case 2://互不侵犯
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv0CardIds);
                                break;
                            case -1://敌对
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForEnemyInLv2CardIds);
                                break;
                            default://中立
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForEnemyInLv0CardIds);
                                break;
                        }
                        break;
                }
                break;
            case 2://强于玩家
                switch (getForeignPolicy()){
                    //尽全国之物力，结强邦之欢心\n尽全力避免与其强大势力的冲突，甚至通过签订不平等条约的方式的方式来终止与强大势力发生冲突
                    case 1:
                        switch (rfType){
                            case 1://同盟
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv2CardIds);
                                break;
                            case 2://互不侵犯
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv2CardIds);
                                break;
                            case -1://敌对
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForBegPeaceCardIds);
                                break;
                            default://中立
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv0CardIds);
                                break;
                        }
                        break;
                    //藏器于身，待时而动\n致力于保持自身的独立地位，不结盟，不表态，不结仇，甚至通过签订互保合约与邻国保持距离
                    case 2:
                        switch (rfType){
                            case 1://同盟
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv0CardIds);
                                break;
                            case 2://互不侵犯
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv0CardIds);
                                break;
                            case -1://敌对
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv0CardIds);
                                break;
                            default://中立
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv0CardIds);
                                break;
                        }
                        break;
                    //识时务者为俊杰\n积极主动的维护与强大势力的关系，忽视对弱小势力关系的维护，更倾向于加入强大势力所在的阵营，希望始终与强者保持步调的一致
                    case 3:
                        switch (rfType){
                            case 1://同盟
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv2CardIds);
                                break;
                            case 2://互不侵犯
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv2CardIds);
                                break;
                            case -1://敌对
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForBegPeaceCardIds);
                                break;
                            default://中立
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv2CardIds);
                                break;
                        }
                        break;
                    //以直报怨，以德报德\n不主动挑起战争，但也不畏惧战争。会规划较多的精力在维护盟友关系上
                    case 4:
                        switch (rfType){
                            case 1://同盟
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv2CardIds);
                                break;
                            case 2://互不侵犯
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv2CardIds);
                                break;
                            case -1://敌对
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForEnemyInLv2CardIds);
                                break;
                            default://中立
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForNeutralInLv2CardIds);
                                break;
                        }
                        break;
                    //和衷共济，扶弱抗强\n反对一切世界霸权，会对受到侵犯的弱小国家实行庇护。注重与盟友间的关系。希望能创建一个对所有国家都公平公正的国际秩序
                    case 5:
                        switch (rfType){
                            case 1://同盟
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv1CardIds);
                                break;
                            case 2://互不侵犯
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv0CardIds);
                                break;
                            case -1://敌对
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForEnemyInLv2CardIds);
                                break;
                            default://中立
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv0CardIds);
                                break;
                        }
                        break;
                    //弱肉强食，适者生存\n信奉弱肉强食，不畏惧任何势力的挑战，更多关注自身利益以及对盟友关系的较少维护，使得其可能遭到群起而攻
                    case 6:
                        switch (rfType){
                            case 1://同盟
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForAllyInLv0CardIds);
                                break;
                            case 2://互不侵犯
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForEnemyInLv0CardIds);
                                break;
                            case -1://敌对
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForEnemyInLv2CardIds);
                                break;
                            default://中立
                                cardId=game.gameMethod.getRandOneForUseCard(haveCardEList,game.resGameConfig.diplomaticForEnemyInLv0CardIds);
                                break;
                        }
                        break;
                }
                break;
        }




        if(cardId!=-1){

        }
    }


    //根据外交主张处理关系
    public void dealWithForeignPolicy(){
        if(getForeignPolicy()==0){
            return;
        }
        for(PromptData p:promptDatas){
            commissionResolution(p);
        }
        for(int i=promptDatas.size-1;i>=0;i--){
            PromptData p=promptDatas.get(i);
            if(p.getType()==-1){
                promptDatas.removeValue(p,false);
            }
        }

        //随机获取legion
        IntArray randIntArray =game.tempUtil.getTempIntArray();
        for(int i=0;i<legionDatas.size;i++){
            randIntArray.add(i);
        }
        LegionData pl=getPlayerLegionData();
        int moneyMax=pl.incomeMoney* (100-getForeignBudget())/100;
        randIntArray.random();
        for(int i=0;i<randIntArray.size;i++){
            LegionData l=legionDatas.get(randIntArray.get(i));
            if(l==null||l.getLegionIndex()==0||l.getInternIndex()==0||l.getSuzerainLi()==0||l.isPlayer()){
                continue;
            }
            commissionDiplomacy1(l);
            if(moneyMax>pl.getMoney()){
                break;
            }
        }
        game.tempUtil.disposeTempIntArray(randIntArray);
    }

    //处理建造关系  自动内政
    public void dealWithBuildPolicy(){
        if(masterData.ifHaveAutoBuild==1){
            return;
        }

        masterData.ifHaveAutoBuild=1;
        StringBuilder builder=new StringBuilder();
        LegionData pl=getPlayerLegionData();
        int money=pl.getMoney();
        int industry=pl.getIndustry();
        int tech=pl.getTech();
        int food=pl.getFood();
        int moneyMax=pl.incomeMoney* getMilitaryBudget()/100;//军事预算成反比
        Array<BuildData> bs=game.tempUtil.getTempArray();

        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if(b.getBuildRound()==0&&b.isPlayer()&&!b.ifSea()&&!b.isWar()){
                bs.add(b);
            }
        }
        bs.shuffle();
        for(BuildData b:bs){
            if(build_ExcuteChiefBuildPolicy(builder,pl,b)){
                b.setBuildRound(0);
                if(pl.getMoney()<=moneyMax){
                    break;
                }
                b.getBuildActor().update();
            }
        }
        game.tempUtil.disposeTempArray(bs);
        String b= builder.toString();
        if(!ComUtil.isEmpty(b)){
            addPromptData(
                    game.gameMethod.getStrValueT("prompt_Report"),
                    b,
                    game.gameMethod.getStrValueT("prompt_reportEnd",money-pl.getMoney(),industry-pl.getIndustry(),tech-pl.getTech(),food-pl.getFood()),masterData.playerLegionIndex,masterData.playerLegionIndex,false
            );
        }


    }



    //摸黑移动
    public int getBorderHiddenEnemyHexagon(ArmyData armyData, int targetId) {
        ArmyData tArmyData=getEnemyArmyDataByBorderHexagon(targetId,armyData.getLegionIndex(),2);
        if(tArmyData==null){
            return -1;
        }else{
            if(tArmyData.armyActor==null){
                tArmyData.createActor();
            }
            if(getForeignDegree(tArmyData.getLegionIndex(),armyData.getLegionIndex())==-1){
                int morale=ComUtil.getRandom(5,armyData.getArmyMorale()/5);
                armyData.setArmyMoraleChange(-morale);
                tArmyData.setArmyMoraleChange(morale,game.resGameConfig.resetUnitMoraleMax);
            }
            return tArmyData.getHexagonIndex();
        }
    }

    //type 0无限制 1现形 2隐形
    private ArmyData getEnemyArmyDataByBorderHexagon(int hexagon, int li,int type) {
        ArmyData rs=null;
        for(int i=0;i<=6;i++){
            ArmyData  ta=getArmyDataByHexagon(getBorderIdByDirect(hexagon,i));
            if(ta!=null&&getForeignDegree(ta.getLegionIndex(),li)!=1){
                if(type==1){
                    if(ta.armyActor!=null){
                        rs=ta;
                        break;
                    }
                }else if(type==2){
                    if(ta.armyActor==null){
                        rs=ta;
                        break;
                    }
                }
            }
        }
        return rs;
    }


    //快速移动
    public int transportMoveForHexagon(ArmyData armyData, int targetId) {
        ArmyData tArmyData=getArmyDataByHexagon(targetId);
        if(tArmyData==null&&armyData.canMove(targetId)){
            armyData.armyMove(targetId);
            return targetId;
        }else{
            IntArray tempIntArrray1=game.tempUtil.getTempIntArray();
            getRangePostion(targetId, 0, 1, armyData.getIfSeaForMove(), tempIntArrray1);
            //int  hexagon = getRecentHexagon(-1,armyData.getHexagonIndex(),targetId, tempIntIntMap2, armyData.getIfSeaForMove());
            if(tempIntArrray1.size==0){
                return targetId;
            }
            tempIntArrray1.random();
            for(int i=0;i<tempIntArrray1.size;i++){
                int hexagon=tempIntArrray1.get(i);
                tArmyData=getArmyDataByHexagon(hexagon);
                if(ifGridIsPass(hexagon)&&tArmyData==null&&!ifSea(hexagon)&&armyData.canMove(hexagon)){
                    armyData.armyMove(hexagon);
                    game.tempUtil.disposeTempIntArray(tempIntArrray1);
                    return hexagon;
                }
            }
            game.tempUtil.disposeTempIntArray(tempIntArrray1);
            return armyData.getHexagonIndex();
        }
    }

    public void resetAllLegionState(){
        for(int i=0;i<legionDatas.size;i++){
            LegionData l=legionDatas.get(i);
            resetAllState(l);
        }
    }

    public boolean ifLegionDataHaveFeature(LegionData legionData,int cardId,int featureId){
        boolean rs=false;
        XmlReader.Element armyE=game.gameConfig.getDEF_ARMY().getElementById(cardId);
        String features;
        if(armyE!=null){
            features=armyE.get("feature","0");
        }else{
            return false;
        }
        rs= ComUtil.ifHaveValueInStr(features,featureId);
        if(rs) {
            XmlReader.Element xE = game.gameConfig.getDEF_UNITFEATURE().getElementById(featureId);
            if (xE != null&&getAge()>=xE.getInt("reqAge", 0)) {
                int reqCardId = xE.getInt("reqCardId", 0);
                if (reqCardId != 0) {
                    int lv = xE.getInt("reqCardLv", 0);
                    if (GameMethod.getCardLv(legionData,null,reqCardId)>=lv) {
                        return true;
                    }
                }
            }
            rs=false;
        }
        return rs;
    }

    //def_legionpolicy
    //type 0不判断 1霸权 -1秩序
    //lv    0 不判断 1对应 60 -1对应40




    //country  -1不判断  使用,间隔 为可以触发的国家

    public Array<XmlReader.Element> getPlayerLegionPolicy( Array<XmlReader.Element> rs){
        if(rs==null){
            rs=new Array<>();
        }else{
            rs.clear();
        }
        if( !ifSystemEffective(10)){
            return rs;
        }
        int plType=getPlayerAmbition()==100?0:getPlayerAmbition()>100?1:-1;
        int plLv=ComUtil.limitValue((getPlayerAmbitionValue()+1)/20,1,5);
        if(policyIDatas==null){
            policyIDatas=new IntArray();
        }
        Array<XmlReader.Element> legionPolicys=game.gameConfig.getDEF_LEGIONPOLICY().e.getChildrenByName("legionpolicy");

        for(int i=0;i<legionPolicys.size;i++){
            XmlReader.Element legionPolicy=legionPolicys.get(i);
            if(legionPolicy.getInt("age",0)>getAge()){
                continue;
            }
            int lpId=legionPolicy.getInt("id",0);
            if(!legionPolicy.getBoolean("isVisable",true)){
                continue;
            }
            if(!legionPolicy.getBoolean("ifRepeat",true)&&policyIDatas.contains(lpId)){
                continue;
            }
            if(!ifTriggerAllPrePolicy(legionPolicy.get("prePolicyId","-1"),legionPolicy.getInt("preTriggerType",0))){
                continue;
            }
            if(ifTriggerOneMutualPolicy(legionPolicy.get("mutualId","-1"))){
                continue;
            }
            int lpType=legionPolicy.getInt("type",0);
            int lpLv=legionPolicy.getInt("lv",0);
            int lpCountryType=legionPolicy.getInt("verifyType",0);
            String lpCountry=legionPolicy.get("country","-1");
            if((lpType==0||lpType==plType)&&(lpLv<=plLv)&&legion_Validation(getPlayerLegionData(),lpCountryType,lpCountry)&&(lpCountry.equals("-1")||ComUtil.ifHaveValueInStr(lpCountry,getPlayerLegionData().getCountryId()))){
              if(checkPolicyXml(legionPolicy)){
                  rs.add(legionPolicy);
              }
            }
        }
        rs.shuffle();
        return rs;

    }


    //verifyType 0不判断 1自由国 2附属国 3有同盟但是不是主导国 4自身为中立国 5自身为宗主国 6非中立的自由国 7有同盟 8影响力大于80的自由国  10 至少存在两个不中立,且varRegionCount都不为0
    //	11 至少存在两个不中立且不敌对,且varRegionCount都不为0  12 至少存在两个不中立且为友军,且varRegionCount都不为0 13至少存在两个不中立且为敌军,且varRegionCount都不为0
    //  14 国家在xx洲际 15 存在随机非敌对邻国 16 存在非友善邻国  17 存在敌对国家 18 存在随机非敌对国家 19 存在非敌对盟主类国家 20存在非敌对且非盟主的自由国
    //   21 自身有未收回的核心领土或主要领土 22 // 存在随机非敌对  的可以贸易的国家
    // 23 自身指定科技大于5 24 自身指定科技>8 25 自身有未收回的核心领土   26 有历史恩怨的仇敌国家存在  27 自身稳定度和税率不小于50



    //country  -1不判断  使用,间隔 为可以触发的国家
    private boolean legion_Validation(LegionData pl, int countryType, String countryStr) {
        boolean rs=false;
        switch (countryType){
            case 0:
                rs=true;
                break;
            case 1:
                if(pl.isFreeSovereignCountry()){
                    rs=true;
                }
                break;
            case 2:
                if(pl.getSuzerainLi()!=0){
                    rs=true;
                }
                break;
            case 3:
                if(pl.getSuzerainLi()==0&&pl.getInternIndex()!=pl.getInternIndex()&&pl.varAllyCount>0){
                    rs=true;
                }
                break;
            case 4:
                if(pl.getInternIndex()==0){
                    rs=true;
                }
                break;
            case 5:
                if(pl.haveTributary()){
                    rs=true;
                }
                break;
            case 6:
                if(pl.isFreeSovereignCountry()&&pl.haveEnemy()){
                    rs=true;
                }
                break;
            case 7:
                if(pl.varAllyCount>0){
                    rs=true;
                }
                break;
            case 10:
                if(ComUtil.ifHaveValueInStr(countryStr,playerLegionData.getCountryId())){
                    String[] strs = countryStr.split(",");
                    int s=0;
                    for(int i=0;i<strs.length;i++){
                        LegionData l=getLegionByCountry(Integer.parseInt(strs[i]),true);
                        if(l!=null&&l.getLegionIndex()!=playerLegionData.getInternIndex()&&l.getInternIndex()>0){
                            s++;
                        }
                        if(s>1){
                            rs=true;
                            break;
                        }
                    }
                }
                break;
            case 11:
                if(ComUtil.ifHaveValueInStr(countryStr,playerLegionData.getCountryId())){
                    String[] strs = countryStr.split(",");
                    int s=0;
                    for(int i=0;i<strs.length;i++){
                        LegionData l=getLegionByCountry(Integer.parseInt(strs[i]),true);
                        if(l!=null&&l.getLegionIndex()!=playerLegionData.getInternIndex()&&l.getInternIndex()>0&&getRealForgeinType(l.getLegionIndex(),playerLegionData.getLegionIndex())!=-1){
                            s++;
                        }
                        if(s>1){
                            rs=true;
                            break;
                        }
                    }
                }
                break;
            case 12:
                if(ComUtil.ifHaveValueInStr(countryStr,playerLegionData.getCountryId())){
                    String[] strs = countryStr.split(",");
                    int s=0;
                    for(int i=0;i<strs.length;i++){
                        LegionData l=getLegionByCountry(Integer.parseInt(strs[i]),true);
                        if(l!=null&&l.getLegionIndex()!=playerLegionData.getInternIndex()&&l.getInternIndex()>0&&getRealForgeinType(l.getLegionIndex(),playerLegionData.getLegionIndex())==1){
                            s++;
                        }
                        if(s>1){
                            rs=true;
                            break;
                        }
                    }
                }
                break;
            case 13:
                if(ComUtil.ifHaveValueInStr(countryStr,playerLegionData.getCountryId())){
                    String[] strs = countryStr.split(",");
                    int s=0;
                    for(int i=0;i<strs.length;i++){
                        LegionData l=getLegionByCountry(Integer.parseInt(strs[i]),true);
                        if(l!=null&&l.getLegionIndex()!=playerLegionData.getInternIndex()&&l.getInternIndex()>0&&getRealForgeinType(l.getLegionIndex(),playerLegionData.getLegionIndex())==-1){
                            s++;
                        }
                        if(s>1){
                            rs=true;
                            break;
                        }
                    }
                }
                break;

            case 14:// 14 国家在xx洲际
                BuildData cb=getPlayerLegionData().getCapital();
                if(cb!=null&&ComUtil.isNumeric(countryStr)&&cb.isTargetAreaZone(Integer.parseInt(countryStr))){
                    return true;
                }
                break;
            case 15://存在随机非敌对邻国
                for(int i=0;i<getPlayerLegionData().borderLegionIndexs.size;i++){
                    LegionData l=getLegionDataByLi(getPlayerLegionData().borderLegionIndexs.get(i));
                    int fd=getForeignDegree(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                    if(l!=null&&l.getInternIndex()!=0&&fd!=-1){
                        return true;
                    }
                }
                return false;
            case 16://存在非友善邻国
                for(int i=0;i<getPlayerLegionData().borderLegionIndexs.size;i++){
                    LegionData l=getLegionDataByLi(getPlayerLegionData().borderLegionIndexs.get(i));
                    int fd=getForeignDegree(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                    if(l!=null&&l.getInternIndex()!=0&&fd!=1){
                        return true;
                    }
                }
                return false;
            case 17://存在敌对国家
                for(int i=0;i<legionDatas.size;i++){
                    LegionData l=legionDatas.get(i);
                    int fd=getForeignDegree(l.getLegionIndex(),masterData.playerLegionIndex);
                    if(l.getInternIndex()!=0&&fd==-1){
                        return true;
                    }
                }
                return false;
            case 18:// 存在随机非敌对国家
                for(int i=0;i<legionDatas.size;i++){
                    LegionData l=legionDatas.get(i);
                    int fd=getForeignDegree(l.getLegionIndex(),masterData.playerLegionIndex);
                    if(l.getInternIndex()!=0&&fd!=-1){
                        return true;
                    }
                }
                return false;
            case 19:// 存在非敌对盟主类国家
                for(int i=0;i<legionDatas.size;i++){
                    LegionData l=legionDatas.get(i);
                    int fd=getForeignDegree(l.getLegionIndex(),masterData.playerLegionIndex);
                    if(fd!=-1&&!l.isPlayer()&&l.isFreeSovereignCountry()&&l.varAllyCount>0&&l.varRegionCount>getPlayerLegionData().varRegionCount){
                        return true;
                    }
                }
                return false;
            case 20://存在非敌对且非盟主的自由国
                for(int i=0;i<legionDatas.size;i++){
                    LegionData l=legionDatas.get(i);
                    int fd=getForeignDegree(l.getLegionIndex(),masterData.playerLegionIndex);
                    if(fd!=-1&&l.isFreeSovereignCountry()&&l.varRegionCount>0&&l.varAllyCount==0){
                        return true;
                    }
                }
                return false;

            case 21://自身有未收回的核心领土或主要领土
                if(!pl.ifControlCoreRegion()||!pl.ifControlMajorRegion()){
                    return true;
                }
                break;

            case 22:// 存在随机非敌对  的可以贸易的国家
                for(int i=0;i<legionDatas.size;i++){
                    LegionData l=legionDatas.get(i);
                    int fd=getForeignDegree(l.getLegionIndex(),masterData.playerLegionIndex);
                    if(fd!=-1&&!l.isPlayer()&&(l.incomeMoney>0||l.incomeFood>0||l.incomeIndustry>0||l.incomeTech>0)){
                        return true;
                    }
                }
                return false;

            case 23://自身指定科技>5
                if(ComUtil.isNumeric(countryStr)&&GameMethod.getCardLv(pl,null,Integer.parseInt(countryStr))>5){
                    return true;
                }
                break;
            case 24://自身指定科技>8
                if(ComUtil.isNumeric(countryStr)&&GameMethod.getCardLv(pl,null,Integer.parseInt(countryStr))>8){
                    return true;
                }
                break;
            case 25://自身有未收回的核心领土
                if(!pl.ifControlCoreRegion()){
                    return true;
                }
                break;
            case 26://有历史恩怨的仇敌国家存在
                for(int i=0;i<legionDatas.size;i++){
                    LegionData l=legionDatas.get(i);
                    // int fd=getForeignDegree(l.getLegionIndex(),masterData.playerLegionIndex);
                    ForeignData f=getForeignData(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                    if(f!=null&&f.getDiplomaticAttitude()==3){
                        return true;
                    }
                }
                return false;
            case 27://自身稳定度和税率不小于50
                if(pl.getStability()>50&&pl.getTaxBonus()>50){
                    return true;
                }
                break;
        }
        return rs;
    }

    //返回rs
    public boolean executeLegionPolicy(TaskData t,   XmlReader.Element lp){
        int legionPolicyId=lp.getInt("id");
        boolean rs=false;
        int count=0;
        LegionData pl=getPlayerLegionData();

        IntArray tempIntArray=game.tempUtil.getTempIntArray();
        if(lp!=null){

            switch (legionPolicyId){
                case 1:// 加强与非敌对列强之间的关系
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                        if(f!=-1&&l.varRegionCount>pl.varRegionCount){
                            ForeignData fg=getForeignData(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                            fg.addFavor(ComUtil.getRandom(5,20));
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 2:// 加强与非敌对邻国之间的关系
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                        if(f!=-1&&l.borderLegionIndexs.contains(masterData.getPlayerLegionIndex())&&!l.isPlayer()){
                            ForeignData fg=getForeignData(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                            fg.addFavor(ComUtil.getRandom(10,30));
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 3:// 增加自身控制的各区域的民用设施建设
                  /*  Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
                    while (it.hasNext()) {
                        IntMap.Entry<BuildData> c = it.next();
                        BuildData b=c.value;*/
                    for(int bi=0;bi<buildRDatas.size();bi++) {
                        BuildData b=buildRDatas.getByIndex(bi);
                        if(b!=null&&b.isPlayer()&&b.getBuildType()!=2){
                            legion_UpdTech(pl,b, getBuildCardIdTIA1(pl, b, false, 9,true));
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 4:// 增加自身控制的各区域的军用设施建设
                  /*  Iterator<IntMap.Entry<BuildData>> itB1 = buildRDatas.iterator();
                    while (itB1.hasNext()) {
                        IntMap.Entry<BuildData> c = itB1.next();
                        BuildData b=c.value;*/
                    for(int bi=0;bi<buildRDatas.size();bi++) {
                        BuildData b=buildRDatas.getByIndex(bi);
                        if(b!=null&&b.isPlayer()&&b.getBuildType()!=2){
                            legion_UpdTech(pl,b, getBuildCardIdTIA1(pl, b, false, 10,true));
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 5:// 增加税率
                   /* Iterator<IntMap.Entry<BuildData>> itB2 = buildRDatas.iterator();
                    while (itB2.hasNext()) {
                        IntMap.Entry<BuildData> c = itB2.next();
                        BuildData b=c.value;*/
                    for(int bi=0;bi<buildRDatas.size();bi++) {
                        BuildData b=buildRDatas.getByIndex(bi);
                        if(b!=null&&b.isPlayer()&&b.getBuildType()!=2){
                            b.setCityTax(b.getCityTax()*2);
                            count++;
                        }
                    }
                    pl.addTaxBonus(pl.getTaxBonus());
                    if(count>0){ rs=true; }
                    break;
                case 6:// 增加自身控制的各区域的稳定度
                   /* Iterator<IntMap.Entry<BuildData>> itB3 = buildRDatas.iterator();
                    while (itB3.hasNext()) {
                        IntMap.Entry<BuildData> c = itB3.next();
                        BuildData b=c.value;*/
                    for(int bi=0;bi<buildRDatas.size();bi++) {
                        BuildData b=buildRDatas.getByIndex(bi);
                        if(b!=null&&b.isPlayer()&&b.getBuildType()!=2){
                            b.setCityStability(b.getCityStability()*2);
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 7:// 随机提升所有部队的武器等级
                {
                    Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                    while (itB4.hasNext()) {
                        ArmyData a = itB4.next().value;
                        LegionData l=a.getLegionData();
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0||a==null||a.getArmyHpNow()==0){ continue; }
                        a.setUnitWealv0(ComUtil.getRandom(a.getUnitWealv0Value(),a.getUnitWealv0Value()));
                        count++;
                    }
                    if(count>0){ rs=true; }
                }
                break;
                case 8:// 从关系好的列强国家中学习军团科技
                {
                    int techSumLv=0;
                    int li=-1;
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getForeignDegree(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                        if(f==1&&((l.varRegionCount>pl.varRegionCount||l.incomeMoney>pl.incomeMoney)&&l.getSumTechLv()>pl.getSumTechLv())&&!l.isPlayer()){
                            if(l.getSumTechLv()>techSumLv){
                                li=l.getLegionIndex();
                                techSumLv=l.getSumTechLv();
                            }
                        }
                    }
                    if(li!=-1){
                        pl.setTechByLegionData(getLegionDataByLi(li),true,0);
                        rs=true;
                    }
                }
                break;
                case 9:// 将当前的资源分配给全部盟友
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                        if(f==1){
                            if(pl.getMoney()>l.getMoney()){
                                l.setMoney(pl.getMoney());
                            }
                            if(pl.getIndustry()>l.getIndustry()){
                                l.setIndustry(pl.getIndustry());
                            }
                            if(pl.getTech()>l.getTech()){
                                l.setTech(pl.getTech());
                            }
                            if(pl.getFood()>l.getFood()){
                                l.setFood(pl.getFood());
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; pl.setMoney(0);pl.setIndustry(0);pl.setTech(0);  if(pl.getAllFoodCost()<pl.getFood()){} pl.setFood(pl.getAllFoodCost());}
                    break;
                case 10:// 脱离附属状态
                    if(pl.getSuzerainLi()!=0){
                        pl.setSuzerainLi(0);
                        rs=true;
                    }
                    break;
                case 11:// 加强与盟国的关系度
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getForeignDegree(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                        if(f==1){
                            ForeignData fg=getForeignData(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                            fg.addFavor(ComUtil.getRandom(5,20));
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 12:// 根据实力与盟主进行一次判定,成功则获得盟主
                    if(pl.getLegionIndex()!=pl.getInternIndex()){
                        LegionData l=getLegionDataByLi(pl.getInternIndex());
                        if(pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney){
                            int oldIntern=pl.getInternIndex();
                            for(int i=0;i<legionDatas.size;i++){
                                l=legionDatas.get(i);
                                if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                                if(l.getInternIndex()==oldIntern){
                                    l.setInternIndex(pl.getLegionIndex());
                                    count++;
                                }
                            }
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 13:// 根据玩家的军团科技水平随机强化同盟国家的科技
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getForeignDegree(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                        if(f==1){
                            l.setTechByLegionData(pl,true,0);
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 14:// 变更与所有国家的状态为非敌对,如果是敌对则强制并签订5回合免战协议
                    pl.setInternIndex(pl.getLegionIndex());
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        if(l.getInternIndex()==pl.getInternIndex()){
                            l.setInternIndex(l.getLegionIndex());
                        }
                        ForeignData f=getForeignData(l.getLegionIndex());
                        if(f.getForeignType()==1){
                            f.addLeagueLeftRound(5);
                        }else {
                            f.setForeignType(1);
                            f.setForeignValue(5);
                        }
                        count++;
                    }
                    if(count>0){ rs=true; }
                    break;
                case 15:// 通过[求和]改善与所有敌对国家的关系
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(!l.isPlayer()){
                            if(l.getInternIndex()==pl.getInternIndex()){
                                l.setInternIndex(l.getLegionIndex());
                            }
                            int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                            if(f==-1){
                                legion_BegPeace(pl,l);
                                count++;
                            }
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 16:// 与所有非敌对的国家签订20回合的免战协议
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(!l.isPlayer()&&getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex())!=-1){
                            ForeignData f=getForeignData(l.getLegionIndex());
                            if(f.getForeignType()==1){
                                f.addLeagueLeftRound(20);
                            }else if(f.getForeignType()!=-1){
                                f.setForeignType(1);
                                f.setForeignValue(20);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 17:// 停止与其他国家的免战协议
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        ForeignData f=getForeignData(l.getLegionIndex());
                        if(!l.isPlayer()&&f.getForeignType()==1){
                            f.setForeignValue(0);
                            f.setForeignType(0);
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 18:// 脱离联盟,如果是盟主则解散,且与原联盟的国家签订10回合的免战协议
                    pl.setInternIndex(pl.getLegionIndex());
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(   l.getInternIndex()==pl.getLegionIndex()&&!l.isPlayer()){
                            l.setInternIndex(l.getLegionIndex());
                            ForeignData f=getForeignData(l.getLegionIndex());
                            if(f.getForeignType()==1){
                                f.addLeagueLeftRound(20);
                            }else if(f.getForeignType()!=-1){
                                f.setForeignType(1);
                                f.setForeignValue(20);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 19:// 根据关系度进行一次判定,成功则获得盟主
                    if(pl.getLegionIndex()!=pl.getInternIndex()){
                        LegionData sl=getLegionDataByLi(pl.getInternIndex());
                        if(pl.varRegionCount>sl.varRegionCount||pl.incomeMoney>sl.incomeMoney){
                            for(int i=0;i<legionDatas.size;i++){
                                LegionData l=legionDatas.get(i);
                                if(l.getInternIndex()==sl.getLegionIndex()){
                                    l.setInternIndex(pl.getLegionIndex());
                                    count++;
                                }
                            }
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 20:// 强制与所有附属国合并
                    int sli=pl.getLegionIndex();
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l.getSuzerainLi()==sli){
                            legion_Merge(pl,l,false);
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 21:// 减少与所有敌对国家的关系度,增加与友好国家的关系度
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        ForeignData f=getForeignData(l.getLegionIndex());
                        if(f.getForeignType()>0){
                            f.addFavor(ComUtil.getRandom(5,20));
                        }else{
                            f.addFavor(-ComUtil.getRandom(1,10));
                        }
                        count++;
                    }
                    if(count>0){ rs=true; }
                    break;
                case 22:// 向敌对国的所有盟友宣战
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        if(getRealForgeinType(masterData.getPlayerLegionIndex(),l.getLegionIndex())==-1){
                            legion_DeclareWar(pl,l,true);
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 23:// 与非敌对的邻国进行一次关系度判定,判定成功则结盟
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if((f==0||f==2)&&l.borderLegionIndexs.contains(masterData.getPlayerLegionIndex())&&ComUtil.ifGet(fa.getFavorValue())   ){
                            legion_AllianceTIA1(getLegionDataByLi(pl.getInternIndex()),l,false);
                        }
                        count++;
                    }
                    if(count>0){ rs=true; }
                    break;
                case 24:// 与所有非敌对的首都在本本洲际的国家进行一次关系度判定,如果成功则拉拢入我方阵营
                    int capitalLandZone=pl.getCapitalIntercontinentalZone();
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if((f==0||f==2)&&l.getCapitalIntercontinentalZone()==capitalLandZone&&ComUtil.ifGet(fa.getFavorValue())){
                            legion_AllianceTIA1(getLegionDataByLi(pl.getInternIndex()),l,false);
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 25:// 与相邻非敌对国家进行一次实力和关系度判断.如果成功,则与该国家合并.
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if((f==0||f==2)&&l.borderLegionIndexs.contains(masterData.getPlayerLegionIndex())&&(pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney)&&ComUtil.ifGet(fa.getFavorValue())){
                            legion_Merge(pl,l,false);
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 26:// 随机提高与该洲际中所有非敌对强国关系度5~20
                    capitalLandZone=pl.getCapitalIntercontinentalZone();
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if((f>=0)&&l.getCapitalIntercontinentalZone()==capitalLandZone&&(pl.varRegionCount<l.varRegionCount||pl.incomeMoney<l.incomeMoney)){
                            fa.addFavor(ComUtil.getRandom(5,20));
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 27:// 对本洲际的非友军的外域国家控制的城市进行判定,如果成功该城市变为中立状态,会减少与判定成功的国家的关系度
                  /*  Iterator<IntMap.Entry<BuildData>> itB4 = buildRDatas.iterator();
                    while (itB4.hasNext()) {
                        IntMap.Entry<BuildData> c = itB4.next();
                        BuildData b=c.value;*/
                    capitalLandZone=pl.getCapitalIntercontinentalZone();
                    for(int bi=0;bi<buildRDatas.size();bi++) {
                        BuildData b=buildRDatas.getByIndex(bi);
                        if(b.getLegionIndex()!=0&&b.getBuildType()!=2&&!b.isPlayerAlly()&&b.getLegionData().getCapitalIntercontinentalZone()!=capitalLandZone&&!b.isCapital()&&ComUtil.ifGet(100-b.getCityStability())&&b.getIntercontinentalZone()==capitalLandZone){
                            b.setLegionIndex(0);
                            if(!tempIntArray.contains(b.getLegionIndex())){
                                tempIntArray.add(b.getLegionIndex());
                                LegionData l=b.getLegionData();
                                legion_DeclareWar(l,pl,false);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 28:// 向所有在本洲际拥有城市的非友军外域国家宣战,同时对同洲际非敌对国家进行一次实力和关系度判断,如果成功则结盟
                   /* Iterator<IntMap.Entry<BuildData>> itB5 = buildRDatas.iterator();
                    while (itB5.hasNext()) {
                        IntMap.Entry<BuildData> c = itB5.next();
                        BuildData b=c.value;*/
                    capitalLandZone=pl.getCapitalIntercontinentalZone();
                    for(int bi=0;bi<buildRDatas.size();bi++) {
                        BuildData b=buildRDatas.getByIndex(bi);
                        if(b!=null&&b.getLegionIndex()!=0&&b.getBuildType()!=2&&!b.isPlayerAlly()&&b.getLegionData().getCapitalIntercontinentalZone()!=capitalLandZone&&!b.isCapital()&&b.getIntercontinentalZone()==capitalLandZone){
                            if(!tempIntArray.contains(b.getLegionIndex())){
                                tempIntArray.add(b.getLegionIndex());
                                legion_DeclareWar(pl,b.getLegionData(),false);
                                count++;
                            }
                        }
                    }
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if((f>=0)&&l.getCapitalIntercontinentalZone()==capitalLandZone&&(pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney||ComUtil.ifGet(fa.getFavorValue()))){
                            legion_AllianceTIA1(getLegionDataByLi(pl.getInternIndex()),l,false);
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 29:// 所有的本洲际非敌对的国家进行一次关系度判断.将与关系更好的国家结盟且对关系差的国家宣战.
                    capitalLandZone=pl.getCapitalIntercontinentalZone();
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if((f==0)&&l.getCapitalIntercontinentalZone()==capitalLandZone){
                            if(ComUtil.ifGet(fa.getFavorValue())){
                                legion_AllianceTIA1(getLegionDataByLi(pl.getInternIndex()),l,false);
                            }else{
                                legion_DeclareWar(pl,l,true);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 30:// 对处于本洲际的所有敌对势力进行一次[暴动]
                    capitalLandZone=pl.getCapitalIntercontinentalZone();
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if((f==-1)&&l.getCapitalIntercontinentalZone()==capitalLandZone){
                            legion_Riot(l,null,null);
                            fa.reduceFavor(ComUtil.getRandom(5,20));
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 31:// 对处于本洲际的所有外国势力进行一次[暴动]
                   /* Iterator<IntMap.Entry<BuildData>> itB6 = buildRDatas.iterator();
                    while (itB6.hasNext()) {
                        IntMap.Entry<BuildData> c = itB6.next();
                        BuildData b=c.value;*/
                    capitalLandZone=pl.getCapitalIntercontinentalZone();
                    for(int bi=0;bi<buildRDatas.size();bi++) {
                        BuildData b=buildRDatas.getByIndex(bi);
                        if(b.getLegionIndex()!=0&&b.getBuildType()!=2&&!b.isPlayerAlly()&&b.getLegionData().getCapitalIntercontinentalZone()!=capitalLandZone&&!b.isCapital()&&b.getIntercontinentalZone()==capitalLandZone) {
                            if(!tempIntArray.contains(b.getLegionIndex())){
                                tempIntArray.add(b.getLegionIndex());
                            }
                        }
                    }
                    for(int i=0;i<tempIntArray.size;i++){
                        LegionData l=getLegionDataByLi(tempIntArray.get(i));
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if((f<=0)&&l.getCapitalIntercontinentalZone()!=capitalLandZone){
                            legion_Riot(l,null,null);
                            fa.reduceFavor(ComUtil.getRandom(5,20));
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 32:// 与所有的非盟友的在本洲际拥有城市的外域国家进行一次实力判定,如果成功则获得该国家控制的城市,且视为宣战.
                   /* Iterator<IntMap.Entry<BuildData>> itB7 = buildRDatas.iterator();
                    while (itB7.hasNext()) {
                        IntMap.Entry<BuildData> c = itB7.next();
                        BuildData b=c.value;*/
                    capitalLandZone=pl.getCapitalIntercontinentalZone();
                    for(int bi=0;bi<buildRDatas.size();bi++) {
                        BuildData b=buildRDatas.getByIndex(bi);
                        LegionData l=b.getLegionData();
                        if(l!=null&&(pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney)&&b.getLegionIndex()!=0&&b.getBuildType()!=2&&!b.isPlayerAlly()&&l.getCapitalIntercontinentalZone()!=capitalLandZone&&!b.isCapital()&&b.getIntercontinentalZone()==capitalLandZone ){
                            if(ComUtil.ifGet(100-b.getCityStability())){
                                b.setLegionIndex(pl.getLegionIndex());
                                if(!tempIntArray.contains(b.getLegionIndex())){
                                    tempIntArray.add(b.getLegionIndex());
                                    legion_DeclareWar(b.getLegionData(),pl,true);
                                }
                                count++;
                            }
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 33:// 与本洲际中的所有实力低于我方的非盟国联盟或互保,对实力高于我方的宣战.如果我方为本洲际实力最高,则对本洲际所有非盟国宣战
                    boolean ifOk=true;
                    capitalLandZone=pl.getCapitalIntercontinentalZone();
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        //判断是否是洲际中最强国家
                        if(l.getCapitalIntercontinentalZone()==capitalLandZone&&(l.incomeMoney>pl.incomeMoney||l.varRegionCount>pl.varRegionCount)){
                            ifOk=false;
                            break;
                        }
                    }
                    if(ifOk){//对本洲际所有非盟国宣战
                        for(int i=0;i<legionDatas.size;i++){
                            LegionData l=legionDatas.get(i);
                            if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                            int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                            ForeignData fa=getForeignData(l.getLegionIndex());
                            if(f<=0&&l.getCapitalIntercontinentalZone()==capitalLandZone){
                                legion_DeclareWar(pl,l,true);
                                count++;
                            }
                        }
                    }else {//与本洲际中的所有实力低于我方的非盟国联盟或互保,对实力高于我方的宣战
                        for(int i=0;i<legionDatas.size;i++){
                            LegionData l=legionDatas.get(i);
                            if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                            int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                            ForeignData fa=getForeignData(l.getLegionIndex());
                            if(l.getCapitalIntercontinentalZone()==capitalLandZone&&f==0){
                                if(pl.incomeMoney>l.incomeMoney||pl.varRegionCount>l.varRegionCount){
                                    if(ComUtil.ifGet(fa.getFavorValue())){
                                        legion_AllianceTIA1(getLegionDataByLi(pl.getInternIndex()),l,false);
                                    }else{
                                        if(fa.getForeignType()==1){
                                            fa.addLeagueLeftRound(20);
                                        }else {
                                            fa.setForeignType(1);
                                            fa.setForeignValue(20);
                                        }
                                    }
                                }else{
                                    legion_DeclareWar(pl,l,true);
                                }
                                count++;
                            }
                        }
                    }

                    if(count>0){ rs=true; }
                    break;
                case 34:// 与所有的本洲际非敌对国家进行一次实力判断.如果成功,则调停该国家与其敌对国的关系并获得大量关系度.
                    capitalLandZone=pl.getCapitalIntercontinentalZone();
                    for(int i=0;i<foreignDatas.size;i++){
                        ForeignData f=foreignDatas.get(i);
                        LegionData sl=f.getSourceLegionData();
                        LegionData tl=f.getTargetLegionData();
                        if(!f.isAlly()&&!f.isPlayer()&&sl!=null&&tl!=null&&!f.isSelf()&&(f.getForeignType()==-1||f.getFavorValue()<30)&&sl.getCapitalIntercontinentalZone()==capitalLandZone&&tl.getCapitalIntercontinentalZone()==capitalLandZone
                                &&!sl.ifPlayerEnemy()&&!tl.ifPlayerEnemy()&&(pl.varRegionCount>sl.varRegionCount||pl.incomeMoney>sl.incomeMoney)&&(pl.varRegionCount>tl.varRegionCount||pl.incomeMoney>tl.incomeMoney)){
                            if(f.getForeignType()==1){
                                f.addLeagueLeftRound(20);
                            }else {
                                f.setForeignType(1);
                                f.setForeignValue(20);
                            }
                            getForeignData(f.getSourceLegionIndex()).addFavor(ComUtil.getRandom(1,10));
                            getForeignData(f.getTargetLegionIndex()).addFavor(ComUtil.getRandom(1,10));
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 35:// 与所有中立的国家进行一次关系度和实力判定,如果成功则拉拢入我方阵营
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=getLegionDataByLi(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1&&f!=1&&ComUtil.ifGet(fa.getFavorValue())&&(pl.incomeMoney>l.incomeMoney||pl.varRegionCount>l.varRegionCount)){
                            legion_AllianceTIA1(getLegionDataByLi(pl.getInternIndex()),l,false);
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 36:// 与所有非敌对的本洲际国家进行一次实力判定,如果成功则拉拢入我方阵营,失败则与我方敌对
                    capitalLandZone=pl.getCapitalIntercontinentalZone();
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        if(l.getCapitalIntercontinentalZone()==capitalLandZone){
                            if(f!=-1&&f!=1&&(pl.incomeMoney>l.incomeMoney||pl.varRegionCount>l.varRegionCount)){
                                legion_AllianceTIA1(getLegionDataByLi(pl.getInternIndex()),l,false);
                            }else{
                                legion_DeclareWar(getLegionDataByLi(pl.getInternIndex()),l,false);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 37:// 与本洲际的所有中立关系的国家进行一次实力和关系度判定,如果成功则强制变更为我方附属国
                    capitalLandZone=pl.getCapitalIntercontinentalZone();
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(l.getCapitalIntercontinentalZone()==capitalLandZone){
                            if(f!=-1&&f!=1&&(pl.incomeMoney>l.incomeMoney||pl.varRegionCount>l.varRegionCount)&&ComUtil.ifGet(fa.getFavorValue())){
                                legion_responsive(l,pl,true);
                            }else{
                                legion_DeclareWar(getLegionDataByLi(pl.getInternIndex()),l,false);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 38:// 对本洲际中所有实力高于我方的非盟友国家宣战
                    capitalLandZone=pl.getCapitalIntercontinentalZone();
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        //ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1&&f!=1&&l.getCapitalIntercontinentalZone()==capitalLandZone&&f!=-1&&f!=1&&(l.incomeMoney>pl.incomeMoney||l.varRegionCount>pl.varRegionCount)){
                            legion_DeclareWar(pl,l,true);
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 39:// 对所有实力高于我方的国家宣战,同时我方在该回合获得立刻获得宣战国的收入资金
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        // int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        //ForeignData fa=getForeignData(l.getLegionIndex());
                        if((l.incomeMoney>pl.incomeMoney||l.varRegionCount>pl.varRegionCount)){
                            legion_DeclareWar(pl,l,true);
                            pl.addMoney(l.incomeMoney);
                            pl.addIndustry(l.incomeIndustry);
                            pl.addTech(l.incomeTech);
                            pl.addFood(l.incomeFood);
                            count++;
                        }
                    }
                    pl.addTaxBonus(pl.getTaxBonus());
                    pl.addStability(100);
                    if(count>0){ rs=true; }
                    break;
                case 40:// 对所有实力高于我方的非盟友国家宣战
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        //ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1&&f!=1&&(l.incomeMoney>pl.incomeMoney||l.varRegionCount>pl.varRegionCount)){
                            legion_DeclareWar(pl,l,true);
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 41:// 对所有国家进行实力和关系度判定.成功则与其结盟,并对与其敌对的国家宣战
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1&&f!=1){
                            if((pl.incomeMoney>l.incomeMoney||pl.varRegionCount>l.varRegionCount)&&ComUtil.ifGet(fa.getFavorValue()+20)){
                                legion_AllianceTIA1(getLegionDataByLi(pl.getInternIndex()),l,false);
                            }else{
                                fa.reduceFavor(ComUtil.getRandom(1,20));
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 42:// 对首都位于北美洲的所有非同盟国家进行一次实力判定,成功则傀儡,否则宣战
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        if(f!=-1&&f!=1&&l.getCapitalIntercontinentalZone()==3){// 1亚2欧3北美4南美5非6大洋洲
                            if(pl.incomeMoney>l.incomeMoney||pl.varRegionCount>l.varRegionCount){
                                legion_responsive(l,pl,true);
                            }else{
                                legion_DeclareWar(l,pl,true);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 43:// 对首都位于非洲的所有非同盟国家进行一次实力判定,成功则傀儡,否则宣战
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        if(f!=-1&&f!=1&&l.getCapitalIntercontinentalZone()==5){// 1亚2欧3北美4南美5非6大洋洲
                            if(pl.incomeMoney>l.incomeMoney||pl.varRegionCount>l.varRegionCount){
                                legion_responsive(l,pl,true);
                            }else{
                                legion_DeclareWar(l,pl,true);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 44:// 对首都位于南美洲的所有非同盟国家进行一次实力判定,成功则傀儡,否则宣战
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        if(f!=-1&&f!=1&&l.getCapitalIntercontinentalZone()==4){// 1亚2欧3北美4南美5非6大洋洲
                            if(pl.incomeMoney>l.incomeMoney||pl.varRegionCount>l.varRegionCount){
                                legion_responsive(l,pl,true);
                            }else{
                                legion_DeclareWar(l,pl,true);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 45:// 对首都位于欧洲的所有非同盟国家进行一次实力判定,成功则傀儡,否则宣战
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        if(f!=-1&&f!=1&&l.getCapitalIntercontinentalZone()==2){// 1亚2欧3北美4南美5非6大洋洲
                            if(pl.incomeMoney>l.incomeMoney||pl.varRegionCount>l.varRegionCount){
                                legion_responsive(l,pl,true);
                            }else{
                                legion_DeclareWar(l,pl,true);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 46:// 对所有非同盟国家进行一次实力判定,成功则傀儡,否则宣战
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        if(f!=1){// 1亚2欧3北美4南美5非6大洋洲
                            if(pl.incomeMoney>l.incomeMoney||pl.varRegionCount>l.varRegionCount){
                                legion_responsive(l,pl,true);
                            }else{
                                legion_DeclareWar(l,pl,true);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 47:// 对首都位于亚洲的所有非同盟国家进行一次实力判定,成功则傀儡,否则宣战
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        if(f!=-1&&f!=1&&l.getCapitalIntercontinentalZone()==1){// 1亚2欧3北美4南美5非6大洋洲
                            if(pl.incomeMoney>l.incomeMoney||pl.varRegionCount>l.varRegionCount){
                                legion_responsive(l,pl,true);
                            }else{
                                legion_DeclareWar(l,pl,true);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 48:// 与所有非敌对的且首都位于北美的国家进行一次实力和关系度判定,成功则与该国家合并,否则对其宣战
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        if(f!=-1&&l.getCapitalIntercontinentalZone()==3){// 1亚2欧3北美4南美5非6大洋洲
                            if(pl.incomeMoney>l.incomeMoney||pl.varRegionCount>l.varRegionCount){
                                legion_Merge(pl,l,false);
                            }else{
                                legion_DeclareWar(l,pl,true);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 49:// 与所有非敌对的且首都位于非洲的国家进行一次实力和关系度判定,成功则与该国家合并,否则对其宣战
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        if(f!=-1&&l.getCapitalIntercontinentalZone()==5){// 1亚2欧3北美4南美5非6大洋洲
                            if(pl.incomeMoney>l.incomeMoney||pl.varRegionCount>l.varRegionCount){
                                legion_Merge(pl,l,false);
                            }else{
                                legion_DeclareWar(l,pl,true);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 50:// 与所有非敌对的且首都位于南美的国家进行一次实力和关系度判定,成功则与该国家合并,否则对其宣战
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        if(f!=-1&&l.getCapitalIntercontinentalZone()==4){// 1亚2欧3北美4南美5非6大洋洲
                            if(pl.incomeMoney>l.incomeMoney||pl.varRegionCount>l.varRegionCount){
                                legion_Merge(pl,l,false);
                            }else{
                                legion_DeclareWar(pl,l,true);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 51:// 对所有中立国进行宣战
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=legionDatas.get(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        if(f!=-1&&f!=1) {
                            legion_DeclareWar(pl,l,true);
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 52:// 迎来结局,世界帝国的诞生
                    if(game.sMapScreen!=null){
                        int gameResult=0;
                        for(int i=0;i<legionDatas.size;i++){
                            LegionData l=getLegionDataByLi(i);
                            if(l.varRegionCount>0||l.incomeMoney>0){
                                count++;
                            }
                        }
                        gameResult=6-ComUtil.limitValue(count/5,1,5);

                        addPromptData(game.gameMethod.getStrValueT("end_name_7","stage_name_"+stageId),
                                game.gameMethod.getStrValueT("end_info_r_3"),
                                game.gameMethod.getStrValueT("end_effect_e"),masterData.playerLegionIndex,masterData.playerLegionIndex,true
                        );
                        game.sMapScreen.showLegionEnd(gameResult,false);
                        rs=true;
                    }
                    break;
                case 53:// 与所有的非敌对国家进行一次实力判断.如果成功,则调停该国家与其敌对国的关系并获得两国的1~10关系度
                    for(int i=0;i<foreignDatas.size;i++){
                        ForeignData f=foreignDatas.get(i);
                        LegionData sl=f.getSourceLegionData();
                        LegionData tl=f.getTargetLegionData();
                        if(!f.isAlly()&&!f.isPlayer()&&sl!=null&&tl!=null&&!f.isSelf()&&(f.getForeignType()==-1||f.getFavorValue()<30)
                                &&!sl.ifPlayerEnemy()&&!tl.ifPlayerEnemy()&&(pl.varRegionCount>sl.varRegionCount||pl.incomeMoney>sl.incomeMoney)&&(pl.varRegionCount>tl.varRegionCount||pl.incomeMoney>tl.incomeMoney)){
                            if(f.getForeignType()==1){
                                f.addLeagueLeftRound(20);
                            }else {
                                f.setForeignType(1);
                                f.setForeignValue(20);
                            }
                            getForeignData(f.getSourceLegionIndex()).addFavor(ComUtil.getRandom(1,10));
                            getForeignData(f.getTargetLegionIndex()).addFavor(ComUtil.getRandom(1,10));
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 54:// 迎来结局，联合国
                    if(game.sMapScreen!=null){
                        int gameResult=0;
                        for(int i=0;i<legionDatas.size;i++){
                            LegionData l=getLegionDataByLi(i);
                            if(l.varRegionCount>0||l.incomeMoney>0){
                                count++;
                            }
                        }
                        gameResult=ComUtil.limitValue(count/5,1,5);

                        addPromptData(game.gameMethod.getStrValueT("end_name_8","stage_name_"+stageId),
                                game.gameMethod.getStrValueT("end_info_b_3"),
                                game.gameMethod.getStrValueT("end_effect_e"),masterData.playerLegionIndex,masterData.playerLegionIndex,true
                        );
                        game.sMapScreen.showLegionEnd(gameResult,false);
                        rs=true;
                    }
                    break;
                case 55:// 与{0}中的所有非敌对国进行一次实力和关系度判定,成功则与该国家结为同盟,否则变为敌对
                    int[] rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1&&f!=1){
                            if(ComUtil.ifGet(fa.getFavorValue())&&(pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney)){
                                legion_AllianceTIA1(getLegionDataByLi(pl.getInternIndex()),l,false);
                            }else{
                                legion_DeclareWar(pl,l,true);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 56:// 与{0}中的所有中立国进行一次实力和关系度判定,成功则与该国家结盟,失败则与该国家签订十回合免战协议
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1&&f!=1){
                            if(ComUtil.ifGet(fa.getFavorValue())&&(pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney)){
                                legion_AllianceTIA1(getLegionDataByLi(pl.getInternIndex()),l,false);
                            }else{
                                if(fa.getForeignType()==1){
                                    fa.addLeagueLeftRound(10);
                                }else {
                                    fa.setForeignType(1);
                                    fa.setForeignValue(10);
                                }
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 57:// 对{0}的所有非同盟国家进行一次实力判定,成功则傀儡,否则宣战
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1&&f!=1){
                            if((pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney)){
                                legion_responsive(l,pl,true);
                            }else{
                                legion_DeclareWar(pl,l,true);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 58:// 与{0}中的所有中立国进行一次实力和关系度判定,成功则与该国家合并,否则对其宣战
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1){
                            if((ComUtil.ifGet(fa.getFavorValue())&&pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney)){
                                legion_Merge(pl,l,false);
                            }else{
                                legion_DeclareWar(pl,l,true);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 59:// 联合{3}中的非敌对国家,组建为德意志
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    //设置玩家是德意志
                    pl=getLegionByCountry(30,true);
                    if(pl==null){
                        pl=getPlayerLegionData();
                        pl.setCountryId(30);
                    }else{
                        setPlayerLegionIndex(30);
                    }
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1){
                            legion_Merge(pl,l,false);
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 60:// 联合{3}中的中立国家,拉拢为盟友或签订20回合的免战协议
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1&&f!=1){
                            if(ComUtil.ifGet(fa.getFavorValue())){
                                legion_AllianceTIA1(getLegionDataByLi(pl.getInternIndex()),l,false);
                            }else{
                                if(fa.getForeignType()==1){
                                    fa.addLeagueLeftRound(10);
                                }else {
                                    fa.setForeignType(1);
                                    fa.setForeignValue(10);
                                }
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 61:// 与{3}中的所有非敌对国进行一次实力和关系度判定,成功则与该国家合并,否则对其宣战
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1){
                            if(ComUtil.ifGet(fa.getFavorValue())&&(pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney)){
                                legion_Merge(pl,l,false);
                            }else{
                                legion_DeclareWar(pl,l,true);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 62://与{3}中的所有中立国进行一次实力和关系度判定,成功则与该国家结盟,失败则与该国家签订十回合免战协议
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1&&f!=1){
                            if(ComUtil.ifGet(fa.getFavorValue())||(pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney)){
                                legion_AllianceTIA1(getLegionDataByLi(pl.getInternIndex()),l,false);
                            }else{
                                if(fa.getForeignType()==1){
                                    fa.addLeagueLeftRound(10);
                                }else {
                                    fa.setForeignType(1);
                                    fa.setForeignValue(10);
                                }
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 63://与{3}中的所有中立国进行一次实力和关系度判定,成功则与该国家结为同盟
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1&&f!=1){
                            if(ComUtil.ifGet(fa.getFavorValue())||(pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney)){
                                legion_AllianceTIA1(getLegionDataByLi(pl.getInternIndex()),l,false);
                                count++;
                            }
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 64://与{3}中的非盟友国家变更关系为敌对,并与其他国家签订15回合免战协议
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=1){
                            legion_DeclareWar(pl,l,true);
                            count++;
                        }
                    }
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=getLegionDataByLi(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0||ComUtil.ifHaveValueInStr(lp.get("country"),l.getCountryId())){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=1&&f!=-1){
                            if(fa.getForeignType()==1){
                                fa.addLeagueLeftRound(15);
                            }else {
                                fa.setForeignType(1);
                                fa.setForeignValue(16);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 65://与{3}中的所有非敌对国进行一次实力和关系度判定,成功则与该国家合并,否则对其宣战
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1){
                            if(ComUtil.ifGet(fa.getFavorValue())&&(pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney)){
                                legion_Merge(pl,l,false);
                            }else{
                                legion_DeclareWar(pl,l,true);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 66://与{3}中的非盟友国家变更关系为敌对,并与其他国家签订20回合免战协议
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=1){
                            legion_DeclareWar(pl,l,true);
                            count++;
                        }
                    }
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=getLegionDataByLi(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0||ComUtil.ifHaveValueInStr(lp.get("country"),l.getCountryId())){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=1&&f!=-1){
                            if(fa.getForeignType()==1){
                                fa.addLeagueLeftRound(20);
                            }else {
                                fa.setForeignType(1);
                                fa.setForeignValue(20);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 67://与{3}中的所有中立国进行一次实力和关系度判定,成功则与该国家结盟,失败则与该国家签订十回合免战协议
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1&&f!=1){
                            if(ComUtil.ifGet(fa.getFavorValue())&&(pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney)){
                                legion_AllianceTIA1(getLegionDataByLi(pl.getInternIndex()),l,false);
                            }else{
                                if(fa.getForeignType()==1){
                                    fa.addLeagueLeftRound(10);
                                }else {
                                    fa.setForeignType(1);
                                    fa.setForeignValue(10);
                                }
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 68://与{3}中的所有中立国进行一次实力和关系度判定,成功则结盟,失败则与该国家签订20回合免战协议
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1&&f!=1){
                            if(ComUtil.ifGet(fa.getFavorValue())&&(pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney)){
                                legion_AllianceTIA1(getLegionDataByLi(pl.getInternIndex()),l,false);
                            }else{
                                if(fa.getForeignType()==1){
                                    fa.addLeagueLeftRound(20);
                                }else {
                                    fa.setForeignType(1);
                                    fa.setForeignValue(20);
                                }
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 69://联合{3}中的中立国家,拉拢为盟友或签订20回合的免战协议
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1&&f!=1){
                            if(ComUtil.ifGet(fa.getFavorValue())){
                                legion_AllianceTIA1(getLegionDataByLi(pl.getInternIndex()),l,false);
                            }else{
                                if(fa.getForeignType()==1){
                                    fa.addLeagueLeftRound(20);
                                }else {
                                    fa.setForeignType(1);
                                    fa.setForeignValue(20);
                                }
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 70://对{3}的所有非敌对国家进行一次实力判定,成功则傀儡,否则宣战
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1){
                            if((pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney)){
                                legion_responsive(l,pl,true);
                            }else{
                                legion_DeclareWar(pl,l,true);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 71://与{3}中的所有非敌对国进行一次实力和关系度判定,成功则与该国家合并,否则对其宣战
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1){
                            if(ComUtil.ifGet(fa.getFavorValue())||(pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney)){
                                legion_Merge(pl,l,false);
                            }else{
                                legion_DeclareWar(pl,l,true);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 72://与{3}中的非盟友国家变更关系为敌对,并与其他国家签订15回合免战协议
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=1){
                            legion_DeclareWar(pl,l,true);
                            count++;
                        }

                    }
                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=getLegionDataByLi(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0||ComUtil.ifHaveValueInStr(lp.get("country"),l.getCountryId())){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=1&&f!=-1){
                            if(fa.getForeignType()==1){
                                fa.addLeagueLeftRound(15);
                            }else {
                                fa.setForeignType(1);
                                fa.setForeignValue(15);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 73://与{3}中的所有非敌对国进行一次实力和关系度判定,成功则与该国家合并
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1){
                            if(ComUtil.ifGet(fa.getFavorValue())&&(pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney)){
                                legion_Merge(pl,l,false);
                                count++;
                            }
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 74://联合{3}中的中立国家,拉拢为盟友或签订20回合的免战协议
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1&&f!=1){
                            if(ComUtil.ifGet(fa.getFavorValue())||(pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney)){
                                legion_AllianceTIA1(getLegionDataByLi(pl.getInternIndex()),l,false);
                            }else{
                                if(fa.getForeignType()==1){
                                    fa.addLeagueLeftRound(10);
                                }else {
                                    fa.setForeignType(1);
                                    fa.setForeignValue(10);
                                }
                                count++;
                            }
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 75://与{3}中的所有非敌对国进行一次实力和关系度判定,成功则与该国家合并,否则对其宣战
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1){
                            if(ComUtil.ifGet(fa.getFavorValue())&&(pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney)){
                                legion_Merge(pl,l,false);
                            }else{
                                legion_DeclareWar(pl,l,true);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 76://合并{3}中的非敌对国家,组建为意大利
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    //设置玩家是德意志
                    pl=getLegionByCountry(97,true);
                    if(pl==null){
                        pl=getPlayerLegionData();
                        pl.setCountryId(97);
                    }else{
                        setPlayerLegionIndex(97);
                    }
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1){
                            legion_Merge(pl,l,false);
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 77:// 与{3}中的所有中立国进行一次实力和关系度判定,成功则与该国家结为同盟,否则变为敌对
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1&&f!=1){
                            if(ComUtil.ifGet(fa.getFavorValue())&&(pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney)){
                                legion_AllianceTIA1(getLegionDataByLi(pl.getInternIndex()),l,false);
                            }else{
                                legion_DeclareWar(pl,l,true);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 78://与{3}中的所有非敌对国进行一次实力和关系度判定,成功则强制合并,否则变为敌对
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1){
                            if(ComUtil.ifGet(fa.getFavorValue())&&(pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney)){
                                legion_Merge(pl,l,false);
                            }else{
                                legion_DeclareWar(pl,l,true);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 79://与{3}中的非盟友国家变更关系为敌对,并与其他国家签订15回合免战协议
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=1){
                            legion_DeclareWar(pl,l,true);
                            count++;
                        }
                    }

                    for(int i=0;i<legionDatas.size;i++){
                        LegionData l=getLegionDataByLi(i);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0||ComUtil.ifHaveValueInStr(lp.get("country"),l.getCountryId())){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=1&&f!=-1){
                            if(fa.getForeignType()==1){
                                fa.addLeagueLeftRound(15);
                            }else {
                                fa.setForeignType(1);
                                fa.setForeignValue(15);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 80://改善与{3}的关系,拉拢为盟友或签订10回合的免战协议
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(ComUtil.ifGet(fa.getFavorValue())&&(pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney)){
                            legion_AllianceTIA1(getLegionDataByLi(pl.getInternIndex()),l,false);
                        }else if(fa.getForeignType()!=1){
                            if(fa.getForeignType()==1){
                                fa.addLeagueLeftRound(10);
                            }else {
                                fa.setForeignType(1);
                                fa.setForeignValue(10);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 81:// 与{3}中的所有非敌对国进行一次实力和关系度判定,成功则与该国家合并,否则对其宣战
                    rsIds=ComUtil.stringTransIntArray(lp.get("country"));
                    if(rsIds==null||rsIds.length==0){break;}
                    for(int i=0;i<rsIds.length;i++){
                        LegionData l=getLegionByCountry(rsIds[i],true);
                        if(l==null||l.isPlayer()||l.getLegionIndex()==0||l.varRegionCount==0){ continue; }
                        int f=getRealForgeinType(pl.getLegionIndex(),l.getLegionIndex());
                        ForeignData fa=getForeignData(l.getLegionIndex());
                        if(f!=-1){
                            if(ComUtil.ifGet(fa.getFavorValue())&&(pl.varRegionCount>l.varRegionCount||pl.incomeMoney>l.incomeMoney)){
                                legion_Merge(pl,l,false);
                            }else{
                                legion_DeclareWar(pl,l,true);
                            }
                            count++;
                        }
                    }
                    if(count>0){ rs=true; }
                    break;
                case 82://82=改善与{0}之间的关系,并签订{1}回合的和平条约,研究回合{2}
                    LegionData l=getLegionDataByLi(t.getBontyValue());
                    if(l!=null&&t.getCountMax()>0){
                        ForeignData f=getForeignData(l.getLegionIndex());
                        if(f!=null){
                            f.addFavor(ComUtil.getRandom(5,15));
                            if(f.getForeignType()==1){
                                f.addLeagueLeftRound(t.getCountMax());
                            }else{
                                f.setForeignType(1);
                                f.setForeignValue(t.getCountMax());
                            }
                            rs=true;
                        }
                    }
                    break;
                case 83://83=降低我方税率30,提高{0}税率60,研究回合{1}
                    l=getLegionDataByLi(t.getBontyValue());
                    if(l!=null){
                        pl.reduceTaxBonus(30);
                        l.addTaxBonus(60);
                        rs=true;
                    }
                    break;
                case 84://84=与{0}进行一次实力判定,如果成功则将导致{0}税率和稳定度下降,此操作将导致与{0}的关系度下降,研究回合{1}
                    l=getLegionDataByLi(t.getBontyValue());
                    if(l!=null){
                        if(pl.varRegionCount>l.varRegionCount&&pl.incomeMoney>l.incomeMoney){
                            l.reduceTaxBonus(ComUtil.getRandom(10,30));
                            l.reduceStability(ComUtil.getRandom(10,30));
                        }
                        ForeignData f=getForeignData(l.getLegionIndex());
                        f.reduceFavor(30);
                        rs=true;
                    }
                    break;
                case 85://85=与{0}的所有阵营成员进行一次关系判定,成功则加入{0}的阵营,研究回合{1}
                    LegionData il=getLegionDataByLi(t.getBontyValue());
                    int ic=0,sc=0;
                    if(il!=null){
                        for(int i=0;i<legionDatas.size;i++){
                            l=legionDatas.get(i);
                            if(l.getInternIndex()==il.getInternIndex()){
                                sc++;
                                if(getForeignDegree(l.getLegionIndex(),masterData.getPlayerLegionIndex())!=-1){
                                    ic++;
                                }
                            }
                        }
                    }
                    if(sc>0&&ic*2>sc){
                        legion_AllianceTIA1(il,getPlayerLegionData(),false);
                        rs=true;
                    }
                    break;
                case 86://86=与{0}进行一次关系度判断,如果成功则邀请{0}加入我方阵营,研究回合{1}
                    l=getLegionDataByLi(t.getBontyValue());
                    if(l!=null){
                        ForeignData f=getForeignData(l.getLegionIndex());
                        if(f!=null&&ComUtil.ifGet(f.getRealFavor())){
                            legion_AllianceTIA1(getPlayerLegionData(),l,false);
                            rs=true;
                        }
                    }
                    break;
                case 87://87=与{0}进行一次实力判定,如果成功则将{0}变为附属国,此操作将导致与{0}的关系度下降,研究回合{1}
                    l=getLegionDataByLi(t.getBontyValue());
                    if(l!=null){
                        ForeignData f=getForeignData(l.getLegionIndex());
                        if(f!=null){
                            if(pl.varRegionCount>l.varRegionCount&&pl.incomeMoney>l.incomeMoney&&ComUtil.ifGet(100-l.getStability())){
                                l.setSuzerainLi(pl.getLegionIndex());
                            }else{
                                f.reduceFavor(ComUtil.getRandom(15,30));
                            }
                            rs=true;
                        }
                    }
                    break;
                case 88://88=与目标区域所属国{0}进行一次实力判定,如果成功将会获得{1},此操作将导致与该国家的关系度下降,研究回合{2}
                    l=getLegionDataByLi(t.getBontyValue());
                    BuildData b=getBuildDataByRegion(GameMap.getId(t.getCountNow(),t.getCountMax(),masterData.getWidth()));
                    if(l!=null&&b!=null){
                        ForeignData f=getForeignData(l.getLegionIndex());
                        if(f!=null){
                            if(pl.varRegionCount>l.varRegionCount&&pl.incomeMoney>l.incomeMoney&&(ComUtil.ifGet(100-b.getCityStability())||ComUtil.ifGet(100-l.getStability()))){
                                //setRegionAllLegionIndex(b.getRegionId(),masterData.getPlayerLegionIndex(),false);
                                legion_exChangeSRRegion(b.getLegionIndex(),masterData.getPlayerLegionIndex(),0,b.getStrategicRegion());
                            }
                            f.reduceFavor(ComUtil.getRandom(10,20));
                            rs=true;
                        }
                    }
                    break;
                case 89://89={0}以{1}交换我们{2},持续5回合,研究回合{3}
                    // TODO
                    /*this.setCountMax(0);//4 交换国
                    this.setStar(0);//2 交换国类型
                    this.setCountNowValue(0);//4 交换国价值
                    this.setBontyType(0);//2 玩家交换类型
                    this.setBontyValue(0);//4  玩家交换价值*/
                    //int type,int sourceLegionId,int targetLegionId,int value1,int value2 ,int round,int gameValue
                    RoundData r=new RoundData(1,3,t.getCountMax(),masterData.getPlayerLegionIndex(),t.getCountNow(),t.getBontyValue(),5,t.star,t.getBontyType(),-1);
                    roundDatas.add(r);
                    rs=true;

                    break;
                case 90://90={0}以{1}交换我们{2},持续10回合,研究回合{3}
                    r=new RoundData(1,3,t.getCountMax(),masterData.getPlayerLegionIndex(),t.getCountNow(),t.getBontyValue(),10,t.star,t.getBontyType(),-1);
                    roundDatas.add(r);
                    rs=true;
                    break;
                case 91://91={0}以{1}交换我们{2},持续20回合,研究回合{3}
                    r=new RoundData(1,3,t.getCountMax(),masterData.getPlayerLegionIndex(),t.getCountNow(),t.getBontyValue(),20,t.star,t.getBontyType(),-1);
                    roundDatas.add(r);
                    rs=true;
                    break;
                case 92://92=所有将军部队进行重组和随机,研究回合{1}
                {
                    Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                    while (itB4.hasNext()) {
                        ArmyData armyData = itB4.next().value;
                        if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getGeneralIndex()!=0) {
                            armyData.resetAbility();
                            armyData.armyRank=ComUtil.limitValue(ComUtil.getRandom( armyData.armyRank-3, armyData.armyRank+3),game.resGameConfig.unityRankMax,game.resGameConfig.generalRankMax);
                            rs=true;
                        }
                    }
                    Iterator<IntMap.Entry<AirData>> it = airIDatas.iterator();
                    while (it.hasNext()) {
                        AirData a= it.next().value;
                        if(a.getLegionIndex()==masterData.getPlayerLegionIndex()&&a.getGeneralIndex()!=0){
                            a.resetAbility();
                            a.airRank=ComUtil.limitValue(ComUtil.getRandom( a.airRank-3, a.airRank+3),game.resGameConfig.unityRankMax,game.resGameConfig.generalRankMax);
                            rs=true;
                        }
                    }
                }

                break;
                case 93://93=所有步兵部队有{0}%几率武器等级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==1 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.randomUpdArmyWealv();
                                rs=true;
                            }
                        }
                    }
                    break;
                case 94://94=所有步兵部队有{0}%几率军衔等级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==1 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.updRankForValue(1);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 95://95=所有步兵部队有{0}%几率编队等级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==1 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.randomUpdUnitGroupLv();
                                rs=true;
                            }
                        }
                    }
                    break;
                case 96://96=所有步兵部队有{0}%几率士气增加40,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==1 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.setArmyMoraleChange(40);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 97://97=所有步兵部队有{0}%几率生命恢复25%,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==1 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.addArmyHpByRate(25);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 98://98=所有步兵部队有{0}%几率增加一个基础部队,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==1 && ComUtil.ifGet(t.countMax)) {
                                armyData.addUnitGroupArmy(1101);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 99://99=所有步兵部队有{0}%几率重置攻击状态,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==1 && ComUtil.ifGet(t.countMax)) {
                                armyData.setIfAttack(0);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 100://100=所有步兵部队重新随机设定其等级和能力,研究回合{1}
                {
                    Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                    while (itB4.hasNext()) {
                        ArmyData armyData = itB4.next().value;
                        if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==1) {
                            armyData.resetAbility();
                            rs=true;
                        }
                    }
                }
                break;
                case 101://101=所有炮兵部队有{0}%几率武器等级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==2 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.randomUpdArmyWealv();
                                rs=true;
                            }
                        }
                    }
                    break;
                case 102://102=所有炮兵部队有{0}%几率军衔等级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==2 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.updRankForValue(1);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 103://103=所有炮兵部队有{0}%几率编队等级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==2 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.randomUpdUnitGroupLv();
                                rs=true;
                            }
                        }
                    }
                    break;
                case 104://104=所有炮兵部队有{0}%几率士气增加40,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==2 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.setArmyMoraleChange(40);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 105://105=所有炮兵部队有{0}%几率生命恢复25%,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==2 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.addArmyHpByRate(25);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 106://106=所有炮兵部队有{0}%几率增加一个基础部队,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==2 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.addUnitGroupArmy(1201);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 107://107=所有炮兵部队有{0}%几率重置攻击状态,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==2 && ComUtil.ifGet(t.countMax)) {
                                armyData.setIfAttack(0);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 108://108=所有炮兵部队重新随机设定其等级和能力,研究回合{1}
                {
                    Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                    while (itB4.hasNext()) {
                        ArmyData armyData = itB4.next().value;
                        if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==2) {
                            armyData.resetAbility();
                            rs=true;
                        }
                    }
                }
                break;
                case 109://109=所有装甲部队有{0}%几率武器等级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==2 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.randomUpdArmyWealv();
                                rs=true;
                            }
                        }
                    }
                    break;
                case 110://110=所有装甲部队有{0}%几率军衔等级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==3 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.updRankForValue(1);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 111://111=所有装甲部队有{0}%几率编队等级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==3 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.randomUpdUnitGroupLv();
                                rs=true;
                            }
                        }
                    }
                    break;
                case 112://112=所有装甲部队有{0}%几率士气增加40,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==3 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.setArmyMoraleChange(40);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 113://113=所有装甲部队有{0}%几率生命恢复25%,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==3 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.addArmyHpByRate(25);
                                rs=true;
                            }

                        }
                    }
                    break;
                case 114://114=所有装甲部队有{0}%几率增加一个基础部队,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==3 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.addUnitGroupArmy(1301);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 115://115=所有装甲部队有{0}%几率重置攻击状态,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==3 && ComUtil.ifGet(t.countMax)) {
                                armyData.setIfAttack(0);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 116://116=所有装甲部队重新随机设定其等级和能力,研究回合{1}
                {
                    Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                    while (itB4.hasNext()) {
                        ArmyData armyData = itB4.next().value;
                        if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==3) {
                            armyData.resetAbility();
                            rs=true;
                        }
                    }
                }
                break;
                case 117://117=所有舰船部队有{0}%几率武器等级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==4 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.randomUpdArmyWealv();
                                rs=true;
                            }
                        }
                    }
                    break;
                case 118://118=所有舰船部队有{0}%几率军衔等级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==4 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.updRankForValue(1);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 119://119=所有舰船部队有{0}%几率编队等级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==4 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.randomUpdUnitGroupLv();
                                rs=true;
                            }
                        }
                    }
                    break;
                case 120://120=所有舰船部队有{0}%几率士气增加40,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==4 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.setArmyMoraleChange(40);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 121://121=所有舰船部队有{0}%几率生命恢复25%,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==4 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.addArmyHpByRate(25);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 122://122=所有舰船部队有{0}%几率增加一个基础部队,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==4 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.addUnitGroupArmy(1401);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 123://123=所有舰船部队有{0}%几率重置攻击状态,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==4 && ComUtil.ifGet(t.countMax)) {
                                armyData.setIfAttack(0);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 124://124=所有舰船部队重新随机设定其等级和能力,研究回合{1}
                {
                    Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                    while (itB4.hasNext()) {
                        ArmyData armyData = itB4.next().value;
                        if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==4) {
                            armyData.resetAbility();
                            rs=true;
                        }
                    }
                }
                break;
                case 125://125=所有空军部队有{0}%几率的火力星级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<AirData>> it = airIDatas.iterator();
                        while (it.hasNext()) {
                            AirData a= it.next().value;
                            if(a.getLegionIndex()==masterData.getPlayerLegionIndex()&&a.canUpdAirAbilityLv(1)&&ComUtil.ifGet(t.countMax)){
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                a.updAirAbilityLv(1,1);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 126://126=所有空军部队有{0}%几率的侦查星级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<AirData>> it = airIDatas.iterator();
                        while (it.hasNext()) {
                            AirData a= it.next().value;
                            if(a.getLegionIndex()==masterData.getPlayerLegionIndex()&&a.canUpdAirAbilityLv(2)&&ComUtil.ifGet(t.countMax)){
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                a.updAirAbilityLv(2,1);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 127://127=所有空军部队有{0}%几率的补给星级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<AirData>> it = airIDatas.iterator();
                        while (it.hasNext()) {
                            AirData a= it.next().value;
                            if(a.getLegionIndex()==masterData.getPlayerLegionIndex()&&a.canUpdAirAbilityLv(3)&&ComUtil.ifGet(t.countMax)){
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                a.updAirAbilityLv(3,1);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 128://128=所有空军部队有{0}%几率的防御星级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<AirData>> it = airIDatas.iterator();
                        while (it.hasNext()) {
                            AirData a= it.next().value;
                            if(a.getLegionIndex()==masterData.getPlayerLegionIndex()&&a.canUpdAirAbilityLv(4)&&ComUtil.ifGet(t.countMax)){
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                a.updAirAbilityLv(4,1);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 129://129=所有空军部队有{0}%几率物资上限+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<AirData>> it = airIDatas.iterator();
                        while (it.hasNext()) {
                            AirData a= it.next().value;
                            if(a.getLegionIndex()==masterData.getPlayerLegionIndex()&& a.canUpdGoods()&&ComUtil.ifGet(t.countMax)){
                                a.goodsMax++;
                                rs=true;
                            }
                        }
                    }
                    break;
                case 130://130=所有空军部队有{0}%几率的武器星级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<AirData>> it = airIDatas.iterator();
                        while (it.hasNext()) {
                            AirData a= it.next().value;
                            if(a.getLegionIndex()==masterData.getPlayerLegionIndex()&&a.canUpdWeaLv()&&ComUtil.ifGet(t.countMax)){
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                a.updWeaLv();
                                rs=true;
                            }
                        }
                    }
                    break;
                case 131://131=所有空军的待机回合减半,研究回合{1}
                {
                    Iterator<IntMap.Entry<AirData>> it = airIDatas.iterator();
                    while (it.hasNext()) {
                        AirData a= it.next().value;
                        if(a.getLegionIndex()==masterData.getPlayerLegionIndex()&&a.getAirRound()>0){
                            //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                            a.setAirRound(a.getAirRound()/2);
                            rs=true;
                        }
                    }
                }
                break;
                case 132://132=所有空军部队重新随机设定其等级和能力,研究回合{1}
                {
                    Iterator<IntMap.Entry<AirData>> it = airIDatas.iterator();
                    while (it.hasNext()) {
                        AirData a= it.next().value;
                        if(a.getLegionIndex()==masterData.getPlayerLegionIndex()&&a.getAirRound()>0){
                            //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                            a.resetAbility();
                            rs=true;
                        }
                    }
                }
                break;
                case 133://133=所有要塞部队有{0}%几率武器等级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==6 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.randomUpdArmyWealv();
                                rs=true;
                            }
                        }
                    }
                    break;
                case 134://134=所有要塞部队有{0}%几率军衔等级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==6 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.updRankForValue(1);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 135://135=所有要塞部队有{0}%几率编队等级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==6 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.randomUpdUnitGroupLv();
                                rs=true;
                            }
                        }
                    }
                    break;
                case 136://136=所有要塞部队有{0}%几率士气增加40,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==6 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.setArmyMoraleChange(40);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 137://137=所有要塞部队有{0}%几率生命恢复25%,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==6 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.addArmyHpByRate(25);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 138://138=所有要塞部队有{0}%几率增加一个基础部队,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==6 && ComUtil.ifGet(t.countMax)) {
                                armyData.addUnitGroupArmy(1601);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 139://139=所有要塞部队重新随机设定其等级和能力,研究回合{1}
                {
                    Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                    while (itB4.hasNext()) {
                        ArmyData armyData = itB4.next().value;
                        if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==6) {
                            armyData.resetAbility();
                            rs=true;
                        }
                    }
                }

                break;
                case 140://140=所有潜艇部队有{0}%几率武器等级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==8 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.randomUpdArmyWealv();
                                rs=true;
                            }
                        }
                    }
                    break;
                case 141://141=所有潜艇部队有{0}%几率军衔等级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==8 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.updRankForValue(1);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 142://142=所有潜艇部队有{0}%几率编队等级+1,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==8 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.randomUpdUnitGroupLv();
                                rs=true;
                            }
                        }
                    }
                    break;
                case 143://143=所有潜艇部队有{0}%几率士气增加40,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==8 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.setArmyMoraleChange(40);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 144://144=所有潜艇部队有{0}%几率生命恢复25%,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==8 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.addArmyHpByRate(25);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 145://145=所有潜艇部队有{0}%几率重置移动状态,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==8 && ComUtil.ifGet(t.countMax)) {
                                //1 ackLv 2 defLv 3 resLv 4 supLv 5 actLv 6 weaLv
                                armyData.setIfMove(0);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 146://146=所有潜艇部队有{0}%几率重置攻击状态,研究回合{1}
                    if(t.countMax>0){
                        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                        while (itB4.hasNext()) {
                            ArmyData armyData = itB4.next().value;
                            if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==8 && ComUtil.ifGet(t.countMax)) {
                                armyData.setIfAttack(0);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 147://147=所有潜艇部队重新随机设定其等级和能力,研究回合{1}
                {
                    Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                    while (itB4.hasNext()) {
                        ArmyData armyData = itB4.next().value;
                        if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==8) {
                            armyData.resetAbility();
                            rs=true;
                        }
                    }
                }
                break;
                case 148://148=大幅度降低税率和稳定度,在每一个空余区域有{0}%几率招募一个步兵,研究回合{3}
                    pl.setTaxBonus(pl.getTaxBonus()/2);
                    pl.setStability(pl.getStability()/2);
                    for(int bi=0;bi<buildRDatas.size();bi++){
                        b=buildRDatas.getByIndex(bi);
                        if(b!=null&&!b.ifHaveGarrison()){
                            recruit(b.getRegionId(),1101,-1);
                            rs=true;
                        }
                    }

                    break;
                case 149://149=将所有已攻击未移动状态的步兵单位,变为可移动不可攻击的状态,研究回合{1}
                {
                    Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                    while (itB4.hasNext()) {
                        ArmyData armyData = itB4.next().value;
                        if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()==1&&armyData.ifMove==1&&armyData.ifAttack==0) {
                            armyData.ifMove=0;
                            armyData.ifAttack=1;
                            rs=true;
                        }
                    }
                }
                break;
                case 150://150=有{0}%几率获得所有我方正在作战的区域的视野,研究回合{1}
                    if(t.countMax>0){
                        for(int bi=0;bi<buildRDatas.size();bi++){
                            b=buildRDatas.getByIndex(bi);
                            if(b!=null&&b.getBuildStatus()==3&&ComUtil.ifGet(t.countMax)){
                                tactic_SpyingMessage(b.getRegionId(),10,false);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 151://151=在所有作战的敌方区域上进行判定,如果成功直接获取该区域的控制权,研究回合{1}
                    if(t.countMax>0){
                        for(int bi=0;bi<buildRDatas.size();bi++){
                            b=buildRDatas.getByIndex(bi);
                            if(b!=null&&b.getBuildStatus()==3&&ComUtil.ifGet(t.countMax)&&b.getLegionIndex()!=masterData.getPlayerLegionIndex()){
                                setRegionAllLegionIndex(b.getRegionId(),masterData.getPlayerLegionIndex(),false);
                                rs=true;
                            }
                        }
                    }
                    break;
                case 152://152=所有处于非战斗状态的且城防等级小于城市等级的区域,城防设施等级+1,研究回合{1}
                    for(int bi=0;bi<buildRDatas.size();bi++){
                        b=buildRDatas.getByIndex(bi);
                        if(b!=null&&b.getLegionIndex()==masterData.getPlayerLegionIndex()&&b.getBuildStatus()==0&&b.getDefenceLvNow()<b.getCityLvNow()){
                            b.updDefenceLvNow();
                            rs=true;
                        }
                    }
                    break;
                case 153://153=提高国家稳定度与所有我方区域的稳定度,研究回合{1}
                    pl.addStability(pl.getStability()/4+5);
                    for(int bi=0;bi<buildRDatas.size();bi++) {
                        b = buildRDatas.getByIndex(bi);
                        if (b != null && b.getLegionIndex() == masterData.getPlayerLegionIndex()) {
                            b.addCityStability(10,game.resGameConfig.cityStabilityChangeValueMax);
                            rs=true;
                        }
                    }
                    break;
                case 154://154=所有处于战斗状态的我方区域上的敌方部队,根据士气和区域稳定度进行判定,如果成功,则其本回合无法行动,研究回合{1}
                    for(int bi=0;bi<buildRDatas.size();bi++) {
                        b = buildRDatas.getByIndex(bi);
                        if (b != null && b.getLegionIndex() == masterData.getPlayerLegionIndex()&&b.getBuildStatus()!=0) {
                            b.setEnemyUnitStagnate();
                            rs=true;
                        }
                    }
                    break;
                case 155://155=我方所有战斗状态的区域设施等级随机降低,并降低该区域上的所有敌方部队士气,生命,研究回合{1}
                    for(int bi=0;bi<buildRDatas.size();bi++) {
                        b = buildRDatas.getByIndex(bi);
                        if (b != null && b.getLegionIndex() == masterData.getPlayerLegionIndex()&&b.getBuildStatus()!=0) {
                            tactic_NuclearBlasting(b.getRegionId(),b.getCityLvNow(),false);
                            rs=true;
                        }
                    }
                    break;
                case 156://156=我方所有战斗状态区域的民用设施等级随机提高5级,研究回合{1}
                    for(int bi=0;bi<buildRDatas.size();bi++) {
                        b = buildRDatas.getByIndex(bi);
                        if (b != null && b.getLegionIndex() == masterData.getPlayerLegionIndex()&&b.getBuildStatus()==0) {
                            legion_UpdTech(getPlayerLegionData(),b,ComUtil.getRandom(2001,2009));
                            rs=true;
                        }
                    }
                    break;
                case 157://157=与所有占有我方核心领土的国家进行一次实力判定,成功则获得该领土,此操作将会导致占领该领土的国家敌对,研究回合{3}
                    if( pl.coreAreaRegions!=null){
                        for (int i = 0; i < pl.coreAreaRegions.size; i++) {
                                int cr=pl.coreAreaRegions.get(i);
                                b=getBuildDataByRegion(cr);
                                if(b!=null&&b.getLegionIndex()!=pl.getLegionIndex()){
                                    l=b.getLegionData();
                                    if(pl.varRegionCount>l.varRegionCount&&pl.incomeMoney>l.incomeMoney){
                                        setRegionAllLegionIndex(b.getRegionId(),masterData.getPlayerLegionIndex(),false);
                                        rs=true;
                                    }
                                }

                        }
                    }

                    break;
                case 158://158=与所有占有我方领土的国家进行一次实力判定,成功则获得该领土,此操作将会导致占领该领土的国家敌对,研究回合{3}
                    if( pl.coreAreaRegions!=null){
                        for (int i = 0; i < pl.coreAreaRegions.size; i++) {
                            int cr=pl.coreAreaRegions.get(i);
                            b=getBuildDataByRegion(cr);
                                if(b!=null&&b.getLegionIndex()!=pl.getLegionIndex()){
                                    l=b.getLegionData();
                                    if(pl.varRegionCount>l.varRegionCount&&pl.incomeMoney>l.incomeMoney){
                                        setRegionAllLegionIndex(b.getRegionId(),masterData.getPlayerLegionIndex(),false);
                                        rs=true;
                                    }
                                }

                        }
                    }
                    if( pl.majorAreaRegions!=null){

                        for (int i = 0; i < pl.majorAreaRegions.size; i++) {

                                int cr=pl.majorAreaRegions.get(i);
                                b=getBuildDataByRegion(cr);
                                if(b!=null&&b.getLegionIndex()!=pl.getLegionIndex()){
                                    l=b.getLegionData();
                                    if(pl.varRegionCount>l.varRegionCount&&pl.incomeMoney>l.incomeMoney){
                                        setRegionAllLegionIndex(b.getRegionId(),masterData.getPlayerLegionIndex(),false);
                                        rs=true;
                                    }
                                }

                        }
                    }

                    break;
                case 159://159=使所有收入低于我方的势力(包括我方)税率大幅度降低,使所有领土数小于我方(包括我方)的势力稳定度大幅度降低,研究回合{3}
                    for(int i=0;i<legionDatas.size;i++){
                        l=legionDatas.get(i);
                        if(pl.varRegionCount>=l.varRegionCount){
                            l.setStability(l.getStability()/2);
                            rs=true;
                        }
                        if(pl.incomeMoney>=l.incomeMoney){
                            l.setTaxBonus(l.getTaxBonus()/2);
                            rs=true;
                        }
                    }

                    break;
                case 160://160=与所有历史友好的国家签署和约,并向所有历史交恶的国家宣战,研究回合{3}
                    for(int i=0;i<legionDatas.size;i++){
                        l=legionDatas.get(i);
                        ForeignData f=getForeignData(l.getLegionIndex());
                        int fd=getForeignDegree(l.getLegionIndex(),masterData.getPlayerLegionIndex());
                        if(f.getDiplomaticAttitude()==2){//世交
                            if(f.getForeignType()!=1){
                                if(f.getForeignType()==1){
                                    f.addLeagueLeftRound(ComUtil.getRandom(10,20));
                                }else{
                                    f.setForeignType(1);
                                    f.setForeignValue(ComUtil.getRandom(5,10));
                                }
                                rs=true;
                            }
                        }else if(f.getDiplomaticAttitude()==3){//世仇
                            legion_DeclareWar(getPlayerLegionData(),l,false);
                            f.setForeignType(-1);
                            rs=true;
                        }
                    }
                    break;
                case 161://161=使所有的弹头武器研发回合减半,研究回合{1}
                    Iterator<IntMap.Entry<NulcleData>> it = nulcleIDatas.iterator();
                    while (it.hasNext()) {
                        IntMap.Entry<NulcleData> c = it.next();
                        NulcleData nulcleData=c.value;
                        if(nulcleData!=null&&nulcleData.getLegionIndex()==masterData.getPlayerLegionIndex()&&nulcleData.getNucleRound()>0){
                            nulcleData.setNucleRound(nulcleData.getNucleRound()/2);
                            rs=true;
                        }
                    }
                    break;
                case 162://162=使所有处于我方核心区域和主要区域的部队士气增加,研究回合{1}
                    if(t.countMax>0){
                        if( pl.coreAreaRegions!=null){
                            for (int i = 0; i < pl.coreAreaRegions.size; i++) {
                                int cr=pl.coreAreaRegions.get(i);
                                b=getBuildDataByRegion(cr);
                                    if(b!=null&&b.getLegionIndex()==pl.getLegionIndex()){
                                        tactic_Inspiring(b.getRegionId(),10,false);
                                        rs=true;
                                    }

                            }
                        }
                        if( pl.majorAreaRegions!=null){

                            for (int i = 0; i < pl.majorAreaRegions.size; i++) {
                                {
                                    int cr=pl.majorAreaRegions.get(i);
                                    b=getBuildDataByRegion(cr);
                                    if(b!=null&&b.getLegionIndex()==pl.getLegionIndex()){
                                        tactic_Inspiring(b.getRegionId(),b.getCultureLvNow(),false);
                                        rs=true;
                                    }
                                }
                            }
                        }

                    }
                    break;
                case 163://163=为所有未配备护航船的在水中陆军部队配备护航船,研究回合{1}
                {
                    Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
                    while (itB4.hasNext()) {
                        ArmyData armyData = itB4.next().value;
                        if (armyData != null && armyData.getLegionIndex() == masterData.getPlayerLegionIndex()&&armyData.getArmyType()!=4&&armyData.getArmyType()!=8&&armyData.getTransportType()==0&&armyData.potionIsSea()) {
                            armyData.setTransportType(1);
                            rs=true;
                        }
                    }
                }
                break;
                case 164://164=所有处于非战斗状态的且能源供给不足的区域,能源设施等级+1,研究回合{1}
                    for(int bi=0;bi<buildRDatas.size();bi++) {
                        b = buildRDatas.getByIndex(bi);
                        if (b != null && b.getLegionIndex() == masterData.getPlayerLegionIndex()&&b.getBuildStatus()==0&&b.ifEnergyOverload()) {
                            b.updEnergyLvNow();
                            rs=true;
                        }
                    }
                    break;
                case 165://165=所有处于非战斗状态的且交通等级小于城市等级的区域,交通设施等级+1,研究回合{1}
                    for(int bi=0;bi<buildRDatas.size();bi++) {
                        b = buildRDatas.getByIndex(bi);
                        if (b != null && b.getLegionIndex() == masterData.getPlayerLegionIndex()&&b.getBuildStatus()==0&&b.getTransportLvNow()<b.getCityLvNow()) {
                            b.updTransportLvNow();
                            rs=true;
                        }
                    }
                    break;

            }
        }

        game.tempUtil.disposeTempIntArray(tempIntArray);
        return rs;
    }

    //初始化外交态度
    public void initDiplomaticAttitude(){
        if(foreignDatas==null||foreignDatas.size==0){
            return;
        }
        Array<XmlReader.Element> daEs=game.gameConfig.getDEF_DIPLOMATICATTITUDE().e.getChildrenByName("diplomaticAttitude");
        for(XmlReader.Element daE:daEs){
            ForeignData f=getForeignData(getLegionIndexByCountry(daE.getInt("sourceCountry",0)),getLegionIndexByCountry(daE.getInt("targetCountry",0)));
            if(f!=null){
                f.setDiplomaticAttitude(daE.getInt("attitude",0));
                f.initFavorByDiplomaticAttitude();
            }
        }
    }


    /*
     0.变通（依据好感度决定外交态度）
     1 多变（随机）
     2.世交(双方互为友好)
     3.世仇(双方互相仇视)
     4.周旋(当实力相近的时候是中立,当实力差距过大的时候是敌视)
     5.觊觎(当实力相近的时候是敌视,当实力差距过大的时候是中立)
     6.尊重
     */
    //获得外交认可  0未知 1友好 -1敌视
    public int getRealDiplomaticRecognition(int liA, int liB){
        ForeignData f=getForeignData(liA,liB);

        LegionData l1=getLegionDataByLi(liA);
        LegionData l2=getLegionDataByLi(liB);
        if(f==null||l1==null||l2==null){
            return 0;
        }
        switch (f.getDiplomaticAttitude()){
            case 0:
                if(f.getDiplomaticAttitude()==0){
                    return 0;
                }else{
                    return getForeignDegree(liA,liB);
                }
            case 1:
                return  (masterData.getRoundNow()+l1.getInternIndex())%3-1  ;
            case 2:
                return 1;
            case 3:
                return -1;
            case 4:
                if( (l1.varRegionCount>l2.varRegionCount*2||l1.incomeMoney>l2.incomeMoney*2)|| (l1.varRegionCount*2<l2.varRegionCount||l1.incomeMoney*2<l2.incomeMoney) ){
                    return -1;
                }else{
                    return 0;
                }
            case 5:
                if( (l1.varRegionCount>l2.varRegionCount*2||l1.incomeMoney>l2.incomeMoney*2)|| (l1.varRegionCount*2<l2.varRegionCount||l1.incomeMoney*2<l2.incomeMoney) ){
                    return 0;
                }else{
                    return -1;
                }
            case 6:
                return 0;

            default:
                return 0;
        }
    }

    public boolean ifIsRiver(int id){
        Fb2Map.MapHexagon h=getHexagonData(id);
        if(h!=null&&h.getBackTile()==11){
            return true;
        }
        return false;
    }


    //ifDirect true 返回direct  0不相邻  1↖ 2上 3↗ 4↙ 5↓ 6↘
    //false   返回相邻位置 rs:  0不相邻 1:|  2:/ 3:\
    public int getAdjoinPotionType(int he1,int he2,boolean ifDirect){

        if(ifGridIsPass(he1)&&ifGridIsPass(he2)){
            int direct=0;
            for(int i=1;i<=6;i++){
                if(getBorderIdByDirect(he1,i)==he2){ //1↖ 2上 3↗ 4↙ 5↓ 6↘
                    if(ifDirect){
                        return i;
                    }else{
                        direct=i;
                        break;
                    }
                }
            }
            switch (direct){
                case 1:
                case 6:
                    return 3;//\
                case 3:
                case 4:
                    return 2;// /
                case 2:
                case 5:
                    return 1;//|
            }
        }
        return 0;
    }


    //获得维护费比例
    public float getMilitaryCostRate(){
        return game.resGameConfig.militaryCostRate+getAge();
    }

    //判断某个属性或设定是否有效
    public boolean ifSystemEffective(int type){
        switch (type){
            case 0://cityStability
                switch (masterData.getPlayerMode()){
                    case 0:return true;
                    case 1:return false;
                    case 2:return false;
                    default:return false;
                }
            case 1://mineral 矿石限制industry产量是否生效
                switch (masterData.getPlayerMode()){
                    case 0:return true;
                    case 1:return false;
                    case 2:return false;
                    default:return false;
                }

            case 2://oil 移动是否受到石油限制
                LegionData pl=getPlayerLegionData();
                switch (masterData.getPlayerMode()){
                    case 0:if(getAge()<1||(pl!=null&&pl.getSumTechLv()<30)){return false;}     return true;
                    case 1:return false;
                    case 2:return false;
                    default:return false;
                }

            case 3://attack 进攻是否收到工业值限制
                pl=getPlayerLegionData();
                switch (masterData.getPlayerMode()){
                    case 0:if(getAge()<1||(pl!=null&&pl.getSumTechLv()<30)){return false;}   return true;
                    case 1:return false;
                    case 2:return false;
                    default:return false;
                }
            case 4://ForeignData 外交
                if(foreignDatas==null){
                    return false;
                }
                switch (masterData.getPlayerMode()){
                    case 0:return true;
                    case 1:return false;
                    case 2:return true;
                    default:return false;
                }
            case 5://attackAlly 玩家是否可以进攻非敌对
                switch (masterData.getPlayerMode()){
                    case 0:return false;
                    case 1:return true;
                    case 2:return false;
                    default:return false;
                }
            case 6://occupyBuild 玩家是否可以占领非敌对建筑
                switch (masterData.getPlayerMode()){
                    case 0:return true;
                    case 1:return true;
                    case 2:return true;
                    default:return true;
                }
            case 7://energy 是否设定能源限制
                pl=getPlayerLegionData();
                switch (masterData.getPlayerMode()){
                    case 0:if(getAge()<1||(pl!=null&&pl.getSumTechLv()<30)){return false;} return true;
                    case 1:return false;
                    case 2:return false;
                    default:return false;
                }
            case 8://areaTactical  是否能使用区域技能
                switch (masterData.getPlayerMode()){
                    case 0:return true;
                    case 1:return false;
                    case 2:return true;
                    default:return false;
                }
            case 9://event  是否触发事件
                switch (masterData.getPlayerMode()){
                    case 0:return true;
                    case 1:return false;
                    case 2:return false;
                    default:return false;
                }

            case 10://legionFeature legionPolicy 军团特性和决议是否启用
                switch (masterData.getPlayerMode()){
                    case 0:return true;
                    case 1:return false;
                    case 2:return false;
                    default:return false;
                }

            case 11://ifDeadByTime 将军死去
                switch (masterData.getPlayerMode()){
                    case 0:return true;
                    case 1:return false;
                    case 2:return false;
                    default:return false;
                }

            case 12://ifRandDialogue 是否随机对话
                switch (masterData.getPlayerMode()){
                    case 0:return true;
                    case 1:return true;
                    case 2:return false;
                    default:return false;
                }
            case 13://ifRandomEvent 是否开启历史事件
                switch (masterData.getPlayerMode()){
                    case 0:return true;
                    case 1:return false;
                    case 2:return false;
                    default:return false;
                }
            case 14://year 是否容许时间流逝
                switch (masterData.getPlayerMode()){
                    case 0:return true;
                    case 1:return false;
                    case 2:return false;
                    default:return true;
                }
            case 15://task 是否开启随机任务
                switch (masterData.getPlayerMode()){
                    case 0:return true;
                    case 1:return false;
                    case 2:return false;
                    default:return false;
                }
            case 16://奇物 是否开启奇物
                switch (masterData.getPlayerMode()){
                    case 0:return true;
                    case 1:return false;
                    case 2:return false;
                    default:return false;
                }
            case 17://trade
                switch (masterData.getPlayerMode()){
                    case 0:return true;
                    case 1:return false;
                    case 2:return false;
                    default:return false;
                }
            case 18://是否容许不宣而战
                if(ifSystemEffective(4)&&!isEditMode(false)){
                    switch (masterData.getPlayerMode()){
                        case 0:return false;
                        case 1:return true;
                        case 2:return false;
                    }
                }else{
                    return  true;
                }
            case 19://wonder 是否启用奇观
                switch (masterData.getPlayerMode()){
                    case 0:return true;
                    case 1:return false;
                    case 2:return false;
                }
            case 20://unitFeature 是否开启兵种特性
                switch (masterData.getPlayerMode()){
                    case 0:return true;
                    case 1:return true;
                    case 2:return true;
                }
            case 21://unitSkill 是否开启兵种技能
                switch (masterData.getPlayerMode()){
                    case 0:return true;
                    case 1:return true;
                    case 2:return false;
                }
            case 22://铁路
                switch (masterData.getPlayerMode()){
                    case 0:return true;
                    case 1:return true;
                    case 2:return false;
                }
            case 23://是否可以组合部队
                switch (masterData.getPlayerMode()){
                    case 0:return true;
                    case 1:return true;
                    case 2:return false;
                }
            case 24://收入或者招募是否受区域影响 历史领土
                switch (masterData.getPlayerMode()){
                    case 0:return true;
                    case 1:return false;
                    case 2:return false;
                }
            default:
                return false;
        }
    }


    public void initCapital(){
        IntIntMap buildNameMap=new IntIntMap();
        IntIntMap tempIntIntMap=new IntIntMap();
        IntIntMap legionLargestCityMap = new IntIntMap();



      /*  Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
        while (it.hasNext()) {
            IntMap.Entry<BuildData> c = it.next();
            BuildData b=c.value;*/
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            //存储地名以设置首都
            if (b.getBuildName() > 0) {
                buildNameMap.put(b.getBuildName(), b.getRegionId());
            }

            tempIntIntMap.put(b.regionId, b.getCityLvNow());
            //存储首都以用来选取首都
            if (b.legionIndex > 0) {
                if (legionLargestCityMap.containsKey(b.legionIndex)) {
                    if (b.getBuildType()!=2&&b.cityLvNow > tempIntIntMap.get(legionLargestCityMap.get(b.legionIndex, 0), 0)) {
                        legionLargestCityMap.put(b.legionIndex, b.getRegionId());
                    }
                } else {
                    legionLargestCityMap.put(b.legionIndex, b.getRegionId());
                }
            }
        }
        //initBuildIndexMap();
        // 随机生成首都
        int cregion=0;
        for (int i=0;i<legionDatas.size;i++) {
            LegionData l=legionDatas.get(i);
            /*if(l.getCountryId()==110){
                int c111=0;
            }*/
            int cap=game.gameConfig.getDEF_COUNTRY().getElementById(l.getCountryId()).getInt("capital",-1);
            cregion=buildNameMap.get(cap, -1);
            if ( cregion!=-1 && l.getLegionIndex() == getLegionIndexByRegion(cregion)) {
                l.setCapitalId(cregion);
            } else if (legionLargestCityMap.containsKey(l.getLegionIndex())) {
                l.setCapitalId(legionLargestCityMap.get(l.getLegionIndex(), -1));
            }
        }


        game.tempUtil.disposeTempIntIntMap(buildNameMap);
        game.tempUtil.disposeTempIntIntMap(tempIntIntMap);
        game.tempUtil.disposeTempIntIntMap(legionLargestCityMap);
    }



    //设定为争霸模式,在选择好万家后触发
    public void initForFreeStarcraftMode() {
        // 1.选择关卡根据其stageId 锁定选择争霸
        // 2.根据国家目标设定其范围内的为行动国,且模式一致
        // 3.回合根据地块设定,有多少个地块受影响,就多少回合*4
        // 4.获胜判断同帝国模式中的全灭敌方

        //  XmlReader.Element cE=  game.gameConfig.getDEF_COUNTRY().getElementById(getPlayerLegionData().getCountryId());
        //   int crz=getPlayerLegionData().getCapitalAreaZone();
        int target=masterData.getVictoryTarget();
        if(target==0){
            target=getPlayerLegionData().getCapitalAreaZone();
        }
        //int target=cE.getInt("targetArea",0);

        int r=0;
        for(int i=0;i<legionDatas.size;i++){
            LegionData l=legionDatas.get(i);
            if(!l.isPlayer()&&l.getCapitalAreaZone()!=target&&!l.sameInAreaZone(masterData.getPlayerLegionIndex())){
                l.setInternIndex(0);
            }else{
                l.setInternIndex(l.getLegionIndex());
            }
        }

        for(int i=0;i<legionDatas.size;i++){
            LegionData l=legionDatas.get(i);
            if(l.getInternIndex()!=0){
                r=r+l.varRegionCount;
            }
        }
        if(r<30){
            r=30;
        }
        masterData.setRoundMax(r);

        ifNeedDrawViewMap=true;
    }




    public void resetLegionTargetAreaZone(){
        for(int i=0;i<legionDatas.size;i++){
            LegionData l=legionDatas.get(i);
            l.setTargetAreaZone(game.gameConfig.getDEF_COUNTRY().getElementById(l.getCountryId()).getInt("targetArea",0));
        }
    }



    public void initCountryInfo(){
        for(int i=0;i<legionDatas.size;i++){
            LegionData l=legionDatas.get(i);
            l.coreAreaSRs=new IntArray();
            l.majorAreaSRs=new IntArray();
            l.coreAreaRegions=new IntArray();
            l.majorAreaRegions=new IntArray();
            XmlReader.Element xmlE=game.gameConfig.getDEF_COUNTRY().getElementById(l.getCountryId());
            if(xmlE!=null){
              /*  l.coreAreaSRs=xmlE.get("coreArea","");
                l.majorAreaSRs=xmlE.get("majorArea","");
                l.coreAreaRegions=getAreaRegionsStr(l.coreAreaSRs);
                l.majorAreaRegions=getAreaRegionsStr(l.majorAreaSRs);
*/
                String coreAreaSRs=xmlE.get("coreArea","");
                String majorAreaSRs=xmlE.get("majorArea","");
                l.coreAreaSRs=  GameUtil.setValueInIntArray(coreAreaSRs,l.coreAreaSRs);
                l.majorAreaSRs=   GameUtil.setValueInIntArray(majorAreaSRs,l.majorAreaSRs);
                l.coreAreaRegions=  setSRRegionsInIntArray( l.coreAreaSRs,l.coreAreaRegions);
                l.majorAreaRegions=  setSRRegionsInIntArray(l.majorAreaSRs,l.majorAreaRegions);
            }
        }
    }

    //获取玩家得关键区域所在的region

    private IntArray setSRRegionsInIntArray(IntArray areaSRStr, IntArray rs) {
        if(rs==null){
            rs=new IntArray();
        }else {
            rs.clear();
        }
        if(areaSRStr==null||areaSRStr.size==0){
            return rs;
        }
      //  StringBuilder sb=new StringBuilder();
       // String[] strs = areaSRStr.split(",");
        for(int i=0;i<areaSRStr.size;i++){
            int area=areaSRStr.get(i);
           /* Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
            while (it.hasNext()) {
                IntMap.Entry<BuildData> c = it.next();
                BuildData b=c.value;*/
            for(int bi=0;bi<buildRDatas.size();bi++) {
                BuildData b=buildRDatas.getByIndex(bi);
                if(b!=null&&b.getStrategicRegion()==area){
                  /*  if(sb.length>0){sb.append(",");}
                    sb.append(b.getRegionId());*/
                    rs.add(b.getRegionId());
                }
            }
        }
        return rs;
    }
    private String getAreaRegionsStr(String areaSRStr) {
        if(areaSRStr.equals("")){
            return areaSRStr;
        }
        StringBuilder sb=new StringBuilder();
        String[] strs = areaSRStr.split(",");
        for(int i=0;i<strs.length;i++){
            if(!ComUtil.isNumeric(strs[i])){
                continue;
            }
            int area=Integer.parseInt(strs[i]);
           /* Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
            while (it.hasNext()) {
                IntMap.Entry<BuildData> c = it.next();
                BuildData b=c.value;*/
            for(int bi=0;bi<buildRDatas.size();bi++) {
                BuildData b=buildRDatas.getByIndex(bi);
                if(b!=null&&b.getStrategicRegion()==area){
                    if(sb.length>0){sb.append(",");}
                    sb.append(b.getRegionId());
                }
            }
        }
        return sb.toString();
    }
    private void event_exchangeArea(int index){
        //核心领土或主要领土的交换
        for(int i=0;i<legionDatas.size;i++){
            if(index!=-1&&i%masterData.getRoundForYear()!=index){ continue; }//4回合轮流进行外交
            LegionData l=legionDatas.get(i);
            if(l.getLegionIndex()==0||l.getInternIndex()==0){
                continue;
            }
            for(int k=0;k<2;k++) {
                IntArray strs = null;
                if(k==0){
                    if(l.coreAreaRegions!=null){
                        strs =   l.coreAreaRegions;
                    }
                }else{
                    if(l.majorAreaRegions!=null){
                        strs = l.majorAreaRegions;
                    }
                }
                if(strs!=null&&strs.size>0){


                    for (int j = 0; j < strs.size; j++) {
                        int areaRegion = strs.get(j);
                        BuildData b = getBuildDataByRegion(areaRegion);
                        if(b==null||b.isCapital()){
                            continue;
                        }
                        //当核心领土与领土所属不一致时
                        LegionData bl = b.getLegionData();
                        ForeignData f=getForeignData(b.getLegionIndex(),l.getLegionIndex());
                        if(f!=null&&f.getDiplomaticRecognition()==-1||f.getDiplomaticAttitude()==3){
                            continue;
                        }else if (!bl.isTerritoryRegion(areaRegion)&&b.getStrategicRegion()!=0&&bl.getLegionIndex()!=0&&bl.getInternIndex()!=0&&b.getLegionIndex() != l.getLegionIndex()) {
                            String regionNameStr=game.gameMethod.getStrValueT("strategicRegion_"+b.getStrategicRegion());
                            int fd = getForeignDegree(l.getLegionIndex(), bl.getLegionIndex());
                            //如果是附属关系 直接割让
                            if (bl.getSuzerainLi() == l.getLegionIndex()) {
                                if (bl.isPlayer()) {//宗主国从玩家这里获取土地 74   //li获得 li2割让
                                    if((l.varRegionCount>bl.varRegionCount&&l.incomeMoney>bl.incomeMoney)){
                                        addPromptData(game.gameMethod.getPromptStr(74,0,regionNameStr),game.gameMethod.getPromptStr(74,1,l.legionName,regionNameStr),"",21,bl.getLegionIndex(),l.getLegionIndex(),1,b.getStrategicRegion(),false);//String title,String content,String effect,int type,int li,int li2,int value,int value2
                                    }
                                } else if (l.isPlayer()) {//玩家从附属国割地 75
                                    if((l.varRegionCount<bl.varRegionCount&&l.incomeMoney<bl.incomeMoney)){
                                        addPromptData(game.gameMethod.getPromptStr(75,0,regionNameStr),game.gameMethod.getPromptStr(75,1,bl.legionName,regionNameStr),"",20,bl.getLegionIndex(),l.getLegionIndex(),1,b.getStrategicRegion(),false);//String title,String content,String effect,int type,int li,int li2,int value,int value2
                                    }
                                } else {
                                    RoundData r=new RoundData(0,1,bl.getLegionIndex(),l.getLegionIndex(),-1,-1,0,1,-1,b.getStrategicRegion());
                                    roundDatas.add(r);
                                    Gdx.app.log("领土交换事件 附属国割让领土:"+b.srName,bl.legionName+":"+l.legionName);
                                }
                                k=2;break;
                            } else if (l.getSuzerainLi() == bl.getLegionIndex()) {
                                if (bl.isPlayer()) {//附属国要求从玩家处获得土地 74
                                    if((l.varRegionCount<bl.varRegionCount&&l.incomeMoney<bl.incomeMoney)){
                                        addPromptData(game.gameMethod.getPromptStr(74,0,regionNameStr),game.gameMethod.getPromptStr(74,1,l.legionName,regionNameStr),"",21,bl.getLegionIndex(),l.getLegionIndex(),1,b.getStrategicRegion(),false);//String title,String content,String effect,int type,int li,int li2,int value,int value2
                                    }
                                } else if (l.isPlayer()) {//玩家要求宗主国给予土地 75
                                    if((l.varRegionCount>bl.varRegionCount&&l.incomeMoney>bl.incomeMoney)){
                                        addPromptData(game.gameMethod.getPromptStr(75,0,regionNameStr),game.gameMethod.getPromptStr(75,1,bl.legionName,regionNameStr),"",20,bl.getLegionIndex(),l.getLegionIndex(),1,b.getStrategicRegion(),false);//String title,String content,String effect,int type,int li,int li2,int value,int value2
                                    }
                                } else {
                                    RoundData r=new RoundData(0,1,bl.getLegionIndex(),l.getLegionIndex(),-1,-1,0,1,-1,b.getStrategicRegion());
                                    roundDatas.add(r);
                                    Gdx.app.log("领土交换事件 附属国要求从宗主国处获得土地:"+b.srName,bl.legionName+":"+l.legionName);
                                }
                                k=2;break;
                            } else if ( fd == 1 || (fd == 0&&f.getDiplomaticRecognition()==1&&f.getDiplomaticAttitude()!=3)) {//如果是同盟或中立关系 交换或出售
                                if (bl.isPlayer()) {//该国家向玩家提出领土要求 74
                                    if( (l.varRegionCount>bl.varRegionCount||l.incomeMoney>bl.incomeMoney||ComUtil.ifGet(100-bl.getStability()))){
                                        if(bl.isCoreAreaSR(b.getStrategicRegion())&&fd!=1&&(bl.getAllArmySumNum()>l.getAllArmySumNum())){
                                            addPromptData(game.gameMethod.getPromptStr(110,0,regionNameStr),game.gameMethod.getPromptStr(110,1,l.legionName,regionNameStr),"",35,bl.getLegionIndex(),l.getLegionIndex(),fd,b.getStrategicRegion(),false);//String title,String content,String effect,int type,int li,int li2,int value,int value2
                                        }else{
                                            addPromptData(game.gameMethod.getPromptStr(74,0,regionNameStr),game.gameMethod.getPromptStr(74,1,l.legionName,regionNameStr),"",21,bl.getLegionIndex(),l.getLegionIndex(),fd,b.getStrategicRegion(),false);//String title,String content,String effect,int type,int li,int li2,int value,int value2
                                        }
                                    }
                                } else if (l.isPlayer()) {//玩家向xx提出领土要求 75
                                    if( l.borderLegionIndexs.contains(bl.getLegionIndex())&&(l.varRegionCount>bl.varRegionCount&&l.incomeMoney>bl.incomeMoney&&ComUtil.ifGet(100-bl.getStability()))) {
                                        if(l.isCoreAreaSR(b.getStrategicRegion())&&fd!=1&&(l.getAllArmySumNum()>bl.getAllArmySumNum())){
                                            addPromptData(game.gameMethod.getPromptStr(111, 0, regionNameStr), game.gameMethod.getPromptStr(111, 1, bl.legionName, regionNameStr), "", 34, bl.getLegionIndex(),l.getLegionIndex(),  fd, b.getStrategicRegion(),false);//String title,String content,String effect,int type,int li,int li2,int value,int value2
                                        }else{
                                            addPromptData(game.gameMethod.getPromptStr(75, 0, regionNameStr), game.gameMethod.getPromptStr(75, 1, bl.legionName, regionNameStr), "", 20, bl.getLegionIndex(),l.getLegionIndex(),  fd, b.getStrategicRegion(),false);//String title,String content,String effect,int type,int li,int li2,int value,int value2
                                        }
                                    }
                                } else {
                                    RoundData r=new RoundData(0,1,bl.getLegionIndex(),l.getLegionIndex(),-1,-1,0,fd,-1,b.getStrategicRegion());
                                    roundDatas.add(r);
                                    Gdx.app.log("领土交换事件 同盟之间交换领土:"+b.srName,bl.legionName+":"+l.legionName);
                                }
                                k=2;break;
                            } else if (fd == -1 && ComUtil.ifGet(l.varRegionCount - bl.varRegionCount)) {//胁迫
                                if (bl.isPlayer()) {//某国威胁玩家接受领土交换协议 74
                                    if(l.varRegionCount>bl.varRegionCount||l.incomeMoney>bl.incomeMoney||ComUtil.ifGet(100-bl.getStability())) {
                                        if(bl.isCoreAreaSR(b.getStrategicRegion())&&fd!=1&&(bl.getAllArmySumNum()>l.getAllArmySumNum())){
                                            addPromptData(game.gameMethod.getPromptStr(110, 0, regionNameStr), game.gameMethod.getPromptStr(110, 1, l.legionName, regionNameStr), "", 35, bl.getLegionIndex(),l.getLegionIndex(),  -1, b.getStrategicRegion(),false);//String title,String content,String effect,int type,int li,int li2,int value,int value2
                                        }else{
                                            addPromptData(game.gameMethod.getPromptStr(74, 0, regionNameStr), game.gameMethod.getPromptStr(74, 1, l.legionName, regionNameStr), "", 21, bl.getLegionIndex(),l.getLegionIndex(),  -1, b.getStrategicRegion(),false);//String title,String content,String effect,int type,int li,int li2,int value,int value2
                                        }
                                    }
                                } else if (l.isPlayer()) {//玩家强迫某国家接受领土交换协议 75
                                    if(l.borderLegionIndexs.contains(bl.getLegionIndex())&&l.varRegionCount>bl.varRegionCount&&l.incomeMoney>bl.incomeMoney&&ComUtil.ifGet(100-bl.getStability())) {
                                        if(l.isCoreAreaSR(b.getStrategicRegion())&&fd!=1&&(l.getAllArmySumNum()>bl.getAllArmySumNum())){
                                            addPromptData(game.gameMethod.getPromptStr(111, 0, regionNameStr), game.gameMethod.getPromptStr(111, 1, bl.legionName, regionNameStr), "", 34, bl.getLegionIndex(),l.getLegionIndex(),  -1, b.getStrategicRegion(),false);//String title,String content,String effect,int type,int li,int li2,int value,int value2
                                        }else{
                                            addPromptData(game.gameMethod.getPromptStr(75, 0, regionNameStr), game.gameMethod.getPromptStr(75, 1, bl.legionName, regionNameStr), "", 20, bl.getLegionIndex(),l.getLegionIndex(),  -1, b.getStrategicRegion(),false);//String title,String content,String effect,int type,int li,int li2,int value,int value2
                                        }
                                    }
                                } else if(f.getDiplomaticAttitude()!=3){//ai之间的领土交换
                                    if(bl.isTerritoryRegion(b.getStrategicRegion())){//直接敌对
                                        legion_separate(l.getLegionIndex(),bl.getLegionIndex(),20);
                                        legion_DeclareWar(l,bl,l.getAllForce()>bl.getAllForce());
                                    }else if(ComUtil.ifGet(100-bl.getStability())){
                                        //   legion_exChangeArea(l.getLegionIndex(),bl.getLegionIndex(),1,b.getStrategicRegion());
                                        RoundData r=new RoundData(0,1,bl.getLegionIndex(),l.getLegionIndex(),-1,-1,0,-1,-1,b.getStrategicRegion());
                                        roundDatas.add(r);
                                        Gdx.app.log("领土交换事件 胁迫交换领土:"+b.srName,bl.legionName+":"+l.legionName);
                                    }else if(ComUtil.ifGet(Math.abs(l.getStability()-bl.getStability()))){
                                        legion_DeclareWar(l,bl,l.getAllForce()>bl.getAllForce()*2);
                                    }
                                }
                                k=2;break;
                            }
                        }
                    }
                }
            }
        }
    }

    public void legionExChangeAreaForLi(int sourceLi,int targetLi,  int sr){
        legion_exChangeSRRegion(sourceLi,targetLi,getForeignDegree(sourceLi,targetLi),sr);
    }

    public void legionExChangeAreaForCountry(int sourceC,int targetC,  int sr){
        LegionData sl=getLegionByCountry(sourceC,true);
        LegionData tl=getLegionByCountry(targetC,true);
        if(sl==null||tl==null||sl.internIndex==0||tl.internIndex==0){
            return;
        }
        legion_exChangeSRRegion(sl.getLegionIndex(),tl.getLegionIndex(),getForeignDegree(sl.getLegionIndex(),tl.getLegionIndex()),sr);
    }

    public void signContractByLi(int li1,int li2,int round){
        ForeignData f=getForeignData(li1,li2);
        if(f==null){
            return;
        }
        if(f.getForeignType()==1){
            f.addLeagueLeftRound(round);
        }else{
            f.setForeignType(1);
            f.setForeignValue(round);
        }
    }
    public void signContractByCountry(int c1,int c2,int round,boolean mustHaveRegion){
        LegionData l1=getLegionByCountry(c1,mustHaveRegion);
        LegionData l2=getLegionByCountry(c2,mustHaveRegion);
        if(l1==null||l2==null){
            return;
        }
        ForeignData f=getForeignData(l1.getLegionIndex(),l2.getLegionIndex());
        if(f==null){
            return;
        }
        if(f.getForeignType()==1){
            f.addLeagueLeftRound(round);
        }else{
            f.setForeignType(1);
            f.setForeignValue(round);
        }
    }



    //li获得 li2割让
    private void legion_exChangeSRRegion(int sourceLi, int targetLi, int fd, int sr) {
        LegionData tl=getLegionDataByLi(targetLi);
        LegionData sl=getLegionDataByLi(sourceLi);
        if(sourceLi==targetLi||sl==null||tl==null||sl.internIndex==0||tl.internIndex==0||sl.varRegionCount==0||tl.varRegionCount==0){
            return;
        }
        // for(BuildData b:buildRDatas.values()){
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if(b!=null&&b.getStrategicRegion()==sr&&b.getLegionIndex()==sourceLi){
                setRegionAllLegionIndex(b.getRegionId(),targetLi,false);
            }
        }

        int type=0;
        if(type==0){
            type=ComUtil.getRandom(0,4);
        }else if(fd==1){
            type=ComUtil.getRandom(2,3);
        }else if(fd==-1){
            type=0;
        }
        if(type==3&&tl.getSumTechLv()<sl.getSumTechLv()){
            type=1;
        }
        if(type==4&&!tl.isFreeSovereignCountry()){
            type=1;
        }
        if(type==1&&fd!=1&&tl.incomeMoney/10<100){
            type=0;
        }

        ForeignData f=getForeignData(targetLi,sourceLi);
        if(f==null&&type==0){
            type=1;
        }
        int v2=10;

        if(fd!=1&&f!=null){
            if(f.getForeignType()==1){
                f.addLeagueLeftRound(v2/2);
            }else{
                f.setForeignType(1);
                f.setForeignValue(v2/2);
            }
        }



        switch (type){
            case 0://签署和约
                if(f.getForeignType()==1){
                    f.addLeagueLeftRound(v2*2);
                }else{
                    f.setForeignType(1);
                    f.setForeignValue(v2*2);
                }
                v2=f.getForeignValue();
                break;
            case 1://支付金钱
                v2 =tl.incomeMoney/10;
                if(v2<100){
                    v2=100;
                }
                tl.addMoney(-v2);
                sl.addMoney(v2);
                break;
            case 2://重整军备
                Iterator<IntMap.Entry<ArmyData>> itb = armyHDatas.iterator();
                while (itb.hasNext()) {
                    ArmyData armyData=itb.next().value;
                    if (armyData != null && armyData.getLegionIndex() == sourceLi && ComUtil.ifGet(50)) {
                        armyData.randomUpdArmyWealv();
                    }
                }
                break;
            case 3://更新科技
                sl.setTechByLegionData(tl,true,0);
                break;
            case 4://联盟
                if(! legion_AllianceTIA1(sl,tl,false)){
                    type=1;
                    v2=tl.incomeMoney/10;
                    if(v2<100){
                        v2=100;
                    }
                    tl.addMoney(-v2);
                    sl.addMoney(v2);
                }
                break;
        }

        if(sl.isPlayer()){//玩家失去领土
            String srStr=game.gameMethod.getStrValueT("strategicRegion_"+sr);
            String tyStr=game.gameMethod.getStrValue("territory_successful_"+(10+type),tl.legionName,v2);
            addPromptData(
                    game.gameMethod.getPromptStr(76,0,srStr),
                    game.gameMethod.getPromptStr(76,1,tl.legionName,srStr,tyStr),
                    "",targetLi,sourceLi,true
            );
        }else if(tl.isPlayer()){//玩家获得领土
            String srStr=game.gameMethod.getStrValueT("strategicRegion_"+sr);
            String tyStr=game.gameMethod.getStrValue("territory_successful_"+(20+type),sl.legionName,v2);
            addPromptData(
                    game.gameMethod.getPromptStr(77,0,srStr),
                    game.gameMethod.getPromptStr(77,1,sl.legionName,srStr,tyStr),
                    "",targetLi,sourceLi,true
            );
        }
        if(game.sMapScreen!=null){
            game.sMapScreen.updResourceForPlayer();
        }
    }


    //执行延迟事件 1 土地交换 2 延迟设置阵营  3延迟交换资源
    private void excuteRoundeDatas(RoundData r) {
        LegionData sl=getLegionDataByLi(r.getSourceLi());
        LegionData tl=getLegionDataByLi(r.getTargetLi());
        switch (r.getType()){
            case 1:
                //  RoundData r=new RoundData(1,bl.getLegionIndex(),l.getLegionIndex(),-1,-1,0,1,-1,b.getStrategicRegion());
                legion_exChangeSRRegion(r.getSourceLi(),r.getTargetLi(),r.getType1(),r.getHexagon());
                break;
            case 2://r.getType1 1加入 0分离 -1附庸
                if(sl!=null&&tl!=null&&sl.varRegionCount>0&&tl.varRegionCount>0){
                    if(r.getType1()==-1){
                        sl.setSuzerainLi(tl.getInternIndex());
                    }else if(r.getType1()==0){
                        legion_separate( sl.getLegionIndex() ,tl.getLegionIndex()  ,r.getValue1());
                    }else if(r.getType1()==1){
                        sl.setInternIndex(tl.getInternIndex());
                    }
                }
                break;
            case 3:
                  /*this.setCountMax(0);//4 交换国
                    this.setStar(0);//2 交换国类型
                    this.setCountNowValue(0);//4 交换国价值
                    this.setBontyType(0);//2 玩家交换类型
                    this.setBontyValue(0);//4  玩家交换价值*/
                //int type,int sourceLegionId,int targetLegionId,            int value1,int value2 ,        int round,int type1,int type2
                //RoundData r=new RoundData(1,3,t.getCountMax(),   masterData.getPlayerLegionIndex(),t.getCountNow(),t.getBontyValue(),5,t.star,t.getBontyType(),-1);
                if(sl!=null&&tl!=null){
                    //sl 交换国
                    sl.addIncome(r.type1,-r.getValue1());
                    sl.addIncome(r.type2,r.getValue2());

                    //tl 玩家
                    tl.addIncome(r.type1,r.getValue1());
                    tl.addIncome(r.type2,-r.getValue2());
                }

                break;
        }
    }

    public void resetRoundMax(){
        int r=0;
        if(masterData.getVictoryType()==1||masterData.getVictoryType()==5){
            return;
        }
        LegionData pl=getPlayerLegionData();
        //0征服胜利 1 任务胜利  2占领目标洲际 3消灭目标国家 4占领战略区域
        for(int bi=0;bi<buildRDatas.size();bi++){
            BuildData b=buildRDatas.getByIndex(bi);
            if(b!=null){
                int fd=getForeignDegree(masterData.getPlayerLegionIndex(),b.getLegionIndex());
                switch (masterData.getVictoryType()){
                    case 0:
                        if(!b.ifSea()&&b.getLegionData().getInternIndex()!=0&&fd!=1){
                            r++;
                        }
                        break;
                    case 2:
                        if(!b.ifSea()&&b.isTargetAreaZone(masterData.getVictoryTarget())&&fd!=1){
                            r++;
                        }
                        break;
                    case 3:
                        if(!b.ifSea()&&b.getLegionData().getCountryId()==masterData.getVictoryTarget()&&fd!=1){
                            r++;
                        }
                        break;
                    case 4:
                        if(b.getStrategicRegion()==masterData.getVictoryTarget()&&fd!=1){
                            r++;
                        }
                        break;
                }
            }
        }
        if(r<30){
            r=30;
        }
        /*if(masterData.getGameDifficulty()>0){
            r= (int) (r*DefDAO.getRoundRate(masterData.getGameDifficulty()));
        }*/
        masterData.setRoundMax(r);
        Gdx.app.log( "resetRoundMax",stageId+"_"+masterData.getGameEpisode()+":"+r );
    }


    public void setAutoTech(){
        int year=getNowYear();
        if(year>1800){
            Array<XmlReader.Element> cmds= game.resGameConfig.defaultTechCMDOption_1800.getChildrenByName("cmd");
            for(XmlReader.Element cmd:cmds){
                takeHBuffTIA1(cmd.get("country","-1"),cmd.getBoolean("ifPlayer",false),cmd.getInt("eventId",0) ,cmd.getInt("function", 0), cmd.getInt("count", 0), cmd.getInt("chance", 0), cmd.get("value", "0"),false);
                // executeScriptCmd(cmd);
            }
        }
        if(year>1840){
            Array<XmlReader.Element> cmds= game.resGameConfig.defaultTechCMDOption_1840.getChildrenByName("cmd");
            for(XmlReader.Element cmd:cmds){
                takeHBuffTIA1(cmd.get("country","-1"),cmd.getBoolean("ifPlayer",false),cmd.getInt("eventId",0) ,cmd.getInt("function", 0), cmd.getInt("count", 0), cmd.getInt("chance", 0), cmd.get("value", "0"),false);
                // executeScriptCmd(cmd);
            }
        }
        if(year>1890){
            Array<XmlReader.Element> cmds= game.resGameConfig.defaultTechCMDOption_1890.getChildrenByName("cmd");
            for(XmlReader.Element cmd:cmds){
                takeHBuffTIA1(cmd.get("country","-1"),cmd.getBoolean("ifPlayer",false),cmd.getInt("eventId",0) ,cmd.getInt("function", 0), cmd.getInt("count", 0), cmd.getInt("chance", 0), cmd.get("value", "0"),false);
                // executeScriptCmd(cmd);
            }
        }
        if(year>1900){
            Array<XmlReader.Element> cmds= game.resGameConfig.defaultTechCMDOption_1900.getChildrenByName("cmd");
            for(XmlReader.Element cmd:cmds){
                takeHBuffTIA1(cmd.get("country","-1"),cmd.getBoolean("ifPlayer",false),cmd.getInt("eventId",0) ,cmd.getInt("function", 0), cmd.getInt("count", 0), cmd.getInt("chance", 0), cmd.get("value", "0"),false);
                // executeScriptCmd(cmd);
            }
        }
        if(year>1930){
            Array<XmlReader.Element> cmds= game.resGameConfig.defaultTechCMDOption_1930.getChildrenByName("cmd");
            for(XmlReader.Element cmd:cmds){
                takeHBuffTIA1(cmd.get("country","-1"),cmd.getBoolean("ifPlayer",false),cmd.getInt("eventId",0) ,cmd.getInt("function", 0), cmd.getInt("count", 0), cmd.getInt("chance", 0), cmd.get("value", "0"),false);
                // executeScriptCmd(cmd);
            }
        }
        if(year>1950){
            Array<XmlReader.Element> cmds= game.resGameConfig.defaultTechCMDOption_1950.getChildrenByName("cmd");
            for(XmlReader.Element cmd:cmds){
                takeHBuffTIA1(cmd.get("country","-1"),cmd.getBoolean("ifPlayer",false),cmd.getInt("eventId",0) ,cmd.getInt("function", 0), cmd.getInt("count", 0), cmd.getInt("chance", 0), cmd.get("value", "0"),false);
                // executeScriptCmd(cmd);
            }
        }
    }



    private IntArray getPlayerVictoryRegions(IntArray rs) {
        //Iterator<IntMap.Entry<BuildData>> it = buildRDatas.iterator();
        //true 征服型  false 据点型
        if(rs==null){
            rs=new IntArray();
        }else{
            rs.clear();
        }
        LegionData l;
        int victoryType=masterData.getVictoryType();
        //正常任务判断
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if(b==null){
                continue;
            }
            //   int fd=getForeignDegree(masterData.getPlayerLegionIndex(),b.getLegionIndex());
            //0征服胜利 1夺取据点胜利  2占领目标洲际 3消灭目标国家 4占领战略区域 5守护据点胜利
            switch (victoryType){
                case 0:
                    if(!b.ifSea()){
                        if(!rs.contains(b.getRegionId())){
                            rs.add(b.getRegionId());
                        }
                    }
                    break;
                case 1:
                    if(b.getHinge()!=0){
                        if(!rs.contains(b.getRegionId())){
                            rs.add(b.getRegionId());
                        }
                    }
                    break;
                case 2:
                    if(!b.ifSea()&&b.getLegionData().getInternIndex()!=0&&b.isTargetAreaZone(masterData.getVictoryTarget())){
                        if(!rs.contains(b.getRegionId())){
                            rs.add(b.getRegionId());
                        }
                    }
                    break;
                case 3:
                    if(!b.ifSea()&&b.getLegionData().getCountryId()==masterData.getVictoryTarget()){
                        if(!rs.contains(b.getRegionId())){
                            rs.add(b.getRegionId());
                        }
                    }
                    break;
                case 4:
                    if(b.getStrategicRegion()==masterData.getVictoryTarget()){
                        if(!rs.contains(b.getRegionId())){
                            rs.add(b.getRegionId());
                        }
                    }
                    break;
                case 5:
                    if(b.getHinge()!=0){
                        if(!rs.contains(b.getRegionId())){
                            rs.add(b.getRegionId());
                        }
                    }
                    break;
            }
        }

        return rs;
    }



    public int getRandomBaseArmyId(){
        if(getAge()==0){
            return ComUtil.getRandOne(game.resGameConfig.baseArmyIdInAge0);
        }else{
            return ComUtil.getRandOne(game.resGameConfig.baseArmyIdInAge1);
        }
    }

    //获得两国合并的概率
    public int getLegionMergeChance(int li1,int li2){
        LegionData l1=getLegionDataByLi(li1);
        LegionData l2=getLegionDataByLi(li2);
        int fd=getForeignDegree(li1,li2);
        if(l1==null||l2==null||fd==-1||(l1.getSuzerainLi()!=0&&l1.getSuzerainLi()!=li2)||(l2.getSuzerainLi()!=0&&l2.getSuzerainLi()!=li1)){
            return 0;
        }
        int fc;
        ForeignData f=getForeignData(li1,li2);
        if(f!=null){
            if((f.getDiplomaticAttitude()==3||f.getDiplomaticRecognition()==-1)&&!f.isSuzerain()){
                return 0;
            }
            fc=f.getFavorValue();
        }else{
            switch (fd){
                case 1:fc=75;break;
                case -1:fc=25;break;
                default:fc=50;break;
            }
        }
        return ComUtil.limitValue((fc+ getLegionCivilSpecFavor(l1.getCivilSpec(),l2.getCivilSpec())*10)/2,0,100);
    }

    public int getForeignCounts(){
        int s=0;
        for (int sli=0;sli<legionDatas.size;sli++) {
            for (int tli = sli; tli < legionDatas.size; tli++) {
               s++;
            }
        }
        return s;
    }

    //重新制作外交属性
    public void resetForeignDatas(boolean ifSaveOld){
        if(foreignDatas==null){
            foreignDatas=new Array<>();
            ifSaveOld=false;
        }

        Array<ForeignData> newForeignDatas=new Array<>();
        for (int sli=0;sli<legionDatas.size;sli++) {
            for (int tli = sli; tli < legionDatas.size; tli++) {
                ForeignData f = new ForeignData();
                f.setSourceLegionIndex(sli);
                f.setTargetLegionIndex(tli);
                f.setFavorValue(initToGetFavorByLi(f.sourceLegionIndex, f.targetLegionIndex));
                newForeignDatas.add(f);
            }
        }
        for (int i1=0;i1<legionDatas.size;i1++) {
            LegionData l=legionDatas.get(i1);
            if(l.getSuzerainLi()>=0){
                l.setStability(ComUtil.getRandom(10,60));
            }
        }
        Array<XmlReader.Element> daEs=game.gameConfig.getDEF_DIPLOMATICATTITUDE().e.getChildrenByName("diplomaticAttitude");
        for(XmlReader.Element daE:daEs){
            ForeignData f=getForeignData(newForeignDatas,getLegionIndexByCountry(daE.getInt("sourceCountry",0)),getLegionIndexByCountry(daE.getInt("targetCountry",0)));
            if(f!=null){
                f.setDiplomaticAttitude(daE.getInt("attitude",0));
                f.initFavorByDiplomaticAttitude();
            }
        }

        if(ifSaveOld){
            for(int i=0;i<newForeignDatas.size;i++){
                ForeignData nf=newForeignDatas.get(i);
                ForeignData of=getForeignData(newForeignDatas,nf.getSourceLegionIndex(),nf.getTargetLegionIndex());
                if(of!=null){
                    newForeignDatas.set(i,of);
                }
            }
        }
        this.foreignDatas=newForeignDatas;

    }

    //重新计算所有国家的领土范围
    public void initAllLegionRectangularRange(){
        //用来存放扩展的id
        IntArray rs=game.tempUtil.getTempIntArray();
        // int mapH_px= GameMap.getH_px(masterData.getWidth(), masterData.getHeight(), game.getMapScale());
        for(int i=0;i<legionDatas.size;i++){
            LegionData l=legionDatas.get(i);
            if(!game.gameConfig.ifEffect){
                l.varX=0;
                l.varY=0;
                l.varW=0;
                l.varH=0;
                l.legionNameScale=0;
                continue;
            }

            game.tempUtil.disposeTempIntArray(rs);
            BuildData b=l.getCapital();
            l.varX=0;
            l.varY=0;
            l.varW=0;
            l.varH=0;
            if(b==null){
                continue;
            }
            ConnectData c=b.getConnectData();
            if(c.getSameSelfConnectCount()==0){//从自身找扩展
                //addHexagonsByRegion(b.getRegionId(),rs);
                if(!rs.contains(b.getRegionId())){
                    rs.add(b.getRegionId());
                }
            }else{//从相邻扩展
                c.getAllSameLiConnect(rs);
            }

            if(rs.size>0){//通过连接数据获取名称失败,则通过region来获取

                IntArray rs2=game.tempUtil.getTempIntArray();
                for(int i3=0;i3<rs.size;i3++){
                    int id=rs.get(i3);
                    IntArray a=regionHexagonMap.get(id);
                    Fb2Map.MapHexagon ha=getHexagonData(id);
                    if(a!=null&&ha!=null&&ha.getLegionIndex()==l.getLegionIndex()){
                        for(int i4=0;i4<a.size;i4++){
                            Fb2Map.MapHexagon h=getHexagonData(a.get(i4));
                            if(h!=null&&h.countryBorder!=0&&!ifSea(h.getHexagonIndex())){
                                rs2.add(h.getHexagonIndex());
                            }
                        }
                    }
                }
                if(rs2.size>=2){
                    for(int i1=0;i1<rs2.size;i1++){
                        for(int i2=0;i2<rs2.size;i2++){
                            if(i1==i2){continue;}
                            int sid1=rs2.get(i1);
                            int sid2=rs2.get(i2);
                            int x1=GameMap.getHX(sid1,masterData.getWidth());
                            int x2=GameMap.getHX(sid2,masterData.getWidth());
                            int y1=GameMap.getHY(sid1,masterData.getWidth());
                            int y2=GameMap.getHY(sid2,masterData.getWidth());
                            int x=ComUtil.min(x1,x2);
                            int y=ComUtil.min(y1,y2);
                            int w=Math.abs(x1-x2);
                            int h=Math.abs(y1-y2);
                            if(!ifScopeAllIsLegion(x,y,w,h,l.getLegionIndex())){
                                continue;
                            }
                            if(w*l.legionName.length()*2<h||h*l.legionName.length()*2<w){
                                continue;
                            }
                            if(w*h>l.varW*l.varH){
                                l.varX=x;
                                l.varY=y;
                                l.varW=w;
                                l.varH=h;
                            }
                        }
                    }
                }
                game.tempUtil.disposeTempIntArray(rs2);
            }
            int centerId=0;
            if(l.varW!=0){
                centerId=GameMap.getId(l.varX+l.varW/2,l.varY+l.varH/2,masterData.getWidth());
                Fb2Map.MapHexagon h=getHexagonData(centerId);
                boolean ifRef=false;
                if(h!=null&&ifGridIsPass(centerId)){
                    if(h.isCountryBorder){
                        int id1=getBorderIdByDirect(centerId,1);
                        int id2=getBorderIdByDirect(centerId,2);
                        int id3=getBorderIdByDirect(centerId,3);
                        int id4=getBorderIdByDirect(centerId,4);
                        int id5=getBorderIdByDirect(centerId,5);
                        int id6=getBorderIdByDirect(centerId,6);
                        // 1↖ 2上 3↗ 4↙ 5↓ 6↘
                        boolean b1=getIsCountryBorder(id1);
                        boolean b2=getIsCountryBorder(id2);
                        boolean b3=getIsCountryBorder(id3);
                        boolean b4=getIsCountryBorder(id4);
                        boolean b5=getIsCountryBorder(id5);
                        boolean b6=getIsCountryBorder(id6);
                        int bc=0;
                        if(b1){bc++;}
                        if(b2){bc++;}
                        if(b3){bc++;}
                        if(b4){bc++;}
                        if(b5){bc++;}
                        if(b6){bc++;}

                        if(bc>=6){
                            l.centerPx_x=h.source_x;
                            l.centerPx_y=h.source_y;
                        }else if(bc==5){
                            Gdx.app.log("调整centerId 1",l.legionName+": "+centerId+" "+l.varX+" "+l.varY+" "+l.varW+" "+l.varH+" "+bc);
                            if(!b1){
                                h=getHexagonData(id1);
                            }else if(!b2){
                                h=getHexagonData(id2);
                            }else if(!b3){
                                h=getHexagonData(id3);
                            }else if(!b4){
                                h=getHexagonData(id4);
                            }else if(!b5){
                                h=getHexagonData(id5);
                            }else if(!b6){
                                h=getHexagonData(id6);
                            }
                            if(h.getRegionLegionIndex()==l.getLegionIndex()){
                                l.centerPx_x=h.source_x;
                                l.centerPx_y=h.source_y;
                            }
                        }else{
                           /* if(l.legionName.equals("塞尔维亚")){
                                int s=0;
                            }*/
                            Gdx.app.log("调整centerId 2",l.legionName+": "+centerId+" "+l.varX+" "+l.varY+" "+l.varW+" "+l.varH+" "+bc);
                            l.centerPx_x=h.source_x;
                            l.centerPx_y=h.source_y;
                            //centerPx_y
                            if(b1&&b3){
                                l.centerPx_y+=ResDefaultConfig.Map.HEXAGON_HEIGHT*ResDefaultConfig.Map.MAP_SCALE;
                                ifRef=true;
                            }else if(b4&&b6){
                                l.centerPx_y-=ResDefaultConfig.Map.HEXAGON_HEIGHT*ResDefaultConfig.Map.MAP_SCALE;
                                ifRef=true;
                            }
                            //centerPx_x
                            if(b3&&b6){
                                l.centerPx_x-=ResDefaultConfig.Map.GRID_WIDTH*ResDefaultConfig.Map.MAP_SCALE;
                                ifRef=true;
                            }else if(b1&&b4){
                                l.centerPx_x+=ResDefaultConfig.Map.GRID_WIDTH*ResDefaultConfig.Map.MAP_SCALE;
                                ifRef=true;
                            }
                        }
                    }else{
                        l.centerPx_x=h.source_x;
                        l.centerPx_y=h.source_y;
                    }
                    if(l.varW>=l.varH){
                        l.countryNameStr="";
                        if(l.legionName.length()/2f>l.varW*1f/l.varH){
                            l.countryNameStr=l.legionName;
                        }else{
                            for(int l1=0;l1<l.legionName.length();l1++){
                                // Gdx.app.log("initAllLegionRectangularRange 1",l.legionName);
                                l.countryNameStr+=l.legionName.substring(l1,l1+1);
                                if(l1!=l.legionName.length()-1){
                                    l.countryNameStr+=" ";
                                }
                            }
                        }
                        l.legionNameScale=l.varW*3f/l.countryNameStr.length()  ;
                    }else{

                        l.countryNameStr="";
                        for(int l1=0;l1<l.legionName.length();l1++){
                            l.countryNameStr+=l.legionName.substring(l1,l1+1)+"\n";
                        }
                        l.legionNameScale=l.varH*2.5f/l.legionName.length()   ;
                    }
                    l.legionNameScale=l.legionNameScale*game.gameConfig.legionNameScale;
                    if(ifRef){
                        l.legionNameScale=l.legionNameScale*0.7f;
                    }
                }
                //   Gdx.app.log("initAllLegionRectangularRange",l.countryNameStr+": "+l.legionNameScale+" "+l.varX+" "+l.varY+" "+l.varW+" "+l.varH+" "+ifRef);
            }
        }
        game.tempUtil.disposeTempIntArray(rs);
    }

    //ifIsW true 横向 false 纵向
    /*private int getCenterRefY(int id,boolean ifIsW) {
        if(ifIsW){//比较至少3格

        }else{

        }
        return 0;
    }*/


    public boolean getIsCountryBorder(int id){
        Fb2Map.MapHexagon h=getHexagonData(id);
        if(h!=null){
            return h.isCountryBorder;
        }
        return false;
    }

    //判断矩形范围全部属于该legionIndex
    private boolean ifScopeAllIsLegion(int sx, int sy, int w, int h, int legionIndex) {
        for(int y= 0;y<h;y++){
            for(int x=0;x<w;x++){
                int id=GameMap.getId(x+sx,y+sy,masterData.getWidth());
                int regionId=getRegionId(id);
                if(getLegionIndexByHexagon(regionId)!=legionIndex|| (ifSea(regionId)&&getLiByInlandSea(regionId)!=legionIndex    /*!isInlandSea(regionId,legionIndex)*/)){
                    return false;
                }
            }
        }
        return true;
    }

    private int getLiByInlandSea(int regionId) {
        BuildData b=getBuildDataByRegion(regionId);
        if(b!=null){
            return b.inlandSeaLi;
        }
        return -1;
    }

    //判断某个地方是某国国家的内海
    private boolean isInlandSea(int regionId,int legionIndex) {
       /* if(regionId==8944){
            int s=0;
        }*/
        if(!ifSea(regionId)){
            return false;
        }

        IntArray rs=game.tempUtil.getTempIntArray();
        ConnectData c=getConnectData(regionId);
        if(c!=null){
            c.getAllSeaConnect(rs);
            if(rs.size>0){
                for(int i=0;i<rs.size;i++){
                    int tr=rs.get(i);
                    if(ifBorderLandRegionLiNotIs(tr,legionIndex)){
                        game.tempUtil.disposeTempIntArray(rs);
                        return false;
                    }
                }
            }else{
                game.tempUtil.disposeTempIntArray(rs);
                return false;
            }
        }else{
            game.tempUtil.disposeTempIntArray(rs);
            return false;
        }
        game.tempUtil.disposeTempIntArray(rs);
        return true;
    }

    private boolean ifBorderLandRegionLiNotIs(int region,int legionIndex) {
        ConnectData c=getConnectData(region);
        for(int i=1;i<=c.regionConnectCount;i++){
            int r=c.getConnectValue(i,4);
            if(r!=-1&&getLegionIndexByRegion(r)!=legionIndex){
                return true;
            }
        }
        return false;
    }


    private void addHexagonsByRegion(int regionId, IntArray rs) {
        IntArray hm=regionHexagonMap.get(regionId);
        if(hm!=null){
            for(int i=0;i<hm.size;i++){
                int id=hm.get(i);
                if(!rs.contains(id)){
                    rs.add(id);
                }
            }
        }
    }


    /*private void updBuildInlandSea() {
        for(int bi=0;bi<buildRDatas.size();bi++){
            BuildData b=buildRDatas.getByIndex(bi);
            if(b!=null){
                b.inlandSeaLi=getInlandSeaLi(b.getRegionId());
            }
        }
    }*/

    private int getInlandSeaLi(int regionId) {
        int li=-1;
        if(!ifSea(regionId)){
            return li;
        }
        IntArray rs=game.tempUtil.getTempIntArray();
        ConnectData c=getConnectData(regionId);
        if(c!=null){
            c.getAllSeaConnect(rs);
            if(rs.size>0){
                for(int i=0;i<rs.size;i++){
                    int tr=rs.get(i);
                    if(li==-1){
                        li=getLiByBorderLandRegion(tr);
                    }else {
                        if(ifBorderLandRegionLiNotIs(tr,li)){
                            game.tempUtil.disposeTempIntArray(rs);
                            return -1;
                        }
                    }
                }
            }else{
                game.tempUtil.disposeTempIntArray(rs);
                return li;
            }
        }else{
            game.tempUtil.disposeTempIntArray(rs);
            return li;
        }
        game.tempUtil.disposeTempIntArray(rs);
        return li;
    }

    //获得周围的li
    private int getLiByBorderLandRegion(int region) {
        ConnectData c=getConnectData(region);
        for(int i=1;i<=c.regionConnectCount;i++){
            int r=c.getConnectValue(i,4);
            int li=getLegionIndexByRegion(r);
            if(r!=-1&&li>0){
                return li;
            }
        }
        return -1;
    }


    private void setLegionPolicyToTest(int startX){
        if(ifSystemEffective(10)){
            for(int i=0;i<taskDatas.size;i++){
                TaskData t=taskDatas.get(i);
                if(t.getTaskType()==2){
                    XmlReader.Element lpXmlE=game.gameConfig.getDEF_LEGIONPOLICY().getElementById(startX);
                    if(lpXmlE!=null){
                        t.resetTaskDataByPolicy(lpXmlE);
                        t.initVirAttribute();
                        startX++;
                    }
                }
            }
        }
    }

    //type 0 包含陆地单位
    public boolean checkArmyArrays(int type,Array<ArmyData> armys){
        for(int i=0;i<armys.size;i++) {
            ArmyData a=armys.get(i);
            if(a==null){continue;}
            switch (type){
                case 0:
                    if(a.getArmyType()!=5&&a.getArmyType()!=7){
                        return true;
                    }
                    break;
            }
        }
        return false;
    }


    public void legionUnit_Move(BuildData tbuild,ArmyData army,boolean ifAddRound,boolean ifRetreat) {
        //0.如果是单位移动到友方区域,则视为增援

        boolean ifAlly=ifAllyByLi(tbuild.getLegionIndex(),army.getLegionIndex());
        //3.重新排序组合
        boolean ifReinforce=ifAlly&&tbuild.getLegionIndex()!=army.getLegionIndex();//是否是同盟增援
        IntArray tempPotion=game.tempUtil.getTempIntArray();
        IntArray hm=regionHexagonMap.get(tbuild.getRegionId());
        if(hm==null){
            return;
        };

        //首先原单位撤离
        if(ifRetreat&&!ifAlly){
            BuildData safeBuild=tbuild.getRandomAroundSafeBuildData(tbuild.getAroundEnemyLegionUnitRegionCount());
            if(safeBuild!=null){//撤离部队
            /*Array<ArmyData> armys=build.getCanActLegionUnitTAA(1);
            legionUnit_Act(build,safeBuild,armys,true);*/
                for(int i=0;i<hm.size;i++){
                    ArmyData a=getArmyDataByHexagon(hm.get(i));
                    if(a!=null&&a.getLegionIndex()==tbuild.getLegionIndex()){
                        legionUnit_Move(safeBuild,a,false,false);
                    }
                }
            }
            tbuild.setLegionIndex(army.getLegionIndex());
            //剩余单位默认被俘虏
            for(int i=0;i<hm.size;i++){
                ArmyData a=getArmyDataByHexagon(hm.get(i));
                if(a!=null){
                    a.setTargetRegion(-1);
                    a.setLegionIndex(army.getLegionIndex());
                }
            }
        }
        int oldRegion=getRegionId(army.getHexagonIndex());

        //1.获取所有可以移动的位置,重新排序
        for(int i=0;i<hm.size;i++){
            int id=hm.get(i);
            if(getArmyDataByHexagon(id)==null){
                tempPotion.add(id);
            }
        }
        int id=-1;
        if(tempPotion.size>0){
            tempPotion.shuffle();
            //2.给每个兵种可移动的位置
            for(int j=0;j<tempPotion.size;j++){
                id=tempPotion.get(j);
                if(army.canMove(id)){
                    break;
                }
            }
            if(id!=-1&&army.canMove(id)){
                if(id!=tbuild.regionId&&army.canMove(tbuild.regionId)){
                    ArmyData rArmy=getArmyDataByHexagon(tbuild.regionId);
                    if(rArmy!=null){
                        if( (army.getGeneralIndex()>0&&rArmy.getGeneralIndex()==0)||(army.getGeneralData().getState()==0&&rArmy.getGeneralData().getState()==1)   ){
                            army_Move(rArmy,id);
                            id=tbuild.regionId;
                        }
                    }else{
                        id=tbuild.regionId;
                    }
                }
                if(ifReinforce){
                    army.setTargetRegion(-1);
                    army.setLegionIndex(tbuild.getLegionIndex());
                }
                army_Move(army,id);
                if(!ifLegionUnitCanTransport(oldRegion,getRegionId(id))){
                    if(ifAddRound){
                        army.addArmyRound(1);
                    }
                }


            }
        }
        game.tempUtil.disposeTempIntArray(tempPotion);
    }
    //123
    private boolean ifLegionUnitCanTransport(int r1, int r2) {
        BuildData b1=getBuildDataByRegion(r1);
        BuildData b2=getBuildDataByRegion(r2);
        if(b1==null||b2==null||ifSea(r1)||ifSea(r2)||b1.getLegionIndex()!=b2.getLegionIndex()||b1.getTransportLvNow()==0||b2.getTransportLvNow()==0){
            return false;
        }
        if(ComUtil.ifGet((b1.getTransportLvNow()+b2.getTransportLvNow())*game.resGameConfig.legionFeatureLvMax)){
            return true;
        }
        return false;
    }

    public void legionUnit_Move(BuildData sourceBuild,BuildData targetbuild,Array<ArmyData> armyArrays,boolean ifAddRound) {
        //0.如果是单位移动到友方区域,则视为增援
        if(armyArrays.size==0){
            return;
        }
        boolean ifAlly=ifAllyByLi(targetbuild.getLegionIndex(),sourceBuild.getLegionIndex());
        //3.重新排序组合
        boolean ifReinforce=ifAlly&&targetbuild.getLegionIndex()!=sourceBuild.getLegionIndex();//是否是同盟增援
        IntArray tempPotion=game.tempUtil.getTempIntArray();
        IntArray hm=regionHexagonMap.get(targetbuild.getRegionId());
        if(hm==null){
            return;
        };

        //首先原单位撤离
        if(!ifAlly){
            BuildData safeBuild=targetbuild.getRandomAroundSafeBuildData(targetbuild.getAroundEnemyLegionUnitRegionCount());
            if(safeBuild!=null){//撤离部队
            /*Array<ArmyData> armys=build.getCanActLegionUnitTAA(1);
            legionUnit_Act(build,safeBuild,armys,true);*/
                for(int i=0;i<hm.size;i++){
                    ArmyData a=getArmyDataByHexagon(hm.get(i));
                    if(a!=null&&a.getLegionIndex()==targetbuild.getLegionIndex()){
                        legionUnit_Move(safeBuild,a,false,false);
                    }
                }
            }
            targetbuild.setLegionIndex(sourceBuild.getLegionIndex());
            //剩余单位默认被俘虏
            for(int i=0;i<hm.size;i++){
                ArmyData a=getArmyDataByHexagon(hm.get(i));
                if(a!=null){
                    a.setTargetRegion(-1);
                    a.setLegionIndex(sourceBuild.getLegionIndex());
                    if(a.getArmyType()!=6){
                        armyArrays.add(a);
                    }
                }
            }
        }



        //1.获取所有可以移动的位置,重新排序
        for(int i=0;i<hm.size;i++){
            int id=hm.get(i);
            if(getArmyDataByHexagon(id)==null){
                tempPotion.add(id);
            }
        }
        //BuildData sourceBuild=15;
        if(tempPotion.size>0){
            tempPotion.shuffle();
            //2.给每个兵种可移动的位置
            for(int i=0;i<armyArrays.size;i++){
                ArmyData a=armyArrays.get(i);
                if(a==null||a.getArmyRound()!=0){continue;}
                for(int j=0;j<tempPotion.size;j++){
                    int id=tempPotion.get(j);
                    if(a.canMove(id)){
                        if(ifReinforce){
                            a.setTargetRegion(-1);
                            a.setLegionIndex(targetbuild.getLegionIndex());
                        }
                        army_Move(a,id);
                        if(!ifLegionUnitCanTransport(sourceBuild.getRegionId(),targetbuild.getRegionId())){
                            if(ifAddRound){
                                a.addArmyRound(1);
                            }
                        }
                        tempPotion.removeValue(id);
                        break;
                    }
                }
            }
            targetbuild.resetLegionUnitPotion();
        }
        game.tempUtil.disposeTempIntArray(tempPotion);
    }


    public void legionUnit_Attack(BuildData tBuild,ArmyData a,boolean ifAddRound) {
        if(!tBuild.ifHaveUnit(1,1)&&tBuild.getCityHpNow()==0&&a.ifBorderRegion(tBuild.getRegionId(),false)){
            legionUnit_Move(tBuild,a,ifAddRound,true);
            return;
        }


        //0.计算特殊单位弹头伤害
        if(a.getArmyType()==7){
            nul_Bomber(a,tBuild.getRegionId(),roundState==0);
            army_Death(a,true);
            return;
        }
        IntArray hm=regionHexagonMap.get(tBuild.getRegionId());
        if(hm==null){
            return;
        }
        Array<ArmyData> as=game.tempUtil.getTempArray();

        //2.根据各参战部队计算各打出的伤害
        for(int i = hm.size-1; i>=0; i--){
            ArmyData ta=getArmyDataByHexagon(hm.get(i));
            if(ta!=null&&a.canAttack(ta)){
                as.add(ta);
            }
        }
        as.shuffle();
        if(as.size==0){
            if(tBuild.getCityHpNow()>0){
                army_Attack(a,tBuild.getRegionId());
                if(a!=null){
                    if(tBuild.getCityHpNow()==0&&!tBuild.ifHaveUnit(1,1)&&a.ifBorderRegion(tBuild.getRegionId(),false)){
                        legionUnit_Move(tBuild,a,ifAddRound,true);
                        return;
                    }
                    if(ifAddRound){
                        a.addArmyRound(1);
                    }
                    if(roundState==0&&a.armyActor!=null){
                        a.armyActor.update();
                    }
                }
            }else{
                game.tempUtil.disposeTempArray(as);
                legionUnit_Move(tBuild,a,ifAddRound,true);
                return;
            }
        }else{
            ArmyData ta=as.random();
            army_Attack(a,ta.getHexagonIndex());
            if(a!=null){
                if(tBuild.getCityHpNow()==0&&!tBuild.ifHaveUnit(1,1)&&a.ifBorderRegion(tBuild.getRegionId(),false)){
                    legionUnit_Move(tBuild,a,ifAddRound,true);
                    return;
                }
                if(ifAddRound){ a.addArmyRound(1); }
                if(roundState==0&&a.armyActor!=null){
                    a.armyActor.update();
                }
            }
        }
        game.tempUtil.disposeTempArray(as);
        tBuild.resetLegionUnitPotion();
    }
    //123
    public void legionUnit_Attack(BuildData sBuild,BuildData tBuild,Array<ArmyData> armyArrays,boolean ifAddRound) {
        for(int i = armyArrays.size-1; i>=0; i-- ){
            ArmyData a=armyArrays.get(i);
            if(a==null){
                continue;
            }
            //进攻单位数据出错
            if(a.getRegionId()!=sBuild.getRegionId()||a.getLegionIndex()!=sBuild.getLegionIndex()||a.getLegionIndex()==tBuild.getLegionIndex()){
                int s=0;
            }
        }/*
        if(tBuild.getRegionId()==26461){
            int s=0;
        }*/

        if(!tBuild.ifHaveUnit(1,1)&&tBuild.getCityHpNow()==0&&sBuild.ifBorderRegion(tBuild.getRegionId(),false)){
            legionUnit_Move(sBuild,tBuild,armyArrays,ifAddRound);
            return;
        }

        //0.计算特殊单位弹头伤害
        for(int i = armyArrays.size-1; i>=0; i-- ){
            ArmyData a=armyArrays.get(i);
            if(a!=null&&a.getArmyType()==7){
                nul_Bomber(a,tBuild.getRegionId(),roundState==0);
                army_Death(a,true);
                armyArrays.removeIndex(i);
                if(!tBuild.ifHaveUnit(1,1)&&i>0&&tBuild.getCityHpNow()==0&&sBuild.ifBorderRegion(tBuild.getRegionId(),false)){
                    legionUnit_Move(sBuild,tBuild,armyArrays,ifAddRound);
                    return;
                }
            }
        }
        IntArray hm=regionHexagonMap.get(tBuild.getRegionId());
        if(hm==null){
            return;
        }

        //1.计算战场大小,即最多多少有效伤害

        float attackRate=1f;
        if(armyArrays.size>hm.size){
            attackRate=hm.size/armyArrays.size;
            if(attackRate<0.3f){
                attackRate=0.3f;
            }
            //如果造成30%的伤害 那么也只会承受30%的反击伤害
        }

        //2.根据各参战部队计算各打出的伤害
    /*
        Array<ArmyData> as=game.tempUtil.getTempArray();
         for(int i = 0; i<hm.size; i++){
            ArmyData a=getArmyDataByHexagon(hm.get(i));
            if(a!=null){
                as.add(a);
            }
        }
        if(as.size>0){
            as.shuffle();
        }*/
        if(armyArrays.size>0){
            boolean ifHaveUnit=true;
            float damageTime=0f;
            //  Gdx.app.log("test legionUnit_Attack",armyArrays.size+":"+as.size);
            for(int i=0;i<armyArrays.size;i++ ){//int i = armyArrays.size-1; i>=0; i--
                ArmyData a=armyArrays.get(i);
                if(a==null||a.getArmyHpNow()==0){
                    continue;
                }
                ifHaveUnit=false;
                for(int j = 0; j<hm.size; j++){
                    ArmyData ta=getArmyDataByHexagon(hm.get(j));
                    if(ta!=null){
                        ifHaveUnit=true;
                        army_Attack(a,ta.getHexagonIndex(),1f,1f,damageTime);
                        a.addArmyRound(1);
                        break;
                    }
                }
                if(!ifHaveUnit&&a.getArmyRound()==0){
                    if(tBuild.getCityHpNow()>0){
                        army_Attack(a,tBuild.getRegionId(),2f,1f,damageTime);
                        if(tBuild.getCityHpNow()>0){
                            a.addArmyRound(1);
                        }
                    }else{
                        break;
                    }
                }
                if(a.armyActor!=null&&a.getArmyRound()>0){
                    a.armyActor.update();
                }
                damageTime+=0.2f;
            }
        }

        if(tBuild.getCityHpNow()==0&&!tBuild.ifHaveUnit(1,1)&&sBuild.ifBorderRegion(tBuild.getRegionId(),false)){
            legionUnit_Move(sBuild,tBuild,armyArrays,ifAddRound);
        }else{
            tBuild.resetLegionUnitPotion();
        }
    }


    public int setFogInSearchTIA3(int hexagonIndex,int li,int searchRange,boolean ifCreateActor,boolean ifSetFog) {
        int s=0;
        if(masterData.getIfFog()==0||isEditMode(false)||!ifGridIsPass(hexagonIndex)||!ifLiIsPass(li)){
            return s;
        }
        if(ifAllyPlayerByLi(li)){
            getHexagonData(hexagonIndex).setIfFog(1);
        }
        //iffog 0不可见 1可见
        if(ifAllyByLi(li, masterData.playerLegionIndex)  ){
            IntArray tempIntArray3=game.tempUtil.getTempIntArray();
            getRangePostion(hexagonIndex, 1, searchRange, true, tempIntArray3);
            for (int i = 0; i < tempIntArray3.size; i++) {
                int id=tempIntArray3.get(i);
                ArmyData a=getArmyDataByHexagon(id);
                Fb2Map.MapHexagon m= hexagonDatas.get(id);
                if (a!=null) {
                    m.setIfFog(1);
                    if(ifCreateActor&&a.armyActor==null){
                        a.createActor();
                        s++;
                        checkTask(true,li,16,1);
                    }
                } else if(m.getRegionId()==id){
                    m.setIfFog(1);
                }else if(ifSetFog){
                    m.setIfFog(0);
                }
            }
            game.tempUtil.disposeTempIntArray(tempIntArray3);
        }else if(ifSetFog){ //如果所处地块与玩家是同盟的话,不需要绘制
            hexagonDatas.get(hexagonIndex).setIfFog(0);
        }
        return s;
    }

    private boolean ifLiIsPass(int li) {
        if(li>=0&&li<legionDatas.size){
            return true;
        }
        return false;
    }

    private void armyToSurrenderForRegion(int region,int li){
        //   BuildData tBuld=getBuildDataByRegion(region);
        IntArray hm=regionHexagonMap.get(region);
        if(hm==null){
            return;
        }
        for(int i = hm.size-1; i>=0; i--){
            ArmyData ta=getArmyDataByHexagon(hm.get(i));
            if(ta!=null&&getForeignDegree(ta.getLegionIndex(),li)!=1&&ta.getGeneralIndex()==0&&ComUtil.ifGet(100-ta.getArmyMorale())){
                ta.setLegionIndex(li);
                if(roundState==0){
                    if(ta.ifNeedCreateActor()){
                        ta.createActor();
                    }
                }
            }
        }
    }

    //ifCanCommonPotion 两个坐标是否相等
    public boolean ifBorderRegion(int h1,int h2,boolean ifCanCommonPotion){
        int r1=getRegionId(h1);
        int r2=getRegionId(h2);
        if(r1==r2){
            if(ifCanCommonPotion){
                return true;
            }else{
                return false;
            }
        }
        ConnectData c= getConnectData(r1);
        if(c!=null&&c.contain(r2)){
            return true;
        }
        return false;
    }
    //如果一个势力占领了这个区域的大部分领土,那么他可以向该区域的其他领土者谈判
    public boolean checkSROccupy(int r){
        if(srRegionMap !=null&& srRegionMap.size>0&&!ifSea(r)){
            BuildData b=getBuildDataByRegion(r);
            IntArray rs= srRegionMap.get(r);
            int srSize=0;
            if(b!=null&&b.getStrategicRegion()>0&&rs!=null&&rs.size>0){
                IntIntMap occupCountMap=game.tempUtil.getTempIntIntMap();
                for(int i=0;i<rs.size;i++){
                    BuildData tb=getBuildDataByRegion(rs.get(i));
                    if(tb!=null&&!tb.ifSea()){
                        if(tb.isLegionTerritoryRegion()||getForeignDegree(b.getLegionIndex(),tb.getLegionIndex())!=1){
                            game.tempUtil.disposeTempIntIntMap(occupCountMap);
                            return false;
                        }
                        if(tb.legionIndex!=b.getLegionIndex()){
                            occupCountMap.put(b.getLegionIndex(), occupCountMap.get(b.getLegionIndex(),0)+1);
                            srSize++;
                        }
                    }
                }
                if(occupCountMap.size>1){
                    int maxLi=0;//最大的拥有者
                    int maxSize=0;
                    Iterator<IntIntMap.Entry> itB4 = occupCountMap.iterator();
                    while (itB4.hasNext()) {
                        IntIntMap.Entry a = itB4.next();
                        if(a.value>maxSize){
                            maxSize=a.value;
                            maxLi=a.key;
                        }
                    }
                    if(maxLi>0&&maxSize*2>srSize){//当占有一半以上的领土时,则获取全部区域
                        for(int i=0;i<rs.size;i++){
                            BuildData tb=getBuildDataByRegion(rs.get(i));
                            if(tb!=null&&!tb.ifSea()){
                                if(maxLi!=tb.getLegionIndex()){
                                    tb.setInfluenceLi(tb.getLegionIndex());
                                }else{
                                    tb.setInfluenceLi(0);
                                }
                                tb.setLegionIndex(maxLi);
                            }
                        }
                        game.tempUtil.disposeTempIntIntMap(occupCountMap);
                        Gdx.app.log("checkSROccupy",maxLi+"获取战略区域"+b.getRegionAreaStr()+"的全部领土");
                        return true;
                    }
                }
                game.tempUtil.disposeTempIntIntMap(occupCountMap);
            }
        }
        return false;
    }

    //获得目标背后的位置
    public int getHexagonForTargetBehind(int sourceHexagon,int targetHexagon){
        int direct=getDirect(sourceHexagon,targetHexagon);
        int rs=-1;
        if(direct!=0) {
            rs = getBorderIdByDirect(targetHexagon, direct);
            if (getBuildDataByRegion(rs) != null || getArmyDataByHexagon(rs) != null || getFacilityDataByHexagon(rs) != null) {
                rs = -1;
            }
        }
        return rs;
    }


    public void transBtlModuleByChiefData(ChiefData chiefData,BtlModule bm){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        bm.setMode(119);
        bm.setBm1(chiefData.playerAmbition);
        bm.setBm2(chiefData.playerHarmony);
        bm.setBm3(chiefData.powerStrategy);
        bm.setBm4(chiefData.nationalIdeas);
        bm.setBm5(chiefData.playerTax);
        bm.setBm6(chiefData.militaryBudget);
        bm.setBm7(chiefData.foreignPolicy);
        bm.setBm8(chiefData.foreignBudget);
        bm.setBm9(chiefData.trainingSystem);
        bm.setBm10(chiefData.theDraft);
        bm.setBm11(chiefData.buildLaw);
        bm.setBm12(chiefData.industrialControl);
        bm.setBm13(chiefData.tradeBills);
        bm.setBm14(chiefData.foreignInvestment);
        bm.setBm15(chiefData.newsSystem);
        bm.setBm16(chiefData.stabilisationPolicy);
        bm.setBm17(chiefData.laborLaw);
        bm.setBm18(chiefData.safetyRegulations);
        bm.setBm19(chiefData.educationPolicy);
        bm.setBm20(chiefData.securitySpend);
        bm.setBm21(chiefData.officialSalary);
        bm.setBm22(chiefData.officialSlavery);
        bm.setBm23(chiefData.literacy);
        bm.setBm24(chiefData.reputation);
        bm.setBm25(chiefData.warSupport);
        bm.setBm26(chiefData.literacyProgress);
        bm.setBm27(chiefData.massesDemandType);
        bm.setBm28(chiefData.none7);
        bm.setBm29(chiefData.none8);
        bm.setBm30(chiefData.none9);
        bm.setBm31(chiefData.none10);
        bm.setBm32(chiefData.none11);
        bm.setBm33(chiefData.none12);
        bm.setBm34(chiefData.none13);
    }
    public void transChiefDataByBtlModule(BtlModule bm,ChiefData chiefData){
        chiefData.playerAmbition=bm.getBm1();
        chiefData.playerHarmony=bm.getBm2();
        chiefData.powerStrategy =bm.getBm3();
        chiefData.nationalIdeas=bm.getBm4();
        chiefData.playerTax=bm.getBm5();
        chiefData.militaryBudget=bm.getBm6();
        chiefData.foreignPolicy=bm.getBm7();
        chiefData.foreignBudget=bm.getBm8();
        chiefData.trainingSystem=bm.getBm9();
        chiefData.theDraft=bm.getBm10();
        chiefData.buildLaw=bm.getBm11();
        chiefData.industrialControl=bm.getBm12();
        chiefData.tradeBills=bm.getBm13();
        chiefData.foreignInvestment=bm.getBm14();
        chiefData.newsSystem=bm.getBm15();
        chiefData.stabilisationPolicy=bm.getBm16();
        chiefData.laborLaw=bm.getBm17();
        chiefData.safetyRegulations=bm.getBm18();
        chiefData.educationPolicy=bm.getBm19();
        chiefData.securitySpend=bm.getBm20();
        chiefData.officialSalary=bm.getBm21();
        chiefData.officialSlavery=bm.getBm22();
        chiefData.literacy =bm.getBm23();
        chiefData.reputation =bm.getBm24();
        chiefData.warSupport =bm.getBm25();
        chiefData.literacyProgress =bm.getBm26();
        chiefData.massesDemandType =bm.getBm27();
        chiefData.none7 =bm.getBm28();
        chiefData.none8=bm.getBm29();
        chiefData.none9=bm.getBm30();
        chiefData.none10=bm.getBm31();
        chiefData.none11=bm.getBm32();
        chiefData.none12=bm.getBm33();
        chiefData.none13=bm.getBm34();
    }


    public void transBtlModuleByRoundData(RoundData roundData,BtlModule bm){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        bm.setMode(115);
        bm.setBm1(roundData.type);
        bm.setBm2(roundData.sourceLi);
        bm.setBm3(roundData.targetLi);
        bm.setBm4(roundData.value1);
        bm.setBm5(roundData.value2);
        bm.setBm6(roundData.round);
        bm.setBm7(roundData.type1);
        bm.setBm8(roundData.type2);
        bm.setBm9(roundData.hexagon);
        bm.setBm10(roundData.triggerType);
    }
    public void transRoundDataByBtlModule(BtlModule bm,RoundData roundData){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        roundData.type=bm.getBm1();
        roundData.sourceLi=bm.getBm2();
        roundData.targetLi=bm.getBm3();
        roundData.value1=bm.getBm4();
        roundData.value2=bm.getBm5();
        roundData.round=bm.getBm6();
        roundData.type1=bm.getBm7();
        roundData.type2=bm.getBm8();
        roundData.hexagon=bm.getBm9();
        roundData.triggerType=bm.getBm10();
    }

    public void transBtlModuleByTaskData(TaskData taskData,BtlModule bm){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        bm.setMode(114);
        bm.setBm1(taskData.taskIndex);
        bm.setBm2(taskData.taskLv);
        bm.setBm3(taskData.countNow);
        bm.setBm4(taskData.countMax);
        bm.setBm5(taskData.star);
        bm.setBm6(taskData.taskType);
        bm.setBm7(taskData.bontyType);
        bm.setBm8(taskData.bontyValue);
        bm.setBm9(taskData.taskRound);
    }
    public void transTaskDataByBtlModule(BtlModule bm,TaskData taskData){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        taskData.taskIndex=bm.getBm1();
        taskData.taskLv=bm.getBm2();
        taskData.countNow=bm.getBm3();
        taskData.countMax=bm.getBm4();
        taskData.star=bm.getBm5();
        taskData.taskType=bm.getBm6();
        taskData.bontyType=bm.getBm7();
        taskData.bontyValue=bm.getBm8();
        taskData.taskRound=bm.getBm9();
    }
    public void transBtlModuleByTradeData(TradeData tradeData,BtlModule bm){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        bm.setMode(113);
        bm.setBm1(tradeData.tradeIndex);
        bm.setBm2(tradeData.legionIndex);
        bm.setBm3(tradeData.goodsType);
        bm.setBm4(tradeData.goodsValue);
        bm.setBm5(tradeData.priceType);
        bm.setBm6(tradeData.priceValue);
        bm.setBm7(tradeData.tradeChance);
    }
    public void transTradeDataByBtlModule(BtlModule bm,TradeData tradeData){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        tradeData.tradeIndex=bm.getBm1();
        tradeData.legionIndex=bm.getBm2();
        tradeData.goodsType=bm.getBm3();
        tradeData.goodsValue=bm.getBm4();
        tradeData.priceType=bm.getBm5();
        tradeData.priceValue=bm.getBm6();
        tradeData.tradeChance=bm.getBm7();
    }
    public void transBtlModuleByInternData(InternData internData,BtlModule bm){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        bm.setMode(112);
        bm.setBm1(internData.internIndex);
        bm.setBm2(internData.legionIndex);
        bm.setBm3(internData.campPhase);
        bm.setBm4(internData.influence);
        bm.setBm5(internData.tension);
    }
    public void transInternDataByBtlModule(BtlModule bm,InternData internData){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        internData.internIndex=bm.getBm1();
        internData.legionIndex=bm.getBm2();
        internData.campPhase=bm.getBm3();
        internData.influence=bm.getBm4();
        internData.tension=bm.getBm5();
    }

    public void transBtlModuleByForeignData(ForeignData foreignData,BtlModule bm){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        bm.setMode(111);
        bm.setBm1(foreignData.sourceLegionIndex);
        bm.setBm2(foreignData.targetLegionIndex);
        bm.setBm3(foreignData.favorValue);
        bm.setBm4(foreignData.foreignValue);
        bm.setBm5(foreignData.foreignType);
        bm.setBm6(foreignData.diplomaticAttitude);
    }

    public void transForeignDataByBtlModule(BtlModule bm,ForeignData foreignData){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        if(foreignData==null){return;}
        foreignData.sourceLegionIndex=bm.getBm1();
        foreignData.targetLegionIndex=bm.getBm2();
        foreignData.favorValue=bm.getBm3();
        foreignData.foreignValue =bm.getBm4();
        foreignData.foreignType=bm.getBm5();
        foreignData.diplomaticAttitude=bm.getBm6();
    }

    public void transBtlModuleByFortData(FortData fortData,BtlModule bm){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        bm.setMode(110);
        bm.setBm1(fortData.fortLv);
        bm.setBm2(fortData.hexagonIndex);
        bm.setBm3(fortData.legionIndex);
        bm.setBm4(fortData.fortId);
        bm.setBm5(fortData.fortRound);
    }
    public void transFortDataByBtlModule(BtlModule bm,FortData fortData){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        if(fortData==null){return;}
        fortData.fortLv=bm.getBm1();
        fortData.hexagonIndex=bm.getBm2();
        fortData.legionIndex=bm.getBm3();
        fortData.fortId=bm.getBm4();
        fortData.fortRound=bm.getBm5();
    }
    public void transBtlModuleByArmyData(ArmyData armyData,BtlModule bm){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        bm.setMode(109);
        bm.setBm1(armyData.armyIndex);
        bm.setBm2(armyData.regionId);
        bm.setBm3(armyData.legionIndex);
        bm.setBm4(armyData.unitArmyId0);
        bm.setBm5(armyData.armyType);
        bm.setBm6(armyData.unitGroup0Lv);
        bm.setBm7(armyData.armyKills);
        bm.setBm8(armyData.unitArmyId1);
        bm.setBm9(armyData.unitWealv1);
        bm.setBm10(armyData.armyHpMax);
        bm.setBm11(armyData.armyHpNow);
        bm.setBm12(armyData.unitGroup1Lv);
        bm.setBm13(armyData.unitGroup2Lv);
        bm.setBm14(armyData.unitGroup3Lv);
        bm.setBm15(armyData.unitGroup4Lv);
        bm.setBm16(armyData.unitGroup5Lv);
        bm.setBm17(armyData.unitGroup6Lv);
        bm.setBm18(armyData.skillId1);
        bm.setBm19(armyData.skillId2);
        bm.setBm20(armyData.skillId3);
        bm.setBm21(armyData.skillId4);
        bm.setBm22(armyData.generalIndex);
        bm.setBm23(armyData.armyRank);
        bm.setBm24(armyData.armyMorale);
        bm.setBm25(armyData.armyFormation);
        bm.setBm26(armyData.hinge);
        bm.setBm27(armyData.armyDirectionValue);
        bm.setBm28(armyData.airforcePolicy);
        bm.setBm29(armyData.armyRound);
        bm.setBm30(armyData.unitWealv0);
        bm.setBm31(armyData.transportType);
        bm.setBm32(armyData.armyAi);
        bm.setBm33(armyData.nucleIndex);
        bm.setBm34(armyData.targetRegion);
        bm.setBm35(armyData.standyRound);
        bm.setBm36(armyData.skillLv1);
        bm.setBm37(armyData.skillLv2);
        bm.setBm38(armyData.skillLv3);
        bm.setBm39(armyData.skillLv4);
        bm.setBm40(armyData.ifMove);
        bm.setBm41(armyData.ifAttack);
        bm.setBm42(armyData.armyBuff1);
        bm.setBm43(armyData.armyBuff2);
        bm.setBm44(armyData.armyBuff3);
        bm.setBm45(armyData.eventIndex);
        bm.setBm46(armyData.gameValue);
        bm.setBm47(armyData.hexagonIndex);
        bm.setBm48(armyData.unitArmyId2);
        bm.setBm49(armyData.unitArmyId3);
        bm.setBm50(armyData.unitArmyId4);
        bm.setBm51(armyData.unitArmyId5);
        bm.setBm52(armyData.unitArmyId6);
        bm.setBm53(armyData.unitWealv2);
        bm.setBm54(armyData.unitWealv3);
        bm.setBm55(armyData.unitWealv4);
        bm.setBm56(armyData.unitWealv5);
        bm.setBm56(armyData.unitWealv6);
    }
    public void transArmyDataByBtlModule(BtlModule bm,ArmyData armyData){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        if(armyData==null){return;}
        armyData.armyIndex=bm.getBm1();
        armyData.regionId=bm.getBm2();
        armyData.legionIndex=bm.getBm3();
        armyData.unitArmyId0 =bm.getBm4();
        armyData.armyType=bm.getBm5();
        armyData.unitGroup0Lv =bm.getBm6();
        armyData.armyKills=bm.getBm7();
        armyData.unitArmyId1 =bm.getBm8();
        armyData.unitWealv1 =bm.getBm9();
        armyData.armyHpMax=bm.getBm10();
        armyData.armyHpNow=bm.getBm11();
        armyData.unitGroup1Lv =bm.getBm12();
        armyData.unitGroup2Lv =bm.getBm13();
        armyData.unitGroup3Lv =bm.getBm14();
        armyData.unitGroup4Lv =bm.getBm15();
        armyData.unitGroup5Lv =bm.getBm16();
        armyData.unitGroup6Lv =bm.getBm17();
        armyData.skillId1=bm.getBm18();
        armyData.skillId2=bm.getBm19();
        armyData.skillId3=bm.getBm20();
        armyData.skillId4=bm.getBm21();
        armyData.generalIndex=bm.getBm22();
        armyData.armyRank=bm.getBm23();
        armyData.armyMorale=bm.getBm24();
        armyData.armyFormation =bm.getBm25();
        armyData.hinge=bm.getBm26();
        armyData.armyDirectionValue=bm.getBm27();
        armyData.airforcePolicy=bm.getBm28();
        armyData.armyRound=bm.getBm29();
        armyData.unitWealv0 =bm.getBm30();
        armyData.transportType=bm.getBm31();
        armyData.armyAi=bm.getBm32();
        armyData.nucleIndex=bm.getBm33();
        armyData.targetRegion=bm.getBm34();
        armyData.standyRound=bm.getBm35();
        armyData.skillLv1=bm.getBm36();
        armyData.skillLv2=bm.getBm37();
        armyData.skillLv3=bm.getBm38();
        armyData.skillLv4=bm.getBm39();
        armyData.ifMove=bm.getBm40();
        armyData.ifAttack=bm.getBm41();
        armyData.armyBuff1=bm.getBm42();
        armyData.armyBuff2=bm.getBm43();
        armyData.armyBuff3=bm.getBm44();
        armyData.eventIndex=bm.getBm45();
        armyData.gameValue=bm.getBm46();
        armyData.hexagonIndex=bm.getBm47();
        armyData.unitArmyId2=bm.getBm48();
        armyData.unitArmyId3=bm.getBm49();
        armyData.unitArmyId4=bm.getBm50();
        armyData.unitArmyId5=bm.getBm51();
        armyData.unitArmyId6=bm.getBm52();
        armyData.unitWealv2=bm.getBm53();
        armyData.unitWealv3=bm.getBm54();
        armyData.unitWealv4=bm.getBm55();
        armyData.unitWealv5=bm.getBm56();
        armyData.unitWealv6=bm.getBm57();
        armyData.armyActor.update();
        armyData.armyActor.updHpColor();
    }

    public void transBtlModuleByAirData(AirData airData,BtlModule bm){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        bm.setMode(108);
        bm.setBm1(airData.airIndex);
        bm.setBm2(airData.regionId);
        bm.setBm3(airData.armyHexagon);
        bm.setBm4(airData.legionIndex);
        bm.setBm5(airData.airId);
        bm.setBm6(airData.airType);
        bm.setBm7(airData.engLv);
        bm.setBm8(airData.airKills);
        bm.setBm9(airData.airHpMax);
        bm.setBm10(airData.airHpNow);
        bm.setBm11(airData.ackLv);
        bm.setBm12(airData.defLv);
        bm.setBm13(airData.spyLv);
        bm.setBm14(airData.supLv);
        bm.setBm15(airData.actLv);
        bm.setBm16(airData.weaLv);
        bm.setBm17(airData.skillId1);
        bm.setBm18(airData.skillId2);
        bm.setBm19(airData.skillId3);
        bm.setBm20(airData.skillId4);
        bm.setBm21(airData.generalIndex);
        bm.setBm22(airData.airRank);
        bm.setBm23(airData.airMorale);
        bm.setBm24(airData.skillLv1);
        bm.setBm25(airData.skillLv2);
        bm.setBm26(airData.skillLv3);
        bm.setBm27(airData.skillLv4);
        bm.setBm28(airData.airRound);
        bm.setBm29(airData.airAi);
        bm.setBm30(airData.targetRegion);
        bm.setBm31(airData.nucleIndex);
        bm.setBm32(airData.goodsMax);
        bm.setBm33(airData.goodsNow);
        bm.setBm34(airData.ifMove);
        bm.setBm35(airData.ifAttack);
        bm.setBm36(airData.airBuff1);
        bm.setBm37(airData.airBuff2);
        bm.setBm38(airData.airBuff3);
        bm.setBm39(airData.gameValue);
    }
    public void transAirDataByBtlModule(BtlModule bm,AirData airData){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        if(airData==null){return;}
        airData.airIndex=bm.getBm1();
        airData.regionId=bm.getBm2();
        airData.armyHexagon=bm.getBm3();
        airData.legionIndex=bm.getBm4();
        airData.airId=bm.getBm5();
        airData.airType=bm.getBm6();
        airData.engLv =bm.getBm7();
        airData.airKills=bm.getBm8();
        airData.airHpMax=bm.getBm9();
        airData.airHpNow=bm.getBm10();
        airData.ackLv=bm.getBm11();
        airData.defLv=bm.getBm12();
        airData.spyLv =bm.getBm13();
        airData.supLv=bm.getBm14();
        airData.actLv=bm.getBm15();
        airData.weaLv=bm.getBm16();
        airData.skillId1=bm.getBm17();
        airData.skillId2=bm.getBm18();
        airData.skillId3=bm.getBm19();
        airData.skillId4=bm.getBm20();
        airData.generalIndex=bm.getBm21();
        airData.airRank=bm.getBm22();
        airData.airMorale=bm.getBm23();
        airData.skillLv1=bm.getBm24();
        airData.skillLv2=bm.getBm25();
        airData.skillLv3=bm.getBm26();
        airData.skillLv4=bm.getBm27();
        airData.airRound=bm.getBm28();
        airData.airAi=bm.getBm29();
        airData.targetRegion=bm.getBm30();
        airData.nucleIndex=bm.getBm31();
        airData.goodsMax=bm.getBm32();
        airData.goodsNow=bm.getBm33();
        airData.ifMove=bm.getBm34();
        airData.ifAttack=bm.getBm35();
        airData.airBuff1=bm.getBm36();
        airData.airBuff2=bm.getBm37();
        airData.airBuff3=bm.getBm38();
        airData.gameValue=bm.getBm39();
    }
    public void transBtlModuleByNulcleData(NulcleData nulcleData,BtlModule bm){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        bm.setMode(107);
        bm.setBm1(nulcleData.nucleIndex);
        bm.setBm2(nulcleData.regionId);
        bm.setBm3(nulcleData.nuclearId);
        bm.setBm4(nulcleData.nucleRound);
        bm.setBm5(nulcleData.gameValue);
        bm.setBm6(nulcleData.legionIndex);
    }
    public void transNulcleDataByBtlModule(BtlModule bm,NulcleData nulcleData){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        if(nulcleData==null){return;}
        nulcleData.nucleIndex=bm.getBm1();
        nulcleData.regionId=bm.getBm2();
        nulcleData.nuclearId=bm.getBm3();
        nulcleData.nucleRound=bm.getBm4();
        nulcleData.gameValue=bm.getBm5();
        nulcleData.legionIndex=bm.getBm6();
    }
    public void transBtlModuleByFacilityData(FacilityData facilityData,BtlModule bm){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        bm.setMode(106);
        bm.setBm1(facilityData.facilityIndex);
        bm.setBm2(facilityData.hexagonIndex);
        bm.setBm3(facilityData.buildIndex);
        bm.setBm4(facilityData.facilityId);
        bm.setBm5(facilityData.facilityLv);
        bm.setBm6(facilityData.facilityTarget);
        bm.setBm7(facilityData.facilityRound);
        bm.setBm8(facilityData.facilityStatus);
        bm.setBm9(facilityData.facilityBuff1);
        bm.setBm10(facilityData.facilityBuff2);
        bm.setBm11(facilityData.facilityBuff3);
        bm.setBm12(facilityData.gameValue);
    }
    public void transFacilityDataByBtlModule(BtlModule bm,FacilityData facilityData){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        if(facilityData==null){return;}
        facilityData.facilityIndex=bm.getBm1();
        facilityData.hexagonIndex=bm.getBm2();
        facilityData.buildIndex=bm.getBm3();
        facilityData.facilityId=bm.getBm4();
        facilityData.facilityLv=bm.getBm5();
        facilityData.facilityTarget=bm.getBm6();
        facilityData.facilityRound=bm.getBm7();
        facilityData.facilityStatus=bm.getBm8();
        facilityData.facilityBuff1=bm.getBm9();
        facilityData.facilityBuff2=bm.getBm10();
        facilityData.facilityBuff3=bm.getBm11();
        facilityData.gameValue=bm.getBm12();
        facilityData.facilityActor.update();
    }
    public void transBtlModuleByBuildData(BuildData buildData,BtlModule bm){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        bm.setMode(105);
        bm.setBm1(buildData.buildIndex);
        bm.setBm2(buildData.regionId);
        bm.setBm3(buildData.buildType);
        bm.setBm4(buildData.mineralLv);
        bm.setBm5(buildData.legionIndex);
        bm.setBm6(buildData.buildName);
        bm.setBm7(buildData.buildWonder);
        bm.setBm8(buildData.buildStatus);
        bm.setBm9(buildData.airforcePolicy);
        bm.setBm10(buildData.cityHpMax);
        bm.setBm11(buildData.cityHpNow);
        bm.setBm12(buildData.cityStability);
        bm.setBm13(buildData.oilLv);
        bm.setBm14(buildData.developLv);
        bm.setBm15(buildData.cityTax);
        bm.setBm16(buildData.cityLvNow);
        bm.setBm17(buildData.industryLvNow);
        bm.setBm18(buildData.foodLvNow);
        bm.setBm19(buildData.techLvNow);
        bm.setBm20(buildData.energyLvNow);
        bm.setBm21(buildData.transportLvNow);
        bm.setBm22(buildData.armyLvNow);
        bm.setBm23(buildData.airLvNow);
        bm.setBm24(buildData.supplyLvNow);
        bm.setBm25(buildData.defenceLvNow);
        bm.setBm26(buildData.missileLvNow);
        bm.setBm27(buildData.nuclearLvNow);
        bm.setBm28(buildData.cultureLvNow);
        bm.setBm29(buildData.tradeLvNow);
        bm.setBm30(buildData.areaZone);
        bm.setBm31(buildData.weatherId);
        bm.setBm32(buildData.buildRound);
        bm.setBm33(buildData.hinge);
        bm.setBm34(buildData.climateZone);
        bm.setBm35(buildData.strategicRegion);
        bm.setBm36(buildData.influenceLi);
        bm.setBm37(buildData.buildBuff2);
        bm.setBm38(buildData.buildBuff3);
        bm.setBm39(buildData.eventIndex);
        bm.setBm40(buildData.buildPolicy);
        bm.setBm41(buildData.airIndex1);
        bm.setBm42(buildData.airIndex2);
        bm.setBm43(buildData.airIndex3);
        bm.setBm44(buildData.airIndex4);
        bm.setBm45(buildData.nulIndex1);
        bm.setBm46(buildData.nulIndex2);
        bm.setBm47(buildData.nulIndex3);
        bm.setBm48(buildData.nulIndex4);
    }
    public void transBuildDataByBtlModule(BtlModule bm,BuildData buildData){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        if(buildData==null){return;}
        buildData.buildIndex=bm.getBm1();
        buildData.regionId=bm.getBm2();
        buildData.buildType=bm.getBm3();
        buildData.mineralLv=bm.getBm4();
        buildData.legionIndex=bm.getBm5();
        buildData.buildName=bm.getBm6();
        buildData.buildWonder=bm.getBm7();
        buildData.buildStatus=bm.getBm8();
        buildData.airforcePolicy=bm.getBm9();
        buildData.cityHpMax=bm.getBm10();
        buildData.cityHpNow=bm.getBm11();
        buildData.cityStability=bm.getBm12();
        buildData.oilLv=bm.getBm13();
        buildData.developLv=bm.getBm14();
        buildData.cityTax=bm.getBm15();
        buildData.cityLvNow=bm.getBm16();
        buildData.industryLvNow=bm.getBm17();
        buildData.foodLvNow=bm.getBm18();
        buildData.techLvNow=bm.getBm19();
        buildData.energyLvNow=bm.getBm20();
        buildData.transportLvNow=bm.getBm21();
        buildData.armyLvNow=bm.getBm22();
        buildData.airLvNow=bm.getBm23();
        buildData.supplyLvNow=bm.getBm24();
        buildData.defenceLvNow=bm.getBm25();
        buildData.missileLvNow=bm.getBm26();
        buildData.nuclearLvNow=bm.getBm27();
        buildData.cultureLvNow=bm.getBm28();
        buildData.tradeLvNow=bm.getBm29();
        buildData.areaZone=bm.getBm30();
        buildData.weatherId=bm.getBm31();
        buildData.buildRound=bm.getBm32();
        buildData.hinge=bm.getBm33();
        buildData.climateZone=bm.getBm34();
        buildData.strategicRegion=bm.getBm35();
        buildData.influenceLi =bm.getBm36();
        buildData.buildBuff2=bm.getBm37();
        buildData.buildBuff3=bm.getBm38();
        buildData.eventIndex=bm.getBm39();
        buildData.buildPolicy=bm.getBm40();
        buildData.airIndex1=bm.getBm41();
        buildData.airIndex2=bm.getBm42();
        buildData.airIndex3=bm.getBm43();
        buildData.airIndex4=bm.getBm44();
        buildData.nulIndex1=bm.getBm45();
        buildData.nulIndex2=bm.getBm46();
        buildData.nulIndex3=bm.getBm47();
        buildData.nulIndex4=bm.getBm48();
        buildData.updActor();
    }
    public void transBtlModuleByGeneralData(GeneralData generalData,BtlModule bm){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        bm.setMode(104);
        bm.setBm1(generalData.generalIndex);
        bm.setBm2(generalData.political);
        bm.setBm3(generalData.generalId);
        bm.setBm4(generalData.rank);
        bm.setBm5(generalData.legionIndex);
        bm.setBm6(generalData.ability);
        bm.setBm7(generalData.type);
        bm.setBm8(generalData.state);
        bm.setBm9(generalData.restLife);
    }
    public void transGeneralDataByBtlModule(BtlModule bm,GeneralData generalData){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        if(generalData==null){return;}
        generalData.generalIndex=bm.getBm1();
        generalData.political=bm.getBm2();
        generalData.generalId=bm.getBm3();
        generalData.rank=bm.getBm4();
        generalData.legionIndex=bm.getBm5();
        generalData.ability =bm.getBm6();
        generalData.type=bm.getBm7();
        generalData.state=bm.getBm8();
        generalData.restLife=bm.getBm9();
    }
    public void transBtlModuleByStrategicData(StrategicData strategicData,BtlModule bm){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        bm.setMode(103);
        bm.setBm1(strategicData.legionIndex);
        bm.setBm2(strategicData.nationLv);
        bm.setBm3(strategicData.nationState);
        bm.setBm4(strategicData.leaderId);
        bm.setBm5(strategicData.military);
        bm.setBm6(strategicData.influence);
        bm.setBm7(strategicData.reputation);
        bm.setBm8(strategicData.tension);
        bm.setBm9(strategicData.discontent);
        bm.setBm10(strategicData.loss);
        bm.setBm11(strategicData.kia);
        bm.setBm12(strategicData.corruption);
        bm.setBm13(strategicData.powerful);
        bm.setBm14(strategicData.polariz);
        bm.setBm15(strategicData.democracy);
        bm.setBm16(strategicData.perceive);
        bm.setBm17(strategicData.currency);
        bm.setBm18(strategicData.trust);
        bm.setBm19(strategicData.purges);
        bm.setBm20(strategicData.politSpec);
        bm.setBm21(strategicData.foreignTendency);
        bm.setBm22(strategicData.fertilityNp);
        bm.setBm23(strategicData.cultureNp);
        bm.setBm24(strategicData.developNp);
        bm.setBm25(strategicData.warNp);
        bm.setBm26(strategicData.nationNp);
        bm.setBm27(strategicData.organizNp);
        bm.setBm28(strategicData.foreignNp);
        bm.setBm29(strategicData.colonialNp);
        bm.setBm30(strategicData.cohesion);
        bm.setBm31(strategicData.party);
        bm.setBm32(strategicData.landId);
        bm.setBm33(strategicData.targetRegion1);
        bm.setBm34(strategicData.targetRegion2);
        bm.setBm35(strategicData.targetRegion3);
        bm.setBm36(strategicData.targetRegion4);
        bm.setBm37(strategicData.targetRegion5);
        bm.setBm38(strategicData.targetTrade1);
        bm.setBm39(strategicData.targetTrade2);
        bm.setBm40(strategicData.targetTrade3);
        bm.setBm41(strategicData.targetTrade4);
        bm.setBm42(strategicData.targetTrade5);
        bm.setBm43(strategicData.strategyBuff1);
        bm.setBm44(strategicData.strategyBuff2);
        bm.setBm45(strategicData.strategyBuff3);
    }
    public void transStrategicDataByBtlModule(BtlModule bm,StrategicData strategicData){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        strategicData.legionIndex=bm.getBm1();
        strategicData.nationLv=bm.getBm2();
        strategicData.nationState=bm.getBm3();
        strategicData.leaderId=bm.getBm4();
        strategicData.military=bm.getBm5();
        strategicData.influence=bm.getBm6();
        strategicData.reputation=bm.getBm7();
        strategicData.tension=bm.getBm8();
        strategicData.discontent=bm.getBm9();
        strategicData.loss=bm.getBm10();
        strategicData.kia=bm.getBm11();
        strategicData.corruption=bm.getBm12();
        strategicData.powerful=bm.getBm13();
        strategicData.polariz=bm.getBm14();
        strategicData.democracy=bm.getBm15();
        strategicData.perceive=bm.getBm16();
        strategicData.currency=bm.getBm17();
        strategicData.trust=bm.getBm18();
        strategicData.purges=bm.getBm19();
        strategicData.politSpec=bm.getBm20();
        strategicData.foreignTendency=bm.getBm21();
        strategicData.fertilityNp=bm.getBm22();
        strategicData.cultureNp=bm.getBm23();
        strategicData.developNp=bm.getBm24();
        strategicData.warNp=bm.getBm25();
        strategicData.nationNp=bm.getBm26();
        strategicData.organizNp=bm.getBm27();
        strategicData.foreignNp=bm.getBm28();
        strategicData.colonialNp=bm.getBm29();
        strategicData.cohesion=bm.getBm30();
        strategicData.party=bm.getBm31();
        strategicData.landId=bm.getBm32();
        strategicData.targetRegion1=bm.getBm33();
        strategicData.targetRegion2=bm.getBm34();
        strategicData.targetRegion3=bm.getBm35();
        strategicData.targetRegion4=bm.getBm36();
        strategicData.targetRegion5=bm.getBm37();
        strategicData.targetTrade1=bm.getBm38();
        strategicData.targetTrade2=bm.getBm39();
        strategicData.targetTrade3=bm.getBm40();
        strategicData.targetTrade4=bm.getBm41();
        strategicData.targetTrade5=bm.getBm42();
        strategicData.strategyBuff1=bm.getBm43();
        strategicData.strategyBuff2=bm.getBm44();
        strategicData.strategyBuff3=bm.getBm45();
    }
    public void transBtlModuleByLegionData(LegionData legionData,BtlModule bm){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        bm.setMode(102);
        bm.setBm1(legionData.legionIndex);
        bm.setBm2(legionData.internIndex);
        bm.setBm3(legionData.suzerainLi);
        bm.setBm4(legionData.countryId);
        bm.setBm5(legionData.targetAreaZone);
        bm.setBm6(legionData.money);
        bm.setBm7(legionData.industry);
        bm.setBm8(legionData.food);
        bm.setBm9(legionData.mineral);
        bm.setBm10(legionData.oil);
        bm.setBm11(legionData.tradeCount);
        bm.setBm12(legionData.tech);
        bm.setBm13(legionData.level);
        bm.setBm14(legionData.power);
        bm.setBm15(legionData.lifeBonus);
        bm.setBm16(legionData.taxBonus);
        bm.setBm17(legionData.rGeneralId);
        bm.setBm18(legionData.capitalId);
        bm.setBm19(legionData.cityLvMax);
        bm.setBm20(legionData.industLvMax);
        bm.setBm21(legionData.techLvMax);
        bm.setBm22(legionData.energyLvMax);
        bm.setBm23(legionData.transportLvMax);
        bm.setBm24(legionData.infantryLvMax);
        bm.setBm25(legionData.cannonLvMax);
        bm.setBm26(legionData.tankLvMax);
        bm.setBm27(legionData.fortLvMax);
        bm.setBm28(legionData.navyLvMax);
        bm.setBm29(legionData.airLvMax);
        bm.setBm30(legionData.supplyLvMax);
        bm.setBm31(legionData.defenceLvMax);
        bm.setBm32(legionData.missileLvMax);
        bm.setBm33(legionData.nuclearLvMax);
        bm.setBm34(legionData.financialLvMax);
        bm.setBm35(legionData.tradeLvMax);
        bm.setBm36(legionData.cultureLvMax);
        bm.setBm37(legionData.miracleNow);
        bm.setBm38(legionData.militaryAcademyLv);
        bm.setBm39(legionData.infantryCardMax);
        bm.setBm40(legionData.armorCardMax);
        bm.setBm41(legionData.artilleryCardMax);
        bm.setBm42(legionData.navyCardMax);
        bm.setBm43(legionData.airCardMax);
        bm.setBm44(legionData.nuclearCardMax);
        bm.setBm45(legionData.missileCardMax);
        bm.setBm46(legionData.submarineCardMax);
        bm.setBm47(legionData.defenceCardMax);
        bm.setBm48(legionData.generalCardMax);
        bm.setBm49(legionData.legionRound);
        bm.setBm50(legionData.civilSpec);
        bm.setBm51(legionData.red);
        bm.setBm52(legionData.green);
        bm.setBm53(legionData.blue);
        bm.setBm54(legionData.alpha);
        bm.setBm55(legionData.legionFeature1);
        bm.setBm56(legionData.legionFeatureLv1);
        bm.setBm57(legionData.legionFeature2);
        bm.setBm58(legionData.legionFeatureLv2);
        bm.setBm59(legionData.legionFeature3);
        bm.setBm60(legionData.legionFeatureLv3);
        bm.setBm61(legionData.legionFeature4);
        bm.setBm62(legionData.legionFeatureLv4);
        bm.setBm63(legionData.legionFeature5);
        bm.setBm64(legionData.legionFeatureLv5);
        bm.setBm65(legionData.legionBuff1);
        bm.setBm66(legionData.legionBuff1Round);
        bm.setBm67(legionData.legionBuff2);
        bm.setBm68(legionData.legionBuff2Round);
        bm.setBm69(legionData.legionBuff3);
        bm.setBm70(legionData.legionBuff3Round);
        bm.setBm71(legionData.extraMoney);
        bm.setBm72(legionData.extraIndustry);
        bm.setBm73(legionData.extraTech);
        bm.setBm74(legionData.extraFood);
        bm.setBm75(legionData.extraMineral);
        bm.setBm76(legionData.extraOil);
        bm.setBm77(legionData.extraPopulation);
    }
    public void transLegionDataByBtlModule(BtlModule bm,LegionData legionData){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        legionData.legionIndex=bm.getBm1();
        legionData.internIndex=bm.getBm2();
        legionData.suzerainLi=bm.getBm3();
        legionData.countryId=bm.getBm4();
        legionData.targetAreaZone=bm.getBm5();
        legionData.money=bm.getBm6();
        legionData.industry=bm.getBm7();
        legionData.food=bm.getBm8();
        legionData.mineral=bm.getBm9();
        legionData.oil=bm.getBm10();
        legionData.tradeCount=bm.getBm11();
        legionData.tech=bm.getBm12();
        legionData.level=bm.getBm13();
        legionData.power =bm.getBm14();
        legionData.lifeBonus=bm.getBm15();
        legionData.taxBonus=bm.getBm16();
        legionData.rGeneralId=bm.getBm17();
        legionData.capitalId=bm.getBm18();
        legionData.cityLvMax=bm.getBm19();
        legionData.industLvMax=bm.getBm20();
        legionData.techLvMax=bm.getBm21();
        legionData.energyLvMax=bm.getBm22();
        legionData.transportLvMax=bm.getBm23();
        legionData.infantryLvMax=bm.getBm24();
        legionData.cannonLvMax=bm.getBm25();
        legionData.tankLvMax=bm.getBm26();
        legionData.fortLvMax=bm.getBm27();
        legionData.navyLvMax=bm.getBm28();
        legionData.airLvMax=bm.getBm29();
        legionData.supplyLvMax=bm.getBm30();
        legionData.defenceLvMax=bm.getBm31();
        legionData.missileLvMax=bm.getBm32();
        legionData.nuclearLvMax=bm.getBm33();
        legionData.financialLvMax=bm.getBm34();
        legionData.tradeLvMax=bm.getBm35();
        legionData.cultureLvMax=bm.getBm36();
        legionData.miracleNow=bm.getBm37();
        legionData.militaryAcademyLv =bm.getBm38();
        legionData.infantryCardMax=bm.getBm39();
        legionData.armorCardMax=bm.getBm40();
        legionData.artilleryCardMax=bm.getBm41();
        legionData.navyCardMax=bm.getBm42();
        legionData.airCardMax=bm.getBm43();
        legionData.nuclearCardMax=bm.getBm44();
        legionData.missileCardMax=bm.getBm45();
        legionData.submarineCardMax=bm.getBm46();
        legionData.defenceCardMax=bm.getBm47();
        legionData.generalCardMax=bm.getBm48();
        legionData.legionRound=bm.getBm49();
        legionData.civilSpec=bm.getBm50();
        legionData.red=bm.getBm51();
        legionData.green=bm.getBm52();
        legionData.blue=bm.getBm53();
        legionData.alpha=bm.getBm54();
        legionData.legionFeature1=bm.getBm55();
        legionData.legionFeatureLv1=bm.getBm56();
        legionData.legionFeature2=bm.getBm57();
        legionData.legionFeatureLv2=bm.getBm58();
        legionData.legionFeature3=bm.getBm59();
        legionData.legionFeatureLv3=bm.getBm60();
        legionData.legionFeature4=bm.getBm61();
        legionData.legionFeatureLv4=bm.getBm62();
        legionData.legionFeature5=bm.getBm63();
        legionData.legionFeatureLv5=bm.getBm64();
        legionData.legionBuff1=bm.getBm65();
        legionData.legionBuff1Round=bm.getBm66();
        legionData.legionBuff2=bm.getBm67();
        legionData.legionBuff2Round=bm.getBm68();
        legionData.legionBuff3=bm.getBm69();
        legionData.legionBuff3Round=bm.getBm70();
        legionData.extraMoney=bm.getBm71();
        legionData.extraIndustry=bm.getBm72();
        legionData.extraTech=bm.getBm73();
        legionData.extraFood=bm.getBm74();
        legionData.extraMineral=bm.getBm75();
        legionData.extraOil=bm.getBm76();
        legionData.extraPopulation=bm.getBm77();
    }
    public void transBtlModuleByWorldData(WorldData worldData,BtlModule bm){
        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        bm.setMode(101);
        bm.setBm1(worldData.worldAge);
        bm.setBm2(worldData.worldState);
        bm.setBm3(worldData.worldRound);
        bm.setBm4(worldData.worldTension);
        bm.setBm5(worldData.worldMoney);
        bm.setBm6(worldData.worldIndustry);
        bm.setBm7(worldData.worldFood);
        bm.setBm8(worldData.worldMineral);
        bm.setBm9(worldData.worldTech);
        bm.setBm10(worldData.worldOil);
    }
    public void transWorldDataByBtlModule(BtlModule bm,WorldData worldData){

        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        worldData.worldAge=bm.getBm1();
        worldData.worldState=bm.getBm2();
        worldData.worldRound=bm.getBm3();
        worldData.worldTension=bm.getBm4();
        worldData.worldMoney=bm.getBm5();
        worldData.worldIndustry=bm.getBm6();
        worldData.worldFood=bm.getBm7();
        worldData.worldMineral=bm.getBm8();
        worldData.worldTech=bm.getBm9();
        worldData.worldOil=bm.getBm10();
    }
    public void transBtlModuleByMasterData(MasterData masterData,BtlModule bm){

        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        bm.setMode(100);
        bm.setBm1(masterData.playerRebirth);
        bm.setBm2(masterData.gameStatu);
        bm.setBm3(masterData.btlType);
        bm.setBm4(masterData.mapLandBase);
        bm.setBm5(masterData.mapSeaBase);
        bm.setBm6(masterData.ifColor);
        bm.setBm7(masterData.ifFog);
        bm.setBm8(masterData.ifChief);
        bm.setBm9(masterData.ifWeather);
        bm.setBm10(masterData.mapId);
        bm.setBm11(masterData.startX);
        bm.setBm12(masterData.startY);
        bm.setBm13(masterData.width);
        bm.setBm14(masterData.height);
        bm.setBm15(masterData.bf19);
        bm.setBm16(masterData.bf20);
        bm.setBm17(masterData.roundMax);
        bm.setBm18(masterData.roundNow);
        bm.setBm19(masterData.roundForYear);
        bm.setBm20(masterData.beginYear);
        bm.setBm21(masterData.victoryType);
        bm.setBm22(masterData.incomeRate);
        bm.setBm23(masterData.airAddRange);
        bm.setBm24(masterData.unitAddMove);
        bm.setBm25(masterData.ifHaveAutoBuild);
        bm.setBm26(masterData.historyId);
        bm.setBm27(masterData.gameEpisode);
        bm.setBm28(masterData.bf16);
        bm.setBm29(masterData.bf17);
        bm.setBm30(masterData.gameDifficulty);
        bm.setBm31(masterData.bf18);
        bm.setBm32(masterData.legionsCount);
        bm.setBm33(masterData.strategysCount);
        bm.setBm34(masterData.generalsCount);
        bm.setBm35(masterData.buildsCount);
        bm.setBm36(masterData.facilitysCount);
        bm.setBm37(masterData.nuclearsCount);
        bm.setBm38(masterData.airforcesCount);
        bm.setBm39(masterData.armysCount);
        bm.setBm40(masterData.trapsCount);
        bm.setBm41(masterData.diplomacysCount);
        bm.setBm42(masterData.internsCount);
        bm.setBm43(masterData.tradesCount);
        bm.setBm44(masterData.tasksCount);
        bm.setBm45(masterData.delaysCount);
        bm.setBm46(masterData.hexagonsCount);
        bm.setBm47(masterData.eventsCount);
        bm.setBm48(masterData.remarkCount2);
        bm.setBm49(masterData.remarkCount3);
        bm.setBm50(masterData.remarkCount4);
        bm.setBm51(masterData.victoryTarget);
        bm.setBm52(masterData.gameEndYear);
        bm.setBm53(masterData.nextStageId);
        bm.setBm54(masterData.warId);
        bm.setBm55(masterData.playerMode);
        bm.setBm56(masterData.playerLegionIndex);
        bm.setBm57(masterData.ifCheat);
        bm.setBm58(masterData.lastReportType);
        bm.setBm59(masterData.lastReportValue);
        bm.setBm60(masterData.gameEliteLv);
        bm.setBm61(masterData.portLimitBorderSea);
        bm.setBm62(masterData.bf6);
        bm.setBm63(masterData.bf7);
        bm.setBm64(masterData.bf8);
        bm.setBm65(masterData.bf9);
        bm.setBm66(masterData.bf10);
        bm.setBm67(masterData.bf11);
        bm.setBm68(masterData.bf12);
        bm.setBm69(masterData.bf13);
        bm.setBm70(masterData.playerResearchingCardId);
        bm.setBm71(masterData.preLoadhexagonsCount);
    }
    public void transMasterDataByBtlModule(BtlModule bm,MasterData masterData){

        if(ifCheckCheat()){
            masterData.setIfCheat(1);
        }else{
            masterData.setIfCheat(0);
        }
        masterData.playerRebirth=bm.getBm1();
        masterData.gameStatu=bm.getBm2();
        masterData.btlType=bm.getBm3();
        masterData.mapLandBase=bm.getBm4();
        masterData.mapSeaBase=bm.getBm5();
        masterData.ifColor=bm.getBm6();
        masterData.ifFog=bm.getBm7();
        masterData.ifChief =bm.getBm8();
        masterData.ifWeather=bm.getBm9();
        masterData.mapId=bm.getBm10();
        masterData.startX=bm.getBm11();
        masterData.startY=bm.getBm12();
        masterData.width=bm.getBm13();
        masterData.height=bm.getBm14();
        masterData.bf19 =bm.getBm15();
        masterData.bf20 =bm.getBm16();
        masterData.roundMax=bm.getBm17();
        masterData.roundNow=bm.getBm18();
        masterData.roundForYear=bm.getBm19();
        masterData.beginYear=bm.getBm20();
        masterData.victoryType=bm.getBm21();
        masterData.incomeRate=bm.getBm22();
        masterData.airAddRange=bm.getBm23();
        masterData.unitAddMove=bm.getBm24();
        masterData.ifHaveAutoBuild=bm.getBm25();
        masterData.historyId=bm.getBm26();
        masterData.gameEpisode=bm.getBm27();
        masterData.bf16 =bm.getBm28();
        masterData.bf17 =bm.getBm29();
        masterData.gameDifficulty=bm.getBm30();
        masterData.bf18 =bm.getBm31();
        masterData.legionsCount=bm.getBm32();
        masterData.strategysCount=bm.getBm33();
        masterData.generalsCount=bm.getBm34();
        masterData.buildsCount=bm.getBm35();
        masterData.facilitysCount=bm.getBm36();
        masterData.nuclearsCount=bm.getBm37();
        masterData.airforcesCount=bm.getBm38();
        masterData.armysCount=bm.getBm39();
        masterData.trapsCount=bm.getBm40();
        masterData.diplomacysCount=bm.getBm41();
        masterData.internsCount=bm.getBm42();
        masterData.tradesCount=bm.getBm43();
        masterData.tasksCount=bm.getBm44();
        masterData.delaysCount=bm.getBm45();
        masterData.hexagonsCount=bm.getBm46();
        masterData.eventsCount=bm.getBm47();
        masterData.remarkCount2=bm.getBm48();
        masterData.remarkCount3=bm.getBm49();
        masterData.remarkCount4=bm.getBm50();
        masterData.victoryTarget=bm.getBm51();
        masterData.gameEndYear=bm.getBm52();
        masterData.nextStageId=bm.getBm53();
        masterData.warId=bm.getBm54();
        masterData.playerMode=bm.getBm55();
        masterData.playerLegionIndex=bm.getBm56();
        masterData.ifCheat =bm.getBm57();
        masterData.lastReportType =bm.getBm58();
        masterData.lastReportValue =bm.getBm59();
        masterData.gameEliteLv =bm.getBm60();
        masterData.portLimitBorderSea =bm.getBm61();
        masterData.bf6=bm.getBm62();
        masterData.bf7=bm.getBm63();
        masterData.bf8=bm.getBm64();
        masterData.bf9=bm.getBm65();
        masterData.bf10=bm.getBm66();
        masterData.bf11=bm.getBm67();
        masterData.bf12=bm.getBm68();
        masterData.bf13=bm.getBm69();
        masterData.playerResearchingCardId =bm.getBm70();
        masterData.preLoadhexagonsCount =bm.getBm71();
    }


    private void resetBuildZoneByMapBin(){
        if(mapbin!=null){
            for(int bi=0;bi<buildRDatas.size();bi++){
                BuildData b=buildRDatas.getByIndex(bi);
                Fb2Map.MapHexagon m=mapbin.getMapbin().get(b.getRegionId());
                //判断城市类型 0城市 1海港 2海洋 3沿海城市
                b.resetBuildType();
                b.setStrategicRegion(m.getRegionStrategicRegion());
                b.setClimateZone(m.getRegionClimatZone());
                XmlReader.Element xE= game.gameConfig.getDEF_STRATEGICREGION().getElementById(b.getStrategicRegion());
                if(xE!=null){
                    b.setAreaZone(xE.getInt("zone",0));
                }
            }
        }
    }
    /*9	区域部队的最低士气由首都的稳定度决定而不再是由该区域的稳定度决定
        10	附属国占领的地区将自动纳入到宗主国的势力圈
        11	外交成功将提高和谐度,外交失败将降低和谐度
        12	依据国家稳定度将会额外增加或减少收入
        13	民用设施价格降低{0}%
            14	招募军队价格降低{0}%
            15	发生叛乱的几率额外降低{0}%
            16	招募兵种时其所在区域稳定度增加
        17	本土获得的非金钱资源减半,但通过贸易,势力圈,附属国获得的非金钱资源加倍
        18	逐步与势力圈内的附属国提升好感度,好感度达到一定阶段时其必然独立且成为盟友
        19	部队以弱胜强时,获得额外比例的经验
        20	占领新的区域时国家稳定度增加,但是失去区域时国家稳定度也会减少
        21	部队的最高士气不再由国家稳定度决定*/
    public int getChiefSpecialEffect(int specialEffectId){
        if(masterData.ifChief==1&&chiefData!=null){
            Array<XmlReader.Element> pEs=game.gameConfig.getCONFIG_CHIEFBUFF().e.getChildrenByName("chiefBuff");
            for(int i=0;i<pEs.size;i++){
                XmlReader.Element pE=pEs.get(i);
                if(specialEffectId==pE.getInt("specialEffectId",0)){
                    if(  chiefData.getChiefValue(pE.getInt("type",0))==pE.getInt("index",-1)){
                        return pE.getInt("index");
                    }else{
                        return -1;
                    }
                }
            }
        }
        return -1;
    }

    public void addHarmor(int v){
        if(masterData.ifChief==0||chiefData==null){
            return ;
        }
        chiefData.setPlayerHarmony(chiefData.getPlayerHarmony()+v);
    }

    public int getForeignBudget() {
        if(masterData.ifChief==1&&chiefData!=null){
            return game.gameConfig.getChiefBuffXmlE(6,chiefData.getForeignBudget()).getInt("specialEffectValue",20);
        }
        return 20;
    }



    public int getForeignPolicy() {
        if(masterData.ifChief==1&&chiefData!=null){
            return chiefData.getForeignPolicy();
        }
        return 0;
    }
    public int getMilitaryBudget() {
        if(masterData.ifChief==1&&chiefData!=null){
            return game.gameConfig.getChiefBuffXmlE(4,chiefData.getMilitaryBudget()).getInt("specialEffectValue",20);
        }
        return 20;
    }

    public void addPlayerAmbition(int v) {
        if(masterData.ifChief==1&&chiefData!=null){
            chiefData.setPlayerAmbition(chiefData.getPlayerAmbition()+v);
            if(spiritMap!=null&&spiritMap.size>0){
                updSpirtMap();
            }
        }
    }
    public int getPlayerAmbition(){
        if(masterData.ifChief==1&&chiefData!=null){
            return chiefData.getPlayerAmbition();
        }
        return 100;
    }

    public int getPlayerAmbitionValue(){
        if(masterData.ifChief==1&&chiefData!=null){
            return ComUtil.limitValue( Math.abs(chiefData.getPlayerAmbition()-100),0,100);
        }
        return 100;
    }
    public void setPlayerAmbition(int v){
        if(masterData.ifChief==1&&chiefData!=null){
            chiefData.setPlayerAmbition(v);
        }
    }

    public void legion_removeAllBuildInfuce(int li,int influenceLi){
        for(int bi=0;bi<buildRDatas.size();bi++){
            BuildData b=buildRDatas.getByIndex(bi);
            if(b!=null&&(b.getLegionIndex()==li||b.getSuzLegionIndex()==li)&&b.getInfluenceLi()==influenceLi){
                b.setInfluenceLi(0);
            }
        }
    }

    public int getWorldNervous(){
        int rs=1;
        int cs=1;
        if(ifSystemEffective(4)&&foreignDatas.size>0){
            for(int i=0;i<foreignDatas.size;i++){
                ForeignData f=foreignDatas.get(i);
                if(f!=null&&f.getForeignType()==-1){
                    rs++;
                }
                cs++;
            }
        }else{
            for(int i=0;i<legionDatas.size;i++){
                LegionData l=legionDatas.get(i);
                if(l!=null&&l.getInternIndex()!=0){
                    rs++;
                }
                cs++;
            }
        }
        return  ComUtil.limitValue(rs*300/cs,0,100);
    }

    public void resetAllLegionPower(){
        for(int i=0;i<legionDatas.size;i++){
            LegionData l=legionDatas.get(i);
            if(l!=null){
                XmlReader.Element countryE=game.gameConfig.getDEF_COUNTRY().getElementById(l.getCountryId());
                if(countryE!=null){
                    l.setPower(countryE.getInt("power",0));
                }
            }
        }
    }

    public void logAllBuildInfo(){
        for(int bi=0;bi<buildRDatas.size();bi++){
            BuildData b=buildRDatas.getByIndex(bi);
            if(b!=null&&b.getBuildName()!=0){
                Gdx.app.log(b.areaName+"",b.getLegionData().legionName);
            }
        }
    }

    private void updSpirtMap(){
        Iterator<IntIntMap.Entry> itS = spiritMap.iterator();
        while (itS.hasNext()) {
            int spiritId = itS.next().key;
            XmlReader.Element xmlE=game.gameConfig.getDEF_SPIRIT().getElementById(spiritId);
            if(xmlE!=null) {
                spiritMap.put(spiritId,ComUtil.getIntergerValueByRuleStr(xmlE.get("rule","0"),xmlE.getInt("min",0),xmlE.getInt("max",100),getPlayerAmbitionValue(),getPlayerLegionData().getStability()));
            }
        }
    }

    //是否有某种特质
    public boolean ifHaveSpirit(int spiritId){
        if(ifSystemEffective(16)&&spiritMap!=null&&spiritMap.containsKey(spiritId)&&getPlayerAmbition()!=100){
            return true;
        }
        return false;
    }

    public boolean ifTriggerSpirit(int spiritId){
        if(ifSystemEffective(16)&&spiritMap!=null&&spiritMap.containsKey(spiritId)){
            int c=spiritMap.get(spiritId,0);
            return ComUtil.ifGet(c);
        }
        return false;
    }

    public int getSpiritValue(int spiritId) {
        if(ifSystemEffective(16)&&spiritMap!=null&&spiritMap.containsKey(spiritId)){
            return spiritMap.get(spiritId,0);
        }
        return 0;
    }

    private void addSpiritMap(int spiritId) {
        XmlReader.Element xmlE=game.gameConfig.getDEF_SPIRIT().getElementById(spiritId);
        if(xmlE!=null){
            if(spiritMap==null){
                spiritMap=new IntIntMap();
            }
            int effectType=xmlE.getInt("effect",0);
            if(effectType>=100){//获得技能类
                if(recruitSkills ==null){
                    recruitSkills =new IntArray();
                }
                if(!recruitSkills.contains(spiritId)){
                    recruitSkills.add(spiritId);
                }
            }
            if(!spiritMap.containsKey(spiritId)){
                spiritMap.put(spiritId,ComUtil.getIntergerValueByRuleStr(xmlE.get("rule","0"),xmlE.getInt("min",0),xmlE.getInt("max",100),getPlayerAmbitionValue(),getPlayerLegionData().getStability()));
            }
        }
    }

    //ifCheckType true  则检查玩家的路线是否对应
    public boolean addSpiritId(int spiritId,boolean ifCheckType){
        if(ifSystemEffective(16)){
            XmlReader.Element xmlE=game.gameConfig.getDEF_SPIRIT().getElementById(spiritId);
            if(xmlE!=null){
                if(spiritMap==null){
                    spiritMap=new IntIntMap();
                }
                int type=xmlE.getInt("type",0);
                if(type==-1){
                    return false;
                }else if(ifCheckType){
                    if(type==1){//秩序
                        if(getPlayerAmbition()>100){
                            return false;
                        }
                    }else if(type==2){//强权
                        if(getPlayerAmbition()<100){
                            return false;
                        }
                    }
                    String getCountrys=xmlE.get("getCountrys","-1");
                    if(!getCountrys.equals("-1")&&!ComUtil.ifHaveValueInStr(getCountrys,getPlayerLegionData().getCountryId())){
                        return false;
                    }
                }
                int effectType=xmlE.getInt("effect",0);
                int effectValue=ComUtil.getIntergerValueByRuleStr(xmlE.get("rule","0"),xmlE.getInt("min",0),xmlE.getInt("max",100),getPlayerAmbitionValue(),getPlayerLegionData().getStability());
                if(xmlE.getBoolean("ifCheat",false)){
                    if(ifCheckCheat()){
                        masterData.setIfCheat(1);
                    }else{
                        masterData.setIfCheat(0);
                    }
                }
                if(effectType==34){
                    getPlayerLegionData().addExtraMoney(effectValue);
                }else if(effectType==35){
                    getPlayerLegionData().addExtraIndustry(effectValue);
                }else if(effectType==36){
                    getPlayerLegionData().addExtraTech(effectValue);
                }else if(effectType==37){
                    getPlayerLegionData().addExtraFood(effectValue);
                }else if(effectType==38){
                    getPlayerLegionData().addExtraMineral(effectValue);
                }else if(effectType==39){
                    getPlayerLegionData().addExtraOil(effectValue);
                }else if(effectType==40){
                    getPlayerLegionData().addExtraPopulation(effectValue);
                }else  if(effectType==41){
                    masterData.setRoundNow(masterData.getRoundNow()/2);
                    masterData.setRoundMax(masterData.getRoundMax()/2);
                    masterData.setRoundForYear(masterData.getRoundForYear()/2);
                }else  if(effectType>=100){//获得技能类
                    if(recruitSkills ==null){
                        recruitSkills =new IntArray();
                    }
                    if(!recruitSkills.contains(spiritId)){
                        recruitSkills.add(spiritId);
                    }
                }
                if(!spiritMap.containsKey(spiritId)){
                    spiritMap.put(spiritId,effectValue);
                    if(game.sMapScreen!=null&&roundState==0){
                        addPromptData(game.gameMethod.getPromptStrT(93, 0,"spiritEffectName_"+spiritId),
                                game.gameMethod.getPromptStr(93, 1,game.gameMethod.getStrValue("spiritEffectName_"+spiritId),game.gameMethod.getStrValue("spiritEffectInfo_"+spiritId,effectValue)),
                                game.gameMethod.getPromptStr(93, 2),
                                masterData.getPlayerLegionIndex(),masterData.getPlayerLegionIndex(),false);
                    }
                    return true;
                }
            }
        }
        return false;
    }




    //检测 单位初始获得技能 是否符合
    //spiritType 100 所有单位 101陆军 102海军 103地面 104步兵 105炮兵 106坦克 107船只 108潜艇 109飞机 110要塞
    //unitType 1步兵 2炮兵 3坦克 4船只 5飞机 6要塞 7超武 8潜艇
    private boolean checkRecruitSkill(int unitType, int spiritType) {
        switch (spiritType){
            case 100:return true;
            case 101:if(unitType==1||unitType==2||unitType==3){return true;} break;
            case 102:if(unitType==4||unitType==8){return true;} break;
            case 103:if(unitType!=5&&unitType!=7){return true;} break;
            case 104:if(unitType==1){return true;} break;
            case 105:if(unitType==2){return true;} break;
            case 106:if(unitType==3){return true;} break;
            case 107:if(unitType==4){return true;} break;
            case 108:if(unitType==8){return true;} break;
            case 109:if(unitType==5){return true;} break;
            case 110:if(unitType==6){return true;} break;
        }
        return false;
    }

    private void addAllSpirit(){
        if(ResDefaultConfig.ifDebug){
            Array<XmlReader.Element> spiritEs= game.gameConfig.getDEF_SPIRIT().e.getChildrenByName("spirit");
            for(int i=0;i<spiritEs.size;i++){
                int spiritId=spiritEs.get(i).getInt("id",0);
                Gdx.app.log("addSpiritId", spiritId+":"+ addSpiritId(spiritId,false));
            }
            if(chiefData.getPlayerAmbition()==100){
                chiefData.setPlayerAmbition(200);
            }
        }
    }

    //玩家周边的国家对其进行敌视
    private void legion_playerBorderCountryHostile(){


        LegionData pl=getPlayerLegionData();
        IntArray borderLegion=pl.borderLegionIndexs;

        if(borderLegion!=null&&borderLegion.size>0){
            int enemyUnitSumCount=0;
            int maxEnemyLi=0;
            int maxEnemyUnitCount=0;
            IntArray enemyLi=game.tempUtil.getTempIntArray();
            //第一次只判断敌人兵力
            for(int i=0;i<borderLegion.size;i++){
                int li=borderLegion.get(i);
                LegionData l=getLegionDataByLi(li);
                if(l==null||l.getSuzerainLi()!=0||l.getLegionIndex()==0||l.internIndex==0||l.varRegionCount<=0||li==pl.getLegionIndex()||li==pl.getSuzerainLi()||l.getSuzerainLi()==li||getForeignDegree(li,pl.getLegionIndex())!=-1){continue;}
                if(foreignDatas.size>0){//使用外交作为判断
                    ForeignData f=getForeignData(li);
                    if(f!=null&&f.getDiplomaticRecognition()!=1){
                        enemyLi.add(li);
                        enemyUnitSumCount+=l.getAllArmySumNum();
                        if(l.getAllArmySumNum()>maxEnemyUnitCount){
                            maxEnemyUnitCount=l.getAllArmySumNum();
                            maxEnemyLi=l.getLegionIndex();
                        }
                    }
                }else {//使用作为判断
                    enemyLi.add(li);
                    enemyUnitSumCount+=l.getAllArmySumNum();
                    if(l.getAllArmySumNum()>maxEnemyUnitCount){
                        maxEnemyUnitCount=l.getAllArmySumNum();
                        maxEnemyLi=l.getLegionIndex();
                    }
                }
            }
            if(maxEnemyLi!=0){
                if(pl.getAllArmySumNum()<enemyUnitSumCount&&getRoundProgress()<20){//给予玩家增强
                    int rate=(enemyUnitSumCount+1)*100/(pl.getAllArmySumNum()+1)+1;
                    world_Help(pl,rate);
                }else{//如果玩家的兵力大于敌人,则重新判断,把中立国家也算上
                    enemyLi.clear();
                    LegionData el=getLegionDataByLi(maxEnemyLi);
                    enemyUnitSumCount=el.getAllArmySumNum();
                    for(int i=0;i<borderLegion.size;i++){
                        int li=borderLegion.get(i);
                        LegionData l=getLegionDataByLi(li);
                        if(l==null||l.getSuzerainLi()!=0||l.getLegionIndex()==0||l.internIndex==0||l.varRegionCount<=0||li==pl.getLegionIndex()||li==pl.getSuzerainLi()||l.getSuzerainLi()==li||getForeignDegree(li,pl.getLegionIndex())!=1){continue;}
                        if(foreignDatas.size>0){//使用外交作为判断
                            ForeignData f=getForeignData(li);
                            ForeignData ef=getForeignData(li,maxEnemyLi);
                            if(ef.isSelf()||ef.getForeignType()==-1||ef.getDiplomaticAttitude()==3){
                                continue;
                            }
                            if(f!=null&&f.getDiplomaticRecognition()!=1){
                                l.setInternIndex(el.getInternIndex());
                                enemyLi.add(li);
                                enemyUnitSumCount+=l.getAllArmySumNum();
                            }
                        }else {//使用作为判断
                            if(l.getSuzerainLi()==0){
                                l.setInternIndex(el.getInternIndex());
                            }
                            enemyLi.add(li);
                            enemyUnitSumCount+=l.getAllArmySumNum();
                        }
                    }
                    if(pl.getAllArmySumNum()<enemyUnitSumCount&&getRoundProgress()<20){//如果玩家能力小于将要集成的敌军
                        int rate= (pl.getAllArmySumNum()+1)*110/(enemyUnitSumCount+1)+1;
                        for(int i=0;i<enemyLi.size;i++){
                            LegionData l=getLegionDataByLi(enemyLi.get(i));
                            if(l!=null){
                                world_Help(l,rate);
                            }
                        }
                        world_Help(el,rate);
                    }
                    addPromptData(game.gameMethod.getPromptStrT(94,0),
                            game.gameMethod.getPromptStrT(94,1,el.legionName),
                            game.gameMethod.getPromptStrT(94,2),el.getLegionIndex(),masterData.playerLegionIndex,false);
                }
            }

            game.tempUtil.disposeTempIntArray(enemyLi);
        }
    }


    private void ai_buildWonder(){
        if(!ifSystemEffective(19)){
            return;
        }
        for(int bi=0;bi<buildRDatas.size();bi++) {
            BuildData b=buildRDatas.getByIndex(bi);
            if (b == null||b.isPlayer()||b.getBuildRound()!=0||b.isWar()||b.getCityLvNow()==0||b.ifHunger()) {
                continue;
            }
            if(b.canBuildWonder()&&b.getBuildWonder()<100){
                GameMethod.getWonderE(this, b.getLegionData(),b,1,tempCardArray);
                if(tempCardArray!=null&&tempCardArray.size>0){
                    XmlReader.Element wonderE=tempCardArray.random();
                    if(wonderE!=null){
                        b.setBuildWonder(wonderE.getInt("id",0));
                    }
                }
            }
        }

    }

    //仅测试地面兵种
  /*  private void testArmyUnitCombat(){
      ArmyData a=new ArmyData();
      ArmyData ta=new ArmyData();

      a.getLegionData().setAllTechLv(6);
      ta.getLegionData().setAllTechLv(6);


      Array<XmlReader.Element> aEs=game.gameConfig.getDEF_ARMY().e.getChildrenByName("army");
      for(int i=0;i<aEs.size;i++){
          XmlReader.Element aE=aEs.get(i);
          int type=aE.getInt("type",0);
          if(type==0||type==5||type==7||aE.getInt("id")==1400||aE.getInt("id")==1606){
            continue;
          }
          for(int j=0;j<aEs.size;j++){
              XmlReader.Element taE=aEs.get(j);
             int ttype=taE.getInt("type",0);
              if(ttype==0||ttype==5||ttype==7||taE.getInt("id")==1400||taE.getInt("id")==1606){
                  continue;
              }
              //海军只对海军测试
              if(!((type==8||type==4)&&(ttype==4||ttype==8)) &&! (type!=4&&type!=8&&ttype!=4&&ttype!=8)){
                  continue;
              }
              a.initArmyData(aE);
              a.initVirAttribute();
              ta.initArmyData(taE);
              ta.initVirAttribute();
              a.unitGroup1Lv = 2;
              a.unitGroup2Lv = 2;
              a.unitGroup3Lv = 2;
              a.unitGroup4Lv = 2;
              a.unitGroup5Lv = 2;
              ta.unitGroup1Lv = 2;
              ta.unitGroup2Lv = 2;
              ta.unitGroup3Lv = 2;
              ta.unitGroup4Lv = 2;
              ta.unitGroup5Lv = 2;
              a.setUnitWealv1(a.getArmyFormation());
              ta.setUnitWealv1(ta.getArmyFormation());
              a.setArmyRank(3);
              ta.setArmyRank(3);
              a.resetArmyHpMax();
              ta.resetArmyHpMax();
              a.setUnitGroup6Lv(game.resGameConfig.cardUpdMax_unitLv/2);
              ta.setUnitGroup6Lv(game.resGameConfig.cardUpdMax_unitLv/2);
              a.clearAllSkill();
              ta.clearAllSkill();

              //死斗
              army_deathMatch(a,ta,1000);
          }
      }
    }

    //该方法用来测试
    //单位死斗 iMax死斗计算次数
    private void army_deathMatch(ArmyData a, ArmyData ta, int iMax) {
        //进攻效率
        int sumRound=0;
        int vc=0;
        int vR=0;
        int sd=0;

        //死斗模式下射程会转为额外的武器等级
        for(int i=0;i<iMax;i++){
            //设置单位状态
            a.resetArmyHpMax();
            ta.resetArmyHpMax();
            a.resetState();
            ta.resetState();
            while (a.getArmyHpNow()>0&&ta.getArmyHpNow()>0) {
                sumRound++;
             int   damage = GameUtil.getDamageForArmy(game, a, ta,null);
                sd+=damage;
                if(a.getArmyHpNow()>ta.getArmyHpNow()&&ta.getGeneralIndex()==0&&  a.ifHaveFeature(16)&&a.triggerFeature(16)&&ComUtil.ifGet(ComUtil.max(a.getA(),a.getUnitGroup6Lv())* game.resGameConfig.unityFeatureChanceForLv)){
                    damage=99999;;
                }
               if( ta.injured(damage)){
                   break;
               }
                damage = GameUtil.getDamageForArmy(game, ta, a,null);
                if(ta.getArmyHpNow()>a.getArmyHpNow()&&a.getGeneralIndex()==0&&  ta.ifHaveFeature(16)&&ta.triggerFeature(16)&&ComUtil.ifGet(ComUtil.max(ta.getUnitGroup5Lv(),ta.getUnitGroup6Lv())* game.resGameConfig.unityFeatureChanceForLv)){
                    damage=99999;;
                }
                if( a.injured(damage)){
                    break;
                }
            }
            if(a.getArmyHpNow()>0){
                vc++;
                vR+=a.getHpRate();
            }
        }
        int ac=a.getPrice()+1;
        int tac=ta.getPrice()+1;
        if(vc*2>iMax){
            //Gdx.app.log("army_deathMatch",a.getUnitStr()+":"+ta.getUnitStr()+" 胜率:"+ vc*100/iMax+" 资源比:"+ac*100/tac+ " 获胜后血量:" +  (vc==0?0: (vR)/(vc))+" 均伤害:"+(sd==0?0:sd/sumRound)+ " 均攻击效率:"+ sumRound/iMax  );
            Gdx.app.log("army_deathMatch",a.getUnitStr()+":"+ta.getUnitStr()+" "+ vc*100/iMax+" "+ac*100/tac+ " " +  (vc==0?0: (vR)/(vc))+" "+(sd==0?0:sd/sumRound)+ " "+ sumRound/iMax  );
        }else{
            //Gdx.app.error("army_deathMatch",a.getUnitStr()+":"+ta.getUnitStr()+" 胜率:"+ vc*100/iMax+" 资源比:"+ac*100/tac+ " 获胜后血量:" +  (vc==0?0: (vR)/(vc))+" 均伤害:"+(sd==0?0:sd/sumRound)+ " 均攻击效率:"+ sumRound/iMax  );
            Gdx.app.error("army_deathMatch",a.getUnitStr()+":"+ta.getUnitStr()+" "+ vc*100/iMax+" "+ac*100/tac+ " " +  (vc==0?0: (vR)/(vc))+" "+(sd==0?0:sd/sumRound)+ " "+ sumRound/iMax  );
        }

    }*/

    //检查作弊
    public boolean ifCheckCheat(){
        if(ResDefaultConfig.ifDebug){
            return false;
        }
        if(masterData.ifCheat==1||game. gameConfig.playerConfig.getBoolean(stageId+"_ifCheat",false)||game.gameConfig.ifLeisureMode||(game.resGameConfig.editUpdateIsCheat&&isEditMode(false))){
            return true;
        }
        if(masterData.ifCheat==0){
            //资源收入
            LegionData pl=getPlayerLegionData();
            if(pl.ifAnyResourceGreaterThanValue(100000)){
                return true;
            }
            //奇物检测
            if(spiritMap!=null&&spiritMap.size>0){
                Iterator<IntIntMap.Entry> itS = spiritMap.iterator();
                while (itS.hasNext()) {
                    int spiritId = itS.next().key;
                    XmlReader.Element xmlE=game.gameConfig.getDEF_SPIRIT().getElementById(spiritId);
                    if(xmlE!=null&&xmlE.getBoolean("ifCheat",false)) {
                        return true;
                    }
                }
            }
            //科技等级检测
            if(pl.ifAnyTechLvThanValue(15)){
                return true;
            }
        }
        return false;
    }



    //检测是否有政策违反民意,如果有则返回chiefBuff的type
    public int checkChiefBuff(){
        int rs=-1;
        if(masterData.ifChief==1&&chiefData!=null){
            //获得民意反对的政策
            int[] massesOpposeDemands=game.resGameConfig.getMassesOpposeDemands(chiefData.getLiteracy());
            if(massesOpposeDemands==null||massesOpposeDemands.length==0){
                return rs;
            }
            //遍历政策,查询是否有反对的政策
            for(int i=0;i<20;i++){
                int chiefIndex=chiefData.getChiefValue(i+1);
                XmlReader.Element chiefBuffE=game.gameConfig.getChiefBuffXmlE(i+1,chiefIndex);
                int chiefId=chiefBuffE.getInt("id",-1);
                if(chiefBuffE!=null&&ComUtil.ifHaveValueIntegerArrays(massesOpposeDemands,chiefId)){
                    return i+1;
                }
            }
        }
        return rs;
    }

    //检测是否已经改革成功了
    private boolean checkReform() {
        int[] massesOpposeDemands=game.resGameConfig.getMassesOpposeDemands(chiefData.getLiteracy());
        if(massesOpposeDemands==null||massesOpposeDemands.length==0){
            return true;
        }

        int chiefId=chiefData.getChiefBuffId(chiefData.massesDemandType);
        if(chiefId!=-1&&ComUtil.ifHaveValueIntegerArrays(massesOpposeDemands,chiefId)){
            return false;
        }
        return true;
    }


    /**总动员
     * 军团总动员
     * li 为动员的势力,targetLi为敌对的势力
     * @param mobilizationType {@link #getBuildCardIdTIA1}
     */
    public void legion_mobilization(int li,int targetLi,int mobilizationType,boolean ifForce){
        LegionData l=getLegionDataByLi(li);
        int targetRegion=getCapitalByLi(targetLi,-1);
        int poptionMax=l.getPopulationMax();
        for(int bi=0;bi<buildRDatas.size();bi++){
            BuildData b=buildRDatas.getByIndex(bi);
            if(b!=null&&b.getLegionIndex()==li&&b.getBuildType()!=2&&!b.ifSea()&&!b.ifHaveGarrison()){
                //如果是非强制性的,且军团的人口大于可以建造的上限,则退出动员
                if(!ifForce&&l.getPopulationNow()>poptionMax){
                    break;
                }
                //LegionData l, BuildData b, Boolean ifMaxLv, int cardType,boolean limitArmyCardBuy
                int cardId=getBuildCardIdTIA1(l,b,false,mobilizationType,true);
                if(l.getPopulationNow()<poptionMax&&cardId!=-1){
                    ai_RecruitUnit(l,b,cardId,targetRegion);
                }
            }
        }
        addPromptData(game.gameMethod.getPromptStr(96, 0, l.legionName),
                game.gameMethod.getPromptStr(96, 1, l.legionName),
                game.gameMethod.getPromptStr(96, 2),l.getLegionIndex(),l.getLegionIndex(),false);
    }

    private int getCapitalByLi(int targetLi,int defaultValue) {
        LegionData tl=getLegionDataByLi(targetLi);
        if(tl!=null){
            return tl.getCapitalId();
        }
        return defaultValue;
    }


    //奇物特效 时空穿越 TODO
    private void  spirit_timeTravel(){
        //确定穿越地的年份
        Fb2History h=game.getGameFramework().getHistory(masterData.getHistoryId(),ComUtil.getRandom(1840,1922));
        //根据创建自定义争霸那一套初始化全部国家,除了玩家





        //1.重建legiondata等数据



        //2.根据historyData改变局势

    }
    //奇物特效 时空通缉效果 TODO
    private void  spirit_warrant(){




    }



    //种子设置势力能力 TODO
    public void resetLegionBySeed(String R){


    }

    //军团强化
    private void legion_intensifyUnity(LegionData legionB,int count) {
        boolean isPlayer=legionB.isPlayer();
        if(masterData.getPlayerMode()!=2){
            Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
            while (itB4.hasNext()) {
                ArmyData a = itB4.next().value;
                if(a!=null&&a.armyHpNow>0&&a.getLegionIndex()==legionB.getLegionIndex()){
                    if(!isPlayer&&roundState==0&&a.armyActor!=null){
                        continue;
                    }
                    if((a.getArmyType()==4||a.getArmyType()==8)&&!a.potionIsSea()){
                        a.setUnitArmyId0(1101);
                        a.setArmyType(1);
                    }
                    if((a.getGeneralIndex()!=0&&a.getUnitArmyId0()==1105)){
                        a.setUnitArmyId0(1104);
                        a.setArmyType(1);
                    }
                    if((a.getGeneralIndex()!=0||a.ifInBuild() )&&a.getArmyType()==6){
                        a.setUnitArmyId0(1101);
                        a.setArmyType(1);
                    }
                    if(a.isUnitGroup()){
                        int uc=ComUtil.getRandom(0,ComUtil.min(count,6));
                        a.clearAllMergeData();
                        a.setUnitWealv0(ComUtil.getRandom(1,a.getWealMaxLv()));
                        a.setUnitGroup0Lv(ComUtil.getRandom(0,a.getUnitGradeLv(0)));
                        for(int i=0;i<uc;i++){
                            int mergeId=a.getRandomCanRecruitMergeUnitId();
                            if(mergeId>0){
                                int potion = a.mergeUnitGroup(mergeId);
                                if(potion>0){
                                    a.setUnitGroupWealLv(potion,ComUtil.getRandom(0,a.getUnitGroupWealLv(0)),true);
                                    a.setUnitGroupGroupLv(potion,ComUtil.getRandom(0,a.getUnitGradeLv(0)),true);
                                }else {
                                    continue;
                                }
                            }
                        }
                        a.setArmyFormation(0);
                        a.resetArmyForamtion(0,-1);
                    }else{
                        int uc=ComUtil.getRandom(1,ComUtil.min(count,6));
                        uc=ComUtil.limitValue(uc+a.getLegionData().getLevel()/2,1,ComUtil.min(a.getArmyRank(),6));
                        a.clearAllMergeData();
                        a.setUnitWealv0(ComUtil.getRandom(1,a.getWealMaxLv()));
                        a.setUnitGroup0Lv(ComUtil.getRandom(0,a.getUnitGradeLv(0)));
                        /*for(int i=1;i<=uc;i++){
                            a.setUnitGroupArmyId(i,ComUtil.getRandom(1,2));
                        }*/
                        a.resetArmyHpMax();
                    }
                    a.resetArmyHpMax();
                }
            }
            if(getAge()>0){
                Iterator<IntMap.Entry<AirData>> itAir = airIDatas.iterator();
                while (itAir.hasNext()) {
                    AirData a= itAir.next().value;
                    if(a!=null&&a.getAirHpNow()>0&&a.getLegionIndex()==legionB.getLegionIndex()){
                        int uc=ComUtil.getRandom(1,ComUtil.min(count,6));
                        uc=ComUtil.limitValue(uc+a.getLegionData().getLevel()/2,1,ComUtil.min(a.getAirRank(),6));
                        a.clearAbility();
                        a.setWeaLv(ComUtil.getRandom(1,a.getWealMaxLv()));
                        a.setAirGoodsMax(ComUtil.getRandom(0,a.getUnitGradeLv()));
                        a.randomUpdAirAbility(uc);
                    }
                }
            }
        }else {
            Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
            while (itB4.hasNext()) {
                ArmyData a = itB4.next().value;
                if (a != null && a.armyHpNow > 0 && a.getLegionIndex() == legionB.getLegionIndex() ) {
                    if(!isPlayer&&roundState==0&&a.armyActor!=null){
                        continue;
                    }
                    a.resetAbility();
                }
            }
        }
    }


    //重新随机设置所有部队
    //ifPlayer 是否改变玩家的部队
    public void allArmyDataResetUnitGroup(boolean ifPlayer,int count){
        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
        while (itB4.hasNext()) {
            ArmyData a = itB4.next().value;
            if(a!=null&&a.armyHpNow>0){
                if(!ifPlayer&&a.isPlayer()){
                    continue;
                }
                if((a.getArmyType()==4||a.getArmyType()==8)&&!a.potionIsSea()){
                    a.setUnitArmyId0(1101);
                    a.setArmyType(1);
                }
                if((a.getGeneralIndex()!=0&&a.getUnitArmyId0()==1105)){
                    a.setUnitArmyId0(1104);
                    a.setArmyType(1);
                }
                if((a.getGeneralIndex()!=0||a.ifInBuild() )&&a.getArmyType()==6){
                    a.setUnitArmyId0(1101);
                    a.setArmyType(1);
                }
                if(a.isUnitGroup()){
                    int uc=ComUtil.getRandom(0,ComUtil.min(count,6));
                    a.clearAllMergeData();
                    a.setUnitWealv0(ComUtil.getRandom(1,a.getWealMaxLv()));
                    a.setUnitGroup0Lv(ComUtil.getRandom(0,a.getUnitGradeLv(0)));
                    for(int i=0;i<uc;i++){
                        int mergeId=a.getRandomCanRecruitMergeUnitId();

                        if(mergeId>0){
                            int potion = a.mergeUnitGroup(mergeId);
                            if(potion>0){
                                a.setUnitGroupWealLv(potion,ComUtil.getRandom(0,a.getUnitGroupWealLv(0)),true);
                                a.setUnitGroupGroupLv(potion,ComUtil.getRandom(0,a.getUnitGradeLv(0)),true);
                            }else {
                                continue;
                            }
                        }
                    }
                    a.setArmyFormation(0);
                    a.resetArmyForamtion(0,-1);
                }else{
                    int uc=ComUtil.getRandom(1,ComUtil.min(count,6));
                    uc=ComUtil.limitValue(uc+a.getLegionData().getLevel()/2,1,ComUtil.min(a.getArmyRank(),6));
                    //a.setUnitWealv0(ComUtil.getRandom(1,a.getWealMaxLv()));
                   // a.setUnitGroup0Lv(ComUtil.getRandom(0,a.getUnitGradeLv(0)));
                    a.randomUpdArmyWealv(uc);
                   /* for(int i=1;i<=uc;i++){
                        a.setUnitGroupArmyId(i,ComUtil.getRandom(1,2));
                    }*/
                    a.resetArmyHpMax();
                }
                a.resetArmyHpMax();
            }
        }
        if(getAge()>0){
            Iterator<IntMap.Entry<AirData>> itAir = airIDatas.iterator();
            while (itAir.hasNext()) {
                AirData a= itAir.next().value;
                if(a!=null&&a.getAirHpNow()>0){
                    if(!ifPlayer&&a.isPlayer()){
                        continue;
                    }
                    int uc=ComUtil.getRandom(1,ComUtil.min(count,6));
                    uc=ComUtil.limitValue(uc+a.getLegionData().getLevel()/2,1,ComUtil.min(a.getAirRank(),6));
                    a.clearAbility();
                    a.setWeaLv(ComUtil.getRandom(1,a.getWealMaxLv()));
                    a.setAirGoodsMax(ComUtil.getRandom(0,a.getUnitGradeLv()));
                    a.randomUpdAirAbility(uc);
                }
            }
        }
    }

    public void army_enhance(ArmyData a){
        if((roundState==0||roundState==4)&&a.inScreen()){
            return;
        }
        BuildData b=a.getBuildData();
        LegionData l=a.getLegionData();
        if(b!=null&&a.isUnitGroup()&&getForeignDegree(a.getLegionIndex(),b.getLegionIndex())==1){
            if(a.getUnitArmyId0()==1105){
                a.setUnitArmyId0(1104);
            }
            int mergeId=b.getRandomCanRecruitMergeUnitId(a,!l.ifAiCheatChance());
            if(mergeId>0){
                a.mergeUnitGroup(mergeId);
            }
            if(b.getBuildRound()==0&&a.haveCanUpdUnitGrouplv()){
                a.randomUpdUnitGroupLv();
            }
            if(b.getBuildRound()==0&&a.haveCanUpdUnitWealv()){
                a.randomUpdArmyWealv();
            }
        }else{
            if(a.canUpdGroupLv()){
                a.updArmyGroup();
            }
            if(a.haveCanUpdUnitWealv()){
                a.updWeaLv();
            }
        }
        a.resetArmyHpMax();
    }


    public int army_resetUnitGroup(ArmyData a,int count){
        int rs=0;
        if(a!=null&&a.armyHpNow>0){
            if((a.getArmyType()==4||a.getArmyType()==8)&&!a.potionIsSea()){
                a.setUnitArmyId0(1101);
                a.setArmyType(1);
            }
            if((a.getGeneralIndex()!=0&&a.getUnitArmyId0()==1105)){
                a.setUnitArmyId0(1104);
                a.setArmyType(1);
            }
            if((a.getGeneralIndex()!=0||a.ifInBuild() )&&a.getArmyType()==6){
                a.setUnitArmyId0(1101);
                a.setArmyType(1);
            }
            if(a.isUnitGroup()){
                int uc=ComUtil.getRandom(0,ComUtil.min(count,6));
                a.clearAllMergeData();
                a.setUnitWealv0(ComUtil.getRandom(1,a.getWealMaxLv()));
                a.setUnitGroup0Lv(ComUtil.getRandom(0,a.getUnitGradeLv(0)));
                for(int i=0;i<uc;i++){
                    int mergeId=a.getRandomCanRecruitMergeUnitId();

                    if(mergeId>0){
                        int potion = a.mergeUnitGroup(mergeId);
                        if(potion>0){
                            a.setUnitGroupWealLv(potion,ComUtil.getRandom(0,a.getUnitGroupWealLv(0)),true);
                            a.setUnitGroupGroupLv(potion,ComUtil.getRandom(0,a.getUnitGradeLv(0)),true);
                            rs++;
                        }else {
                            continue;
                        }
                    }
                }
                a.setArmyFormation(0);
                if(a.isRound()){a.resetArmyForamtion(0,-1);}
            }else{
                int uc=ComUtil.getRandom(1,ComUtil.min(count,6));
                uc=ComUtil.limitValue(uc+a.getLegionData().getLevel()/2,1,ComUtil.min(a.getArmyRank(),6));
                a.clearAllMergeData();
                a.setUnitWealv0(ComUtil.getRandom(1,a.getWealMaxLv()));
                a.setUnitGroup0Lv(ComUtil.getRandom(0,a.getUnitGradeLv(0)));
                for(int i=1;i<=uc;i++){
                    rs++;
                    a.setUnitGroupWealLv(i,ComUtil.getRandom(1,2),false);
                }
                a.resetArmyHpMax();
            }
            a.resetArmyHpMax();
        }
        return rs;
    }


    public void transGroupUnitArmyIdForLegionUnitAbility(){
        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
        while (itB4.hasNext()) {
            ArmyData a = itB4.next().value;
            if(a!=null&&a.armyHpNow>0){

                a.resetArmyHpMax();
            }
        }

    }

    //这个不会加回合
    public void resetAllArmyUnitGroup(){
        if(masterData.getPlayerMode()!=2){//非军团模式
            Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
            while (itB4.hasNext()) {
                ArmyData a = itB4.next().value;
                if(a!=null&&a.armyHpNow>0){
                    for(int i=1;i<7;i++){
                        int armyId=a.getUnitGroupArmyId(i);
                        if(armyId==0){//如果没用兵种
                            a.setUnitGroupWealLv(i,0,true);
                            a.setUnitGroupGroupLv(i,0,true);
                        }else if(a.isUnitGroup()){//如果是组合兵种,检查armyId是否有>0的等级类
                            if(armyId>0&&armyId<1000){//如果是原来的等级
                                String s=String.valueOf(armyId);
                                int uc=ComUtil.max(Integer.parseInt(s.substring(s.length()-1)),1);
                               int rs= army_resetUnitGroup(a,uc);
                            }
                        }else{//非组合兵种,检查是否有组合兵种
                            XmlReader.Element xmlE=a.getArmyXmlE(i,false);
                            if(xmlE!=null){
                               // a.setUnitGroupArmyId(i,ComUtil.getRandom( a.getArmyRank()/2,a.getWealMaxLv()));
                                a.setUnitGroupWealLv(i,ComUtil.getRandom( a.getArmyRank()/2,a.getWealMaxLv()),true);
                                a.setUnitGroupGroupLv(i,0,true);
                            }
                        }
                    }
                    a.resetArmyHpMax();
                }
            }
        }else{//军团模式
            Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
            while (itB4.hasNext()) {
                ArmyData a = itB4.next().value;
                if(a!=null&&a.armyHpNow>0){
                    // a.setUnitGroupArmyId(i,ComUtil.getRandom( a.getArmyRank()/2,a.getWealMaxLv()));
                    //a.setUnitGroupWealLv(i,0,true);
                    //a.setUnitGroupGroupLv(i,0,true);
                    a.resetArmyHpMax();
                }
            }
        }
    }

    public void checkArmyData(){
        Iterator<IntMap.Entry<ArmyData>> itB4 = armyHDatas.iterator();
        while (itB4.hasNext()) {
            ArmyData a = itB4.next().value;
            if(a!=null){
                for(int i=1;i<7;i++){
                    int armyId=a.getUnitGroupArmyId(i,false);
                    if(armyId>0&&armyId<1000){
                        if(a.getUnitGroupGroupLv(i,false)==0){
                            a.setUnitGroupArmyId(i,0);
                        }else{
                            a.setUnitGroupArmyId(i,a.getUnitGroupArmyId(0));
                        }
                    }
                }
                a.resetArmyHpMax();
            }
        }
    }
    //ai在边界屯兵
    public void ai_stationTroops(LegionData sl,LegionData tl){
        if(sl!=null&&tl!=null&&sl.getLegionIndex()!=tl.getLegionIndex()&&sl.borderLegionIndexs.contains(tl.getLegionIndex())){
            boolean ifPlayerAlly=sl.ifPlayerAlly();
            for(int bi=0;bi<buildRDatas.size();bi++){
                BuildData b=buildRDatas.getByIndex(bi);
                if(b!=null&&b.getLegionIndex()==sl.getLegionIndex()){
                  BuildData tb= b.getRandomAroundBuildDataByLi(tl.getLegionIndex());
                  if(tb!=null){
                      int buc=b.getAllyUnitCount(false);
                      int tbuc=tb.getAllyUnitCount(true);
                      if(buc>1&&(tb.ifHaveAllyUnit(sl.getLegionIndex(),false)|| (buc>tbuc&&(b.getAllyUnitPower(false)+sl.getLevel())>tb.getAllyUnitPower(true)))){//设置进攻
                        b.setAllUnitToTarget(50,tb.getRegionId());
                      }else{//屯兵
                          b.setAllUnitStandBy(!ifPlayerAlly);
                          ai_RecruitUnit(sl,b,getBuildCardIdTIA1(sl, b, false, -2,false),tb.getRegionId());
                      }
                  }
                }
            }
        }
    }
    //只升级军团科技,不进行任何其他操作
    public boolean onlyUpdLegionTech(LegionData l,int cardId){
        boolean updSuc=false;
        switch (cardId){
            //城市可提升等级
            case 3001:
                updSuc = l.updCityLvMax();
                break;
            //工业可提升等级
            case 3002:
                updSuc = l.updIndustLvMax();
                break;
            //研究可提升等级
            case 3003:
                updSuc = l.updTechLvMax();
                break;
            //能源可提升等级
            case 3004:
                updSuc = l.updEnergyLvMax();
                break;
            //交通可提升等级
            case 3005:
                updSuc = l.updTransportLvMax();
                break;
            //建造士兵军衔上限
            case 3006:
                updSuc = l.updInfantryLvMax();
                break;
            //建造炮兵军衔上限
            case 3007:
                updSuc = l.updCannonLvMax();
                break;
            //建造坦克军衔上限
            case 3008:
                updSuc = l.updTankLvMax();
                break;
            //建造要塞军衔上限
            case 3009:
                updSuc = l.updFortLvMax();
                break;
            //建造海军军衔上限
            case 3010:
                updSuc = l.updNavyLvMax();
                break;
            //建造空军军衔上限
            case 3011:
                updSuc = l.updAirLvMax();
                break;
            //城市升级补给上限
            case 3012:
                updSuc = l.updSupplyLvMax();
                break;
            //城市城防升级上限
            case 3013:
                updSuc = l.updDefenceLvMax();
                break;
            //城市导弹升级上限
            case 3014:
                updSuc = l.updMissileLvMax();
                break;
            //城市超武升级上限
            case 3015:
                updSuc = l.updNuclearLvMax();
                break;
            //军团金融科技上限
            case 3016:
                updSuc = l.updFinancialLvMax();
                break;
            //城市贸易科技上限
            case 3017:
                updSuc = l.updTradeLvMax();
                break;
            //城市文化科技上限
            case 3018:
                updSuc = l.updCultureLvMax();
                break;
            //奇观
            case 3019:
                updSuc = l.updMiracleLvNow();
                break;
            //步兵卡库
            case 3020:
                updSuc = l.updInfantryCardMax();
                break;
            //装甲卡库
            case 3021:
                updSuc = l.updArmorCardMax();
                break;
            //火炮卡库
            case 3022:
                updSuc = l.updArtilleryCardMax();
                break;
            //海军卡库
            case 3023:
                updSuc = l.updNavyCardMax();
                break;
            //空军卡库
            case 3024:
                updSuc = l.updAirCardMax();
                break;
            //超武卡库
            case 3025:
                updSuc = l.updNuclearCardMax();
                break;
            //导弹卡库
            case 3026:
                updSuc = l.updMissileCardMax();
                break;
            //潜艇卡库
            case 3027:
                updSuc = l.updSubmarineCardMax();
                break;
            //战术卡库
            case 3028:
                updSuc = l.updDefenceCardMax();
                break;
            //将领卡库
            case 3029:
                updSuc = l.updGeneralCardMax();
                break;
            //刷新数量
            case 3030:
                updSuc = l.updMilitaryAcademyLv();
                break;
        }
        return updSuc;
    }


    private boolean checkPolicyXml( XmlReader.Element lpXmlE) {
        if(lpXmlE==null){
            return false;
        }
        // 根据lpXmlE 的 verifyType赋予一些用于辅助计算的值
        switch (lpXmlE.getInt("verifyType",0)){
            case 15://存在随机非敌对邻国  4  要签署和约
                IntArray rs=game.tempUtil.getTempIntArray();
                for(int i=0;i<getPlayerLegionData().borderLegionIndexs.size;i++){
                    LegionData l=getLegionDataByLi(getPlayerLegionData().borderLegionIndexs.get(i));
                    int fd=getForeignDegree(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                    if(l!=null&&!l.isPlayer()&&l.getInternIndex()!=0&&fd!=-1){
                        rs.add(l.getLegionIndex());
                    }
                }
                if(rs.size>0){
                    game.tempUtil.disposeTempIntArray(rs);
                    return true;
                }else{
                    return false;
                }
            case 16: // 存在非友善邻国 4
                rs=game.tempUtil.getTempIntArray();
                for(int i=0;i<getPlayerLegionData().borderLegionIndexs.size;i++){
                    LegionData l=getLegionDataByLi(getPlayerLegionData().borderLegionIndexs.get(i));
                    int fd=getForeignDegree(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                    if(l!=null&&!l.isPlayer()&&l.getInternIndex()!=0&&fd!=1){
                        rs.add(l.getLegionIndex());
                    }
                }
                if(rs.size>0){
                    game.tempUtil.disposeTempIntArray(rs);
                    return true;
                }else{
                    return false;
                }
            case 17:// 存在敌对国家 4
                rs=game.tempUtil.getTempIntArray();
                for(int i=0;i<legionDatas.size;i++){
                    LegionData l=legionDatas.get(i);
                    int fd=getForeignDegree(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                    if(l.getInternIndex()!=0&&!l.isPlayer()&&fd==-1){
                        rs.add(l.getLegionIndex());
                    }
                }
                if(rs.size>0){
                    game.tempUtil.disposeTempIntArray(rs);
                    return true;
                }else{
                    return false;
                }
            case 18:// 存在随机非敌对国家 4
                rs=game.tempUtil.getTempIntArray();
                for(int i=0;i<legionDatas.size;i++){
                    LegionData l=legionDatas.get(i);
                    int fd=getForeignDegree(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                    if(l.getInternIndex()!=0&&!l.isPlayer()&&fd!=-1){
                        rs.add(l.getLegionIndex());
                    }
                }
                if(rs.size>0){
                    game.tempUtil.disposeTempIntArray(rs);
                    return true;
                }else{
                    return false;
                }
            case 19:// 存在非敌对盟主类国家 4
                rs=game.tempUtil.getTempIntArray();
                for(int i=0;i<legionDatas.size;i++){
                    LegionData l=legionDatas.get(i);
                    int fd=getForeignDegree(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                    if(fd!=-1&&!l.isPlayer()&&l.isFreeSovereignCountry()&&l.varAllyCount>0&&l.varRegionCount>getPlayerLegionData().varRegionCount){
                        rs.add(l.getLegionIndex());
                    }
                }
                if(rs.size>0){
                    game.tempUtil.disposeTempIntArray(rs);
                    return true;
                }else{
                    return false;
                }
            case 20://存在非敌对且非盟主的自由国 4
                rs=game.tempUtil.getTempIntArray();
                for(int i=0;i<legionDatas.size;i++){
                    LegionData l=legionDatas.get(i);
                    int fd=getForeignDegree(masterData.getPlayerLegionIndex(),l.getLegionIndex());
                    if(fd!=-1&&l.getLegionIndex()!=0&&!l.isPlayer()&&l.isFreeSovereignCountry()&&l.varRegionCount>0&&l.varAllyCount==0){
                        rs.add(l.getLegionIndex());
                    }
                }
                if(rs.size>0){
                    game.tempUtil.disposeTempIntArray(rs);
                    return true;
                }else{
                    return false;
                }
            case 21: // 自身有未收回的核心领土或主要领土 因为没有长度8的值,所以用x,y来记录 与目标区域所属国{0}进行一次实力判定,如果成功将会获得区域{1},此操作将导致与该国家的关系度下降
                rs=game.tempUtil.getTempIntArray();
                int id=0;
                if(getPlayerLegionData().coreAreaRegions!=null){
                    if( getPlayerLegionData().coreAreaRegions!=null){
                        for (int i = 0; i < getPlayerLegionData().coreAreaRegions.size; i++) {
                            int cr=getPlayerLegionData().coreAreaRegions.get(i);
                           BuildData b=getBuildDataByRegion(cr);
                            if(b!=null&&b.getLegionIndex()!=getPlayerLegionData().getLegionIndex()&&!rs.contains(b.getRegionId())){
                                rs.add(b.getRegionId());
                            }
                        }
                    }
                }
                if(rs.size==0){
                    if(getPlayerLegionData().majorAreaRegions!=null){

                        for (int i = 0; i < getPlayerLegionData().majorAreaRegions.size; i++) {

                                int cr=getPlayerLegionData().majorAreaRegions.get(i);
                                BuildData b=getBuildDataByRegion(cr);
                                if(b!=null&&b.getLegionIndex()!=0&&b.getLegionIndex()!=getPlayerLegionData().getLegionIndex()&&!rs.contains(b.getRegionId())){
                                    rs.add(b.getRegionId());
                                }

                        }
                    }
                }
                if(rs.size>0){
                    game.tempUtil.disposeTempIntArray(rs);
                    return true;
                }else{
                    return false;
                }
            case 22:// 存在随机非敌对  的可以贸易的国家
                rs=game.tempUtil.getTempIntArray();
                for(int i=0;i<legionDatas.size;i++){
                    LegionData l=legionDatas.get(i);
                    int fd=getForeignDegree(l.getLegionIndex(),masterData.playerLegionIndex);
                    if(fd!=-1&&!l.isPlayer()&&(l.incomeMoney>0||l.incomeFood>0||l.incomeIndustry>0||l.incomeTech>0)){
                        rs.add(l.getLegionIndex());
                    }
                }
                if(rs.size>0){
                    int li=getLegionIndexByRegion(rs.random());
                    LegionData l=getLegionDataByLi(li);
                    if(l!=null){   //0金钱 1工业 2科技 3食物 4矿物 5石油
                        game.tempUtil.disposeTempIntArray(rs);
                        return true;
                    }else{
                        game.tempUtil.disposeTempIntArray(rs);
                        return false;
                    }
                }else{
                    return false;
                }
            case 23:
            case 24:
                return true;
            default:
                return true;
        }
    }


    public void dispose(){
        if(mapbin!=null&&!game.defaultMapBinDAO.equals(mapbin)){
            mapbin.dispose();
            mapbin=null;
        }
    }
    //如果没有则返回null
    public String getRandomReport(){
        //获得的值为区域坐标
        LegionData pl=getPlayerLegionData();
        int report0=pl.getRandomCrisisFaverBorderLi();//邻国好感度危机 :结果为低好感度国家,无则为-1
        int report1=-1;//敌人核心领土处于交战状态  返回核心领土region,无则为-1
        int report2=-1;//敌人主要领土处于交战状态  返回核心领土region,无则为-1
        int report3=-1;//占有敌人的主要领土且其处于交战状态  返回主要领土region,无则为-1 **
        int report4=-1;//占有敌人的核心领土且其处于交战状态  返回核心领土region,无则为-1 **
        int report5=-1;//自己的主要领土被敌军占有  返回主要领土region,无则为-1 **
        int report6=-1;//自己的核心领土被敌军占有  返回核心领土region,无则为-1 **
        int report7=-1;//敌人的首都处于交战状态  返回首都领土region,无则为-1
        int report8=-1;//自己的首都处于交战状态  返回首都region,无则为-1
        int report9=-1;//自己主要领土处于交战状态  返回主要领土region,无则为-1
        int report10=-1;//自己核心领土处于交战状态  返回核心领土region,无则为-1
        int report11=-1;//友军主要领土处于交战状态  返回主要领土region,无则为-1
        int report12=-1;//友军核心领土处于交战状态  返回核心领土region,无则为-1
        int report13=-1;//敌人的将领处于我们的领土  返回领土region,无则为-1


        IntArray rs0=null,rs1=null,rs2=null,rs3=null,rs4=null,rs5=null,rs6=null,rs7=null,rs8=null,rs9=null,rs10=null,rs11=null,rs12=null,rs13=null;



            if(pl.coreAreaRegions!=null){//自己的核心领土
                for (int r = 0; r < pl.coreAreaRegions.size; r++) {
                    int region=pl.coreAreaRegions.get(r);
                            BuildData b=getBuildDataByRegion(region);
                            if(b!=null&&b.getLegionIndex()>0&&b.isWar()){
                                if(masterData.getLastReportType()>0&&masterData.lastReportValue==b.getRegionId()){//如果上一个与这个重复,则跳过
                                    continue;
                                }
                                if(b.getLegionIndex()==pl.getLegionIndex()){
                                    if(b.ifHaveEnemyUnit(pl.getLegionIndex())){//自己核心领土处于交战状态 report10
                                        if(rs10==null){rs10=game.tempUtil.getTempIntArray();}
                                        rs10.add(b.getRegionId());
                                    }
                                    if(b.ifHaveEnemyHistoryGeneralUnit(pl.getLegionIndex())){//敌人的将领处于我们的领土 report13
                                        if(rs13==null){rs13=game.tempUtil.getTempIntArray();}
                                        rs13.add(b.getRegionId());
                                    }
                                }else{
                                    int fd=getForeignDegree(pl.getLegionIndex(),b.getLegionIndex());
                                    if(fd==-1){//自己的核心领土被敌军占有 report6
                                        if(b.ifHaveLegionUnit(pl.getLegionIndex())){
                                            if(rs6==null){rs6=game.tempUtil.getTempIntArray();}
                                            rs6.add(b.getRegionId());
                                        }
                                    }
                                }
                            }
                        }


            }
            if(pl.majorAreaRegions!=null){//自己的主要领土

                for (int i = 0; i < pl.majorAreaRegions.size; i++) {

                    int region= pl.majorAreaRegions.get(i);
                    BuildData b=getBuildDataByRegion(region);
                    if(b!=null&&b.getLegionIndex()>0&&b.isWar()){
                        if(masterData.getLastReportType()>0&&masterData.lastReportValue==b.getRegionId()){//如果上一个与这个重复,则跳过
                            continue;
                        }
                        if(b.getLegionIndex()==pl.getLegionIndex()){
                            if(b.ifHaveEnemyUnit(pl.getLegionIndex())){//自己主要领土处于交战状态 report9
                                if(rs9==null){rs9=game.tempUtil.getTempIntArray();}
                                rs9.add(b.getRegionId());
                            }
                            if(b.ifHaveEnemyHistoryGeneralUnit(pl.getLegionIndex())){//敌人的将领处于我们的领土 report13
                                if(rs13==null){rs13=game.tempUtil.getTempIntArray();}
                                rs13.add(b.getRegionId());
                            }
                        }else{
                            int fd=getForeignDegree(pl.getLegionIndex(),b.getLegionIndex());
                            if(fd==-1){//自己的主要领土被敌军占有 report5
                                if(b.ifHaveLegionUnit(pl.getLegionIndex())){
                                    if(rs5==null){rs5=game.tempUtil.getTempIntArray();}
                                    rs5.add(b.getRegionId());
                                }
                            }
                        }
                    }
                }
            }
            BuildData c=pl.getCapital();
            if(c!=null&&c.getLegionIndex()>0&&c.isWar()&&c.ifHaveEnemyUnit()){//自己的首都处于交战状态 report8
                if(rs8==null){rs8=game.tempUtil.getTempIntArray();}
                rs8.add(c.getRegionId());
            }
        //遍历周边的邻国信息
          if(pl.borderLegionIndexs!=null&&pl.borderLegionIndexs.size>0){
            for(int i=0;i<pl.borderLegionIndexs.size;i++){
                LegionData l=getLegionDataByLi(pl.borderLegionIndexs.get(i));
                if(l==null||l.varRegionCount==0||l.getInternIndex()==0||l.getLegionIndex()==pl.getLegionIndex()){continue;}
                int fd=getForeignDegree(pl.getLegionIndex(),l.getLegionIndex());
                if(fd==1){//友军
                    if(l.coreAreaRegions!=null){//友军的主要领土
                        for (int r = 0; r < pl.coreAreaRegions.size; r++) {
                            int region=pl.coreAreaRegions.get(r);
                                    BuildData b=getBuildDataByRegion(region);
                                    if(b!=null&&b.getLegionIndex()>0&&b.isWar()){
                                        if(masterData.getLastReportType()>0&&masterData.lastReportValue==b.getRegionId()){//如果上一个与这个重复,则跳过
                                            continue;
                                        }
                                        if(b.getLegionIndex()==l.getLegionIndex()){
                                            if(b.ifHaveEnemyUnit(pl.getLegionIndex())){//友军主要领土处于交战状态 report11
                                                if(rs11==null){rs11=game.tempUtil.getTempIntArray();}
                                                rs11.add(b.getRegionId());
                                            }
                                        }
                                    }
                                }
                            }


                    if(l.majorAreaRegions!=null){//友军的核心领土
                        for (int r = 0; r <l.majorAreaRegions.size; r++) {
                            int region=l.majorAreaRegions.get(r);
                            BuildData b=getBuildDataByRegion(region);
                            if(b!=null&&b.getLegionIndex()>0&&b.isWar()){
                                if(masterData.getLastReportType()>0&&masterData.lastReportValue==b.getRegionId()){//如果上一个与这个重复,则跳过
                                    continue;
                                }
                                if(b.getLegionIndex()==l.getLegionIndex()){
                                    if(b.ifHaveEnemyUnit(pl.getLegionIndex())){//友军核心领土处于交战状态 report12
                                        if(rs12==null){rs12=game.tempUtil.getTempIntArray();}
                                        rs12.add(b.getRegionId());
                                    }
                                }
                            }
                        }
                    }
                }else if(fd==-1){//敌人
                    if(l.coreAreaRegions!=null){//敌人的核心领土
                        for (int r = 0; r < l.coreAreaRegions.size; r++) {
                            int region=l.coreAreaRegions.get(r);
                                    BuildData b=getBuildDataByRegion(region);
                                    if(b!=null&&b.getLegionIndex()>0&&b.isWar()){
                                        if(masterData.getLastReportType()>0&&masterData.lastReportValue==b.getRegionId()){//如果上一个与这个重复,则跳过
                                            continue;
                                        }
                                        if(b.getLegionIndex()==l.getLegionIndex()){
                                            if(b.ifHaveLegionUnit(pl.getLegionIndex())){//敌人核心领土处于交战状态 report1
                                                if(rs1==null){rs1=game.tempUtil.getTempIntArray();}
                                                rs1.add(b.getRegionId());
                                            }
                                        }else if(b.getLegionIndex()==pl.getLegionIndex()&&b.ifHaveLegionUnit(l.getLegionIndex())){//占有敌人的核心领土且其处于交战状态 report4
                                            if(rs4==null){rs4=game.tempUtil.getTempIntArray();}
                                            rs4.add(b.getRegionId());
                                        }
                                    }
                                }

                        }
                    }
                    if(l.majorAreaRegions!=null){//敌人的核心领土

                        for (int r = 0; r < l.majorAreaRegions.size; r++) {
                            int region=l.majorAreaRegions.get(r);
                            BuildData b=getBuildDataByRegion(region);
                            if(b!=null&&b.getLegionIndex()>0&&b.isWar()){
                                if(masterData.getLastReportType()>0&&masterData.lastReportValue==b.getRegionId()){//如果上一个与这个重复,则跳过
                                    continue;
                                }
                                if(b.getLegionIndex()==l.getLegionIndex()){
                                    if(b.ifHaveLegionUnit(pl.getLegionIndex())){//敌人主要领土处于交战状态 report2
                                        if(rs2==null){rs2=game.tempUtil.getTempIntArray();}
                                        rs2.add(b.getRegionId());
                                    }
                                }else if(b.getLegionIndex()==pl.getLegionIndex()&&b.ifHaveLegionUnit(l.getLegionIndex())){//占有敌人的主要领土且其处于交战状态 report3
                                    if(rs3==null){rs3=game.tempUtil.getTempIntArray();}
                                    rs3.add(b.getRegionId());
                                }
                            }
                        }
                    }
                    c=l.getCapital();
                    if(c!=null&&c.isWar()&&c.ifHaveLegionUnit(pl.getLegionIndex())){//敌人的首都处于交战状态 report7
                        if(rs7==null){rs7=game.tempUtil.getTempIntArray();}
                        rs7.add(c.getRegionId());
                    }
                }
            }
        if(rs1!=null&& rs1.size>0){report1=rs1.random();game.tempUtil.disposeTempIntArray(rs1);}
        if(rs2!=null&& rs2.size>0){report2=rs2.random();game.tempUtil.disposeTempIntArray(rs2);}
        if(rs3!=null&& rs3.size>0){report3=rs3.random();game.tempUtil.disposeTempIntArray(rs3);}
        if(rs4!=null&& rs4.size>0){report4=rs4.random();game.tempUtil.disposeTempIntArray(rs4);}
        if(rs5!=null&& rs5.size>0){report5=rs5.random();game.tempUtil.disposeTempIntArray(rs5);}
        if(rs6!=null&& rs6.size>0){report6=rs6.random();game.tempUtil.disposeTempIntArray(rs6);}
        if(rs7!=null&& rs7.size>0){report7=rs7.random();game.tempUtil.disposeTempIntArray(rs7);}
        if(rs8!=null&& rs8.size>0){report8=rs8.random();game.tempUtil.disposeTempIntArray(rs8);}
        if(rs9!=null&& rs9.size>0){report9=rs9.random();game.tempUtil.disposeTempIntArray(rs9);}
        if(rs10!=null&& rs10.size>0){report10=rs10.random();game.tempUtil.disposeTempIntArray(rs10);}
        if(rs11!=null&& rs11.size>0){report11=rs11.random();game.tempUtil.disposeTempIntArray(rs11);}
        if(rs12!=null&& rs12.size>0){report12=rs12.random();game.tempUtil.disposeTempIntArray(rs12);}
        if(rs13!=null&& rs13.size>0){report13=rs13.random();game.tempUtil.disposeTempIntArray(rs13);}

if(rs0==null){rs0=game.tempUtil.getTempIntArray();}else{
    rs0.clear();
}
        if(report0>0&&masterData.lastReportType!=0){rs0.add(0);}
        if(report1!=-1&&masterData.lastReportType!=1){rs0.add(1);}
        if(report2!=-1&&masterData.lastReportType!=2){rs0.add(2);}
        if(report3!=-1&&masterData.lastReportType!=3){rs0.add(3);}
        if(report4!=-1&&masterData.lastReportType!=4){rs0.add(4);}
        if(report5!=-1&&masterData.lastReportType!=5){rs0.add(5);}
        if(report6!=-1&&masterData.lastReportType!=6){rs0.add(6);}
        if(report7!=-1&&masterData.lastReportType!=7){rs0.add(7);}
        if(report8!=-1&&masterData.lastReportType!=8){rs0.add(8);}
        if(report9!=-1&&masterData.lastReportType!=9){rs0.add(9);}
        if(report10!=-1&&masterData.lastReportType!=10){rs0.add(10);}
        if(report11!=-1&&masterData.lastReportType!=11){rs0.add(11);}
        if(report12!=-1&&masterData.lastReportType!=12){rs0.add(12);}
        if(report13!=-1&&masterData.lastReportType!=13){rs0.add(13);}
        int reportType=-1;
        if(rs0.size>0){
            reportType=rs0.random();
            game.tempUtil.disposeTempIntArray(rs0);
        }
        if(reportType!=-1){
            masterData.lastReportType=reportType;
            switch (reportType){
                case 0:return getReport(reportType,report0);
                case 1:return getReport(reportType,report1);
                case 2:return getReport(reportType,report2);
                case 3:return getReport(reportType,report3);
                case 4:return getReport(reportType,report4);
                case 5:return getReport(reportType,report5);
                case 6:return getReport(reportType,report6);
                case 7:return getReport(reportType,report7);
                case 8:return getReport(reportType,report8);
                case 9:return getReport(reportType,report9);
                case 10:return getReport(reportType,report10);
                case 11:return getReport(reportType,report11);
                case 12:return getReport(reportType,report12);
                case 13:return getReport(reportType,report13);
            }
        }
        return null;
    }
    //如果没有则返回null
   /* int report0=pl.getRandomCrisisFaverBorderLi();//邻国好感度危机 :结果为低好感度国家,无则为-1
    int report1=-1;//敌人核心领土处于交战状态  返回核心领土region,无则为-1
    int report2=-1;//敌人主要领土处于交战状态  返回核心领土region,无则为-1
    int report3=-1;//占有敌人的主要领土且其处于交战状态  返回主要领土region,无则为-1 **
    int report4=-1;//占有敌人的核心领土且其处于交战状态  返回核心领土region,无则为-1 **
    int report5=-1;//自己的主要领土被敌军占有  返回主要领土region,无则为-1 **
    int report6=-1;//自己的核心领土被敌军占有  返回核心领土region,无则为-1 **
    int report7=-1;//敌人的首都处于交战状态  返回首都领土region,无则为-1
    int report8=-1;//自己的首都处于交战状态  返回首都region,无则为-1
    int report9=-1;//自己主要领土处于交战状态  返回主要领土region,无则为-1
    int report10=-1;//自己核心领土处于交战状态  返回核心领土region,无则为-1
    int report11=-1;//友军主要领土处于交战状态  返回主要领土region,无则为-1
    int report12=-1;//友军核心领土处于交战状态  返回核心领土region,无则为-1
    int report13=-1;//敌人的将领处于我们的领土  返回领土region,无则为-1
*/
    private String getReport(int type, int value) {

        LegionData pl=getPlayerLegionData();
        XmlReader.Element xmlE=game.gameConfig.getDEF_REPORT().getElementById(type);
        if(xmlE==null){return null;}
        StringBuilder sb=new StringBuilder();
        String plName=pl.legionName;
        String enemyName=null;
        String intercontinentalZone=null;//洲际
        String srRegionName=null;
        String allyName=null;
        String generalname=null;

        if(type==0){
            LegionData tl=getLegionDataByLi(value);
            if(tl!=null){
                enemyName=tl.legionName;
                intercontinentalZone=game.gameMethod.getStrValue("zoneName_"+tl.getCapitalIntercontinentalZone());
                sb.append( game.gameMethod.getStrValue("report_0_"+ComUtil.getRandom(0,xmlE.getInt("reportCounts")-1),pl.legionName,tl.legionName));
            }else{
                return null;
            }
        }else{//其他的
            BuildData b=getBuildDataByRegion(value);
            if(b!=null){
                srRegionName=b.srName;
                intercontinentalZone=game.gameMethod.getStrValue("zoneName_"+b.getAreaZone());
                if(b.getLegionIndex()==pl.getLegionIndex()){//自己的
                    if(type==13){//敌人将领的
                        ArmyData enemyArmyData=b.getGeneralEnemyArmyData(pl.getLegionIndex());
                        if(enemyArmyData==null){
                            return null;
                        }
                        enemyName=enemyArmyData.getLegionData().legionName;
                        generalname=enemyArmyData.getGeneralName();
                    }else{//普通的
                        ArmyData enemyArmyData=b.getEnemyArmyData(pl.getLegionIndex());
                        if(enemyArmyData==null){
                            return null;
                        }
                        enemyName=enemyArmyData.getLegionData().legionName;
                        generalname=enemyArmyData.getGeneralName();
                    }
                }else if(type==11||type==12){//友方的
                    allyName=b.getLegionData().legionName;
                    ArmyData enemyArmyData=b.getEnemyArmyData(pl.getLegionIndex());
                    if(enemyArmyData==null){
                        return null;
                    }
                    enemyName=enemyArmyData.getLegionData().legionName;
                    generalname=enemyArmyData.getGeneralName();
                }else{//敌人的
                    enemyName=b.getLegionData().legionName;
                }
                sb.append( game.gameMethod.getStrValue("report_"+type+"_"+ComUtil.getRandom(0,xmlE.getInt("reportCounts")),pl.legionName,enemyName,intercontinentalZone,srRegionName,allyName,generalname));
            }else{
                return null;
            }
        }
        if(sb.length>0){
            int measureIndex=ComUtil.getRandOneIndex(xmlE.get("measureIds"));
            if(measureIndex!=-1){
                int measureId=ComUtil.getValueByStr(xmlE.get("measureIds"),measureIndex);
                int measureCounts=ComUtil.getValueByStr(xmlE.get("measureCounts"),measureIndex);
                sb.append( game.gameMethod.getStrValue("measure_"+measureId+"_"+ComUtil.getRandom(0,measureCounts),pl.legionName,enemyName,intercontinentalZone,srRegionName,allyName,generalname));
            }
            if(ResDefaultConfig.ifDebug){
                Gdx.app.log("getReport:"+type+" "+value,"plName:"+plName+" enemyName:"+enemyName+" intercontinentalZone:"+intercontinentalZone+" srRegionName:"+srRegionName+" allyName:"+allyName+" generalname:"+generalname+" \n"+sb.toString());
            }
            return sb.toString();
        }
        return null;
    }

    public void allUnitAct(boolean ifPlayerAct){


        if(masterData.getPlayerMode()==2){//军团行动

            roundCountryIndex=-3;
            //遍历所有飞行单位,先行动一遍
            Iterator<IntMap.Entry<ArmyData>> it = armyHDatas.iterator();
            while (it.hasNext()) {
                IntMap.Entry<ArmyData> c = it.next();
                ArmyData a=c.value;
                if(a!=null&&a.getArmyType()==5&&a.getArmyRound()==0){
                    BuildData tb=getBuildDataByRegion(getRegionId(getTargetEnemyByRangeTIA1(a)));
                    if(tb!=null&&a.haveCanAtkEnemy()){
                        legionUnit_Act(a,tb,true);
                    }
                }
            }
            roundCountryIndex=-6;
                    if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("allUnitAct 军团:飞机行动");}
            //遍历所有军团
            for(int bi=0;bi<buildRDatas.size();bi++){
             BuildData build=buildRDatas.getByIndex(bi);
                    /*if(build.getRegionId()==11755){
                        int s=0;
                    }*/
                if(build!=null&&build.canLegionAct()){
                    if(!ifPlayerAct&&build.isPlayer()){
                        continue;
                    }
                    BuildData enemyBuild=build.getRandomAroundEnemyBuildData();
                    LegionData enemyLegion=null;
                    LegionData legion=build.getLegionData();
                    //获得周边有敌人部队的敌对地区的数量
                    int enemyLegionUnitCount=build.getAroundEnemyLegionUnitRegionCount();
                    int allyLegionUnitCount=build.getAroundAllyLegionUnitRegionCount();
                    //查找周边敌对省区
                    if(enemyBuild!=null){
                        if(!legion.varBattleRegions.contains(build.getRegionId())){
                            legion.varBattleRegions.add(build.getRegionId());
                        }
                        enemyLegion=enemyBuild.getLegionData();
                        BuildData safeBuild=build.getRandomAroundSafeBuildData(enemyLegionUnitCount);
                        if(safeBuild!=null){//撤离部队
                            if( !build.ifHaveUnit(1,1)  ||enemyBuild.getForces(3)>build.getForces(3)*3){//如果敌对实力完全大于我方,则全部撤离
                                Array<ArmyData> armys=build.getCanActLegionUnitTAA(1);
                                legionUnit_Act(build,safeBuild,armys,true);
                            }else if(enemyLegionUnitCount>2){
                                //撤离血量或士气低的部队
                                Array<ArmyData> armys=build.getCanActLegionUnitTAA(3);//tempArmyDataArray
                                legionUnit_Act(build,safeBuild,armys,true);
                            }
                        }
                        //剩余部队判断是否满足进攻条件,满足则进攻
                        if( (build.ifHaveUnit(1,1)&&!enemyBuild.ifHaveUnit(1,1))||(build.getForces(3)>enemyBuild.getForces(0)||legion.getUnitArmyNum()>enemyLegion.getUnitArmyNum()||  legion.isTerritoryRegion(enemyBuild.getRegionId())||ComUtil.ifGet((allyLegionUnitCount-enemyLegionUnitCount+1)*30)))  {
                            Array<ArmyData> armys=build.getCanActLegionUnitTAA(2);
                            if(armys.size>0){
                                legionUnit_Act(build,enemyBuild,armys,true);
                            }
                        }
                    }else{
                        //获取有战力的军队
                        Array<ArmyData> armys=build.getCanActLegionUnitTAA(2);
                        if(armys.size>0){
                            int targetRegion=-1;
                            if(legion.varBattleRegions.size!=0){ //遍历最近的目标省区
                                targetRegion= getRecentDistanceRegion(build.getRegionId(),legion.varBattleRegions,-1);    //0 全部 -1非友好(含中立) 1友好 2本人
                                if(targetRegion==-1){
                                    targetRegion= getRecentDistanceRegion(build.getRegionId(),legion.varBattleRegions,0);    //0 全部 -1非友好(含中立) 1友好 2本人
                                }
                            }
                            for(int i=0;i<armys.size;i++){
                                ArmyData a=armys.get(i);
                                if(a.getTargetRegion()==-1){
                                    if(targetRegion!=-1){
                                        a.setTargetRegion(targetRegion);
                                    }else{ //给予随机敌对国家首都作为目标
                                        if(a.isPlayer()){
                                            a.setTargetRegion(getCanAttackTargetRegionTIA1(legion, a.getRegionId(), 3, (a.getArmyType() == 4 || a.getArmyType() == 8),-1));
                                        }else{
                                            a.setTargetRegion(getCanAttackTargetRegionTIA1(legion, a.getRegionId(), 3, (a.getArmyType() == 4 || a.getArmyType() == 8),-2));
                                        }
                                    }
                                }else{
                                    army_legionActToTarget(a);
                                }
                            }
                        }
                    }
                }
            }

                    if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("allUnitAct 军团:单位行动");}
        }else {//ai行动
            //设定ai目标
         int   targetLegionIndex = 0;
            //兵种行动
            //Iterator<IntMap.Entry<ArmyData>> it = armyHDatas.iterator();
                /*Iterator<IntMap.Entry<ArmyData>> itb = armyHDatas.iterator();
                while (itb.hasNext()) {
                    ArmyData a=itb.next().value;*/
            // while (it.hasNext()) {
            // IntMap.Entry<ArmyData> tc = it.next();
            //ArmyData  a=it.next().value;
            roundCountryIndex=-2;
            for  (int i=0;i<hexagonDatas.size;i++) {

                Fb2Map.MapHexagon hm=hexagonDatas.get(i);
                if(hm==null){
                    continue;
                }
                Fb2Smap.ArmyData a=hm.armyData;
                if (a == null || a.getArmyHpNow() <= 0||a.getArmyRound()>0) {
                    continue;
                }
                    if(!ifPlayerAct&&a.isPlayer()){
                        continue;
                    }
                /*if(a.getHexagonIndex()==22485){
                    int s=0;
                }*/

              //  Gdx.app.log("debug unitAct 1",a.getAllAttributes());
                LegionData legion=a.getLegionData();
                BuildData b = a.getBuildData();
                if (b != null&&!b.potionIsSea()&&a.getHexagonIndex()==b.getRegionId()&&(b.getCityStability() < game.resGameConfig.cityStabilityTriggerValue || (b.getCityHpMax() > 0 && b.getHpRate() < game.resGameConfig.aiNotActWhenCityHpRate)) && a.getGeneralIndex() == 0) {
                    continue;
                }

               {
                  int  movement = a.getMovement();
                  boolean ifSeaArea,limitCoast=true;
                    if (a.getArmyType() == 4 || a.getArmyType() == 8) {
                        ifSeaArea = true;
                        limitCoast = false;
                    } else {
                        ifSeaArea = false;
                    }
                    if(a.getHexagonIndex()==13492){
                        int s=0;
                    }
                    if(a.armyActor==null){
                        if(a.getGeneralIndex()!=0&&a.getArmyRound()==0){
                            if(a.getUnitArmyId0()==1105){
                                a.setUnitArmyId0(1104);
                            }
                            if(a.getUnitGroup()<a.getArmyRank()&&legion.ifAiCheatChance()){
                            int rs=    army_resetUnitGroup(a,a.getArmyRank()-a.getUnitGroup());
                                a.addArmyRound(rs);
                                continue;
                            }
                        }
                        if(legion.ifAiCheatChance()){
                            army_enhance(a);
                        }
                        if(b!=null&&b.getBuildRound()==0&&!b.isWar()){
                            if(a.getUnitGroup()<a.getArmyRank()&&a.getUnitArmyId0()==1105){
                                a.setUnitArmyId0(1104);
                            }else if(a.isUnitGroup()){
                                int mergeId=b.getRandomCanRecruitMergeUnitId(a,!legion.ifAiCheatChance());
                                if(mergeId>0){
                                    a.mergeUnitGroup(mergeId);
                                    payCardPrice(legion,b,mergeId,true);
                                    a.addArmyRound(1);
                                    continue;
                                }
                                if(b.getBuildRound()==0&&a.haveCanUpdUnitGrouplv()){
                                    a.randomUpdUnitGroupLv();
                                    a.addArmyRound(1);
                                    continue;
                                }
                                if(b.getBuildRound()==0&&a.haveCanUpdUnitWealv()){
                                    a.randomUpdArmyWealv();
                                    b.addBuildRound(1);
                                }
                            }else{
                                if(a.canUpdGroupLv()){
                                    a.updArmyGroup();
                                    a.addArmyRound(1);
                                    continue;
                                }
                                if(b.getBuildRound()==0&&a.haveCanUpdUnitWealv()){
                                    a.updWeaLv();
                                    b.addBuildRound(1);
                                }
                            }
                        }
                    }
                   if(legion.getLegionIndex()==0&&getRegionId(a.getHexagonIndex())==a.getHexagonIndex()&&!a.potionIsSea()){//叛军不会离开城市
                       continue;
                   }

                 //  Gdx.app.log("debug unitAct 2",a.getAllAttributes());
                   //获取可以行动的位置
                   IntIntMap tempIntIntMap2 = game.tempUtil.getTempIntIntMap();
                   boolean ifHaveAct= a.isElite(getGameElite())&&  getPotionForAiArmyCanActTIIM1(a, a.getHexagonIndex(), 0, true, false, tempIntIntMap2);
                   if(ifHaveAct){//获取最高分数
                       while (ifHaveAct&&(a.ifMove==0||a.ifAttack==0)) {
                           ifHaveAct=   getPotionForAiArmyCanActTIIM1(a, a.getHexagonIndex(), 0, true, false, tempIntIntMap2);
                           if(! ai_bestAct(a, tempIntIntMap2)){
                               break;
                           }
                       }
                   }else if(movement>0){
                       if(ifGridIsPass(a.getTargetRegion())){//向region前进
                           int direct = getDirect(a.getHexagonIndex(), a.getTargetRegion());
                           //如果没有士气,则撤退
                           IntArray tempMoveIntArray = getArmyMovablePostionTIIM1(a.getHexagonIndex(), a.getLegionIndex(), movement, direct, game.tempUtil.getTempIntArray(), ifSeaArea, limitCoast, a.playerCanCommand());
                           int  hexagon = getTargetHexagonForAllyTIA1(tempMoveIntArray, a.getLegionIndex(), ifSeaArea);
                           game.tempUtil.disposeTempIntArray(tempMoveIntArray);
                           if (hexagon != -1 && a.canMove(hexagon)) {//移动
                               army_Move(a, hexagon);
                           } else if (!ifAllyByHexagon(a.getHexagonIndex(), a.getRegionId())) {
                               //  tempValue= getTargetRegionForAllyTIA1(a.getHexagonIndex(), a.getLegionIndex(),ifSeaArea,true);
                               int   tempValue = getRandomRegionForAllyTIA1(a.getLegionIndex(), a.getHexagonIndex(), ifSeaArea, true, -1);
                               a.setTargetRegion(tempValue);
                               if (roundState == 0 && a.armyActor != null && a.isPlayer()) {
                                   a.armyActor.update();
                               }
                               army_ActToTarget(a, true);
                           } else {
                               army_Standby(a);
                           }
                         /*  getPotionForArmyCanActTIIM1(a, a.getHexagonIndex(),0, true,false,tempIntIntMap2,!ifSystemEffective(22));
                           int   hexagon = getRecentHexagon(legion.ifPlayerAlly()?-1:a.getLegionIndex(),a.getHexagonIndex(),a.targetRegion, tempIntIntMap2, a.getIfSeaForMove());
                           if (ifGridIsPass(hexagon)&&a.canMove(hexagon)) {
                               if(a.armyActor!=null){
                                   a.armyActor.moveHexagon(hexagon);
                               }else {
                                   army_Move(a, hexagon);
                               }
                           } else {
                               //休息
                               army_Standby(a);
                           }*/
                           game.tempUtil.disposeTempIntIntMap(tempIntIntMap2);
                           a.addArmyRound(1);
                           continue;
                       }else{//设置targetRegion
                           if (legion.varBattleRegions.size > 0) {
                               int c = legion.varBattleRegions.random();
                               if (ifSeaArea) {
                                   if (ifSeaArea(c)) {
                                       a.setTargetRegion(c);
                                   } else {
                                       if(a.isPlayer()){
                                           a.setTargetRegion(getCanAttackTargetRegionTIA1(legion, a.getRegionId(), 3, ifSeaArea,-1));
                                       }else{
                                           a.setTargetRegion(getCanAttackTargetRegionTIA1(legion, a.getRegionId(), 3, ifSeaArea,-2));
                                       }
                                   }
                               } else {
                                   a.setTargetRegion(c);
                               }
                               if (roundState == 0 && a.armyActor != null && a.isPlayer()) {
                                   a.armyActor.update();
                               }
                           } else {
                               if(a.isPlayer()){
                                   a.setTargetRegion(getCanAttackTargetRegionTIA1(legion, a.getRegionId(), 3, ifSeaArea,-1));
                               }else{
                                   a.setTargetRegion(getCanAttackTargetRegionTIA1(legion, a.getRegionId(), 3, ifSeaArea,-2));
                               }
                           }
                       }
                   }

                  // Gdx.app.log("debug unitAct 3",a.getAllAttributes());
                    //如果目标与所在目标相同,则目标归0
                    if (a.getHexagonIndex() == a.getTargetRegion()) {
                        a.setTargetRegion(-1);
                        if (roundState == 0 && a.armyActor != null && a.isPlayer()) {
                            a.armyActor.update();
                        }
                    }
                }
            }
            roundCountryIndex=-3;
                    if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("allUnitAct 单位行动");}
            Iterator<IntMap.Entry<AirData>> it = airIDatas.iterator();
            IntArray tempIntArray2=game.tempUtil.getTempIntArray();
            while (it.hasNext()) {
                IntMap.Entry<AirData> c = it.next();
                AirData a=c.value;
                if(a==null||a.getAirHpNow()==0||!a.ifOkByAirPolicy(a.getHexagon())||a.getAirRound()!=0||a.getAirGoodsNow()==0){continue;}
                    if(!ifPlayerAct&&a.isPlayer()){
                        continue;
                    }

              //  Gdx.app.log("debug unitAct 4",a.getAllAttribute());
                LegionData legion=a.getLegionData();
                if(legion==null){continue;}
                if(a.armyData==null){
                    //首先查看有无可搭载单位
                    IntArray tempIntArray=game.tempUtil.getTempIntArray();
                    a.getCanCarryUnit(tempIntArray);
                    ArmyData armyData=getArmyDataByHexagon(tempIntArray.random());
                    game.tempUtil.disposeTempIntArray(tempIntArray);
                    if(armyData!=null&&armyData.getLegionIndex()==a.getLegionIndex()&&armyData.ifHaveFeature(2)){
                        if(armyData.loadAir(a)){
                            a.addAirRound(1);
                            continue;
                        }
                    }
                }
                //无搭载单位
                if(a.targetRegion==-1){
                    if(!legion.isPlayer()&&a.inCity()&&ComUtil.ifGet(a.getCrit())&&a.haveCanUpdAirAbilityLv()){
                        a.randomUpdAirAbility();
                        a.addAirRound(1);
                        continue;
                    }
                    IntArray  tempIntArray=game.tempUtil.getTempIntArray();
                    a.getCanActRegions(tempIntArray,1);
                    if(tempIntArray.size>0){
                        a.setTargetRegion(tempIntArray.random());
                    }else {
                        a.setTargetRegion(-1);
                    }
                    game.tempUtil.disposeTempIntArray(tempIntArray);
                    if(a.targetRegion!=-1) {
                        //对目标进行行动
                        for(int i=0,iMax=ComUtil.getRandom(1,a.getAirGoodsNow());i<iMax;i++){
                            if( air_Attack(a,a.getTargetRegion())){
                                //对行动后的目标进行检查,如果目标消失,则重定义目标
                                int li=getLegionIndexByHexagon(a.getTargetRegion());
                                if(li==0||ifAllyByLi(a.getLegionIndex(),li)){
                                    tempIntArray=game.tempUtil.getTempIntArray();
                                    if(tempIntArray.size>0){
                                        a.setTargetRegion(tempIntArray.random());
                                    }else {
                                        a.setTargetRegion(-1);
                                    }
                                    game.tempUtil.disposeTempIntArray(tempIntArray);
                                }
                            }
                        }
                        if(a.getAirGoodsNow()==0){
                            a.addAirRound(1);
                        }
                    }

                  //  Gdx.app.log("debug unitAct 5",a.getAllAttribute());
                    //如果无目标继续通用行动
                    if(a.getAirRound()==0&&a.getAirGoodsNow()>0){
                        //1.检查所在区域有无敌军
                        for(int i=0,iMax=ComUtil.getRandom(1,a.getAirGoodsNow());i<iMax;i++) {
                            if (haveEnemyInRegion(a.getRegionId())) {
                                if (!air_Attack(a, a.getRegionId())) {
                                    break;
                                }
                            }
                        }
                        if(a.getAirGoodsNow()==0){
                            a.addAirRound(1);
                        }
                        //2.检查有无交战区域,有则飞过去
                        if(a.armyData==null&&ComUtil.ifGet(game.resGameConfig.airTeleportChance)&&legion.varBattleRegions.size>0&&!legion.isPlayerCommand()){// 启用超时空移动,移动到有region适合进攻的build

                            int region=getBorderRegionTIA2(legion.varBattleRegions.random(),1,tempIntArray2).random();

                            BuildData buildData=getBuildDataByRegion(region);
                            if(buildData!=null&&buildData.getBuildType()!=2&&buildData.getAirCount()<4){
                                air_Move(a,region);
                                a.setTargetRegion(-1);
                                a.addAirRound(1);
                            }
                        }
                    }

                 //   Gdx.app.log("debug unitAct 6",a.getAllAttribute());
                    if(a.getAirRound()==0){
                        air_Standby(a);
                        a.addAirRound(1);
                    }
                }else {
                    air_Standby(a);
                    a.addAirRound(1);
                }
            }
            game.tempUtil.disposeTempIntArray(tempIntArray2);

                    if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("allUnitAct 飞机行动");}
            roundCountryIndex=-4;
            Iterator<IntMap.Entry<NulcleData>> itN = nulcleIDatas.iterator();
             tempIntArray2 = game.tempUtil.getTempIntArray();
            while (itN.hasNext()) {
                NulcleData n = itN.next().value;
                //核弹检测 region!=-1 且round=0
                if (n != null  && n.getRegionId() != -1 && n.getNucleRound() == 0) {

                    if(!ifPlayerAct&&n.isPlayer()){
                        continue;
                    }

                    //优先配置飞机
                    AirData a = n.getBuildData().getCanLoadNulAir(n);

                 //   Gdx.app.log("debug unitAct 7",a.getAllAttribute());
                    if (a != null) {
                        if (a.loadNul(n)) {
                            n.remove(1);
                            n.addNucleRound(1);
                        }
                        ;
                    } else {
                        // 获取周围信息,能装配则优先转配
                        IntIntMap tempIntIntMap = game.tempUtil.getTempIntIntMap();
                        getNulCanActPotionAndSetColorTIIM1(n, tempIntIntMap);
                        ArmyData army = getCanLoadNulArmyDataByNulHexagons(tempIntIntMap);
                        if (army != null && army.getLegionIndex() == n.getLegionIndex()) {//单位装载信息
                            if (army.loadNul(n)) {
                                //n.addNucleRound(1);
                            }
                            ;
                            n.remove(1);
                        } else {
                            LegionData legion=n.getLegionData();
                            //不能转配则查看周围可进攻位置,有则进攻
                           int tempValue = getCanAtkHexagonByNulHexagons(tempIntIntMap);
                            if (tempValue != -1) {
                                nul_Attack(n, tempValue);
                            } else if (ComUtil.ifGet(game.resGameConfig.nuclearTeleportChance) && legion.varBattleRegions.size > 0 && !legion.isPlayerCommand()) {// 启用超时空移动,移动到有region适合进攻的build
                                int region = getBorderRegionTIA2(legion.varBattleRegions.random(), 1, tempIntArray2).random();
                                BuildData buildData = getBuildDataByRegion(region);
                                if (buildData != null && buildData.getBuildType() != 2 && buildData.getNuclearCount() < 4) {
                                    if (nul_Move(n, region)) {
                                        n.addNucleRound(1);
                                    }
                                    ;
                                }
                            }
                        }
                        game.tempUtil.disposeTempIntIntMap(tempIntIntMap);
                    }
                }
            }
            game.tempUtil.disposeTempIntArray(tempIntArray2);
                    if(ResDefaultConfig.ifDebug&&logTime!=null){logTime.log("allUnitAct 核弹行动");}
        }
    }


    // unityType 0全部  1仅将军   2 仅单位
    //ifFog 是否仅迁移时考虑战争迷雾
    //该移动只会移动陆地
    /**
     * @result armyPotionType {@link #getLegionArmyData}
     * @result hexagonType {@link #getLegionLandCanMoveHexagons}
     */
    public void ai_teleportLegionUnitForLandSRRegion(LegionData l,int armyPotionType,  int hexagonType, int unitType, boolean ifFog){
        if(l==null){
            return;
        }
        IntArray hexagons=game.tempUtil.getTempIntArray();
        hexagons=getLegionLandCanMoveHexagons(l,hexagonType,ifFog,hexagons);
        if(hexagons.size>0){
            Array<ArmyData> as=game.tempUtil.getTempArray();
            as=getLegionArmyData(l,armyPotionType,unitType,ifFog,as);
            if(as.size>0){
                for(int i=0;i<as.size;i++){
                    ArmyData a=as.get(i);
                    if(i>=hexagons.size){
                        break;
                    }
                    a.armyMove(hexagons.get(i));
                }
            }
            game.tempUtil.disposeTempArray(as);
        }
        game.tempUtil.disposeTempIntArray(hexagons);
    }
    //armyPotionType 获取空地的类型 0仅领土 1核心领土(包括首都) 2主要领土 3仅首都 4除领土,首都以外的陆地区域 5除核心领土以外的区域
    //unityType  0全部  1仅将军   2 仅单位
    public Array getLegionArmyData(LegionData l,int armyPotionType,int unityType,boolean ifFog, Array<ArmyData> as){
        if(as==null){
            as=game.tempUtil.getTempArray();
        }else{
            as.clear();
        }
        switch (armyPotionType){
            case 0://仅领土 包括核心与主要与首都
                if(l.coreAreaRegions!=null){//敌人的核心领土
                    for (int r = 0; r < l.coreAreaRegions.size; r++) {
                        int region=l.coreAreaRegions.get(r);
                        if(getLegionIndexByRegion(region)!=l.getLegionIndex()||ifSea(region)){
                            continue;
                        }
                        IntArray hm=regionHexagonMap.get(region);
                        if(hm==null){
                            continue;
                        }
                        for(int i = hm.size-1; i>=0; i--){
                            int id=hm.get(i);
                            if(ifFog&&getFog(id)==1){continue;}
                            ArmyData a=getArmyDataByHexagon(id);
                            if(a!=null&&!as.contains(a,false)&&a.getLegionIndex()==l.getLegionIndex()){
                                if(unityType==1&&a.getGeneralIndex()==0){continue; }
                                if(unityType==2&&a.getGeneralIndex()>0){continue; }
                                as.add(a);
                            }
                        }
                    }
                }
                if(l.majorAreaRegions!=null){//敌人的核心领土
                    for (int r = 0; r < l.majorAreaRegions.size; r++) {
                        int region=l.majorAreaRegions.get(r);
                        if(getLegionIndexByRegion(region)!=l.getLegionIndex()||ifSea(region)){
                            continue;
                        }
                        IntArray hm=regionHexagonMap.get(region);
                        if(hm==null){
                            continue;
                        }
                        for(int i = hm.size-1; i>=0; i--){
                            int id=hm.get(i);
                            if(ifFog&&getFog(id)==1){continue;}
                            ArmyData a=getArmyDataByHexagon(id);
                            if(a!=null&&!as.contains(a,false)&&a.getLegionIndex()==l.getLegionIndex()){
                                if(unityType==1&&a.getGeneralIndex()==0){continue; }
                                if(unityType==2&&a.getGeneralIndex()>0){continue; }
                                as.add(a);
                            }
                        }
                    }
                }
                BuildData b=l.getCapital();//首都
                if(b!=null&&!l.isCoreAreaRegion(b.getRegionId())&&!l.isMajorAreaRegion(b.getRegionId())){
                    IntArray hm=regionHexagonMap.get(b.getRegionId());
                    if(hm!=null){
                        for(int i = hm.size-1; i>=0; i--){
                            int id=hm.get(i);
                            if(ifFog&&getFog(id)==1){continue;}
                            ArmyData a=getArmyDataByHexagon(id);
                            if(a!=null&&!as.contains(a,false)&&a.getLegionIndex()==l.getLegionIndex()){
                                if(unityType==1&&a.getGeneralIndex()==0){continue; }
                                if(unityType==2&&a.getGeneralIndex()>0){continue; }
                                as.add(a);
                            }
                        }
                    }
                }
                break;
            case 1://核心领土与首都
                if(l.coreAreaRegions!=null){//敌人的核心领土
                    for (int r = 0; r < l.coreAreaRegions.size; r++) {
                        int region=l.coreAreaRegions.get(r);
                        if(getLegionIndexByRegion(region)!=l.getLegionIndex()||ifSea(region)){
                            continue;
                        }
                        IntArray hm=regionHexagonMap.get(region);
                        if(hm==null){
                            continue;
                        }
                        for(int i = hm.size-1; i>=0; i--){
                            int id=hm.get(i);
                            if(ifFog&&getFog(id)==1){continue;}
                            ArmyData a=getArmyDataByHexagon(id);
                            if(a!=null&&!as.contains(a,false)&&a.getLegionIndex()==l.getLegionIndex()){
                                if(unityType==1&&a.getGeneralIndex()==0){continue; }
                                if(unityType==2&&a.getGeneralIndex()>0){continue; }
                                as.add(a);
                            }
                        }
                    }
                }
                b=l.getCapital();//首都
                if(b!=null&&!l.isCoreAreaRegion(b.getRegionId())){
                    IntArray hm=regionHexagonMap.get(b.getRegionId());
                    if(hm!=null){
                        for(int i = hm.size-1; i>=0; i--){
                            int id=hm.get(i);
                            if(ifFog&&getFog(id)==1){continue;}
                            ArmyData a=getArmyDataByHexagon(id);
                            if(a!=null&&!as.contains(a,false)&&a.getLegionIndex()==l.getLegionIndex()){
                                if(unityType==1&&a.getGeneralIndex()==0){continue; }
                                if(unityType==2&&a.getGeneralIndex()>0){continue; }
                                as.add(a);
                            }
                        }
                    }
                }
                break;
            case 2://主要领土
                if(l.majorAreaRegions!=null){//敌人的核心领土
                    for (int r = 0; r < l.majorAreaRegions.size; r++) {
                        int region=l.majorAreaRegions.get(r);
                        if(getLegionIndexByRegion(region)!=l.getLegionIndex()||ifSea(region)){
                            continue;
                        }
                        IntArray hm=regionHexagonMap.get(region);
                        if(hm==null){
                            continue;
                        }
                        for(int i = hm.size-1; i>=0; i--){
                            int id=hm.get(i);
                            if(ifFog&&getFog(id)==1){continue;}
                            ArmyData a=getArmyDataByHexagon(id);
                            if(a!=null&&!as.contains(a,false)&&a.getLegionIndex()==l.getLegionIndex()){
                                if(unityType==1&&a.getGeneralIndex()==0){continue; }
                                if(unityType==2&&a.getGeneralIndex()>0){continue; }
                                as.add(a);
                            }
                        }
                    }
                }
                break;
            case 3://仅首都
                b=l.getCapital();//首都
                if(b!=null){
                    IntArray hm=regionHexagonMap.get(b.getRegionId());
                    if(hm!=null){
                        for(int i = hm.size-1; i>=0; i--){
                            int id=hm.get(i);
                            if(ifFog&&getFog(id)==1){continue;}
                            ArmyData a=getArmyDataByHexagon(id);
                            if(a!=null&&!as.contains(a,false)&&a.getLegionIndex()==l.getLegionIndex()){
                                if(unityType==1&&a.getGeneralIndex()==0){continue; }
                                if(unityType==2&&a.getGeneralIndex()>0){continue; }
                                as.add(a);
                            }
                        }
                    }
                }
                break;
            case 4://除领土以外的区域
                for(int bi=0;bi<buildRDatas.size();bi++) {
                    b=buildRDatas.getByIndex(bi);
                    if(b.getLegionIndex()==l.getLegionIndex()&&!b.potionIsSea()){
                        if(l.isCoreAreaRegion(b.getRegionId())||l.isMajorAreaRegion(b.getRegionId())||l.getCapitalId()==b.getRegionId()){
                            continue;
                        }
                        IntArray hm=regionHexagonMap.get(b.getRegionId());
                        if(hm!=null){
                            for(int i = hm.size-1; i>=0; i--){
                                int id=hm.get(i);
                                if(ifFog&&getFog(id)==1){continue;}
                                ArmyData a=getArmyDataByHexagon(id);
                                if(a!=null&&!as.contains(a,false)&&a.getLegionIndex()==l.getLegionIndex()){
                                    if(unityType==1&&a.getGeneralIndex()==0){continue; }
                                    if(unityType==2&&a.getGeneralIndex()>0){continue; }
                                    as.add(a);
                                }
                            }
                        }
                    }
                }
                break;
            case 5://不处于核心领土
                for(int bi=0;bi<buildRDatas.size();bi++) {
                    b=buildRDatas.getByIndex(bi);
                    if(b.getLegionIndex()==l.getLegionIndex()&&!b.potionIsSea()){
                        if(l.isCoreAreaRegion(b.getRegionId())||l.getCapitalId()==b.getRegionId()){
                            continue;
                        }
                        IntArray hm=regionHexagonMap.get(b.getRegionId());
                        if(hm!=null){
                            for(int i = hm.size-1; i>=0; i--){
                                int id=hm.get(i);
                                if(ifFog&&getFog(id)==1){continue;}
                                ArmyData a=getArmyDataByHexagon(id);
                                if(a!=null&&!as.contains(a,false)&&a.getLegionIndex()==l.getLegionIndex()){
                                    if(unityType==1&&a.getGeneralIndex()==0){continue; }
                                    if(unityType==2&&a.getGeneralIndex()>0){continue; }
                                    as.add(a);
                                }
                            }
                        }
                    }
                }
                break;
        }
        as.shuffle();
        return as;
    }

    //hexagonType 获取空地的类型 0仅领土 1核心领土(包括首都) 2主要领土 3仅首都 4除领土,首都以外的陆地区域 5除核心领土以外的区域
    //ifFog true 只在迷雾状态中移动
    //获得军团的空地
    public IntArray getLegionLandCanMoveHexagons(LegionData l,int hexagonType,boolean ifFog, IntArray hexagons){
            if(hexagons==null){
                hexagons=game.tempUtil.getTempIntArray();
            }else{
                hexagons.clear();
            }
        switch (hexagonType){
            case 0://仅领土 包括核心与主要与首都
                if(l.coreAreaRegions!=null){//敌人的核心领土
                    for (int r = 0; r < l.coreAreaRegions.size; r++) {
                        int region=l.coreAreaRegions.get(r);
                        if(getLegionIndexByRegion(region)!=l.getLegionIndex()||ifSea(region)){
                            continue;
                        }
                        IntArray hm=regionHexagonMap.get(region);
                        if(hm==null){
                            continue;
                        }
                        for(int i = hm.size-1; i>=0; i--){
                            int id=hm.get(i);
                            if(ifFog&&getFog(id)==1){continue;}
                            if(ifCanMove(id)&&!hexagons.contains(id)){
                                hexagons.add(id);
                            }
                        }
                    }
                }
                if(l.majorAreaRegions!=null){//敌人的核心领土
                    for (int r = 0; r < l.majorAreaRegions.size; r++) {
                        int region=l.majorAreaRegions.get(r);
                        if(getLegionIndexByRegion(region)!=l.getLegionIndex()||ifSea(region)){
                            continue;
                        }
                        IntArray hm=regionHexagonMap.get(region);
                        if(hm==null){
                            continue;
                        }
                        for(int i = hm.size-1; i>=0; i--){
                            int id=hm.get(i);
                            if(ifFog&&getFog(id)==1){continue;}
                            if(ifCanMove(id)&&!hexagons.contains(id)){
                                hexagons.add(id);
                            }
                        }
                    }
                }
                BuildData b=l.getCapital();//首都
                if(b!=null&&!l.isCoreAreaRegion(b.getRegionId())&&!l.isMajorAreaRegion(b.getRegionId())){
                    IntArray hm=regionHexagonMap.get(b.getRegionId());
                    if(hm!=null){
                        for(int i = hm.size-1; i>=0; i--){
                            int id=hm.get(i);
                            if(ifFog&&getFog(id)==1){continue;}
                            if(ifCanMove(id)&&!hexagons.contains(id)){
                                hexagons.add(id);
                            }
                        }
                    }
                }
                break;
            case 1://核心领土与首都
                if(l.coreAreaRegions!=null){//敌人的核心领土
                    for (int r = 0; r < l.coreAreaRegions.size; r++) {
                        int region=l.coreAreaRegions.get(r);
                        if(getLegionIndexByRegion(region)!=l.getLegionIndex()||ifSea(region)){
                            continue;
                        }
                        IntArray hm=regionHexagonMap.get(region);
                        if(hm==null){
                            continue;
                        }
                        for(int i = hm.size-1; i>=0; i--){
                            int id=hm.get(i);
                            if(ifFog&&getFog(id)==1){continue;}
                            if(ifCanMove(id)&&!hexagons.contains(id)){
                                hexagons.add(id);
                            }
                        }
                    }
                }
                 b=l.getCapital();//首都
                if(b!=null&&!l.isCoreAreaRegion(b.getRegionId())){
                    IntArray hm=regionHexagonMap.get(b.getRegionId());
                    if(hm!=null){
                        for(int i = hm.size-1; i>=0; i--){
                            int id=hm.get(i);
                            if(ifFog&&getFog(id)==1){continue;}
                            if(ifCanMove(id)&&!hexagons.contains(id)){
                                hexagons.add(id);
                            }
                        }
                    }
                }
                break;
            case 2://主要领土
                if(l.majorAreaRegions!=null){//敌人的核心领土
                    for (int r = 0; r < l.majorAreaRegions.size; r++) {
                        int region=l.majorAreaRegions.get(r);
                        if(getLegionIndexByRegion(region)!=l.getLegionIndex()||ifSea(region)){
                            continue;
                        }
                        IntArray hm=regionHexagonMap.get(region);
                        if(hm==null){
                            continue;
                        }
                        for(int i = hm.size-1; i>=0; i--){
                            int id=hm.get(i);
                            if(ifFog&&getFog(id)==1){continue;}
                            if(ifCanMove(id)&&!hexagons.contains(id)){
                                hexagons.add(id);
                            }
                        }
                    }
                }
                break;
            case 3://仅首都
                b=l.getCapital();//首都
                if(b!=null){
                    IntArray hm=regionHexagonMap.get(b.getRegionId());
                    if(hm!=null){
                        for(int i = hm.size-1; i>=0; i--){
                            int id=hm.get(i);
                            if(ifFog&&getFog(id)==1){continue;}
                            if(ifCanMove(id)&&!hexagons.contains(id)){
                                hexagons.add(id);
                            }
                        }
                    }
                }
                break;
            case 4://除领土以外的区域
                for(int bi=0;bi<buildRDatas.size();bi++) {
                     b=buildRDatas.getByIndex(bi);
                    if(b.getLegionIndex()==l.getLegionIndex()&&!b.potionIsSea()){
                        if(l.isCoreAreaRegion(b.getRegionId())||l.isMajorAreaRegion(b.getRegionId())||l.getCapitalId()==b.getRegionId()){
                            continue;
                        }
                        IntArray hm=regionHexagonMap.get(b.getRegionId());
                        if(hm!=null){
                            for(int i = hm.size-1; i>=0; i--){
                                int id=hm.get(i);
                                if(ifFog&&getFog(id)==1){continue;}
                                if(ifCanMove(id)&&!hexagons.contains(id)){
                                    hexagons.add(id);
                                }
                            }
                        }
                    }
                }
                break;
            case 5://不处于核心领土
                for(int bi=0;bi<buildRDatas.size();bi++) {
                    b=buildRDatas.getByIndex(bi);
                    if(b.getLegionIndex()==l.getLegionIndex()&&!b.potionIsSea()){
                        if(l.isCoreAreaRegion(b.getRegionId())||l.getCapitalId()==b.getRegionId()){
                            continue;
                        }
                        IntArray hm=regionHexagonMap.get(b.getRegionId());
                        if(hm!=null){
                            for(int i = hm.size-1; i>=0; i--){
                                int id=hm.get(i);
                                if(ifFog&&getFog(id)==1){continue;}
                                if(ifCanMove(id)&&!hexagons.contains(id)){
                                    hexagons.add(id);
                                }
                            }
                        }
                    }
                }
                break;
        }
            hexagons.shuffle();
        return hexagons;
    }

    //世界大战事件
    private void legion_worldWarForPlayer(){
        int enemyNum=0;
        int playerNum=0;
        int neutralNum=0;
        int enemyLi=0;
        int enemyLiNum=0;
        IntArray enemyLis=game.tempUtil.getTempIntArray();



        //寻找与玩家交恶的最强国家
        for(int i=1;i<legionDatas.size;i++){//跳过中立
            LegionData l=legionDatas.get(i);
            if(l.getSuzerainLi()!=0||l.varRegionCount==0){
                continue;
            }
            int fd=getForeignDegree(l.getLegionIndex(),masterData.getPlayerLegionIndex());
            if(fd==1){
                playerNum+=l.getAllArmySumNum();
            }else if(fd==-1){
                enemyNum+=l.getAllArmySumNum();
                if(l.getAllArmySumNum()>enemyLiNum){
                    enemyLiNum=l.getAllArmySumNum();
                    enemyLi=l.getLegionIndex();
                }
                enemyLis.add(i);
            }else{
                neutralNum+=l.getAllArmySumNum();
            }
        }



        if(enemyNum>0&&enemyNum/2<playerNum){//如果敌对国家的势力小于玩家
            //拉拢好感度与玩家较低的中立国家
            for(int i=1;i<legionDatas.size;i++) {//跳过中立
                LegionData l = legionDatas.get(i);
                int fd = getForeignDegree(l.getLegionIndex(), masterData.getPlayerLegionIndex());
                if(enemyLiNum<l.getAllArmySumNum()||l.getSuzerainLi()!=0||l.varRegionCount==0){
                    continue;
                }
                if (fd == 0) {
                    if(ifSystemEffective(4)){
                        ForeignData f=getForeignData(l.getLegionIndex());
                        if(ComUtil.ifGet(100-f.getRealFavor())){
                            enemyNum+=l.getAllArmySumNum();
                            if(l.getAllArmySumNum()>enemyLiNum){
                                enemyLiNum=l.getAllArmySumNum();
                                enemyLi=l.getLegionIndex();
                            }
                            enemyLis.add(i);
                        }
                    }else{
                        enemyLis.add(i);
                    }
                }
            }
        }
            LegionData enemyL=getLegionDataByLi(enemyLi);
        if(enemyL!=null){
            enemyL.setInternIndex(enemyL.getLegionIndex());
        }
        //设置所有的敌对国家间为盟友
            legion_setLegionsAlly(enemyLi,masterData.getPlayerLegionIndex(),10,false,enemyLis);


        if(enemyNum/2<playerNum){  //所有的与玩家作战的且与玩家相邻的敌对国家获得一次强化
            for(int i=0;i<enemyLis.size;i++) {
                LegionData l=getLegionDataByLi(enemyLis.get(i));
                if(l.borderLegionIndexs.contains(masterData.getPlayerLegionIndex())){
                    legion_intensifyUnity(l,playerNum/(enemyNum/2));
                }
            }
        }
        addPromptData(game.gameMethod.getPromptStrT(92, 0),
                game.gameMethod.getPromptStr(92, 1,enemyL.legionName,getPlayerLegionData().legionName),
                game.gameMethod.getPromptStr(92, 2),
                enemyL.getLegionIndex(),masterData.getPlayerLegionIndex(),false);
        game.tempUtil.disposeTempIntArray(enemyLis);
    }

    //设置其之间为盟友,有外交则盟友回合为  baseRound+实力绝对值差距
    //ifChangeArea 为true则交换各领土
    private boolean legion_setLegionsAlly(int masterLi,int enemyLi,int baseRound,boolean ifChangeArea, IntArray legions) {
        LegionData ml=getLegionDataByLi(masterLi);
        LegionData el=getLegionDataByLi(enemyLi);
        if(ml==null){
            return false;
        }
        if(ifSystemEffective(4)){//如果有外交
            for(int i=0;i<legions.size;i++) {
                LegionData l1=getLegionDataByLi(legions.get(i));
                if(l1==null||l1.getSuzerainLi()!=0||l1.varRegionCount==0){
                    continue;
                }
                int round=baseRound+Math.abs(ml.varRegionCount-l1.varRegionCount);
                for(int j=0;j<legions.size;j++) {
                    if(i==j){continue;}
                    LegionData l2=getLegionDataByLi(legions.get(j));
                    if(l2==null||l2.getSuzerainLi()!=0||l2.varRegionCount==0){
                        continue;
                    }
                    ForeignData f=getForeignData(l1.getLegionIndex(),l2.getLegionIndex());
                    if(f!=null){
                        f.setForeignType(2);
                        f.setForeignValue(10+round);
                        f.setFavorValue(70);
                    }
                }
                if(el!=null){//设置是敌对
                    ForeignData f=getForeignData(l1.getLegionIndex(),el.getLegionIndex());
                    if(f!=null){
                        if(l1.getLegionIndex()==masterLi){
                            f.setForeignType(-1);
                            f.setForeignValue(0);
                            f.setFavorValue(f.getFavorValue()/2);
                        }else if(f.getForeignType()<1){
                            f.setFavorValue(f.getFavorValue()/2);
                        }
                    }
                }
            }
        }else{
            for(int i=0;i<legions.size;i++) {
                LegionData l=getLegionDataByLi(legions.get(i));
                if(l==null||l.getSuzerainLi()!=0||l.varRegionCount==0){
                    continue;
                }
                if(l.isFreeSovereignCountry()){
                    l.setInternIndex(ml.getInternIndex());
                }
            }
        }

        if(ifChangeArea){
            for(int i=0;i<legions.size;i++) {
                LegionData l=getLegionDataByLi(legions.get(i));
                if(l!=null){
                    if(l.coreAreaRegions.size>0){
                        for (int i1 = 0; i1 < l.coreAreaRegions.size; i1++) {
                         int   cr = l.coreAreaRegions.get(i1);
                            BuildData b=getBuildDataByRegion(cr);
                            if(b!=null&&b.getLegionIndex()!=l.getLegionIndex()){
                                if(legions.contains(b.getLegionIndex())){
                                    LegionData bl=b.getLegionData();
                                    if(bl!=null&&!bl.isTerritoryRegion(b.getRegionId())){
                                        setRegionAllLegionIndex(b.getRegionId(),l.getLegionIndex(),false);
                                    }
                                }
                            }
                        }
                    }
                    if(l.majorAreaRegions.size>0){
                        for (int i1 = 0; i1 < l.majorAreaRegions.size; i1++) {
                            int   cr = l.majorAreaRegions.get(i1);
                            BuildData b=getBuildDataByRegion(cr);
                            if(b!=null&&b.getLegionIndex()!=l.getLegionIndex()){
                                if(legions.contains(b.getLegionIndex())){
                                    LegionData bl=b.getLegionData();
                                    if(bl!=null&&!bl.isTerritoryRegion(b.getRegionId())){
                                        setRegionAllLegionIndex(b.getRegionId(),l.getLegionIndex(),false);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    }



    //对接color
    private void resetCountryColor() {
        for(int i=0;i<legionDatas.size;i++) {
            LegionData l=legionDatas.get(i);
            if(l!=null){
                XmlReader.Element xml=game.gameConfig.getDEF_COUNTRY().getElementById(l.getCountryId());
                if(xml!=null){
                    l.setRed(xml.getInt("r",l.getRed()));
                    l.setGreen(xml.getInt("g",l.getGreen()));
                    l.setBlue(xml.getInt("b",l.getBlue()));
                    l.setAlpha(xml.getInt("a",l.getAlpha()));
                }
            }
        }
    }
}
